ignoredCodes:=[1002,1008,1021,1022,1023,
               3018,3019,3100,3104,
               4056,4035,4055,
               5036,5044,
               9015,9022];
ignoredPatterns:=['3rd_party',
                  '/gui/.*\(5024\)',
                  '/core/.*\(5024\).*"(location|context|tokenLocation)"',
                  '/core/mnh_litvar.*\(5024\).*"(adapters|lengthLimit|minusLocation|threadContext|relation|other)"',
                  '/core/mnh_func_defines\.inc.*\(5024\)',
                  '/core/mnh_builtinGenerators\.pas.*\(5024\).*"[a|b]"',
                  '/core/mnh_builtinGenerators\.pas.*\(5024\).*"lengthLimit"'
                  ];

private currentViolations->'build.log'.fileLines
  .pEach(line,line.matches('\('&ignoredCodes&'\)').agg(OR) ? void : line)
  .pEach(line,line.replace(['/media/',DEV_ROOT.extractFileDirectory.replace('/','\')],'').replace('\','/'))
  .pEach(line,line.matches(ignoredPatterns).agg(OR) ? void : line)
  .pMap({[$line.matchComposite('\(....\)').trailing[0],$line]})
  .filter({$line.size=2})
  .elementFrequency
  .pMap({[$f[1],$f[0,0]]|($f[0,1].split($f[0,0]).trim)});

private datastore storedViolations:=[];

//*Check for new violations
main->currentViolations.minus(storedViolations)
  .sort(2)
  .sort(3)
  .map({"%{$0}sx\t%{$2}s\t%{$1}s\t%{$3}s".format@$x})
  .join("\n")
  .print;

//*Store current violations to be ignored in the next run
main('store')->storedViolations:=currentViolations;

private existing(f:String)->fileExists(f) ? f : void;

DEV_ROOT:=myPath.extractFileDirectory.extractFileDirectory.replace('/','\');

USE make_config;
//*Check file usage
main('files')->begin
  local newList:='build.log'.fileLines
    .{$L[$L.matches('\(3104\)')]}
    .unique
    .replace('(3104) Compiling','')
    .replace('/media/dev/mnh5','')
    .replace('/media/dev/','../')
    .replace(DEV_ROOT&'\mnh5\','')
    .replace(DEV_ROOT&'\','..\')
    .replace('\','/')
    .trim
    .unique
    .each(file,existing(file) orElse
               existing('gui/'&file) orElse
               existing('consoles/'&file))
    .union(allFiles('','*.inc').minus(['core/code_hash.inc','core/build_number.inc']))
    .sort;

  newList.escape
  .join(",\n\v")
  .{print("hashFiles:=[\v",$s,'];')};

  newList==hashFiles
  ? print('List is up to date')
  : print('To be added  : ',newList.minus(hashFiles).toList,
        "\nTo be removed: ",hashFiles.minus(newList).toList);
end;
