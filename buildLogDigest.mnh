ignoredCodes:=[1002,1008,1021,1022,1023,3018,3019,3100,3104,9015,9022,4055,4056,5044];
ignoredPatterns:=['dev/3rd_party',
                  '/igSrc/ig_.*\(5024\).*"(ix|iy|c)"',
                  '/gui/.*\(5024\)',
                  '/core/.*\(5024\).*"(location|context)"',
                  '/core/mnh_func_defines\.inc.*\(5024\).*"tokenLocation"',
                  '/core/mnh_litvar.*\(5024\).*"(adapters|lengthLimit|minusLocation|threadContext|relation|other)"',
                  '/core/mnh_tokens\.pas.*\(5024\).*"adapters"',
                  '/core/mnh_evaluation\.pas.*\(5024\).*"context_"',
                  '/core/mnh_tokenArray\.pas.*\(5059\)',
                  '/core/listProcessing\.pas.*\(5036\).*"lastToAggregate"',
                  '/core/mnh_subrules\.pas.*\(5024\).*"(intrinsicRuleId|lengthLimit|threadContext)"'];

main->'build.log'.fileLines
.pEach(line,line.matches('\('&ignoredCodes&'\)').agg(OR) ? void : line)
.pEach(line,line.replace(['/media/','D:\'],'').replace('\','/'))
.pEach(line,line.matches(ignoredPatterns).agg(OR) ? void : line)
.pMap({[$line.matchComposite('\(....\)').trailing[0],$line]})
.filter({$line.size=2})
.elementFrequency
.pMap({[$f[1],$f[0,0]]|($f[0,1].split($f[0,0]))})
.sort(2)
.sort(0)
.pMap({"%{$0}sx\t%{$2}s\t%{$1}s\t%{$3}s".format@$x})
.join("\n")
.print;

private existing(f:string)->fileExists(f) ? f : void;


USE make_config;
main('files')->begin
  local newList:='build.log'.fileLines
    .{$L[$L.matches('\(3104\)')]}
    .unique
    .replace('(3104) Compiling','')
    .replace('/media/dev/mnh5','')
    .replace('/media/dev/','../')
    .replace('D:\dev\mnh5\','')
    .replace('D:\dev\','..\')
    .replace('\','/')
    .trim
    .unique
    .each(file,existing(file) orElse
               existing('gui/'&file) orElse
               existing('consoles/'&file))
    .union(allFiles('','*.inc').minus(['core/code_hash.inc','core/built_number.inc']))
    .sort;

  newList.escape
  .join(",\n\v")
  .{print("hashFiles:=[\v",$s,'];')};

  newList==hashFiles
  ? print('List is up to date')
  : print('To be added  : ',newList.minus(hashFiles).toList,
        "\nTo be removed: ",hashFiles.minus(newList).toList);
end;
