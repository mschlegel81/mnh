USE fileUtil;
language:='Pascal';
myDict:=unique(['UNIT','PROGRAM','PROCEDURE','FUNCTION','CONSTRUCTOR','DESTRUCTOR','VAR','CONST','OUT','INTERFACE',
         'IMPLEMENTATION','INITIALIZATION','FINALIZATION','if','then','else','case','begin','end','repeat','until',
         'while','do','to','in','ansistring','of','try','except','finally','true','false','value','word','longint',
         'result','assign','reset','rewrite','close','object','record','create','destroy','toString','inherited',
         'setLength','USES','TYPE','array','with','class','C_ID_QUALIFY_CHARACTER','inc','dec',
         "add","append","ARect","Attr","background","beginThread","boolean","bufferSize",
         "callDepth","char","Classes","clear","color","correlation","count","data","dotPos",
         "drive","dword","enterCriticalSection","eof","executable","execute","exit","exitStatus",
         "expandFileName","expression","extended","extractFileExt","extractFileName",
         "extractFilePath","extractRelativePath","factor","file","fileAge","fileExists",
         "fileList","fileName","filePath","fLine","for","foreground","format","formatFloat",
         "free","fTokenId","getEnumName","getRange","hashMask","height","high","hour",
         "index","int64","integer","intToStr","isNan","isUnique","key","leaveCriticalSection",
         "left","line","lines","lowercase","math","maxLongint","message","mnh_litVar","mnh_tokLoc",
         "mrOk","myGenerics","name","Nan","newValue","next","now","oldLen","options","ord","outFile",
         "output","override","paramCount","parameters","paramStr","PByte","point","pointer","poWaitOnExit",
         "PROPERTY","pSize","P_literal","P_token","rereference","round","running","saveToFile","screen",
         "section","self","setRange","shortString","showing","size","sleep","sourceValue","split","start",
         "startTime","stdErr","string","strToFloatDef","strToIntDef","style","subRule","sysutils","text",
         "textFile","time","title","tmp","top","trim","trimLeft","trimRight","trunc","tt_EOL","T_file","T_token",
         "uppercase","virtual","width","windows","write","writeln","xor"]);
fixToken(s:string)->upper(s) in upper(myDict) and not(s in myDict) ? head(myDict%(upper(myDict)=upper(s))) : s;
fixLine(s:string)->trim(s)="" ? "" : trimRight(each(token,tokenSplit(s,language),&,fixToken(token)));
fixFileLines(S:stringList)->pEach(s,S,fixLine(s));
trimBottom(S:stringList)->trailing(S)="" ? trimBottom(leading(S)) : S;
fixMnhFileLines(S:stringList)->trimBottom(trimRight(S));
isIdentifier(x:string)->length(x)>1 and regex.matches(x,'^[a-zA-Z]+');

checkConsistency(fileList)->begin
  local all:=unique(flatten(each(file,fileList,each(tok,tokenSplit(fileContents(file),'pascal'),isIdentifier(tok) ? tok : void))));
  local allUp:=unique(upper(all));
  each(x,allUp,trueCount(upper(all)=x)>3 ? print('Inconsistent spelling: ',all%(upper(all)=x)) : void);
  void;
end;

mutable readOnly:=true;
memoized printOnce(text)->print(text);
voidOf(x)->void;

fix(filename         )->fix(filename,fileLines(filename));
fix(filename,oldLines)->fix(filename,oldLines,splitFileName(filename)%"extension"=".mnh" ? fixMnhFileLines(oldLines)
                                                                                         : fixFileLines(oldLines));
fix(filename,oldLines,newLines==oldLines)->false;
fix(filename,oldLines,newLines          )->printOnce(filename)|
                                           voidOf(each(i,[0..size(newLines)-1],
                                                       oldLines%i<>newLines%i ? print('   <',oldLines%i,'>\n   >',newLines%i,'<')
                                                                              : void) |
                                                  (readOnly ? void
                                                            : writeFileLines(filename,newLines)));

//*Check all files, writing out potential fixes
main("check")->begin
  each(s,recFiles(".","*.pas,*.inc"),fix(s));
  checkConsistency(recFiles(".","*.pas,*.inc"));
end;
  
//*Fix all files, writing out potential fixes
main("fix")->(readOnly:=false)|each(s,recFiles(".","*.pas,*.inc"),fix(s));

//*Rewrite all files (harmonizes line breaks)
main("rewrite")->each(file,recFiles(".","*.pas,*.inc,*.mnh,*.bat"),writeFileLines(file,fileLines(file)));
