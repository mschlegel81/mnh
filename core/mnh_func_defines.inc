{$MACRO ON}
{$define intFuncSignature:=(CONST params:P_listLiteral; CONST tokenLocation:T_tokenLocation; VAR context:T_context):P_literal}
{$define arg0:=params^.value[0]}
{$define arg1:=params^.value[1]}
{$define arg2:=params^.value[2]}
{$define arg3:=params^.value[3]}
{$define list0:=P_listLiteral(params^.value[0])}
{$define list1:=P_listLiteral(params^.value[1])}
{$define list2:=P_listLiteral(params^.value[2])}
{$define list3:=P_listLiteral(params^.value[3])}
{$define set0:=P_setLiteral(params^.value[0])}
{$define set1:=P_setLiteral(params^.value[1])}
{$define set2:=P_setLiteral(params^.value[2])}
{$define set3:=P_setLiteral(params^.value[3])}
{$define map0:=P_mapLiteral(params^.value[0])}
{$define map1:=P_mapLiteral(params^.value[1])}
{$define map2:=P_mapLiteral(params^.value[2])}
{$define map3:=P_mapLiteral(params^.value[3])}
{$define collection0:=P_collectionLiteral(params^.value[0])}
{$define collection1:=P_collectionLiteral(params^.value[1])}
{$define collection2:=P_collectionLiteral(params^.value[2])}
{$define collection3:=P_collectionLiteral(params^.value[3])}
{$define compound0:=P_compoundLiteral(params^.value[0])}
{$define compound1:=P_compoundLiteral(params^.value[1])}
{$define compound2:=P_compoundLiteral(params^.value[2])}
{$define compound3:=P_compoundLiteral(params^.value[3])}
{$define str0:=P_stringLiteral(params^.value[0])}
{$define str1:=P_stringLiteral(params^.value[1])}
{$define str2:=P_stringLiteral(params^.value[2])}
{$define str3:=P_stringLiteral(params^.value[3])}
{$define int0:=P_abstractIntLiteral(params^.value[0])}
{$define int1:=P_abstractIntLiteral(params^.value[1])}
{$define int2:=P_abstractIntLiteral(params^.value[2])}
{$define int3:=P_abstractIntLiteral(params^.value[3])}
{$define real0:=P_realLiteral(params^.value[0])}
{$define real1:=P_realLiteral(params^.value[1])}
{$define real2:=P_realLiteral(params^.value[2])}
{$define real3:=P_realLiteral(params^.value[3])}
{$define bool0:=P_boolLiteral(params^.value[0])}
{$define bool1:=P_boolLiteral(params^.value[1])}
{$define bool2:=P_boolLiteral(params^.value[2])}
{$define bool3:=P_boolLiteral(params^.value[3])}
{$define compResult:=P_compoundLiteral(result)}
{$define collResult:=P_collectionLiteral(result)}
{$define listResult:=P_listLiteral(result)}
{$define setResult :=P_setLiteral(result)}
{$define mapResult :=P_mapLiteral(result)}

