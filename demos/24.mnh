private OPLIST:=['+','-','*','/'];

private
canSolve(set)->permutations(set).unique.each(x,
               [x[0]+x[1],x[0]-x[1],x[0]*x[1],x[0]/x[1]].each(y,
               [y   +x[2],y   -x[2],y   *x[2],y   /x[2]].each(z,
              ([z   +x[3],z   -x[3],z   *x[3],z   /x[3]]=24).agg(OR),OR),OR),OR);
private
testSolution(s:string)->toExpression(s)()=24 ? s : void;
private
findSolution(set)->head(flatten(permutations(set).each(x,
                   OPLIST.each(op1,OPLIST.each(op2,OPLIST.each(op3,
                   testSolution('(('&x[0]&op1&x[1]&')'&op2&x[2]&')'&op3&x[3])))))));

private getRiddle->begin
  local numbers:=1+intRandom(9,4);
  while(not(canSolve(numbers)),numbers:=1+intRandom(9,4));
  numbers;
end;

private errPrint(...)->print@(...) orElse false;

private isCorrectSolution(set,text)->begin
  local result:=true;
  local valids:=((set&"") | OPLIST | ['','(',')']).toSet;
  local invalids:=text.tokenSplit.trim.each(tok,tok in valids ? void : tok);
  invalids==[]
  ? void
  : result:=errPrint('The input contains invalid token(s): ',invalids);

  result
  ? begin
      local expressionResult:=try({toExpression(text)()},{$0});
      not(expressionResult=24)
      ? errPrint('The input does not evaluate to 24 but to ',expressionResult,'.')
      : print('The solution is valid.')
        orElse true;
    end
  : false;
end;

private playARound->print('-------------------------------------------------------------------')|playARound(getRiddle);
private playARound(set)->playARound(set,ask('Find an expression to calculate 24 from the numbers '&toString(set)&'.'));
private playARound(set,answer)->isCorrectSolution(set,answer) ? (ask('Another round?',['yes','no'])='yes' ? playARound : void)
                                                              : (ask('Retry?',['yes','no'])='yes' ? playARound(set) :
                                                                 print('A possible solution would have been: ',findSolution(set)) |
                                                                (ask('Another round?',['yes','no'])='yes' ? playARound : void));
private demo(set)->print(' ?> Find an expression to calculate 24 from the numbers '&toString(set)&'.') |
                   print(' !> ',findSolution(set))|
                   print('The solution is valid.')|
                   print(" ?> Another round?\n !> no");

//*Demo - mainly for reg-testing
main('demo')->print('This is a demo - start without argument to play.',resetRandom)|demo(getRiddle);

main->playARound;
