//*All allowed operations
private OPLIST:=['+','-','*','/'];
//*All possible operation triplets
private OP_TRIPLET:=cross(OPLIST,OPLIST,OPLIST);
private testSolution(s:String)->interpret(s)=24 ? s : void;
private testSolution(N:IntList(4),O:StringList(3))->testSolution('((%{$0}s%{$4}s%{$1}s)%{$5}s%{$2}s)%{$6}s%{$3}s'.format@(N|O));

private findSolution(set:IntList(4))->
  set.permutationIterator.each(N,
               OP_TRIPLET.each(O,testSolution(N,O),head),head);

private canSolve(set:IntList(4))->not(isVoid(findSolution(set)));

private getRiddle->rangeGenerator(0,1000).each(i,
  begin
    local n:=1+intRandom(9,4);
    canSolve(n) ? n.sort : void;
  end,head);

private errPrint(...)->print@(...) orElse false;

private isCorrectSolution(set:IntList(4),text:String)->text.trim=="" ? false : begin
  local result:=true;
  local valids:=((set&"") | OPLIST | ['','(',')']).toSet;
  local invalids:=text.tokenSplit.trim.each(tok,tok in valids ? void : tok);
  invalids==[]
  ? void
  : return errPrint('The input contains invalid token(s): ',invalids);
  local usedNumbers:=text.tokenSplit.softCast.filter(::isInt).sort;
  usedNumbers==set
  ? void
  : return errPrint("The input does not use the given numbers.\n  got     : ",usedNumbers
                                                            ,"\n  expected: ",set);
  local expressionResult:=try({interpret(text)},{$0});
  not(expressionResult==24)
  ? return errPrint('The input does not evaluate to 24 but to ',expressionResult,'.')
  : print('The solution is valid.');
  true;
end;

private playARound->begin
  print('-------------------------------------------------------------------');
  local set:=getRiddle;
  local answer:=ask('Find an expression to calculate 24 from the numbers '&toString(set).unbrace&'.');
  local retrying:=true;
  local solutionOk:=false;
  while(retrying and not(solutionOk:=isCorrectSolution(set,answer)),
  begin
    retrying:=ask('Retry?',['yes','no'])='yes';
    retrying
    ? answer:=ask('Find an expression to calculate 24 from the numbers '&toString(set).unbrace&'.')
    : void;
  end);
  solutionOk
  ? void
  : print('A possible solution would have been: ',findSolution(set));
end;

private demo(set)->print(' ?> Find an expression to calculate 24 from the numbers '&toString(set)&'.') |
                   print(' !> ',findSolution(set))|
                   print('The solution is valid.')|
                   print(" ?> Another round?\n !> no");

//*Demo - mainly for reg-testing
main('demo')->print('This is a demo - start without argument to play.',resetRandom)|demo(getRiddle);

//@demo_for=user input, expressions
main->begin
  local continue:=true;
  while(continue, begin
    playARound;
    continue:=ask('Another round?',['yes','no'])='yes';
  end);
end;
