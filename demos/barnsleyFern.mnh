private interlace(X,Y)->each(i,[0..size(X)-1],[X%i,Y%i]);

private barnsleyFern(sampleCount)->barnsleyFern([random],[random],sampleCount);
private barnsleyFern(x,y,sampleCount)->sampleCount>size(x) ? barnsleyFern(x,y,sampleCount,random(size(x))<0.02,random(size(x))<0.1,random(size(x))<0.1)
                                                           : interlace(x,y);
private barnsleyFern(x,y,sampleCount,p1,p2,p3)->barnsleyFern(
  flatten(   0*x%p1, 0.85*x+0.04*y    ,0.20*x%p2-0.26*y%p2    ,-0.15*x%p3+0.28*y%p3     ),
  flatten(0.16*y%p1,-0.04*x+0.85*y+1.6,0.23*x%p2+0.22*y%p2+1.6, 0.26*x%p3+0.24*y%p3+0.44),
  sampleCount);

private main_impl(filename:string,xRes:int,yRes:int)->
  plot.setAutoscale([true,true]) and
  plot.setLogscale([false,false]) and
  plot.setPreserveAspect(true) and
  plot.setAxisStyle([0,0]) and
  plot.plot(barnsleyFern(200000),"0.2 . green") and
  plot.renderToFile(filename,xRes,yRes,10) and print('File ',filename,' was generated.');

//*Plots a Barnsley Fern to file <code>filename</code> using a custom resolution (given as <i>xRes</i><code>x</code><i>yRes</i>)
main(filename,resolution)->main_impl(filename,softCast(split(resolution,"x")%0),softCast(split(resolution,"x")%1));
//*Plots a Barnsley Fern to file <code>filename</code> using a custom resolution
main(filename,xRes,yRes )->main_impl(filename,softCast(xRes)                   ,softCast(yRes));
//*Plots a Barnsley Fern to file <code>filename</code> using a resolution of 768x768
main(filename           )->main_impl(filename                        ,768,768);
//*Plots a Barnsley Fern using the package path and a resolution of 768x768
main                     ->main_impl(replace(myPath&"#","mnh#","png"),768,768);
