runningSum(L:NumericList)->begin
  local sum:=0;
  L.each(x,sum+=x);
end;

eSeries(n>0)->(1+1/[1..n])^[1..n];

harmonicSummands(n>0)->1/[1..n];

arctanSummands(n:Int)->begin
  local N:=[0..n];
  ((-1)^N/(2*N+1));
end;

private EPSILONS:=(10^[0..-10]);

guessLimit(samples:NumericList)->(samples.trailing(4)*[1..4]*0.1).agg(+);

//@demo_for=UTF-8 output, numerics
guessEpsilons(samples:NumericList)->begin
  local Max:=
  local Min:=samples.trailing;
  local spreads:=samples.reverseList.each(s,begin
    Max:=max(Max,s);
    Min:=min(Min,s);
    Max-Min;
  end).reverseList;
  local epsilonList:=
  EPSILONS.pEach(epsilon,begin
    local N:=indexOf(spreads>epsilon).trailing;
    isNumeric(N) ? void : N:=0;
    N<spreads.size*0.9 ? format("N=\v%s\t"#206#181"=\v%s",N,epsilon) : void;
  end);
  epsilonList.size>3 ? print('...seems to converge against ',samples.guessLimit)
                     : print('...seems to diverge');
  print('Cauchy: '#226#136#128#32#206#181'>0 : '#198#142' N : '#226#136#128' n,m>N : |x[n]-x[m]|<'#206#181' ');
  epsilonList.join("\n").print;
end;

main->begin
  print('(1+1/n)^n');
  guessEpsilons(         eSeries(10000));
  print("\n1 + 1/2 + 1/3 + 1/4 + ...");
  guessEpsilons(harmonicSummands(10000).runningSum);
  print("\n1 + 1/2^2 + 1/3^2 + 1/4^2 + ...");
  guessEpsilons(harmonicSummands(10000).sqr.runningSum);
  print("\n1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 ...");
  guessEpsilons(arctanSummands  (10000).runningSum);
end;
