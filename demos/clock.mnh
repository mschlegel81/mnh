@demo_for=system_calls, formatting, date/time formatting
formatTimeNoDate(t<1)->formatTime('hhnnss',t);
formatTimeNoDate(t<100/24)->begin
  local rest:=t*24;
  rest:=(rest-(local hours  :=floor(rest)))*60;
  rest:=(rest-(local minutes:=floor(rest)))*60;
               local seconds:=floor(rest);
  format('%2.2d%2.2d%2.2d',hours,minutes,seconds);
end;
formatTimeNoDate(t)->'995959';

BIG:=//!~
 ********    ****     *******  ********    *      ********** ******** ********** ********  ********.
**********  *****    *******************  **      **************************************************
****  **** ******   ***    ***       *** **  ***  ***       ***              *******  *******    ***
****  ****    ***         ***   ******* ******************* *********       ***  ******** **********
****  ****    ***        ***    ******* ******************************     ***   ******** **********
****  ****    ***       ***          ***     ***         ******    ***    ***   ****  ****       ***
**********    ***   ********************     ***  ********************   ***    ********************
 ********     ***   ********** ********      ***  *********  ********   ***      ********  ********.~
.replace(['*','.'],['#',' ']).split("\n").map({$s.copy([0..9]*10,10)}).transpose;
TINY:=//!~
 _    __ __     _  _ ___ _  _.
| | /  _) _)/_ |_ |_   /(_)(_)
|_| | /____) | __)(_) / (_) /.~
.replace('.',' ').split("\n").map({$s.copy([0..9]*3,3)}).transpose;

digit(d in [0..9],fontStyle=0)->BIG[d];
digit(d in [0..9],fontStyle=1)->BIG[d].each(L,index in [0,2,3,5,7] ? L : void)|['','',''];
digit(d in [0..9],fontStyle=2)->['','','','','']|TINY[d];

memoized printOnce(s:StringList)->clearPrint orElse printf('%s',s);

asciiArtTime(s:String)->begin
  local result:=s.chars.each(n,digit(n.toInt,index div 2))
                  .transpose(' ').map({('%s %s %s %s              %s%s'.format@$s0).copy(0,43)});
  (repeat('-',length(result).max+1)&'+')|
  (result&' |')|
  (repeat('-',length(result).max+1)&'+');
end;
asciiArtTime(t:Real)->asciiArtTime(formatTime('hhnnss',t));


guessTimeOrInterval(TimeOrIntervalString:String)->
  begin
    local S:=TimeOrIntervalString.upper.clean(['0'..'9',':','H','M','S'],'');
    (pos(['H','M','S'],S)>=0).agg(OR)
    ? interpret(S.replace(['H','M','S'],['/24+','/(24*60)+','/(24*60*60)+'])&'0')+systime
    : begin
        local R:=try({parseTime('hh:nn:ss',S)},
                     {parseTime('hh:nn'   ,S)});
        R<systime ? R+1 : R;
      end;
  end;

nextSecond->sleep(1-formatTime('0.zzz',systime).toReal);

//*Displays a clock, updating every minute
main->begin
  async({while(true,begin (asciiArtTime(systime-floor(systime))|'Press Enter to quit').printOnce;
  exec('cmd',['/C','title',formatTime('c',systime)]);
  nextSecond; end)});
  ask('Press enter to quit');
end;

//*Prints a nicely formatted time and returns at once
main('once')->asciiArtTime(systime-floor(systime)).printOnce;

//*Displays time and timer
//*valid inputs are e.g.: "15:23" (sleep until 15:23)
//*                       "1h 5m" (sleep for one hour and 5 minutes)
//*                       "20s"   (sleep for 20 seconds)
main(timeOrInterval)->main(timeOrInterval,'-beep');

AFTER_METHOD:=[['-lock'    ,{execPipeless('rundll32.exe',['User32.dll,LockWorkStation'])}],
               ['-suspend' ,{execPipeless('rundll32.exe',['powrprof.dll,SetSuspendState','0,1,0'])}],
               ['-restart' ,{execPipeless('Shutdown.exe',['-r','-t','00'])}],
               ['-shutdown',{execPipeless('Shutdown.exe',['-s','-t','00'])}],
               ['-beep'    ,{while(true,begin beep; sleep(1); end)}]];

//*As with time or interval but with custom action when timer is done
//*after can be: -lock
//*              -suspend
//*              -restart
//*              -shutdown
//*              -beep      (default)
main(timeOrInterval,after in (AFTER_METHOD.getInner(0)))->begin
  async({begin
    local endTime:=guessTimeOrInterval(timeOrInterval);
    while(systime<endTime,begin
      ((asciiArtTime(systime-floor(systime))&
        asciiArtTime(formatTimeNoDate(endTime-systime)))|
       ['Action: '&after,'Press Enter to cancel']).printOnce;
      nextSecond;
    end);
    AFTER_METHOD[after]();
  end});
  ask('Press enter to cancel');
end;
