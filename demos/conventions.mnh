private RUNS:=[//!
f->{$y^3};
f;
f();
f(void);
f(3);
f(3,void);
f(void,3);
3 .f;
[3,-2].f;
f(3,4);',

//!
f()->{$y^3};
f;
f();
f(3);
3 .f;
[3,-2].f;
f(3,4);',

//!
f(...)->{$y^3};
f;
f();
f(3);
3 .f;
[3,-2].f;
f(3,4);',

//!
f(x)->{$y^3+x};
f(3);
3 .f;
[3,-2].f;
f(3,4);
f;'];

//**Demonstrates (some) declaration and calling conventions
//@demo_for=sandboxing, calling conventions, expressions
main->RUNS.each(run,print(repeat('-',80)) and run.sandBoxExecute.each(e,e[0] in ["Note ","Error [stack trace]"] ? void : e[[0,2]].join(" ") & (index=0 ? "\n" : "") ).join("\n").print);
