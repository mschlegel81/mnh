//*Simulates a double pendulum
//*Parameters: - length of upper leg (default 1)
//*            - length of lower leg (default 1)
//*            - mass of upper weight (default 1)
//*            - mass of lower weight (default 1)
plain script;
USE rungeKutta,GUI;
//Animation parameters
timeStepPerFrame:=0.02;
//Physical parameters
l1:=($1 orElse 1).toReal; //Length of upper leg
l2:=($2 orElse 1).toReal; //Length of lower leg
m1:=($3 orElse 1).toReal; //Upper mass
m2:=($4 orElse 1).toReal; //Lower mass
g:=9.81;
//Helper variables - we can calculate them on declaration in a plain script
F1fak:=-m2/(m1+m2)*l2/l1;
F2fak:=-l1/l2;
//*phi1'', dependent on phi2''
F1(phi1,phi2,phi1dt,phi2dt,        phi2dtt)->F1fak*(phi2dtt*cos(phi1-phi2)+phi2dt.sqr*sin(phi1-phi2))-g/l1*sin(phi1);
//*phi2'', dependent on phi1''
F2(phi1,phi2,phi1dt,phi2dt,phi1dtt        )->F2fak*(phi1dtt*cos(phi1-phi2)-phi1dt.sqr*sin(phi1-phi2))-g/l2*sin(phi2);
//*Returns an expression F1(F2($x))-$x (for Regula Falsi)
F12(phi1,phi2,phi1dt,phi2dt)->F1(phi1,phi2,phi1dt,phi2dt,F2(phi1,phi2,phi1dt,phi2dt,{$x}))-{$x};

//*Overloaded for use in RK4
accel(state:NumericList(4))->accel@state;

quickRoot(F:Expression)->begin -1-(f1:=F(-1))*2/(F(1)-f1); end;

//*Returns first derivative in time for given state
@demo_for=numerics, simulation, animation, plain script, future
accel(phi1,phi2,phi1dt,phi2dt)->
  begin
    [phi1dt,
     phi2dt,
     phi1dtt:=quickRoot(F12(phi1,phi2,phi1dt,phi2dt)),
     F2(phi1,phi2,phi1dt,phi2dt,phi1dtt)];
  end;

//*Transforms the state (by angles) to a list of points (Cartesian, 2D)
plottable(state:NumericList(4))->begin
  [[0,0],d1:=[sin(state[0]),-cos(state[0])]*l1,
         d1+ [sin(state[1]),-cos(state[1])]*l2];
end;

begin
  setOptions(['autoscaleX'=>false,
              'autoscaleY'=>false,
              'preserveAspect'=>true,
              'x0'=>(x0:=0),
              'x1'=>(x1:=0),
              'y0'=>(y0:=0),
              'y1'=>(y1:=0),['axisStyleX',0],['axisStyleY',0]]);
  state1:=[pi/2,-pi/2,0,0];
  state2:=state1+(random(4)-0.5)*1E-7;
  hist1:=[state1];
  hist2:=[state2];
  trace1:=[state1.plottable.trailing];
  trace2:=[state2.plottable.trailing];
  p1:=state1.plottable;
  p2:=state2.plottable;
  replot:={begin
             trace1:=trace1.trailing(100)|[p1.trailing];
             trace2:=trace2.trailing(100)|[p2.trailing];
             setOptions(['x0'=>(x0:=min(x0,min(p1.getInner(0)),min(p2.getInner(0)))),
                         'x1'=>(x1:=max(x1,max(p1.getInner(0)),max(p2.getInner(0)))),
                         'y0'=>(y0:=min(y0,min(p1.getInner(1)),min(p2.getInner(1)))),
                         'y1'=>(y1:=max(y1,max(p1.getInner(1)),max(p2.getInner(1))))]);
             plot   (trace2,'red');
             addPlot(trace1,'black');
             addPlot(p2,'3 . red l');
             addPlot(p1,'3 . black l');
             addAnimationFrame;
           end};
  clearAnimation(true);
  replot();
  postDisplay;
  step:=integrator(CASH_KARP,::accel,timeStepPerFrame,1E-7);
  state1:=future(step,[state1]);
  state2:=future(step,[state2]);
  while not plotClosed do begin
    p1:=(state1:=state1()).plottable; hist1|=[state1]; state1:=future(step,[state1]);
    p2:=(state2:=state2()).plottable; hist2|=[state2]; state2:=future(step,[state2]);
    replot();
  end;

  t:=[0..hist1.size-1]*timeStepPerFrame;
  mask:=[0..hist1.size-1] mod max(1,round(hist1.size/2000))=0;
  t:=t[mask].each(it,it,it);

  clearAnimation;
  setOptions([['autoscaleX',true],['autoscaleY',true],['preserveAspect',false],['axisStyleX',3],['axisStyleY',3]]);
  plot   (t,[hist1[mask].getInner(0),hist2[mask].getInner(0)].transpose.flatten,'red 0.5 tube f');
  addPlot(t,[hist1[mask].getInner(1),hist2[mask].getInner(1)].transpose.flatten,'blue 0.5 tube f');
  display;
end;
