//@demo_for=stateful expressions
private fibonacciGenerator(n>=1)->{begin
  local state:=[1..n]*0+1; //current state - initially a list of n 1s
save;
  local result:=state[max(0,n-2)]; //output is the n-2nd element
  state:=state.tail | state.agg(+);  //state is shifted; sum of all elements is appended
  result;
end};

private produce(g:Expression(0))->g.head(20).join("\t");

//*Solves the "Fibonacci n-step" task from http://rosettacode.org/wiki/Fibonacci_n-step_number_sequences
main->print('See http://rosettacode.org/wiki/Fibonacci_n-step_number_sequences') and
      print('Fibonacci n-step sequence') and
      print(' n | values') and
      print('---+-----------------------------------------------------------------------------------------------------') and
      printf("%s",[1..20].each(k,k&"\t| "& fibonacciGenerator(k).produce));
