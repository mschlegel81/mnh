@demo_for=file processing
main(rootFolder,...)->begin
  print('Root folder: ',rootFolder);
  //First find all files to check
  local filesToCheck:=allFiles(rootFolder);
  print('Checking ',filesToCheck.size,' files');
  //group files by size
  local sizeGroups:=group(filesToCheck,filesToCheck.pEach(file,file.fileInfo['size'] orElse -1))
    .pEach(sizeGroup,
           size(sizeGroup)<=1 //filter out groups with only one element
           ? void
           : (fileInfo(sizeGroup[0])['size']==[] OR fileInfo(sizeGroup[0])['size']<256) //filter out group of files smaller than 256 bytes
             ? print('Excluding group of ',size(sizeGroup),' files due to indeterminate or negligible file size')
             : sizeGroup);
  print('Checking ',sizeGroups.size,' file groups (by file size)');
  sizeGroups.size>0
  ? print('Max. group size: ',sizeGroups.each(g,size(g),aggregator(max)),' files')
  : void;
  sizeGroups
  .each(sizeGroup,
        group(sizeGroup,sizeGroup.pEach(file,fileContents(file).hash)) //group files by equal hashes within size group
        .pEach(hashGroup,
               size(hashGroup)<=1 // if group has only one element, it cannot contain duplicates
               ? void
               : printf('%s','Equal hashes:'|('  '&hashGroup))));
  size(...)>0 ? main@... : void;
end;
