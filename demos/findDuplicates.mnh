@demo_for=file processing
main(rootFolder,...)->begin
  print('Root folder: ',rootFolder);
  //First find all files to check
  local filesToCheck:=allFiles(rootFolder);
  print('Checking ',filesToCheck.size,' files');
  //group files by size
  local ignoredFileCount:=0;
  local sizeGroups:=group(filesToCheck,filesToCheck.pEach(file,file.fileInfo['size'] orElse warn('Cannot access ',file) orElse -1))
    .each(sizeGroup,
           size(sizeGroup)<=1 //filter out groups with only one element
           ? void
           : (fileInfo(sizeGroup[0])['size']==[] OR fileInfo(sizeGroup[0])['size']<256) //filter out group of files smaller than 256 bytes
             ? begin ignoredFileCount+=size(sizeGroup); void; end
             : sizeGroup);
  print('Excluding  ',ignoredFileCount,' files due to indeterminate or negligible file size');
  print('Checking ',sizeGroups.size,' file groups (by file size)');
  sizeGroups.size>0
  ? print('Max. group size: ',sizeGroups.each(g,size(g),aggregator(max)),' files')
  : void;
  sizeGroups
  .pEach(sizeGroup,
        group(sizeGroup,fileStats(sizeGroup)) //group files by equal hashes within size group
        .each(hashGroup,
               size(hashGroup)<=1 // if group has only one element, it cannot contain duplicates
               ? void
               : [hashGroup.head.fileInfo['size'] orElse 0,hashGroup]),|)
  .map({[$x[0]*$x[1].size,$x]})
  .sort
  .getInner(1)
  .each(finding,
    print('Found group of ',finding[1].size,' files, ',finding[0],' bytes each (total ',finding[0]*finding[1].size,' bytes):'),
    printf('  %s',finding[1]));
  size(...)>0 ? main@... : void;
end;
