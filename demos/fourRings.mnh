//This program finds values a,b,c,d,e,f,g such that a+b = b+c+d = d+e+f = f+g
//Instead of brute-forcing, we may employ a multi-step filtering process:
//  - Iterate over the first 4 elements, check via isPartialSolution if we should continue
//  - Iterate over the next 2 elements, check via isPartialSolution if we should continue
//  - find the last element via findG and accept if it is in the allowed range
private isPartialSolution(a,b,c,d      )-> a+b = b+c+d;
private isPartialSolution(a,b,c,d,e,f  )-> a+b = b+c+d = d+e+f;
private findG            (a,b,f        )-> a+b-f;
private isSolution       (a,b,c,d,e,f,g)-> a+b = b+c+d = d+e+f = f+g;

//*See: http://rosettacode.org/wiki/4-rings_or_4-squares_puzzle
main->begin
  print(//!~Four rings:
     ___   ___   ___   ___
    /   \ /   \ /   \ /   \
   /     X     X     X     \
  (   A (B) C (D) E (F) G   )
   \     X     X     X     /
    \___/ \___/ \___/ \___/~);
  print('The solutions for 1..7 (unique) are: ');
  filterAndPrintSolutions:=(source:Iterable)->source.pFilter((p)->isSolution@p).agg((s)->print('  ',s));
  permutationIterator([1..7]).filterAndPrintSolutions;
  print('The solutions for 3..9 (unique) are: ');
  permutationIterator([3..9]).filterAndPrintSolutions;
  print('The number of solutions for 0..9 (nonunique) is: ',
    cross([0..9],[0..9],[0..9],[0..9])
    .pFilter((a,b,c,d)->isPartialSolution(a,b,c,d))
    .pMap((a,b,c,d)->cross([0..9],[0..9])
                     .map((e,f)->isPartialSolution(a,b,c,d,e,f)
                                 AND 0<=findG(a,b,f)<=9)
                     .trueCount)
    .agg(+));
end;
