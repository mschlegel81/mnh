//Rational numbers are handled as arrays of their prime factor powers.
private BASE:=  [2,3,5,7,11,13,17,19,23,29]; //The first few prime numbers
private POT2TAIL:=[0,0,0, 0, 0, 0, 0, 0, 0];

private niceRational(L:IntList(BASE.size))->
  (BASE[L!=0] & '^' & L[L!=0]) //filter elements with nonzero exponents and transform to list of powers
  .join('*')                   //join the list ...
  &" = "&(BASE^L).agg(*);      //... and append the numeric result

//*This routine transforms a rational number to the corresponding prime factor powers
//*e.g. rational(15,4)->[-2,1,1,0,0,0,0,0,0,0] - read as 15/4 = 2^(-2)*3^1*5^1*7^0*...
private rational(enumerator:Int,denominator:Int)->begin
  en:=enumerator;
  de:=denominator;
  BASE.each(b,begin
    k:=0;
    while en mod b=0 do begin k+=1; en:=en div b; end;
    while de mod b=0 do begin k-=1; de:=de div b; end;
    k;
  end);
end;

//*A list of prime factor powers denotes an integer, if all powers are nonnegative
private isInteger(L:IntList)->min(L)>=0;

//*Turns an input string first into a list of tuples (denoting rational numbers) then to lists of prime factor powers
private parseFractions(s:String)->
  toExpression('[['&
             replace(s,[' ', ',' ,'/'],
                       ['' ,'],[',','])&
             ']]')().each(tuple,rational@tuple);

//*The core algorithm;
private Fractran(out:Expression(2),fractions,k,steplimit)->begin
  state:=k;
  terminated:=false;
  out(0,state);
  [1..steplimit].each(step,terminated ? void :
    begin
      terminated:=fractions.each(f,
        isInteger(state+f)
        ? begin state+=f; false; end //Do NOT terminate early when there is a matching rational
        : true,AND);
      out(step,state);
    end);
end;

Conway_primes_algorithm:='17 / 91, 78 / 85, 19 / 51, 23 / 38, 29 / 33, 77 / 29, 95 / 23, 77 / 19, 1 / 17, 11 / 13, 13 / 11, 15 / 14, 15 / 2, 55 / 1';
private printPowersOf2(step,state)->tail(state)==POT2TAIL
                                    ? printAll(step,state)
                                    : void;
private printAll      (step,state)->print(step,': ',niceRational(state));

main(fractions,n)->Fractran(::printAll      ,parseFractions(fractions),rational(softCast(n),1),30)|
                   print('----------------------------------')|
                   Fractran(::printPowersOf2,parseFractions(fractions),rational(softCast(n),1),428553);
//*See http://rosettacode.org/wiki/Fractran
@demo_for=esoteric language, math/alternative numeric representations
main('rosetta')->main(Conway_primes_algorithm,'2');
//*As above but abridged for regression test
main->Fractran(::printAll,parseFractions(Conway_primes_algorithm),rational(2,1),30);
