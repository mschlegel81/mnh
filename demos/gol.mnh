type WorldSize(i:IntList(2))->i[0]>0<i[1];
//*Returns a random initial world
private initWorld(s:WorldSize)->intRandom(2,s.agg(*));

//*Prints out the given world (including a clearprint)
private printWorld(w:IntList,s:WorldSize)->printf("%s","\f"|copy(join([' ','#'][w]),s[0]*[0..s[1]-1],s[0]));

//*Shifts - this returns a list of intLists, indicating adjacent cells
private memoized shifts(s:WorldSize)->
  [-1..1].cross([-1..1]).each(sh,0=sh[0]=sh[1] ? void :
  (([0..s[1]-1]+sh[0]+s[1]) mod s[1]*s[0]).cross
  (([0..s[0]-1]+sh[1]+s[0]) mod s[0]     ).map({$x[0]+$x[1]}));


//*Returns a list of integers with the number of living neighbors per cell
private neighbors(w:IntList,s:WorldSize)->shifts(s).each(sh,w[sh],+);

//*The Transision table
private TRANSITION:=[0,0,0,1,0,0,0,0,0,
                     0,0,1,1,0,0,0,0,0];

//*Computes the following generation based on current generation w
private step(w:IntList,s:WorldSize)->TRANSITION[w.neighbors(s)+9*w];

private playTheGame(S:WorldSize,delaySeconds:Numeric,stepLimit:Int,exitByKey=false)->
  begin
    local W:=initWorld(S);
    local stepCounter:=0;
    while(stepCounter<=stepLimit,begin
      stepCounter+=1;
      W.printWorld(S);
      W:=W.step(S);
      sleep(delaySeconds);
    end);
  end;

private playTheGame(S:WorldSize,delaySeconds:Numeric,stepLimit:Int,exitByKey=true)->
  begin
    async({playTheGame(S,delaySeconds,stepLimit,false)});
    ask('Press enter to quit');
  end;

//*Conway's Game Of Life
//*Play the game in the given resolution until a key is pressed
//@demo_for=animation
main(width,height)->playTheGame([width.toInt,height.toInt].toWorldSize,0.05,2^62,true);

//*Play the game for the given number of steps
main(width,height,stepCount)->playTheGame([width.toInt,height.toInt].toWorldSize,0.05,stepCount.toInt,false);

//*Play the game for the given number of steps without delay between generations
main(width,height,stepCount,"fast")->playTheGame([width.toInt,height.toInt].toWorldSize,0,stepCount.toInt,false);
