private worldHeight:=40;
private worldWidth:=120;

initWorld->intRandom(2,worldHeight*worldWidth);
printWorld(w:intList)->printf("%s","\f"|copy(join([' ','#']%w),worldWidth*[0..worldHeight-1],worldWidth));

memoized
shift(di,dj)->flatten(each(i,[0..worldHeight-1],
                      each(j,[0..worldWidth-1],((i+di+worldHeight) mod worldHeight)*worldWidth+
                                                (j+dj+worldWidth)  mod worldWidth )));

neighbors(w)->w%shift(-1,-1)+w%shift( 0,-1)+w%shift( 1,-1)+
              w%shift(-1, 0)+               w%shift( 1, 0)+
              w%shift(-1, 1)+w%shift( 0, 1)+w%shift( 1, 1);

TRANSITION:=[[0,0,0,1,0,0,0,0,0],
             [0,0,1,1,0,0,0,0,0]];

step(w)->step(w,TRANSITION%%neighbors(w));
step(w,t)->each(i,[0..size(w)-1],t%%i%(w%i));

mutable sleepTime:=0.05;
mutable wantQuit:=false;

playUntilStatic(w)->begin
  local world:=w;
  while(not(wantQuit),begin
    printWorld(world);
    sleep(sleepTime);
    local newWorld:=step(world);
    world==newWorld ? wantQuit:=true : void;
    world:=newWorld;
    void;
  end);
end;

playSteps(w,n>0)->begin
  local world:=w;
  each(i,[1..n],begin
    printWorld(world);
    sleep(sleepTime);
    world:=step(world);
    void;
  end);
end;

main->(sleepTime:=0) | playSteps(initWorld,10);
main("-nowait",...)->(sleepTime:=0) | main@(tail($params));
main("-long")->pEach(task,[{playUntilStatic(initWorld)},{begin ask('Press Enter to quit.'); wantQuit:=true; end}],task());
main(steps)->playSteps(initWorld,softCast(steps));
