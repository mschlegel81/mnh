private worldHeight:=40;
private worldWidth:=40;

private
initWorld->intRandom(2,worldHeight*worldWidth);
private
printWorld(w:intList)->printf("%s","\f"|copy(join([' ','#'][w]),worldWidth*[0..worldHeight-1],worldWidth));

private memoized
shift(di,dj)->flatten([0..worldHeight-1].each(i,
                      [0..worldWidth-1].each(j,((i+di+worldHeight) mod worldHeight)*worldWidth+
                                                (j+dj+worldWidth)  mod worldWidth )));
private memoized
neighbors(w)->w[shift(-1,-1)]+w[shift(0,-1)]+w[shift( 1,-1)]+
              w[shift(-1, 0)]+               w[shift( 1, 0)]+
              w[shift(-1, 1)]+w[shift(0, 1)]+w[shift( 1, 1)];

private
TRANSITION:=[[0,0,0,1,0,0,0,0,0],
             [0,0,1,1,0,0,0,0,0]];

step(w)->step(w,TRANSITION.getInner(neighbors(w)));
step(w,t)->[0..size(w)-1].each(i,t.getInner(i).get(w[i]));

playUntilStatic(w,sleepTime)->begin
  local world:=w;
  async(
 {while(true,begin
    printWorld(world);
    sleep(sleepTime);
    world:=step(world);
    void;
  end)});
  ask('Press Enter to quit.');
end;

playSteps(w,n>0)->begin
  local world:=w;
  [1..n].each(i,begin
    printWorld(world);
    world:=step(world);
    void;
  end);
end;

main->playSteps(initWorld,10);
main("-long")->playUntilStatic(initWorld,0.05);
main(steps)->playSteps(initWorld,softCast(steps));
