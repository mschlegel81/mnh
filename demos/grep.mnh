private showIndex(matchMask:booleanList, additional=0)->indexOf(matchMask).map({['',$x]});
private showIndex(matchMask:booleanList, additional:int)->begin
  local matchIndex:=indexOf(matchMask);
  matchIndex:=[-additional..additional].each(offset,matchIndex+offset).flatten.unique;
  local lastX:=-1;
  matchIndex[0<=matchIndex<matchMask.size].each(
    lineIndex,
    [(lastX+1==(lastX:=lineIndex) OR index==0 ? '' : "\n")&
     (matchMask[lineIndex] ? "*" : " "),
     lineIndex]);
end;

//@demo_for=regex
//*Usage: grep pattern [options] [filePattern1,[filePattern2,...]]
//*if no file pattern is given, * is assumed
//*Options: -i  case insensitive matching
//*         -n# show # additional lines before and after
//*         -l  only list files
//*         -r  recurse subdirectories
main(searchPattern,...)->begin
  local filePatterns:=[];
  local additionalLines   :=0;
  local matchCaseSensitive:=true;
  local listOnly          :=false;
  local recurseDirs       :=false;
  //Parse:
  ... .each(e,e='-i' ? matchCaseSensitive:=false :
              e='-l' ? listOnly          :=true  :
              e='-r' ? recurseDirs       :=true  :
              e.matches('-n\d+') ? additionalLines:=toInt(e.copy(2,e.length-2)) :
              filePatterns|=e);

  //Search:
  allFiles('.',filePatterns,recurseDirs)
  .sort
  .each(file,begin
    local lines:=fileLines(file);
    local toShow:=lines.matches((matchCaseSensitive ? '' : '(?i)')& searchPattern).showIndex(additionalLines);
    toShow==[]
    ? void
    : print(file) orElse listOnly
                         ? void
                         : printf('%s  %4d:%s',toShow.getInner(0),toShow.getInner(1)+1,lines[toShow.getInner(1)]);
  end);
end;

main->inspect['declares','main','subrules'].each(subrule,subrule['comment'],&).replaceOne('grep',myPath).print;
