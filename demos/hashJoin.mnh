USE '..\packages\formattingUtils.mnh';

A:=[[27,'Jonah'],
    [18,'Alan' ],
    [28,'Glory'],
    [18,'Popeye'],
    [28,'Alan']];
B:=[['Jonah','Whales'],
    ['Jonah','Spiders'],
    ['Alan' ,'Ghosts'],
    ['Alan' ,'Zombies'],
    ['Glory','Buffy'],
    ['Me'   ,'Things']];

private TabToMap(Table:List,KeyIndex:Int)->begin
  local map:=[].toMap;
  Table.each(row,begin
    key:=row[KeyIndex];
    value:=(map.get(key) orElse [])|[row];
    map[key]:=value;
    void;
  end);
  map;
end;

@Algorithm name=Inner hash join
innerJoin(Tab1:List,KeyIndex1:Int,Tab2:List,KeyIndex2:Int)->
  begin
    Map2:=TabToMap(Tab2,KeyIndex2);
    Tab1.each(row,begin
      key:=row[KeyIndex1];
      toJoin:=Map2[key] orElse [];
      toJoin==[] ? void : toJoin.each(row2,row|row2);
    end,|);
  end;

@Algorithm name=Outer hash join
outerJoin(Tab1:List,KeyIndex1:Int,Tab2:List,KeyIndex2:Int)->
  begin
    tab1Substitute:=[1..Tab1.each(row,row.size,max)].each(n,'');
    Map2:=TabToMap(Tab2,KeyIndex2);
    mappedKeys:=[];
    Tab1.each(row,begin
      key:=row[KeyIndex1];
      mappedKeys|=key;
      toJoin:=Map2[key] orElse [];
      toJoin==[] ? [row] : toJoin.each(row2,row|row2);
    end,|)|
    Map2.getInner(0).minus(mappedKeys).each(key,
      Map2[key].each(row2,tab1Substitute|row2),|);
  end;

@demo_for=map operations
//*See https://rosettacode.org/wiki/Hash_join
main->begin
  print('Table A:');
  printf("%s",A.formatTable(['Age','Name']));
  print("\nTable B:");
  printf("%s",B.formatTable(['Character','Nemesis']));
  print("\nInner join:");
  printf("%s",innerJoin(A,1,B,0).formatTable(['A.Age','A.Name','B.Character','B.Nemesis']));
  print("\nOuter join:");
  printf("%s",outerJoin(A,1,B,0).formatTable(['A.Age','A.Name','B.Character','B.Nemesis']));
end;
