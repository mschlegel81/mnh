//!BATCH ON
private memoized hc(k)->k<=2 ? 1 : hc(hc(k-1))+hc(k-hc(k-1));
private HC_LIST:=each(i,[0..100000],hc(i));
private memoized hc(k)->k<size(HC_LIST) ? HC_LIST%k : hc(hc(k-1))+hc(k-hc(k-1));
private HC_LIST:=HC_LIST|each(i,[100001..200000],hc(i));
private memoized hc(k)->k<size(HC_LIST) ? HC_LIST%k : hc(hc(k-1))+hc(k-hc(k-1));
private HC_LIST:=HC_LIST|each(i,[200001..300000],hc(i));
private memoized hc(k)->k<size(HC_LIST) ? HC_LIST%k : hc(hc(k-1))+hc(k-hc(k-1));
private HC_LIST:=HC_LIST|each(i,[300001..400000],hc(i));
private memoized hc(k)->k<size(HC_LIST) ? HC_LIST%k : hc(hc(k-1))+hc(k-hc(k-1));
private HC_LIST:=HC_LIST|each(i,[400001..524288],hc(i));
HC_RATIO:=HC_LIST/[1,1..size(HC_LIST)-1];
HC_LIST:=[];
hc(k)->void;

private maxBetween(i0,i1)->maxBetween(i0,i1,head(tail(HC_RATIO,i0),i1-i0));
private maxBetween(i0,i1,L)->format('%#0.00000000000000% @i=%######0%',max(L),i0+argMax(L));

each(i,[0..18],printf("range 2^%#0%..2^%#0% max. a(n)/n=%X%",i,i+1,maxBetween(2^i,2^(i+1))));
print("Mallows Number: ",max(pEach(i,[1..2^19],HC_RATIO%i>0.55 ? i : void)));

//*This solves the <a href="http://rosettacode.org/wiki/Hofstadter-Conway_$10,000_sequence"> Hofstadter-Conway $10,000 sequence task from Rosetta Code</a>
main->void;
