private getRatios(iMax>=3)->begin
  local HC:=[1,1,1];
  local prev:=1;
  [3..iMax].each(i,begin
    HC|=(prev:=HC[prev]+HC[i-prev]);
    void;
  end);
  HC/[1,1..size(HC)-1];
end;
getRatios(2):=[1,1,1]/[1,1,2];
getRatios(1):=getRatios(2).head(2);
getRatios(0):=getRatios(2).head(1);

private maxBetween(i0,i1,L)->begin
  local subList:=L.tail(i0).head(i1-i0);
  local maxIdx:=argMax(subList);
  format('%17.14f @i=%7d',subList[maxIdx],i0+maxIdx);
end;

main_(powerOfTwo:int)->begin
  local ratios:=getRatios(2^powerOfTwo.toInt);
  [0..powerOfTwo-1].each(i,printf("range 2^%2d..2^%2d max. a(n)/n=%s",i,i+1,maxBetween(2^i,2^(i+1),ratios)));
  print("Mallows Number: ",[1..2^powerOfTwo].pEach(i,ratios[i]>0.55 ? i : void,max));
end;

//*This solves the task: http://rosettacode.org/wiki/Hofstadter-Conway_$10,000_sequence
main('rosetta')->main_(20);

//*As above but abridged for regression test
main->main_(17);
