private getRatios(iMax>=3)->begin
  local HC:=[1,1,1];
  [3..iMax].each(i,begin
    HC|=HC.get(  HC.get(i-1))+
        HC.get(i-HC.get(i-1));
    void;
  end);
  HC/[1,1..size(HC)-1];
end;
getRatios(k)->[0..k]*0+1;

private maxBetween(i0,i1,L)->begin
  local subList:=L.tail(i0).head(i1-i0);
  local maxIdx:=argMax(subList);
  format('%17.14f @i=%7d',subList.get(maxIdx),i0+maxIdx);
end;

//*This solves the <a href="http://rosettacode.org/wiki/Hofstadter-Conway_$10,000_sequence"> Hofstadter-Conway $10,000 sequence task from Rosetta Code</a>
main(powerOfTwo)->begin
  local ratios:=getRatios(2^powerOfTwo.toInt);
  [0..powerOfTwo-1].each(i,printf("range 2^%2d..2^%2d max. a(n)/n=%s",i,i+1,maxBetween(2^i,2^(i+1),ratios)));
  print("Mallows Number: ",[1..2^powerOfTwo].pEach(i,ratios.get(i)>0.55 ? i : void).max);
end;

//*This solves the <a href="http://rosettacode.org/wiki/Hofstadter-Conway_$10,000_sequence"> Hofstadter-Conway $10,000 sequence task from Rosetta Code</a>
main('rosetta')->main(20);

//*As above but abridged for regression test
main->main(17);
