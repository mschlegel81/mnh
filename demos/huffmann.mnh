private mergeNodes(n1,n2)->[n1%0+n2%0,[n1%1,n2%1]];

private huffman(L         )->size(L)<=1 ? codeSort(traverseBinaryTree("",L%0%1))
                                        : huffman(L,sortPerm(L%%0)%[0,1]);
private huffman(L,mergeIdx)->huffman(L%(mergeIdx%0<>[0..size(L)-1]<>mergeIdx%1) | [mergeNodes(L%(mergeIdx%0),L%(mergeIdx%1))]);

private traverseBinaryTree(codePrefix,T:string)->[[codePrefix,T]];
private traverseBinaryTree(codePrefix,T<>[])->traverseBinaryTree(codePrefix&0,T%0)|
                                              traverseBinaryTree(codePrefix&1,T%1) ;
private codeSort(L)->L%(sortPerm(each(code,L%%0,-length(code))));

private deltaIndexes(L)->0|[1..size(L)-1]%(head(L,size(L)-1)<>tail(L))|size(L);
private histogram(words)->histogram(words,deltaIndexes(words));
private histogram(words,IDX)->pEach(i,[0..size(IDX)-2],[(IDX%(i+1)-IDX%i),words%(IDX%i)]);

private charactersInFile(filename:string)->charactersInString(fileContents(filename));
private charactersInString     (s:string)->histogram(sort(copy(s,[0..length(s)-1],1)));

private escapeChar("\n")->'\\n';
private escapeChar("\r")->'\\r';
private escapeChar("\t")->'\\t';
private escapeChar(c   )->'"'&c&'"';

//*Solves the "Huffman coding" task from <a href="http://rosettacode.org/wiki/Huffman_coding">RosettaCode</a>
main(filename:string)->print('See http://rosettacode.org/wiki/Huffman_coding') and
                       print('Analyzing file: ',filename) and
                       print(" code\tchar\n "&
                             each(e,huffman(charactersInFile(filename)),&"\n "&,
                                  e%0&"\t"&escapeChar(e%1)));
//*Calls main with unixdict.txt as input
main->main((splitFileName(myPath)%"directory")&"/inputs/unixdict.txt");

main;
