jaroDistance("","")->1;
jaroDistance(A:String,B:String)->begin
  matchDistance:=max(A.length,B.length) div 2-1;
                   aChars:=A.chars;
  bMatches:=(bChars:=B.chars).each(c,false);
  aMatches:=
  aChars.each(a,
    [max(0      ,index-matchDistance  )..
     min(bChars.size-1,index+matchDistance-1)].each(k,
       bChars[k]==a AND !bMatches[k]
       ? bMatches[k]:=true
       : false
    ,OR)
  );
  (matchCount:=aMatches.trueCount)==0 ? 0 : begin
    transpositions:=trueCount(aChars[aMatches]<>bChars[bMatches]);
    (matchCount/A.length+
     matchCount/B.length+
     (matchCount-transpositions/2)/matchCount)/3;
  end;
end;

private testJaro(A,B)->printf("The Jaro distance\v of\t{$0.escape}\t\n\vand\t{$1.escape}\tis\t%{jaroDistance($0,$1)}0.5f",A,B);

@demo_for=strings, local variables/mutation
//*See http://rosettacode.org/wiki/Jaro_distance
main->testJaro(   "MARTHA",      "MARHTA") orElse
      testJaro(    "DIXON",    "DICKSONX") orElse
      testJaro("JELLYFISH",  "SMELLYFISH");
