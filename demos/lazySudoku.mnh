private rowColPerm->each(o,3*[0..2]%sortPerm(random(3)),|,o+[0..2]%sortPerm(random(3)));
private numberPerm->(1+sortPerm(random(9)))|0;
private scramble(Board)->scramble(Board,numberPerm);
private scramble(Board,V)->each(i,rowColPerm,each(j,rowColPerm,V%(Board%i%j)));
private unpack(X)->each(L,copy(replace(X,['C','B','A'],['BB','AA','99']),[0..8]*9,9),each(c,copy(L,[0..8],1),softCast(c)));
private unpack2(X)->each(L,copy(replace(X,['C','B','A'],['BB','AA','99']),[0..8]*9,9),each(c,copy(L,[0..8],1),[1..9,0]%softCast(c)));
private pack(Board)->replace(string(Board-1),["-1","[","]",",","99","AA","BB"],["9","","","","A","B","C"]);
private Riddles:=each(X,['21B3A2C8B0594A61A395B6B7A2C98A3949795091C52','A4B291C53C923091B52A7B36B920A396B79291C604','6B012BA35BA5A196A90C86B87B963294B84297C75B','A697A940B98B153A6B9247C0C105B28A6A574BA3B29','3A1C92B7208C3B7093A49654A9782C46A0B5966C','C7B7914323A6C05B39468C2A8B98047A2A6A30C','3CA7946C612B5A4A27BA0A5A0A298A9243B8A7A5A70B','A243B7A5965B680B0C1A5807A4B27A7B6C54C909','A3C8A19491BA5C73C72B905A7A16B902973A0B4581','70A963B81B2A69514C98A3A01A4B31B82A6B7A6B3C','B913A67A3A85C62A86C750B23C18C176A4B2A0','10A26A84A93B58A2C597B43B618CB7C50A692A74A','A4B2B8909796C3B2B48590A30A57A6A5CB5942A1B08','B7A0A5A3A92A7194B48A1C5B026B8B56498B903C963','CA4817BA946930954B8B6B8A97920A142C015B3C1','BA7964A10A72913C5A8B6B4A8670951A0A3C6CA2A8','C1A95A2A5901A3B293B17C6A598242A97C2A68A651B','A6B95B1396937CB5C48932BA170B5B085A7291B4A7','415A0A3A76C93B0C09871B8C4395A0B651A082C','1BA45BA0928B16C82BA3A8A04A2596B983A7C2A47A5','B3A8915B9792397B5B428CC597936C06914A3A7B26','5939801CC613B9392C47901A6A4A931C1A958B102A','B13C254C972495B3A81C89490BA58B6A71BA0A78'],unpack(X));
private randomRiddle->scramble(Riddles%floor(random*(size(Riddles)-1)));
private printSudoku(Board)->print('=========#=========#=========') and
                            print(each(i,[0..8],&"\n"&,
                                  each(j,[0..8],&, replace(" "&string(Board%i%j)&" "," 0 ","   ") & (j in [2,5] ? "|" : "")) &
                                  (i in [2,5] ? "\n---------+---------+---------":""))) and
                            print('=========#=========#=========\n');
main->print('Please give the number of riddles to generate as input');
//*Writes out <code>count</code> sudokus, derived from 23 hard coded riddles; by permutations, 14018478243840 different riddles can be created
main(count:string)->softCast(count):int ? each(i,[1..softCast(count)],printSudoku(randomRiddle)) :
                    print("The given argument '",count,"' is not an integer.");

