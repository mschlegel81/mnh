LudicSieve->begin
  local candidates:=[2..21511];
  local L:=[1];
  while(!(candidates==[]),begin
    local next:=head(candidates);
    next>candidates.size
    ? return L|candidates
    : begin
        candidates:=candidates[[0..candidates.size-1] mod next<>0];
        L|=next;
      end;
  end);
  L;
end;

//Alternative Form: a generator
@SuppressUnusedWarning
ludicGenerator->
 {begin
    local L:=[];
    local R:=[];
    return local curr:=1;
  save;
    curr+=1;
    while(R.each(k,(R[index]-=1)=0 ? begin R[index]:=L[index]; true; end : false,OR),curr+=1);
    L|=curr;
    R|=curr;
    curr;
  end}.toGenerator;


//*See http://rosettacode.org/wiki/Ludic_numbers
@demo_for=math, list construction
main->begin
  local LUDICS:=LudicSieve;
  local triplets:=[0..250].intersect(LUDICS,LUDICS-2,LUDICS-6).sort;
  print("Ludic Numbers",
      "\n  The first 25 are: ",LUDICS.head(25),'.',
      "\n  There are ",LUDICS[LUDICS<=1000].size,' lesser or equal to 1000.',
      "\n  The 2000..2005th are ",LUDICS.get([2000..2005]-1),'.',
      "\n  The triplets below 250 are ",format('(%{$0}s,%{$0+2}s,%{$0+6}s)',triplets).join(','));
end;
