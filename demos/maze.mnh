private steps(width,height,x,y)->
  [x>0        ? [[x,y],[x-1,y]] : void,
   y>0        ? [[x,y],[x,y-1]] : void,
   x<width-1  ? [[x,y],[x+1,y]] : void,
   y<height-1 ? [[x,y],[x,y+1]] : void].{$L[$L.size.random.sortPerm]};

private randomUnvisitedCell(width,height,visited)->begin
  L:=[0..width-1].cross([0..height-1]).minus(visited).toList;
  L.size=0 ? return [] :
  L[sortPerm(random(L.size))].each(p,
    [4-ord(p+[1,0] in visited)
      -ord(p-[1,0] in visited)
      -ord(p+[0,1] in visited)
      -ord(p-[0,1] in visited),p]).sort(0)[0,1];
end;

private makeMaze(width,height)->
begin
  visited:=
    (map([-1..  width],{[$i   ,-1]})|
     map([-1.. height],{[width,$j]})|
     map([width..  -1],{[$i   ,height]})|
     map([height.. -1],{[-1   ,$j]}));
  visitPairs:=[visited,visited.tail(1)|visited.head(1)].transpose.map(::sort).toSet;
  visited:=visited.toSet;

  position:=randomUnvisitedCell(width,height,visited);
  stack:=newStack;
  for step in steps(width,height,position[0],position[1]) do stack.push(step);

  while stack.size>0 do begin
    next:=stack.pop;
    next[1] in visited
    ? void
    : begin
        visitPairs||=next.sort;
        visited|=next;
        for step in steps(width,height,next[1,0],next[1,1]) do stack.push(step);
      end;
  end;

  connectionsAroundDot:={
    ['┼───','┬───','┴───','────',
     '┤   ','┐   ','┘   ','─   ',
     '├───','┌───','└───','────',
     '│   ','│   ','│   ','O   '][
    ([[$i-1,$j-1],[$i  ,$j-1]] in visitPairs ? 1 : 0) +
    ([[$i-1,$j  ],[$i  ,$j  ]] in visitPairs ? 2 : 0) +
    ([[$i  ,$j-1],[$i  ,$j  ]] in visitPairs ? 4 : 0) +
    ([[$i-1,$j-1],[$i-1,$j  ]] in visitPairs ? 8 : 0)]};
  horizontallyConnected:={[[$i-1,$j],[$i,$j]] in visitPairs};

  [0..height].each(j,
    [0..width].each(i,connectionsAroundDot (i,j),&).copy(0,width*4+1),   //wall [i,j]->[i,j-1];
    [0..width].each(i,horizontallyConnected(i,j) ? '    ' : '│   ',&)).leading;
end;

@demo_for=math/graphs
//*See http://rosettacode.org/wiki/Maze_generation
main->printf("%s",makeMaze(20,20));
