private scramble(List<>[])->List.get(sortPerm(random(size(List))));
private scramble([])->[];
private neighbors(width,height,index)->neighbors(width,height,index mod width,index div width);
private neighbors(width,height,x,y)->
  scramble([x>0        ? [x-1,y] : void,
            y>0        ? [x,y-1] : void,
            x<width-1  ? [x+1,y] : void,
            y<height-1 ? [x,y+1] : void].each(p,p.get(0)+p.get(1)*width));

private unvisitedNeighbor(width,height,currentIndex,visited)->
  neighbors(width,height,currentIndex)
  .each(next,next in visited ? void : next)
  .head;

private randomUnvisitedCell(width,height,visited)->
  head(scramble([0..width*height-1].each(i,i in visited ? void : i)));

private makeMaze(width,height)->
begin
  local visited:=[];
  local position:=randomUnvisitedCell(width,height,visited);

  while(not(position==[]),begin
    visited|=position;
    local continue:=true;
    while(continue,begin
      local next:=unvisitedNeighbor(width,height,position,visited);
      next==[] ? continue:=false : begin
        position:=next;
        visited|=next;
      end;
    end);
    position:=randomUnvisitedCell(width,height,visited);
  end);

  local visitPairs:=[0..size(visited)-2].each(i,sort(visited.get([i,i+1])));
  [0..height-1].each(j,
       [0..width-1].each(i,[i+(j-1)*width,i+j*width] in visitPairs ? "+   " : "+---",&)&"+",   //wall [i,j]->[i,j-1];
       [0..width-1].each(i,[(i-1)+j*width,i+j*width] in visitPairs ? "    " : "|   ",&)&"|")  //wall [i,j]->[i-1,j]
     |([0..width-1].each(i,"+---",&)&"+");
end;

//*See http://rosettacode.org/wiki/Maze_generation
main->printf("%s",makeMaze(20,20));
