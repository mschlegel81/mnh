@SuppressUnusedWarning=Used in printf
private monteCarloPi  (sampleSize>0)->
  rangeGenerator(1,sampleSize).chunkMap(500,(l)->trueCount(random(l.size)²+random(l.size)²<1)).agg(+)/sampleSize*4;

@SuppressUnusedWarning=Used in printf
private vanDerCorputPi(sampleSize>0)->begin
  local G2:=vanDerCorputGenerator(2);
  local G3:=vanDerCorputGenerator(3);
  rangeGenerator(1,sampleSize).chunkMap(500,(l)->trueCount(G2.head(l.size)²+G3.head(l.size)²<1)).agg(+)/sampleSize*4;
end;

vanDerCorputPi(10^6);

@demo_for=math/monte carlo
//*Solves the "Monte carlo methods" task from http://rosettacode.org/wiki/Monte_Carlo_methods
main->begin
  print('See http://rosettacode.org/wiki/Monte_Carlo_methods') and
  local sampleSizes:=10^[1..6];
  local vanDerCorput:=future({sampleSizes.pMap(::vanDerCorputPi)});
  local monteCarlo  :=sampleSizes.map(::monteCarloPi);

  printf("n=%7d pi approximated as %-9.7g (random) and as %-9.7g (Van der Corput generator)",
          sampleSizes,
          monteCarlo,
          vanDerCorput());
end;
