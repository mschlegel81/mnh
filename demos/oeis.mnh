USE ludic,                //for A003309
    pernicousNumbers,     //for A052294
    semiprime,            //for A001358
    sequenceOfNonSquares, //for A000037
    smithNumbers,         //for A006753
    thueMorseSequence,    //for A010060
    truncatablePrimes,    //for A024785, A024770
    hofstadter_sequences; //for A005228, A030124, A005206, A005374, A005378, A005379, A005185

//for A000002:------------------------------------------------
private listOf(value,count=0)->[];
private listOf(value,count>=1)->[1..count].each(i,value);
private Kolakoski_1_2(len)->begin
  local K:=[1,2];
  while(K.size<len,
    K:=K.pEach(runLength,
               listOf((index and 1)+1,runLength),|));
  K.head(len);
end;

//for A000010:------------------------------------------------
private EulerPhi(n>1)->factorize(n).elementFrequency.each(p,p[0]^(p[1]-1)*(p[0]-1),*);
private EulerPhi(1)->1;

//for A000213, A000288, A000032, A000032, A000045, A000073----
private generalizedFibonacci(state:intList)->{begin
  local L:=state;
save;
  local result:=L[0];
  L:=L.tail|L.agg(+);
  result<0 ? void : result;
end};

private Lucas     ->generalizedFibonacci([2,1]);
private Fibonacci ->generalizedFibonacci([1,1]);
private Tribonacci->generalizedFibonacci([0,1,1]);

//for A000108:-------------------------------------------------
private Catalan(n<=1)->1;
private Catalan(n> 1)->(n+[2..n]).agg(*) div [2..n].agg(*);

//for A025426:-------------------------------------------------
private by2Squares(n>0)->begin
  local S:=[1..n.sqrt.floor]^2;
  (n-S).intersect(S).filter({n-$s<=$s}).map({round(sqrt(n-$s))&'^2+'&round(sqrt($s))&'^2'});
end;
private by2Squares(n=0):=[];

//for A061358:-------------------------------------------------
private by2Primes(n:int)->begin
  local S:=primes(n);
  (n-S).intersect(S).filter({n-$s<=$s}).map({(n-$s)&'+'&$s});
end;

//for A000124:-------------------------------------------------
private LazyCaterer(n)->(n+n^2+2) div 2;

//for A000203:-------------------------------------------------
private DivisorFunction(1)->1;
private DivisorFunction(n:int)->factorize(n).subSets.map({$0.agg(*) orElse 1}).agg(+);

//for A003459:-------------------------------------------------
private decimalFromDigits(d:intList)->(d*10^[0..d.size-1]).agg(+);
private isPermutablePrime(p:int)->(p.digits).permutations.each(d,d.decimalFromDigits.factorize.size=1,AND);

//-------------------------------------------------------------
A000002(len      )->Kolakoski_1_2(len);
A000010(len      )->[1..len].pMap(::EulerPhi);
A000027(len      )->[1..len];
A000032(len<=91  )->Lucas.head(len);
A000037(len      )->nonSquares([1..len]);
A000040(len      )->primeGenerator.head(len);
A000045(len<=92  )->0|(Fibonacci .head(len-1));
A000073(len<=74  )->0|(Tribonacci.head(len-1));
A000108(len<=14  )->[0..len-1].pMap(::Catalan);
A000124(len      )->LazyCaterer([0..len-1]);
A000203(len      )->[1..len].pMap(::DivisorFunction);
A001358(len      )->rangeGenerator(1,2^60).filter(::isSemiprime).head(len);
A003459(len      )->primeGenerator.filter(::isPermutablePrime).head(len);
A025426(len      )->[0..len-1].pMap(::by2Squares).pMap(::size);
A061358(len      )->[0..len-1].pMap(::by2Primes).pMap(::size);
A000213(len<=74  )->generalizedFibonacci([1,1,1]).map({$0}).head(len);
A000288(len<=69  )->generalizedFibonacci([1,1,1,1]).map({$0}).head(len);
A003309(len<=2005)->LudicSieve.head(len);
A052294(len      )->rangeGenerator(1,2^60).filter(::isPernicious ).head(len);
A006753(len      )->rangeGenerator(1,2^60).filter(::isSmithNumber).head(len);
A010060(len      )->thueMorseSequence(len).ord;
A024785(len      )->leftTruncatablePrimes (100000).head(len);
A024770(len      )->rightTruncatablePrimes(100000).head(len);
A005228(len      )->[1..len  ].map(::hofstadter_sequences.R);
A030124(len      )->[1..len  ].map(::hofstadter_sequences.S);
A005206(len      )->[0..len-1].map(::hofstadter_sequences.G);
A005374(len      )->[0..len-1].map(::hofstadter_sequences.H);
A005378(len      )->[0..len-1].map(::hofstadter_sequences.F);
A005379(len      )->[0..len-1].map(::hofstadter_sequences.M);
A005185(len      )->[1..len  ].map(::hofstadter_sequences.Q);
A007947(len      )->[1..len  ].pMap({$n.factorize.unique.agg(*)});

queryOEISInfo(id:string)->begin
  local data:=httpGet('https://oeis.org/search?q=id:'&id&'&fmt=text')
              .split("\n")
              .filter({$line.matches('^%[N|S|T|U]')})
              .map({[$line.copy(1,1),$line.copy(11,1000)]});
  local name:=data['N'] orElse '';
  local seq :=clean(data['S'] & data['T'] & data['U'] orElse '',['0'..'9',','],'').split(',').softCast;
  seq:=seq.head(seq.map(::isInt).not.indexOf[0] orElse seq.size);
  [['name',name],
   ['seq',seq]].toMap;
end;

type SequenceMeta(l:list(4))->l[0].isString AND
                              l[0].length=7 AND
                              l[1].isExpression(1) AND
                              l[2].isInt AND
                              l[2]>10 AND
                              l[3].isString;
//*Meta information on Sequences: [id, functionPointer, maxParameterValue, name]
SequenceTable:=begin
  local XX:=2^60;
  [['A000002',::A000002,  XX,"Kolakoski sequence: a(n) is length of n-th run; a(1) = 1; sequence consists just of 1's and 2's."],
   ['A000010',::A000010,  XX,'Euler totient function phi(n): count numbers <= n and prime to n.'],
   ['A000027',::A000027,  XX,'The positive integers. Also called the natural numbers, the whole numbers or the counting numbers, but these terms are ambiguous.'],
   ['A000032',::A000032,  91,'Lucas numbers (beginning at 2): L(n) = L(n-1) + L(n-2). (Cf. A000204.)'],
   ['A000037',::A000037,  XX,'Numbers that are not squares (or, the nonsquares).'],
   ['A000040',::A000040,  XX,'The prime numbers.'],
   ['A000045',::A000045,  92,'Fibonacci numbers: F(n) = F(n-1) + F(n-2) with F(0) = 0 and F(1) = 1.'],
   ['A000073',::A000073,  74,'Tribonacci numbers: a(n) = a(n-1) + a(n-2) + a(n-3) with a(0)=a(1)=0, a(2)=1.'],
   ['A000108',::A000108,  14,'Catalan numbers: C(n) = binomial(2n,n)/(n+1) = (2n)!/(n!(n+1)!). Also called Segner numbers.'],
   ['A000124',::A000124,  XX,"Central polygonal numbers (the Lazy Caterer's sequence): n(n+1)/2 + 1; or, maximal number of pieces formed when slicing a pancake with n cuts."],
   ['A000203',::A000203,  XX,'a(n) = sigma(n), the sum of the divisors of n. Also called sigma_1(n).'],
   ['A000213',::A000213,  74,'Tribonacci numbers: a(n) = a(n-1) + a(n-2) + a(n-3) with a(0)=a(1)=a(2)=1.'],
   ['A000288',::A000288,  69,'Tetranacci numbers: a(n) = a(n-1) + a(n-2) + a(n-3) + a(n-4) with a(0)=a(1)=a(2)=a(3)=1.'],
   ['A001358',::A001358,  XX,'Semiprimes (or biprimes): products of two primes.'],
   ['A003309',::A003309,2005,'Ludic numbers: apply the same sieve as Eratosthenes, but cross off every k-th /remaining/ number.'],
   ['A003459',::A003459,  22,'Absolute primes: every permutation of digits is a prime.'],
   ['A005185',::A005185,1000,'Hofstadter Q-sequence: a(1) = a(2) = 1; a(n) = a(n-a(n-1)) + a(n-a(n-2)) for n > 2.'],
   ['A005206',::A005206,1000,'Hofstadter G-sequence: a(n)=n-a(a(n-1)).'],
   ['A005228',::A005228,1000,'Sequence and first differences (A030124) together list all positive numbers exactly once.'],
   ['A005374',::A005374,1000,'Hofstadter H-sequence: a(n)=n-a(a(a(n-1))).'],
   ['A005378',::A005378,1000,'The female of a pair of recurrences.'],
   ['A005379',::A005379,1000,'The male of a pair of recurrences.'],
   ['A006753',::A006753,  XX,'Smith (or joke) numbers: composite numbers n such that sum of digits of n = sum of digits of prime factors of n (counted with multiplicity).'],
   ['A007947',::A007947,  XX,'Largest squarefree number dividing n: the squarefree kernel of n, rad(n), radical of n.'],
   ['A010060',::A010060,  XX,"Thue-Morse sequence: let A_k denote the first 2^k terms; then A_0 = 0 and for k >= 0, A_{k+1} = A_k B_k, where B_k is obtained from A_k by interchanging 0's and 1's."],
   ['A024770',::A024770,10^8,'Right-truncatable primes: every prefix is prime.'],
   ['A024785',::A024785,10^8,'Left-truncatable primes: every suffix is prime and no digits are zero.'],
   ['A025426',::A025426,  XX,'Number of partitions of n into 2 nonzero squares.'],
   ['A030124',::A030124,1000,"Complement (and also first differences) of Hofstadter's sequence A005228."],
   ['A052294',::A052294,  XX,"Pernicious numbers: numbers with a prime number of 1's in their binary expansion."],
   ['A061358',::A061358,  XX,'Number of ways of writing n = p+q with p, q primes and p >= q.']];
end;

testSequence(meta:SequenceMeta)->begin
  local queried:=queryOEISInfo(meta[0])['seq'];
  local nMax:=min(queried.size,meta[2]);
  queried:=queried.head(nMax);
  local computed:=meta[1](nMax);
  queried==computed
  ? print('Sequence ',meta[0],' is okay')
  : print('Sequence ',meta[0]," is not okay\n  queried : ",queried,
                                          "\n  computed: ",computed);
end;

obtainData(id:string)->obtainData(id,100);
obtainData(id:string,n:int)->begin
  SequenceTable.each(meta,
    meta[0]==id
    ? [['id'  ,id],
       ['name',meta[3]],
       ['seq' ,meta[1](min(n,meta[2]))]].toMap
    : void,head)
  orElse begin
    local queried:=queryOEISInfo(id);
    queried<<['id',id];
    queried;
  end;
end;

//*Validate all sequences
main('validate')->SequenceTable.pMap(::testSequence);

//*Show info on given sequence, trying to generate nMax values
main(id,nMax)->begin
  local n:=nMax.toInt;
  n<=0 ? fail('nMax must be greater than zero')
       : void;
  id.matches('^A\d{6}$')
  ? void
  : fail('id "',id,'" is not an OEIS sequence id');
  local data:=obtainData(id,n);
    print('ID    : ',id,
        "\nName  : ",data['name'],
        "\nValues: ",data['seq']);
end;
