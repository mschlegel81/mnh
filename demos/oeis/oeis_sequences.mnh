//for A000002:------------------------------------------------
private listOf(value,count=0)->[];
private listOf(value,count>=1)->[1..count].each(i,value);
private Kolakoski_1_2(len)->begin
  local K:=[1,2];
  while(K.size<len,
    K:=K.pEach(runLength,
               listOf((index and 1)+1,runLength),|));
  K.head(len);
end;
@SuppressUnusedWarning=all
A000002->listIterator(Kolakoski_1_2(10000));
A000005->rangeGenerator(1).lazyMap({$n<=1 ? 1 : factorize($n).subSets.map({$x.agg(*)}).size+1});
A000006->primeGenerator.sqrt.floor;
A000007->ord(rangeGenerator(0)=0);
//for A000010:------------------------------------------------
private EulerPhi(n>1)->factorize(n).elementFrequency.each(p,p[0]^(p[1]-1)*(p[0]-1),*);
private EulerPhi(1)->1;
A000010->rangeGenerator(1).lazyMap(::EulerPhi);
//-------------------------------------------------------------
A000027->rangeGenerator(1);

A000040->primeGenerator;

//for A000108:-------------------------------------------------
private Catalan(n<=1)->1;
private Catalan(n> 1)->(n+[2..n]).agg(*) div [2..n].agg(*);
A000108->rangeGenerator(0).lazyMap(::Catalan);

//for A025426:-------------------------------------------------
private by2Squares(n>0)->begin
  local S:=[1..n.sqrt.floor]^2;
  (n-S).intersect(S).filter({n-$s<=$s}).map({round(sqrt(n-$s))&'^2+'&round(sqrt($s))&'^2'});
end;
private by2Squares(n=0):=[];

//for A061358:-------------------------------------------------
private by2Primes(n:Int)->begin
  local S:=primes(n);
  (n-S).intersect(S).filter({n-$s<=$s}).map({(n-$s)&'+'&$s});
end;


//for A000203:-------------------------------------------------
private DivisorFunction(1)->1;
private DivisorFunction(n:Int)->factorize(n).subSets.map({$0.agg(*) orElse 1}).agg(+);
A000203->rangeGenerator(1).lazyMap(::DivisorFunction);

//for A003459:-------------------------------------------------
private isPermutablePrime(p:Int)->(p.digits).permutations.each(d,d.composeDigits.factorize.size=1,AND);
A003459->listIterator(primes(991)).filter(::isPermutablePrime);
//-------------------------------------------------------------
USE generators,
    '..\ludic.mnh',
    '..\sequenceOfNonSquares.mnh',
    '..\hofstadter_sequences.mnh',
    '..\countTheCoins.mnh',
    '..\semiprime.mnh';

A000124->rangeGenerator(0).lazyMap({($n+$n^2+2) div 2});
A025426->rangeGenerator(0).lazyMap({size(by2Squares($i))});
A061358->rangeGenerator(0).lazyMap({size(by2Primes($i))});
USE '..\pernicousNumbers.mnh';
A052294->rangeGenerator(1).filter(::isPernicious);
USE '..\smithNumbers.mnh';
A006753->rangeGenerator(1).filter(::isSmithNumber);
USE '..\thueMorseSequence.mnh';
A010060->listIterator(thueMorseSequence(10000).ord);
USE '..\truncatablePrimes.mnh';
A024785->listIterator(leftTruncatablePrimes (1000000));
A024770->listIterator(rightTruncatablePrimes(1000000));
A020994->listIterator(leftTruncatablePrimes (1000000).intersect(rightTruncatablePrimes(1000000)).sort);
A007947->rangeGenerator(1).lazyMap({$n.factorize.unique.agg(*)});


USE '..\vampire.mnh';
A014575->rangeGenerator(1260).filter(::isVampire);

@class=by Hamming weight
A018900->rangeGenerator(0).filter({$x.hammingWeight=2});
@class=by Hamming weight
A014311->rangeGenerator(0).filter({$x.hammingWeight=3});
@class=by Hamming weight
A014312->rangeGenerator(0).filter({$x.hammingWeight=4});
@class=by Hamming weight
A014313->rangeGenerator(0).filter({$x.hammingWeight=5});
@class=by Hamming weight
A023688->rangeGenerator(0).filter({$x.hammingWeight=6});
@class=by Hamming weight
A023689->rangeGenerator(0).filter({$x.hammingWeight=7});
@class=by Hamming weight
A023690->rangeGenerator(0).filter({$x.hammingWeight=8});
@class=by Hamming weight
A023691->rangeGenerator(0).filter({$x.hammingWeight=9});

USE '..\multifactorial.mnh';
@class=Multifactorial
A000142->multifactorialGenerator(1);
@class=Multifactorial
A006882->multifactorialGenerator(2);
@class=Multifactorial
A007661->multifactorialGenerator(3);
@class=Multifactorial
A007662->multifactorialGenerator(4);
@class=Multifactorial
A085157->multifactorialGenerator(5);
@class=Multifactorial
A085158->multifactorialGenerator(6);
@class=Multifactorial
A114799->multifactorialGenerator(7);
@class=Multifactorial
A114800->multifactorialGenerator(8);
@class=Multifactorial
A114806->multifactorialGenerator(9);
@class=Multifactorial
A288327->multifactorialGenerator(10);

USE '..\pascal.mnh';
@class=Pascal triangle row
A010926->pascalTriangleRow(10).listIterator;
@class=Pascal triangle row
A010927->pascalTriangleRow(11).listIterator;
@class=Pascal triangle row
A010928->pascalTriangleRow(12).listIterator;
@class=Pascal triangle row
A010929->pascalTriangleRow(13).listIterator;
@class=Pascal triangle row
A010930->pascalTriangleRow(14).listIterator;
@class=Pascal triangle row
A010931->pascalTriangleRow(15).listIterator;
@class=Pascal triangle row
A010932->pascalTriangleRow(16).listIterator;
@class=Pascal triangle row
A010933->pascalTriangleRow(17).listIterator;
@class=Pascal triangle row
A010934->pascalTriangleRow(18).listIterator;
@class=Pascal triangle row
A010935->pascalTriangleRow(19).listIterator;
@class=Pascal triangle row
A010936->pascalTriangleRow(20).listIterator;
@class=Pascal triangle row
A010937->pascalTriangleRow(21).listIterator;
@class=Pascal triangle row
A010938->pascalTriangleRow(22).listIterator;
@class=Pascal triangle row
A010939->pascalTriangleRow(23).listIterator;
@class=Pascal triangle row
A010940->pascalTriangleRow(24).listIterator;
@class=Pascal triangle row
A010941->pascalTriangleRow(25).listIterator;
@class=Pascal triangle row
A010942->pascalTriangleRow(26).listIterator;
@class=Pascal triangle row
A010943->pascalTriangleRow(27).listIterator;
@class=Pascal triangle row
A010944->pascalTriangleRow(28).listIterator;
@class=Pascal triangle row
A010945->pascalTriangleRow(29).listIterator;
@class=Pascal triangle row
A010946->pascalTriangleRow(30).listIterator;

USE '..\perfectPowers.mnh';
A001597->perfectPowers(10^6).listIterator;

USE '..\sternBrocot.mnh';
A002487->sternBrocotGenerator;

USE '..\hofstadterConway.mnh';
A004001->hofstaderConwayGen;

USE '..\hamming.mnh';
A051037->hammingGenerator;

USE '..\harshad.mnh';
A005349->rangeGenerator(1).filter(::isHarshadNumber);

USE '..\kaprekar.mnh';
A006886->rangeGenerator(1).filter(::isKaprekar);

USE '../recaman.mnh';
A005132->recamanGenerator;

scanFiboMod(stepsBack in [2..5],modulus>=1)->begin
  local fiboMod:={$state.tail|($state.agg(+) mod modulus)};
  local openStates:=cross([0..modulus-1],[0..modulus-1],
                          stepsBack>=3 ? [0..modulus-1] : void,
                          stepsBack>=4 ? [0..modulus-1] : void,
                          stepsBack>=5 ? [0..modulus-1] : void).toSet;
  local groupCount:=0;
  while(openStates.size>0,begin
    openStates>>(local s:=openStates.min);
    while((s:=fiboMod(s)) in openStates,openStates>>s);
    groupCount+=1;
  end);
  groupCount;
end;

@class=Fibonacci sequence modulo
A015134->rangeGenerator(1).lazyMap({scanFiboMod(2,$n)});
@class=Fibonacci sequence modulo
A106285->rangeGenerator(1).lazyMap({scanFiboMod(3,$n)});
@class=Fibonacci sequence modulo
A106286->rangeGenerator(1).lazyMap({scanFiboMod(4,$n)});
@class=Fibonacci sequence modulo
A106287->rangeGenerator(1).lazyMap({scanFiboMod(5,$n)});

private coprimesLesser(n)->begin
  local result:=[2..n-1];
  factorize(n).unique.each(factor,
    result:=result[result mod factor!=0]);
  result;
end;

private curry isKnoedel(n,m)->!isPrime(m) AND coprimesLesser(m).pEach(i,powMod(i,m-n,m)=1,AND);

@class=Knödel
A002997->rangeGenerator( 2,2^60).filter(isKnoedel(1));
@class=Knödel
A050990->rangeGenerator( 3,2^60).filter(isKnoedel(2));
@class=Knödel
A033553->rangeGenerator( 4,2^60).filter(isKnoedel(3));
@class=Knödel
A050992->rangeGenerator( 5,2^60).filter(isKnoedel(4));
@class=Knödel
A050993->rangeGenerator( 6,2^60).filter(isKnoedel(5));
@class=Knödel
A208154->rangeGenerator( 7,2^60).filter(isKnoedel(6));
@class=Knödel
A208155->rangeGenerator( 8,2^60).filter(isKnoedel(7));
@class=Knödel
A208156->rangeGenerator( 9,2^60).filter(isKnoedel(8));
@class=Knödel
A208157->rangeGenerator(10,2^60).filter(isKnoedel(9));
@class=Knödel
A208158->rangeGenerator(11,2^60).filter(isKnoedel(10));
@class=Knödel
A225506->rangeGenerator(2,2^60).filter(isKnoedel(-2));
@class=Knödel
A225507->rangeGenerator(2,2^60).filter(isKnoedel(-3));
@class=Knödel
A225508->rangeGenerator(2,2^60).filter(isKnoedel(-4));
@class=Knödel
A225509->rangeGenerator(2,2^60).filter(isKnoedel(-5));
@class=Knödel
A225514->rangeGenerator(2,2^60).filter(isKnoedel(-10));

USE strongPseudoprimes;
@class=strongPseudoprime
A001262->strongPseudoprimeGenerator(2);
@class=strongPseudoprime
A020229->strongPseudoprimeGenerator(3);
@class=strongPseudoprime
A020230->strongPseudoprimeGenerator(4);
@class=strongPseudoprime
A020231->strongPseudoprimeGenerator(5);
@class=strongPseudoprime
A020232->strongPseudoprimeGenerator(6);
@class=strongPseudoprime
A020233->strongPseudoprimeGenerator(7);
@class=strongPseudoprime
A020234->strongPseudoprimeGenerator(8);
@class=strongPseudoprime
A020235->strongPseudoprimeGenerator(9);
@class=strongPseudoprime
A020236->strongPseudoprimeGenerator(10);
@class=strongPseudoprime
A020237->strongPseudoprimeGenerator(11);
@class=strongPseudoprime
A020238->strongPseudoprimeGenerator(12);
@class=strongPseudoprime
A020239->strongPseudoprimeGenerator(13);
@class=strongPseudoprime
A020240->strongPseudoprimeGenerator(14);
@class=strongPseudoprime
A020241->strongPseudoprimeGenerator(15);
@class=strongPseudoprime
A020242->strongPseudoprimeGenerator(16);
@class=strongPseudoprime
A020243->strongPseudoprimeGenerator(17);
@class=strongPseudoprime
A020244->strongPseudoprimeGenerator(18);
@class=strongPseudoprime
A020245->strongPseudoprimeGenerator(19);
@class=strongPseudoprime
A020246->strongPseudoprimeGenerator(20);
@class=strongPseudoprime
A020247->strongPseudoprimeGenerator(21);
@class=strongPseudoprime
A020248->strongPseudoprimeGenerator(22);
@class=strongPseudoprime
A020249->strongPseudoprimeGenerator(23);
@class=strongPseudoprime
A020250->strongPseudoprimeGenerator(24);
@class=strongPseudoprime
A020251->strongPseudoprimeGenerator(25);
@class=strongPseudoprime
A020252->strongPseudoprimeGenerator(26);
@class=strongPseudoprime
A020253->strongPseudoprimeGenerator(27);
@class=strongPseudoprime
A020254->strongPseudoprimeGenerator(28);
@class=strongPseudoprime
A020255->strongPseudoprimeGenerator(29);
@class=strongPseudoprime
A020256->strongPseudoprimeGenerator(30);
@class=strongPseudoprime
A020257->strongPseudoprimeGenerator(31);
@class=strongPseudoprime
A020258->strongPseudoprimeGenerator(32);
@class=strongPseudoprime
A020259->strongPseudoprimeGenerator(33);
@class=strongPseudoprime
A020260->strongPseudoprimeGenerator(34);
@class=strongPseudoprime
A020261->strongPseudoprimeGenerator(35);
@class=strongPseudoprime
A020262->strongPseudoprimeGenerator(36);
@class=strongPseudoprime
A020263->strongPseudoprimeGenerator(37);
@class=strongPseudoprime
A020264->strongPseudoprimeGenerator(38);
@class=strongPseudoprime
A020265->strongPseudoprimeGenerator(39);
@class=strongPseudoprime
A020266->strongPseudoprimeGenerator(40);
@class=strongPseudoprime
A020267->strongPseudoprimeGenerator(41);
@class=strongPseudoprime
A020268->strongPseudoprimeGenerator(42);
@class=strongPseudoprime
A020269->strongPseudoprimeGenerator(43);
@class=strongPseudoprime
A020270->strongPseudoprimeGenerator(44);
@class=strongPseudoprime
A020271->strongPseudoprimeGenerator(45);
@class=strongPseudoprime
A020272->strongPseudoprimeGenerator(46);
@class=strongPseudoprime
A020273->strongPseudoprimeGenerator(47);
@class=strongPseudoprime
A020274->strongPseudoprimeGenerator(48);
@class=strongPseudoprime
A020275->strongPseudoprimeGenerator(49);
@class=strongPseudoprime
A020276->strongPseudoprimeGenerator(50);
@class=strongPseudoprime
A020277->strongPseudoprimeGenerator(51);
@class=strongPseudoprime
A020278->strongPseudoprimeGenerator(52);
@class=strongPseudoprime
A020279->strongPseudoprimeGenerator(53);
@class=strongPseudoprime
A020280->strongPseudoprimeGenerator(54);
@class=strongPseudoprime
A020281->strongPseudoprimeGenerator(55);
@class=strongPseudoprime
A020282->strongPseudoprimeGenerator(56);
@class=strongPseudoprime
A020283->strongPseudoprimeGenerator(57);
@class=strongPseudoprime
A020284->strongPseudoprimeGenerator(58);
@class=strongPseudoprime
A020285->strongPseudoprimeGenerator(59);
@class=strongPseudoprime
A020286->strongPseudoprimeGenerator(60);
@class=strongPseudoprime
A020287->strongPseudoprimeGenerator(61);
@class=strongPseudoprime
A020288->strongPseudoprimeGenerator(62);
@class=strongPseudoprime
A020289->strongPseudoprimeGenerator(63);
@class=strongPseudoprime
A020290->strongPseudoprimeGenerator(64);
@class=strongPseudoprime
A020291->strongPseudoprimeGenerator(65);
@class=strongPseudoprime
A020292->strongPseudoprimeGenerator(66);
@class=strongPseudoprime
A020293->strongPseudoprimeGenerator(67);
@class=strongPseudoprime
A020294->strongPseudoprimeGenerator(68);
@class=strongPseudoprime
A020295->strongPseudoprimeGenerator(69);
@class=strongPseudoprime
A020296->strongPseudoprimeGenerator(70);
@class=strongPseudoprime
A020297->strongPseudoprimeGenerator(71);
@class=strongPseudoprime
A020298->strongPseudoprimeGenerator(72);
@class=strongPseudoprime
A020299->strongPseudoprimeGenerator(73);
@class=strongPseudoprime
A020300->strongPseudoprimeGenerator(74);
@class=strongPseudoprime
A020301->strongPseudoprimeGenerator(75);
@class=strongPseudoprime
A020302->strongPseudoprimeGenerator(76);
@class=strongPseudoprime
A020303->strongPseudoprimeGenerator(77);
@class=strongPseudoprime
A020304->strongPseudoprimeGenerator(78);
@class=strongPseudoprime
A020305->strongPseudoprimeGenerator(79);
@class=strongPseudoprime
A020306->strongPseudoprimeGenerator(80);
@class=strongPseudoprime
A020307->strongPseudoprimeGenerator(81);
@class=strongPseudoprime
A020308->strongPseudoprimeGenerator(82);
@class=strongPseudoprime
A020309->strongPseudoprimeGenerator(83);
@class=strongPseudoprime
A020310->strongPseudoprimeGenerator(84);
@class=strongPseudoprime
A020311->strongPseudoprimeGenerator(85);
@class=strongPseudoprime
A020312->strongPseudoprimeGenerator(86);
@class=strongPseudoprime
A020313->strongPseudoprimeGenerator(87);
@class=strongPseudoprime
A020314->strongPseudoprimeGenerator(88);
@class=strongPseudoprime
A020315->strongPseudoprimeGenerator(89);
@class=strongPseudoprime
A020316->strongPseudoprimeGenerator(90);
@class=strongPseudoprime
A020317->strongPseudoprimeGenerator(91);
@class=strongPseudoprime
A020318->strongPseudoprimeGenerator(92);
@class=strongPseudoprime
A020319->strongPseudoprimeGenerator(93);
@class=strongPseudoprime
A020320->strongPseudoprimeGenerator(94);
@class=strongPseudoprime
A020321->strongPseudoprimeGenerator(95);
@class=strongPseudoprime
A020322->strongPseudoprimeGenerator(96);
@class=strongPseudoprime
A020323->strongPseudoprimeGenerator(97);
@class=strongPseudoprime
A020324->strongPseudoprimeGenerator(98);
@class=strongPseudoprime
A020325->strongPseudoprimeGenerator(99);
@class=strongPseudoprime
A020326->strongPseudoprimeGenerator(100);

private aliquotSequenceGenerator(startValue)->{begin
  local i:=startValue;
save;
  local r:=i;
  i:=i<=1
     ? 0
     : i.factorize.subSets.pEach(s,s.agg(*) orElse 1,+)-i;
  r;
end}.toGenerator;

@class=Aliquot
A008885->aliquotSequenceGenerator(30);
@class=Aliquot
A008886->aliquotSequenceGenerator(42);
@class=Aliquot
A008887->aliquotSequenceGenerator(60);
@class=Aliquot
A008888->aliquotSequenceGenerator(138);
@class=Aliquot
A008889->aliquotSequenceGenerator(150);
@class=Aliquot
A008890->aliquotSequenceGenerator(168);
@class=Aliquot
A008891->aliquotSequenceGenerator(180);
@class=Aliquot
A008892->aliquotSequenceGenerator(276);
@class=Aliquot
A014360->aliquotSequenceGenerator(552);
@class=Aliquot
A014361->aliquotSequenceGenerator(564);
@class=Aliquot
A014362->aliquotSequenceGenerator(660);
@class=Aliquot
A014363->aliquotSequenceGenerator(966);
@class=Aliquot
A014364->aliquotSequenceGenerator(1074);
@class=Aliquot
A014365->aliquotSequenceGenerator(1134);
@class=Aliquot
A045477->aliquotSequenceGenerator(840);
@class=Aliquot
A074906->aliquotSequenceGenerator(1521);
@class=Aliquot
A074907->aliquotSequenceGenerator(570);
@class=Aliquot
A143090->aliquotSequenceGenerator(12);
@class=Aliquot
A143645->aliquotSequenceGenerator(24);
@class=Aliquot
A143721->aliquotSequenceGenerator(38);
@class=Aliquot
A143722->aliquotSequenceGenerator(48);
@class=Aliquot
A143723->aliquotSequenceGenerator(52);
@class=Aliquot
A143733->aliquotSequenceGenerator(62);
@class=Aliquot
A143737->aliquotSequenceGenerator(68);
@class=Aliquot
A143741->aliquotSequenceGenerator(72);
@class=Aliquot
A143754->aliquotSequenceGenerator(75);
@class=Aliquot
A143755->aliquotSequenceGenerator(80);
@class=Aliquot
A143756->aliquotSequenceGenerator(81);
@class=Aliquot
A143757->aliquotSequenceGenerator(82);
@class=Aliquot
A143758->aliquotSequenceGenerator(84);
@class=Aliquot
A143759->aliquotSequenceGenerator(86);
@class=Aliquot
A143767->aliquotSequenceGenerator(87);
@class=Aliquot
A143846->aliquotSequenceGenerator(88);
@class=Aliquot
A143847->aliquotSequenceGenerator(96);
@class=Aliquot
A143919->aliquotSequenceGenerator(100);
@class=Aliquot
A143930->aliquotSequenceGenerator(3630);
@class=Aliquot
A171103->aliquotSequenceGenerator(46758);
@class=Aliquot
A203777->aliquotSequenceGenerator(220);
@class=Aliquot
A269542->aliquotSequenceGenerator(702);

collatzGenerator(startValue:Int)->{begin
  local i:=startValue;
save;
  local r:=i;
  i:=(i and 1)=1
     ? 3*i+1
     : i div 2;
  r;
end}.toIteratableExpression;


@class=Collatz
A008873->collatzGenerator(97);
@class=Collatz
A008874->collatzGenerator(63);
@class=Collatz
A008875->collatzGenerator(95);
@class=Collatz
A008876->collatzGenerator(81);
@class=Collatz
A008877->collatzGenerator(57);
@class=Collatz
A008878->collatzGenerator(39);
@class=Collatz
A008879->collatzGenerator(87);
@class=Collatz
A008880->collatzGenerator(33);
@class=Collatz
A008882->collatzGenerator(99);
@class=Collatz
A008883->collatzGenerator(51);
@class=Collatz
A008884->collatzGenerator(27);
@class=Collatz
A033478->collatzGenerator(3);
@class=Collatz
A033479->collatzGenerator(9);
@class=Collatz
A033481->collatzGenerator(21);

@SuppressUnusedWarning
USE '..\happyNumbers.mnh',inspectionUtil;
memoized implemented->
  allRules.each(rule,begin
    local attributes:=rule.ruleAttributes;
    local id:=attributes['OEIS'] orElse rule[0]; //use ruleId as fallback to annotation
    id.isString AND id.matches('^A\d{6}$')
    ? [id.copy(1,6).softCast,
       [rule.getFunction,
       attributes['class'] orElse 'custom implementation']]
    : void;
  end).toMap;

private findPolyParam(sequence:IntList)->sequence.size<6 ? void : begin
  local c:=sequence[0];
  local a:=(sequence[2]-sequence[0]) div 2-sequence[1]+sequence[0];
  local b:=sequence[1]-c-a;
  local n:=[0..sequence.size-1];
  a*n^2+b*n+c==sequence
  ? [format('rangeGenerator(0).lazyMap(\{%s%s%s\})',
             a=0 ? '' : a&'*$x^2+',
             b=0 ? '' : b&'*$x+',
             c),'polynomial']
  : void;
end;

generalizedFibonacci(state:IntList)->{begin
  local L:=state;
save;
  local result:=L[0];
  L:=L.tail|L.agg(+);
  result<0 ? void : result;
end};

private findFibonacciParam(sequence:IntList)->sequence.size<4 ? void : begin
  [2..min(16,sequence.size div 2)].each(k,
    generalizedFibonacci(sequence.head(k)).head(sequence.size)==sequence
    ? [format('generalizedFibonacci(%s)',sequence.head(k).toString),'generalized Fibonacci sequence']
    : void,head);
end;

private findPowerParam(sequence:IntList)->sequence.size<10 ? void : begin
  //zero based index
  local base:=(ln(sequence)/ln([0..sequence.size-1])).filter({!isNan($x) AND !isInfinite($x)});
  base:=(base.agg(+)/base.size);
  sequence==          round([0..sequence.size-1]^base)
  ? return [format(sequence==[0..sequence.size-1]^round(base)
           ?       'rangeGenerator(0)^%{round($0)}s'
           : 'round(rangeGenerator(0)^%s)',base),'power series']
  : void;

  //one based index
  base:=(ln(sequence)/ln([1..sequence.size])).filter({!isNan($x) AND !isInfinite($x)});
  base:=(base.agg(+)/base.size);
  sequence==          round([1..sequence.size]^base)
  ? return [format(sequence==[1..sequence.size]^round(base)
           ?       'rangeGenerator(1)^%{round($1)}s'
           : 'round(rangeGenerator(1)^%s)',base),'power series']
  : void;

  //zero based index
  base:=(ln(sequence)/[0..sequence.size-1]).filter({!isNan($x) AND !isInfinite($x)});
  base:=base.exp.sort[base.size div 2];

  sequence==                round(base^ [0..sequence.size-1])
  ? return [format(sequence==round(base)^[0..sequence.size-1]
           ? '%{round($0)}s^rangeGenerator(0)'
           : 'round(%s^rangeGenerator(0))',base),'exponential series']
  : void;

  //one based index
  base:=(ln(sequence)/[1..sequence.size]).filter({!isNan($x) AND !isInfinite($x)});
  base:=base.exp.sort[base.size div 2];

  sequence==                round(base^ [1..sequence.size])
  ? return [format(sequence==round(base)^[1..sequence.size-1]
           ? '%{round($0)}s^rangeGenerator(1)'
           : 'round(%s^rangeGenerator(1))',base),'exponential series']
  : void;
end;

findPeriodicParam(L:IntList)->L.size<10 ? void :
  indexOf(L[0]=L).filter({1<$x<=L.size div 2}).each(shift,
    L.tail(shift)==L.leading(shift)
    ? ["rangeGenerator(0).lazyMap({"&L.head(shift).toString&'[$i mod '&shift&']})','periodic series']
    : void,orElse);

guessImplementation([])->void;
guessImplementation(sequence:IntList)->
  findPolyParam(sequence) orElse
  findPowerParam(sequence) orElse
  findPeriodicParam(sequence) orElse
  findFibonacciParam(sequence);
