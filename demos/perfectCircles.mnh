USE GUI,downhillSimplex;

center(aPhi,k)->aPhi[0]^k*[cos(aPhi[1]*k),sin(aPhi[1]*k)];

rad0(aPhi)->euklideanNorm(center(aPhi,1)-[1,0])/(1+aPhi[0]);

errorFunc(k)->(aPhi)->begin
  r0:=rad0(aPhi);
  //Consider 3 circles, one at center(aPhi,0) = [-1,0],
  //                    one at center(aPhi,k)   - a bit under a full circle / spiral segment
  //                    one at center(aPhi,k+1) - a but over a full circle
  //The distances of these spheres must be equal to the sums of their radii (so that they touch but not overlap);
  sqr(euklideanNorm(center(aPhi,k  )-[1,0])-(r0+r0*aPhi[0]^(k  )))
 +sqr(euklideanNorm(center(aPhi,k+1)-[1,0])-(r0+r0*aPhi[0]^(k+1)))
 +(aPhi[0]<=1 ? 1E6 : 0)   //Extra penalty if growth factor is below 1
 +(aPhi[1]<=0 ? 1E6 : 0); //Extra penalty if angle-delta is below 0
end;

//*Find a solution for given k
//*A spiral segment will contain k+1/2 circles, so that circle i touches circles i+k and i+k+1
//*This is so costly to calculate, that we store it for later reference.
datastore memoized
findSolution(2)->downhillSimplex(errorFunc(2),[2.89,2.237],1E-3,1E-16)[1];
//*For larger k, we approach the new solution from the solution for k-1 via interpolation of the error function
findSolution(k>2)->
  begin
    par:=findSolution(k-1);
    for sub_k in k-[99..1]/100
    do par:=downhillSimplex(errorFunc(sub_k),par,1E-3,1E-15,DEFAULT_DOWNHILL_SIMPLEX_OPTIONS.withStepLimit(100))[1];
    solution:=downhillSimplex(errorFunc(k  ),par,1E-3,1E-15);
    log('Found a solution for k=',k,' with error=',solution[0]);
    solution[1];
  end;

plotCircles(k,circleStyle:String,gridStyle:String)->
plotCircles(k,circleStyle       ,gridStyle       ,   1,     0);

plotCircles(k,circleStyle:String,gridStyle:String,zoom,rotate)->begin
  setOptions([['x0',-1],['x1',1],['autoscaleX',false],['axisStyleX',0],['logscaleX',false],
              ['y0',-1],['y1',1],['autoscaleY',false],['axisStyleY',0],['logscaleY',false],
              ['preserveAspect',true]]);
  par:=findSolution(k);
  par[0]<1 ? par[0]:=1/par[0] : void;
  I:=[floor(ln(1E-3/zoom)/ln(par[0]))..
      ceil (ln(3        )/ln(par[0]))];

  scale  :=par[0]^I*zoom;
  radii  :=rad0(par)*scale;
  centers:=[scale*cos(par[1]*I-rotate),
            scale*sin(par[1]*I-rotate)].transpose;
  plot();
  circleStyle==''
  ? void
  : centers.each(center,center-radii[index],center+radii[index]).addPlot(circleStyle);
  gridStyle==''
  ? void
  : begin
      centers.|([[Nan,Nan]]).|(
      [centers.tail(k  ),centers.leading(k  )].transpose.each(p,p[0],p[1],[Nan,Nan])).|(
      [centers.tail(k+1),centers.leading(k+1)].transpose.each(p,p[0],p[1],[Nan,Nan])).addPlot(gridStyle);
    end;
end;
//plot();
//plotCircles(12,'','');
//display;

//*Creates and displays an animation
main('animate')->begin
  clearAnimation;
  [2..50].each(k,plotCircles(k,'orange ellipse 0.5 f','0.5 black'),
                 addAnimationFrame,
                 index=0 ? display : void);
  display;
end;

@demo_for=animation, datastores, math, numerics/optimization
main(anim in ['zoomin','zoomout'],K)->
begin
  k:=K.toInt;
  clearAnimation;
  z:=      findSolution(k)[0]^((2*k+1) /50);
  p:=(pi*4-findSolution(k)[1]* (2*k+1))/50;
  (anim=='zoomin' ? [0..49] : [49..0])
  .each(i,plotCircles(k,'orange ellipse 1 f','black',z^i,p*i),
                 addAnimationFrame,
                 index=0 ? display : void);
end;
