//Binominalkoeffizient Ã¼ber Pascalsches Dreieck:
memoized
private pascal(n)->pascal([1],n);
private pascal(L,n>0)->pascal(L|0+0|L,n-1);
private pascal(L,n)->L;

//Summe und gleitende Summen:
private sum(L)->L.agg(+);
private rsum(L)->begin
  local S:=0;
  L.each(x,S+=x).get([size(L)-1..0]);
end;

private weights(n)->rsum(pascal(n))/(2^n);
private arcTanSummand(i)->(-1)^i/(2*i+1);

private summands(n)->arcTanSummand([0..n]);
private maxN:=39;

private sum1(i)->sum(summands(i));
private sum2(i)->sum(summands(i)*weights(i));
private errors1->[1..maxN].each(i,abs(sum1(i)-arctan(1)));
private errors2->[1..maxN].each(i,abs(sum2(i)-arctan(1)));
private T (i)->abs(time({sum1($p)},[i]).get([2,1]).getInner(1)-[0,arctan(1)])*[60000,1];
private T2(i)->abs(time({sum2($p)},[i]).get([2,1]).getInner(1)-[0,arctan(1)])*[60000,1];

doPlot->begin
  plot.setLogscale([true,true]);
  plot.setAutoscale([true,true]);
  plot.setPreserveAspect(false);
  print('Row #1: series A, error vs. summand count');
  plot([1..maxN],errors1,"black l .");
  print('Row #2: series B, error vs. summand count');
  addPlot([1..maxN],errors2,"red l .");
  print('Row #3: series A, error vs. time');
  addPlot([1..maxN].each(i,T(i)),"black x +");
  print('Row #4: series B, error vs. time');
  addPlot([1..maxN].each(i,T2(i)),"red x +");
end;

main('plot')->doPlot and renderToFile(replace(myPath&"#",".mnh#",".png"),768,768,4);

main->printf('%17.15f %17.15f',errors1,errors2);

doPlot;
