USE inputs;

private words:=dict.fileLines.trim;

private relativeFrequency(L:List)->begin
  Freq:=L.elementFrequency.sort;
  f:=1/Freq.getInner(1).max;
  Freq.each(t,[t[1]*f,t[0]]);
end;

private lengthTable:=length(words).relativeFrequency;
private firstTable:=words.copy(0,1).relativeFrequency;
private followerTable:=words.pEach(word,word.length<2 ? void : word.copy([0..length(word)-2],2).chars,|)
                                     .group(0)
                                     .pEach(g,g[0]=>g[1].getInner(1).relativeFrequency)
                                     .toMap;

private randomFromTable(T:List)->begin
  index:=void;
  repeat index:=intRandom(T.size) until T[index,0]>=random;
  T[index,1];
end;

randomWord->begin
  len:=lengthTable.randomFromTable;
  result:=firstTable.randomFromTable;
  lastChar:=result;
  [2..len].each(i,begin
    nextChar:=followerTable[lastChar].randomFromTable;
    result&=nextChar;
    lastChar:=nextChar;
  end);
  result;
end;

@demo_for=memoization, map operations, strings
main(count)->begin
  cnt:=toInt(count);
  assert(cnt>0,'count must be >0');
  [1..cnt].map(()->print(randomWord));
end;
