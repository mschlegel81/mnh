@OEIS=A005132
recamanGenerator->{begin
  visited:=[].toSet;
  i:= 0;
  k:=-1;
save;
  k+=1;
  (i_:=i-k)>0 AND i_ not in visited ? i:=i_ : i+=k;
  visited|=i;
  i;
end}.toIteratableExpression;

@SuppressUnusedWarning=all
recamanDuplicatesGenerator->{begin
  visited:=[].toSet;
  i:= 0;
  k:=-1;
save;
  while true do begin
    k+=1;
    (i_:=i-k)>0 AND i_ not in visited ? i:=i_ : i+=k;
    i in visited ? return i : void;
    visited|=i;
  end;
end}.toIteratableExpression;


stepsNeededToContainAllIntegersUpTo(k:Int)->
begin
  rest:=[0..k].toSet;
  recamanGenerator.each(n,begin
    rest>>n;
    rest.size=0
    ? return index
    : void;
  end);
end;

//*See http://rosettacode.org/wiki/Recaman%27s_sequence
main->begin
  printf('The first {$0} Recaman numbers are {recamanGenerator.head($0)}',15);
  printf('The first duplicated Number in the sequence is {recamanDuplicatesGenerator.head(1)[0]}');
  printf('You need {stepsNeededToContainAllIntegersUpTo($k)} steps to generate all integers up to (including) {$k}',1000);
end;
