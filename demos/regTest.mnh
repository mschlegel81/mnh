USE anagram, ackermann, asciiCalendar, barnsleyFern, benford, stringFib, countTheCoins, dice7fromDice5, digitSquareSum, ethiopian, fractalPlant, gol, hailstone, hofstadterConway, huffmann, importing, kochCurve, ludic, magicSquare, maze, monteCarloPi, pythagoras, selfRefSeq, semordnilap, sierpinskiCarpet, sierpinskiCurve, travellingSalesmanProblem, sudoku, ulam, unbiasedRandom, vampire, weasel, wordCount, y, zeckendorf, turtleGfx, hash, opTest, hofstadter_sequences;
private canPlot:='plot.plot' in listBuiltin;
private startOfEvaluation:=time;
private myCodeHash:=exec(executor,['-codeHash']).head;
private flavourString:=executor.exec(['-version']).head.split(' ').trailing(2).reverseList.join('_')&(canPlot ? '' : '_light');
private logName:=myPath.replace('.mnh','.'&flavourString&'.testLog');
private testAlreadyPassed:=logName.fileExists AND ((myCodeHash&' '&'o.k.') in logName.fileLines);

private validateCollectedOutput->begin
  local printOut:=collectedOutput.get(collectedOutput.getInner(0)='printline').getInner(2).split("\n").flatten;
  local expectedResultName:=myPath.replace('.mnh','.'&flavourString&'.expected');
  local lastResultName    :=myPath.replace('.mnh','.'&flavourString&'.last');
  local stateMessage:='';
  clearPrint;
  collectOutput;
  print("Test finished at ",formatTime('c',systime));
  fileExists(expectedResultName)
  ? begin
      expectedResultName.fileLines==printOut
      ? stateMessage:='o.k.'
      : begin
          lastResultName.writeFileLines(printOut);
          stateMessage:='NOT OK';
          print("Result is not okay!\nPlease compare "&lastResultName&"\n           and "&expectedResultName);
        end;
    end
  : begin
      print('No expected result found. Writing ',expectedResultName);
      stateMessage:='first';
      expectedResultName.writeFileLines(printOut);
    end;
  printf('%s',exec(executor,['-version'])| (myCodeHash&' '&stateMessage) |("Total time: "&(time-startOfEvaluation)));
  print('');
  printOut:=collectedOutput.get(collectedOutput.getInner(0)='printline').getInner(2).split("\n").flatten;
  logName.writeFileLines(printOut | logName.fileLines);
end;

private printExecute([])->void;
private printExecute(code:stringList)->begin
  local out:=sandBoxExecute(code).each(message,message.get(0)=="timing_info" ? void : message);
  printf("%s\t%s",out.getInner(0),out.getInner(2));
end;

private executeExamples(examplesFile:string)->begin
  local codeToExecute:=[];
  print('Examples file has ',fileLines(examplesFile).size,' lines');
  fileLines(examplesFile).each(line,
    line=='' ? begin
      printExecute(codeToExecute);
      codeToExecute:=[];
    end : codeToExecute|=line);
  printExecute(codeToExecute);
end;;

private testPlotting(call:expression(0), file:string)->begin
  local filePath:=(myPath.splitFileName.directory)&'/'&file;
  deleteFile(filePath);
  call();
  printf('Hash of %s is %x',filePath,filePath.fileContents.hash);
end;

private testPlotting->begin
  testPlotting({barnsleyFern.main},'barnsleyFern.png');
  testPlotting({fractalPlant.main},'fractalPlant.png');
  testPlotting({kochCurve.main},'kochCurve.png');
  testPlotting({sierpinskiCurve.main},'sierpinskiCurve.png');
  testPlotting({travellingSalesmanProblem.main},'travellingSalesmanProblem.png');
  testPlotting({turtleGfx.main},'turtleGfx.png');
end;

private testRegular->begin
  anagram.main;
  flavourString=='Linux_x86_64' ? void : ackermann.main;
  asciiCalendar.main;
  benford.main;
  stringFib.main;
  countTheCoins.main;
  dice7fromDice5.main;
  digitSquareSum.main;
  ethiopian.main;
  gol.main;
  hailstone.main;
  hofstadterConway.main;
  huffmann.main;
  importing.main;
  ludic.main;
  magicSquare.main;
  maze.main;
  monteCarloPi.main;
  pythagoras.main;
  selfRefSeq.main;
  semordnilap.main;
  sierpinskiCarpet.main;
  sudoku.main;
  ulam.main;
  unbiasedRandom.main;
  vampire.main;
  weasel.main;
  wordCount.main;
  y.main;
  zeckendorf.main;
  hash.main;
  opTest.main;
  hofstadter_sequences.main;
end;

main(examplesFile:string)->testAlreadyPassed ? void : begin
  resetRandom;
  collectOutput;
  ['100doors.mnh','12_statements.mnh','24.mnh','99bottles.mnh'].each(source,printf('%s',executor.exec(['-el5',(myPath.splitFileName.directory)&'/'&source,'demo'])));
  testRegular;
  canPlot
  ? testPlotting
  : void;
  examplesFile==''
  ? void
  : executeExamples(examplesFile);
  validateCollectedOutput;
end;

main->main('');
