        regulaFalsi(F:expression,x0:numeric, x1>x0,   k  )->regulaFalsi(F,x0,F(x0),x1,F(x1),k);
private regulaFalsi(F:expression,x0, 0,x1,f1      ,k  )->x0;
private regulaFalsi(F:expression,x0,f0,x1, 0      ,k  )->x1;
private regulaFalsi(F:expression,x0,f0,x1,f1      ,k>0)->sign(f0)=sign(f1) ? [] : regulaFalsi(F,x0,f0,x1,f1,x1-f1*(x0-x1)/(f0-f1),k);
private regulaFalsi(F:expression,x0,f0,x1,f1      ,k  )->0.5*(x0+x1);
private regulaFalsi(F:expression,x0,f0,x1,f1,x2   ,k>0)->regulaFalsi(F,x0,f0,x1,f1,x2,F(x2),k);
private regulaFalsi(F:expression,x0,f0,x1,f1,x2,f2,k>0)->x2;
private regulaFalsi(F:expression,x0,f0,x1,f1,x2,f2,k>0)->
  sign(f0)=sign(f2) ? regulaFalsi(F,x1,f1,x2,f2,k-1)
                    : regulaFalsi(F,x0,f0,x2,f2,k-1);

        roots(F:expression,x0:numeric,x1:numeric)->unique(roots(F,x0+[0..100]/100*(x1-x0)));
private roots(F,xList)->each(i,[0..size(xList)-2],|,regulaFalsi(F,xList%i,xList%(i+1),20));

epsilon:=1E-12;

main(F:expression)->print("Analyzing ",F) and
                    each(r,roots(F,-6,6),print("Root found ",abs(F(r))<epsilon?"at   ":"near ",r));
main(F:string)->main(expression(F));
//*Solves the "Roots of a function" task from <a href="http://rosettacode.org/wiki/Roots_of_a_function">RosettaCode</a>
main->print('See http://rosettacode.org/wiki/Roots_of_a_function') and
      main({$x^3-3*$x^2+2*$x});
