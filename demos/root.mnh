//@Algorithm Name=Regula Falsi
regulaFalsi(F:expression,x0input:numeric,x1input<>x0input,epsilonF>0.0,epsilonX>0.0)->begin
  local x0:=x0input;
  local f0:=F(x0);
  local x1:=x1input;
  local f1:=F(x1);
  local counter:=1000;
  while(abs(f0)>epsilonF<abs(f1) AND abs(x1-x0)>epsilonX AND (counter-=1)>0,begin
    local xm:=x1-f1*(x0-x1)/(f0-f1);
    local fm:=F(xm);
    fm=f1 OR fm=f0 ? counter:=0 : void;
    f0*fm>0
    ? begin f0:=fm; x0:=xm; end
    : begin f1:=fm; x1:=xm; f0*=0.5; end;
  end);
  f0=0 ? x0 :
  f1=0 ? x1 :
  x1-f1*(x0-x1)/(f0-f1);
end;

roots(F:expression(1),x0,x1)->begin
  local lastX:=x0;
  local lastS:=F(x0).sign;
  rangeGenerator(1,100)
  .map({x0+(x1-x0)/100*$i})
  .each(x,
    begin
      local s:=F(x).sign;
      s=lastS ? void : begin
        lastS:=s;
        [lastX,x];
      end;
    end,
    begin
      lastX:=x;
      void;
    end)
  .pEach(x,regulaFalsi(F,x[0],x[1],1E-50,1E-50)).unique.map({[$x,F($x)=0]});
end;

roots(F:expression)->print("Analyzing ",F.toString.unbrace.unbrace) and
                     roots(F,-6,6).each(r,print("Root found ",r[1] ? "at   ":"near ",r[0]));
main(F)->roots(F.toExpression);
//*Solves the "Roots of a function" task from http://rosettacode.org/wiki/Roots_of_a_function
main->print('See http://rosettacode.org/wiki/Roots_of_a_function') and
      main("$x^3-3*$x^2+2*$x");
