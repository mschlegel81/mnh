private memoized //use memoization because this will be called frequently...
step(s:String)->
  s.chars                //split the string in characters
   .elementFrequency     //transform characters to a list [[char1,count1],[char2,count2],...]
   .sort
   .each(f,f[1],f[0],&); //flatten to [count1,char1,count2,char2,...] and join to one string

series(i:Int)->begin
  local s:=toString(i);
  s:=sort(copy(s,[0..length(s)-1],1)).join;
  local result:=[];
  while(!(s in result),begin
    result|=s;
    s:=step(s);
  end);
  result;
end;

@demo_for=memoization
//*See http://rosettacode.org/wiki/Self-referential_sequence
main->print([1..10000].pEach(i,series(i),aggregator({size($x)<size($y) ? $y : $x})).join(', '));
