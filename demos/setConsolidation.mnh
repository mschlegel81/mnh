private unpack(s:string)->expression(replace(s,["{" ,","   ,"}"," "],
                                               ["['","','","']",","]))();
private pack(L)->replace("#"&string(L)&"#",["'",'"',"[","]","#{","}#"],
                                           ['' ,'' ,"{","}" ,"[","]" ]);
private consolidate(s:string)->unpack(s).consolidate.pack;
private consolidate(ListOfSets<>[])->
  size(ListOfSets)=1
  ? ListOfSets
  : consolidate(ListOfSets,unique(flatten(ListOfSets)));

private consolidate(ListOfSets,consolidationPoints)->
  consolidationPoints==[]
  ? ListOfSets
  : begin
      local mask:=ListOfSets.each(set,consolidationPoints.head in set);
      consolidate([ListOfSets.get(mask).flatten.unique]|ListOfSets.get(not(mask)),consolidationPoints.tail);
    end;
  
private examples:=["[{A,B} {C,D}]","[{A,B} {B,C}]","[{A,B} {C,D} {D,B}]","[{h,i,k} {a,b} {c,d} {d,b} {f,g,h}]"];

//*See <a href="http://rosettacode.org/wiki/Set_consolidation">http://rosettacode.org/wiki/Set_consolidation</a>
main->examples.each(e,print('Consolidation of ',e,"\n",
                            '              is ',consolidate(e)));
