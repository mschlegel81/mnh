@SuppressUnusedParameterWarning
type Stack(E:StatefulExpression)->true;

private DEPTH:='depth';
private TOP  :='top'  ;
private PUSH :='push' ;
private POP  :='pop'  ;

//*Returns a new, empty stack
//This definition is the core stack
//all the rest is just syntactic sugar
newStack->{begin
  local items:=[];
  local method:=
  [DEPTH => () ->items.size,
   TOP   => () ->items.trailing,
   PUSH  => (x)->items|=x,
   POP   => () ->items:=items.leading].toMap;
save;
  method[$params[0]]($params[1]);
end}.toStack;

@SuppressUnusedWarning=all
//*Returns the number of elements on s
depth(s:Stack)  ->s(DEPTH);

//*Returns the top element of s
top  (s:Stack)  ->s(TOP);

//*Pushes a new element on s
push (s:Stack,x)->s(PUSH,x);

//*Pop one element from s
pop  (s:Stack)  ->s(POP);

//----------------------------------------------
main->begin
  local s:=newStack;
  //push the primes below 10 to the stack
  primes(10).map((p)->s.push(210/p));
  while(s.depth>0,begin
    //Print out the top element of the stack (string extrapolation)
    printf('Stack top: {s.top} (depth={s.depth})');
    s.pop;
  end);
  s.pop;
end;
