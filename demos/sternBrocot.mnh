sternBrocotGenerator->{begin
  local L:=[0,1,1];
  local i:=-1;
save;
  L[i+=1] orElse begin
    local j:=(size(L)-1) div 2+1;
    L|=[L[j]+L[j-1],L[j]];
    L[i];
  end;
end}.toGenerator;

//@demo_for=generators, expressions/stateful
//*See http://rosettacode.org/wiki/Stern-Brocot_sequence
main->begin
  print('Stern-Brocot seqence');
  print('  First 15: ',sternBrocotGenerator.head(16).tail);
  local seqStart:=sternBrocotGenerator.head(2500);
  printf("  %s\tfirst occurs at index\t%s",
    [1..10,100],
    [1..10,100].each(k,indexOf(seqStart=k).head));
  [seqStart.head(1000).tail,seqStart.head(1000).leading].transpose.pEach(i,gcd@i=1,AND)
  ? print('Correct: The first 999 consecutive pairs are relative prime!')
  : fail('Unexpected function result');
end;
