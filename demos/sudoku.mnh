//Create a riddle with everything possible, i.e. every cell has possible values [1..9]
private allPossible->each(i,[0..8],each(j,[0..8],[1..9]));
private box(i,j)->(i div 3)*3+(j div 3);
//drop: remove an entry (=value) from an integer set (=set)
private drop(set:intList,value)->set%(set!=value);
private drop(set:int,value)->set;
private drop([],value)->[];
//Random in [0..8]
private rand8->floor(random*9);
//Random element from given list:
private randomFrom(set:intList)->set%floor(random*(size(set)-1));
//Set a number in the sudoku and solve it
private setNumber(Board,iRow,jCol,value)->solve(each(i,[0..8],
                                                each(j,[0..8],
                                                       i=iRow and j=jCol                           ? value :                                                       
                                                       i=iRow or j=jCol or box(i,j)=box(iRow,jCol) ? drop(Board%i%j,value) :
                                                                                                     Board%i%j)));
//Set a random cell in the Board to one of the possible values
private setRandom(Board)->setRandom(Board,rand8,rand8);
private setRandom(Board,iRow,jCol)->(Board%iRow%jCol):intList ? solve(setNumber(Board,iRow,jCol,randomFrom(Board%iRow%jCol))) : setRandom(Board);
//Un-set a random cell in the Board
private unsetRandom(Board)->unsetRandom(Board,rand8,rand8);
private unsetRandom(Board,iRow,jCol)->(Board%iRow%jCol):int ? each(i,[0..8],each(j,[0..8],i=iRow and j=jCol ? [1..9] : Board%i%j)) : unsetRandom(Board);

//Solve the board
private solve(Board)->solve(Board,head(each(i,[0..8],|,each(j,[0..8],|,(Board%i%j):intList and size(Board%i%j)=1 ? [[i,j,Board%i%j%0]] : []))));
private solve(Board,[])->Board;
private solve(Board,ijvTriplet)->setNumber(Board,ijvTriplet%0,ijvTriplet%1,ijvTriplet%2);

//Is the Board valid (no conflicts?)
private isValid (Board)->each(row,Board,and,each(cell,row,and,size(cell)>=1));
//Is the Board solved? 
private isSolved(Board)->each(row,Board,and,each(cell,row,and,     cell:int));
//Is the Board solvable? 
private canSolve(Board)->isSolved(solve(each(row,Board,each(cell,row,cell:int ? [cell] : cell))));

//Construct a solution by randomly restricting cells
private restrict(Board)->restrict(Board,isValid(Board),isSolved(Board));
private restrict(Board,true ,false)->restrict(setRandom(Board));
private restrict(Board,true ,true )->Board;
private restrict(Board,false,o    )->restrict(allPossible);
//Construct a riddle from a solution by randomly un-setting cells and testing for solveability
private riddleFromSolution(Board)->riddleFromSolution(Board,unsetRandom(unsetRandom(unsetRandom(unsetRandom(unsetRandom(unsetRandom(unsetRandom(unsetRandom(unsetRandom(Board))))))))));
private riddleFromSolution(prevBoard,Board      )->riddleFromSolution(prevBoard,Board,canSolve(Board));
private riddleFromSolution(prevBoard,Board,true )->riddleFromSolution(Board,unsetRandom(Board));
private riddleFromSolution(prevBoard,Board,false)->prevBoard;
//Pretty-print a board:
private printSudoku(Board)->print('=========#=========#=========') and
                            print(each(i,[0..8],&"\n"&,
                                  each(j,[0..8],&, replace(" "&string(Board%i%j)&" "," [1,2,3,4,5,6,7,8,9] ","   ") & (j in [2,5] ? "|" : "")) &
                                  (i in [2,5] ? "\n---------+---------+---------":""))) and
                            print('=========#=========#=========\n');
normalForm(B)->normalForm(B,1+sortPerm(B%0%[0..2]|B%1%[0..2]|B%2%[0..2]));
normalForm(B,N)->each(row,B,each(cell,row,N%(cell-1)));
                            
//Writes out a Sodoku (Solution and solveable Riddle)
main->main(restrict(allPossible));
private main(B)->printSudoku(B) and 
                 printSudoku(riddleFromSolution(B)) and
                 printSudoku(riddleFromSolution(B)) and
                 printSudoku(riddleFromSolution(B)) and
                 printSudoku(riddleFromSolution(B)) and
                 printSudoku(riddleFromSolution(B));
//main([[3,2,6,8,4,9,7,1,5],[1,7,9,3,2,5,8,4,6],[8,4,5,7,6,1,3,2,9],[4,6,8,2,5,3,1,9,7],[9,5,7,4,1,8,2,6,3],[2,3,1,9,7,6,5,8,4],[6,9,3,1,8,7,4,5,2],[5,8,2,6,3,4,9,7,1],[7,1,4,5,9,2,6,3,8]]);
B:=normalForm(restrict(allPossible));
printSudoku(B);
B%%0;

