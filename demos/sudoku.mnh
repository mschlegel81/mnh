private oneElemListToScalar(L)->size(L)=1 ? L%0 : L;
private dropSet(x:int,L)->x in L ? [] : x;
private dropSet(X    ,L)->oneElemListToScalar(X%not(each(x,X,x in L)));
private Connectivity:=each(i,[0..8],|,each(j,[0..8],
                    unique(dropSet(flatten(i*9+[0..8], //indexes in the same row
                                           [0..8]*9+j, //indexes in the same column
                                           (i div 3)*27+(j div 3)*3+[0..2,9..11,18..20]),
                                   [i*9+j])))); //indexes in the same block

private randomRowOrColPerm->each(i,3*sortPerm(random(3)),|,i+sortPerm(random(3)));
private randomRowAndColPerm->randomRowAndColPerm(randomRowOrColPerm,randomRowOrColPerm);
private randomRowAndColPerm(I,J)->each(i,I,|,i*9+J);
private scrambledRiddle(Board)->scrambledRiddle(Board%randomRowAndColPerm,1+sortPerm(random(9)));
private scrambledRiddle(Board,V)->each(b,Board,b:int?(V%(b-1)):b);

private filterInt(B)->each(b,B,b:int ? b : []);
private randomFromList(L)->L%floor(random*(size(L)-1));

private randomNonIntIndex(B)->randomFromList([0..80]%not(each(i,[0..80],(B%i):int)));
private randomIntIndex   (B)->randomFromList([0..80]%   (each(i,[0..80],(B%i):int)));
private difficulty       (B)->trueCount     (        not(each(i,[0..80],(B%i):int)));

private restrictRandom(B)->restrictRandom(B,randomNonIntIndex(B));
private loosenRandom  (B)->loosenRandom  (B,randomIntIndex   (B));
private restrictRandom(B,i:int)->solve(each(j,[0..80],i=j ? randomFromList(B%j) : B%j));
private loosenRandom  (B,i:int)->      each(j,[0..80],i=j ? [1..9]              : B%j) ;

private blacklist(B)->each(c,Connectivity,flatten(B%c));
private solve(   Board                             )->solve(Board,blacklist(filterInt(Board)));
private solve(   Board,blacklist                   )->solve(Board,blacklist,each(i,[0..80],dropSet(Board%i,blacklist%i)));
private solve(oldBoard,blacklist,newBoard==oldBoard)->oldBoard;
private solve(oldBoard,blacklist,newBoard          )->solve(newBoard);
private canSolve(Board)->isSolved(solve(Board));

private isSolved (B)->each(b,B,and,b:int);
private isInvalid(B)->each(b,B,or ,b==[]);

private initialBoard:=solve(each(i,[0..80],i mod 10 = 0 ? (i div 10)+1 : [1..9]));
private randomSolution->randomSolution(initialBoard,restrictRandom(initialBoard),10);
private randomSolution(oldBoard,newBoard,retries                           )->randomSolution(oldBoard,newBoard,retries,isSolved(newBoard),isInvalid(newBoard));
private randomSolution(oldBoard,newBoard,retries,solved=true ,invalid=false)->newBoard;
private randomSolution(oldBoard,newBoard,retries,solved=false,invalid=false)->randomSolution(newBoard,restrictRandom(newBoard),retries);
private randomSolution(oldBoard,newBoard,0      ,solved      ,invalid=true )->randomSolution;
private randomSolution(oldBoard,newBoard,retries,solved      ,invalid=true )->randomSolution(oldBoard,restrictRandom(oldBoard),retries-1);

private randomRiddle->randomRiddle(randomSolution);
private randomRiddle(oldBoard                         )->randomRiddle(oldBoard,loosenRandom(oldBoard),    100);
private randomRiddle(oldBoard,newBoard,retries        )->randomRiddle(oldBoard,newBoard              ,retries,canSolve(newBoard));
private randomRiddle(oldBoard,newBoard,retries  ,true )->randomRiddle(newBoard,loosenRandom(newBoard),retries  );
private randomRiddle(oldBoard,newBoard,retries>0,false)->randomRiddle(oldBoard,loosenRandom(oldBoard),retries-1);
private randomRiddle(oldBoard,newBoard,retries=0,false)->             oldBoard;

private format(Board)->each(i,[0..8],&"\n"&,each(j,[0..8],&"\t"&,string(Board%(i*9+j))));
private format2(Board)->"=========#=========#=========\n"&
                each(i,[0..8],&"\n"&,((i=3 or i=6)? "---------+---------+---------\n" : "")&
                each(j,[0..8],&     ,((j=3 or j=6)? "|"                               : "")&
                     " "&replace(string(Board%(i*9+j)),"[1,2,3,4,5,6,7,8,9]"," ")&" "))&
                "\n=========#=========#=========\n";

private pack(Board)->replace(each(b,Board,&,string(b)),
                     ["[1,2,3,4,5,6,7,8,9]","000000000","00000000","0000000","000000","00000","0000","000","00"],
                     ["0"                  ,"a"        ,"b"       ,"c"      ,"d"     ,"e"    ,"f"   ,"g"  ,"h"]);
private pure unpack(s:string)->each(c,copy(replace(s,["a".."h"],["b".."h","0"]&0),[0..80],1),c="0" ? [1..9] : softCast(c));

private printRiddle  (B)->print(format2(B)) and print('Difficulty: ',difficulty(B)," '",pack(B),"'");
private printDiffPack(B)->                      print('Difficulty: ',difficulty(B)," '",pack(B),"'");

//*Create one random solution
main->print(format2(randomSolution));
//*Create one random riddle
main("riddle")->printRiddle(randomRiddle);
//*Create count random riddles in packed form
main(count:string)->each(l,pEach(i,[1..softCast(count)],pack(randomRiddle)),print(l));

private 
PREPARED:=
["17b2g4h3f921c9h5090703h2054f7d17b48f5f9","h9h3025f1f6b8024075c9017h5a50403e6018h8d9","1h3f502h704e69f5e6g4h52h3g78f208d3h1h5d4g9",
 "1g904c51g43g607g401a83e26f6403g2a037h2h9","1d3f601g45089d947h1h8g3e2h6h7g2g6e45e7e9","09d7026h4f5h6h98805e1g3b8b543c201h2g70309",
 "0509ag104035h2e40907h302f8e6f1d52h7104f6f39","0785h9g2g78e809g3d6f2ah1h405e3f104h6g43209","e29065h6g70903h58e47e86c7ag9h101h2g37g8g9",
 "c9062d4g50801d9h2346c1h8h5g206f7g105805c9","149ag607h3d2f18g60859e7g4g8f7d1508g102g9","09c52g78h8h14h7h70402f3h5h4g9h6e18f5b6e1h9",
 "04h32h69h7c3g1g9h8f7e4g541h307g52g1f6a0509","08e405d6d41g3a02h6h8527e9g3h5h169f227d9","0905h2h4b7g64h808g1506g35d1ae19f708237d9",
 "d8f4010693e904h7h283f6c4e5c7109506f408d9","ae41307809c10802f4e6g396h58a12h568h5d9","04076032g93h4708a6047ah36h1a2407e1c708g9",
 "1f807h205a94d4g136a04f95e3706h701028e6g9","1h804g8g63f5e2d7g3h2h1g95c4h10705h209h8f3f9","ah7090654h32b42c801f5f9g1g87h2405h106d309",
 "1h9f8f6d308504207e9c437g806g6f8ah3h4102h9","1h2e6d3c804h8f56g90307f7d3d5e4182f62h9","105b69h1e82a7g2093d5g68033c2f74g701g509",
 "g503h672d40506ah2h412h8e70105a056h9e3047f9","1e203c7f104f9f81h6h5c8g27g308g7h2f5h8h5309","07h3504h24e7e1065h14g3g90506e8a8b1f4f7029",
 "f9e2h3g8f605202014g6h6g2037h58e406f105a7d9","e94g2e3795h6f6g7h9078035f5g8g2c4g1g2b609","1d7h24g6h56g82f901a04c605f5g20407h35g807f9",
 "108a903a012h5e8h1h20704f69a053060702h2f1049","04g9h3h501ah7h604a53h88h9065023081d1d4d609"];

//*Create count random riddles from prepared ones
main("lazy",count:string)->each(i,[1..softCast(count)],and,print("\n"&format2(scrambledRiddle(unpack(PREPARED%floor(random*(size(PREPARED)-1)))))));


//print(format2(unpack("1h2e6d3c804h8f56g90307f7d3d5e4182f62h9")));

