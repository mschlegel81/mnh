private drop(list:intCollection,toDrop:int          )->list.minus([toDrop]);
private drop(list:intCollection,toDrop:intCollection)->list.minus( toDrop );

//*The cells that are connected
private
COMPONENTS:=[0..8].each(i,i+[0..8]*9)| //same row
            [0..8].each(i,i*9+[0..8])| //same column
            [0..8].each(i,[0..80].get(i=([0..80] div 27)*3+[0..80] mod 9 div 3))
                  .each(component,component.toSet); //same block
//*Returns the unique indexes of all cells connected to i (excluding i)
private memoized connectedIdx(i:int)->COMPONENTS.each(c,i in c ? drop(c,i) : void).flatten.sort;
//*Returns the components
private memoized components(i)->COMPONENTS.each(c,i in c ? drop(c,i) : void);

//*A board is solved when all components contain numbers [1..9]
private isSolved(Board)->COMPONENTS.each(c,Board[c].sort==[1..9],AND);
//*A board is valid when all components may contain all numbers [1..9]
private isValid(Board)->Board.each(cell,not(cell==[]),AND) AND
                        COMPONENTS.each(c,Board[c].flatten.unique.sort==[1..9],AND);
//*A board's difficulty is given by the number of cells to fill
private difficulty(Board)->Board.each(cell,cell.isInt ? 0 : 1,+);

private
initialBoard->begin
  local values:=1+random(9).sortPerm;
  local indexes:=[0..8]*9+random(9).sortPerm;
  [0..80].each(i,i in indexes ? values[indexes=i,0] : [1..9]);
end;

private
printBoard(B)->[0..8].each(row,print(row in [3,6] ? "---------+---------+---------\n" : '',
               [0..8].each(col,begin
                 local i:=col+9*row;
                 (col in [3,6] ? '|' : '')&
                 " "&(B[i].isInt ? B[i] : " ")&" ";
               end,&)))|B;

private
solve(B)->begin
  local needRun:=isValid(B);
  local Board:=B;
  while(needRun,
  begin
    needRun:=false;
    //intsOnly are the fixed/solved cells
    local intsOnly:=Board.pEach(c,c.isInt ? c : []);
    Board:=Board.each(cell,
      cell.isInt //is cell already fixed/solved ?
      ? cell
      : begin
          //first try to solve the cell by restricting values based on already fixed/solved cells
          local newList:=drop(cell,intsOnly[connectedIdx(index)].flatten);
          size(newList)=1
          ? begin
              needRun:=true;
              newList.toList.head;
            end
          : components(index).each(COMP,begin
              //try to solve based on all cells (including unsolved)
              local tmp:=cell.drop(Board[COMP].flatten);
              size(tmp)=1
              ? begin
                  needRun:=true;
                  tmp.toList.head;
                end
              : void;
            end,head) orElse newList;
        end);
  end);
  Board;
end;

private randomFromSet(s:intCollection)->s.toList[intRandom(s.size)];

private restrictRandom(B)->begin
  local listIndexes:=[0..80].each(i,B[i].isInt ? void : i);
  listIndexes==[] ? B : begin
    local randomListIdx:=listIndexes[intRandom(size(listIndexes))];
    [0..80].each(i,i=randomListIdx ? B[i].randomFromSet : B[i]);
  end;
end;

randomSolution->begin
  local foundSolution:=false;
  local Board:=void;
  while(not(foundSolution),begin
    Board:=initialBoard.restrictRandom.solve;
    while(isValid(Board) AND not(Board.isSolved),Board:=Board.restrictRandom.solve);
    foundSolution:=Board.isSolved;
  end);
  Board;
end;

randomRiddle->begin
  local riddle:=randomSolution;
  random(81).sortPerm.each(undefIdx,begin
    local previousRiddle:=riddle;
    riddle:=[0..80].each(i,i=undefIdx ? [1..9] : riddle[i]);
    riddle.solve.isSolved ? void : riddle:=previousRiddle;
    void;
  end);
  print('Generated a riddle with difficulty: ',riddle.difficulty);
  riddle;
end;

//*For regression test: create a random riddle and print it out
main->randomRiddle.printBoard;

//*Create count riddles
main(count)->begin
  local iCount:=count.toInt;
  iCount<=0 ? fail('count must be >0') : void;
  [1..iCount].each(i,print,main);
end;
