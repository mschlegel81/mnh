main('print')->print('Hello world');
main('note')->note('This is a note');
main('warn')->warn('This is a warning');
main('fail')->fail('This is a failure');
main(code)->print('Setting exit code ',code.toInt) orElse setExitCode(code.toInt);

runExternally(parameter)->begin
  output:=executor.exec(['-v1','-stdout','-silent',myPath,parameter],false);
  [format('Calling %s %s',myPath.extractFileName,parameter),
   output[0],
   format('Exit code: %s',output[1])].flatten;
end;

PREFIX_OF_MESSAGE_TYPE:=['el1_userNote'   =>'Note',
                         'el2_userWarning'=>'Warn',
                         'el3_userDefined'=>'Error',
                         'el3_trace'      =>'Trace',
                         'el3_evalError'  =>'Error'].toMap;
COLOR_OF_MESSAGE_TYPE:=['el1_userNote'   =>"\e[3m",
                        'el2_userWarning'=>"\e[93m",
                        'el3_userDefined'=>"\e[91m",
                        'el3_trace'      =>"\e[91m",
                        'el3_evalError'  =>"\e[91m"].toMap;
runSandboxed(parameter)->
  [format('Calling %s %s',myPath.extractFileName,parameter),
   ['name'=>myPath,
    'parameters'=>[parameter],
    'side effects'=>['alter package state','output','alter context state']].toMap
   .runScript
   .map((kind,location,message)->begin
     kind=='exitCode'
     ? format('Exit code: %s',message)
     : kind=='printline'
       ? message
          @SuppressUnusedWarning=Used in format statement
       : (prefix:=PREFIX_OF_MESSAGE_TYPE[kind]).isVoid
         ? void
         : f"{prefix} {location.replace(myPath.systemSpecificFilename,myPath.extractFileNameOnly)} {COLOR_OF_MESSAGE_TYPE[kind]}{message}\e[0m";
   end)].flatten;

main->['print','note','warn','fail','40','41','x']
  .pMap((p)->[p,runExternally(p),runSandboxed(p)])
  .map((parameter,ext,int)->begin
    printf("%s",ext);
    ext==int
    ? print('Sandbox produces the same output')
    : warn("SANDBOXED OUTPUT IS DIFFERENT: \n",int.join("\n"));
    print;
   end);
