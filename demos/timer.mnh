tolerantParseTime(input:string)->
  try({parseTime('hh:nn:ss',input)},
      {try({parseTime('hh:nn',input)},
           false)});

readTimeOrInterval(questionPrefix:string)->begin
  local result:=false;
  while(not(result.isNumeric),
    result:=ask(questionPrefix&' as HH:MM.SS or HH:MM').tolerantParseTime);
  result;
end;

readInterval->readTimeOrInterval('Enter interval') - parseTime('hh:nn:ss','00:00:00') + systime;
readTime    ->readTimeOrInterval('Enter time');
mutable endTime:=void;
mutable keypressed:=false;

main->begin
  endTime:=[['t',{readTime}],['i',{readInterval}],['a',{false}]][ask('Timer: [t]ime, [i]nterval or [a]bort?',['t','i','a'])]();
  endTime.isNumeric
  ? begin
      async({begin
        ask('Press enter to cancel');
        keypressed:=true;
      end});

      while(systime<endTime AND not(keypressed),begin
        clearPrint;
        print('Timer set for: ',formatTime('hh:nn:ss',endTime        ));
        print('    remaining: ',formatTime('hh:nn:ss',endTime-systime));
        sleep(1);
      end);
      while(not(keypressed),begin
        beep;
        sleep(1);
      end);
    end
  : void;
end;
