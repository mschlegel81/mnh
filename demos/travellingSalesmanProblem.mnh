datastore points;
//*Returns the contents of datastore points.
//*If necessary, the datastore is initialized first.
private getPoints->points orElse (points :=
begin
  local P:=[random(2)];
  local acceptAt:=1;
  local tries:=0;
  while(P.size<1000,begin
    tries:=0;
    local q:=random(2);
    while(P.each(p,sqr(p-q).agg(+)<acceptAt,OR),begin
      q:=random(2);
      acceptAt:=acceptAt*0.999;
      tries+=1;
    end);
    P|=[q];
  end);
  P;
end);

//*Returns the Euklidean norm of x
private norm(x)->sqrt(x.sqr.agg(+));

//*Returns the length of path points in Euklidean norm
private pathLength(points)->begin
  local result:=0;
  local lastPoint:=points.trailing;
  points.each(p,result:=result+norm(lastPoint-p),lastPoint:=p);
  result;
end;

//*Returns the length of a 4-node-path in Euklidean norm
private len4(a,b,c,d)->norm(b-a)+norm(c-b)+norm(d-c);

//*Sierpinski-Curve sorting
scSort(L)->begin
  local x:=L.getInner(0); local xr:=[min(x),max(x)];
  local y:=L.getInner(1); local yr:=[min(y),max(y)];
  local h:=max(xr.get(1)-xr.get(0),yr.get(1)-yr.get(0))/2;
  xr:=(xr.get(1)+xr.get(0))*0.5;
  yr:=(yr.get(1)+yr.get(0))*0.5;
  local x0:=xr-h;
  local x1:=xr+h;
  local y0:=yr-h;
  local y1:=yr+h;
  local mask:=sqr(x-x0)+sqr(y-y1)<
              sqr(x-x1)+sqr(y-y0);
  local result:=scSort_(x0,y0,x0,y1,x1,y1,x.get(    mask ),y.get(    mask ))|
                scSort_(x1,y1,x1,y0,x0,y0,x.get(not(mask)),y.get(not(mask)));
  print('Path length after construction is ',round(pathLength(result),3));
  result;
end;

private scSort_(ax:numeric,ay:numeric,bx:numeric,by:numeric,cx:numeric,cy:numeric,x:numericList,y:numericList)->
  size(x)>1
  ? (sqr(ax-cx)+sqr(ay-cy)>1E-12
    ? begin
        local mask:=sqr(x-ax)+sqr(y-ay) <
                    sqr(x-cx)+sqr(y-cy);
        scSort_(ax,ay,(ax+cx)/2,(ay+cy)/2,bx,by,x.get(    mask ),y.get(    mask )) |
        scSort_(bx,by,(ax+cx)/2,(ay+cy)/2,cx,cy,x.get(not(mask)),y.get(not(mask)));
      end
    : begin
        print('Aboring at ',ax,'  ',ay,' | ',
                            bx,'  ',by,' | ',
                            cx,'  ',cy,' with ',size(x),' points');
        [0..size(x)-1].each(i,[x.get(i),y.get(i)]);
      end)
  : size(x)=1 ? [x|y] : [];

//*Tries to reduce path length by swapping adjacent nodes
polish(L)->begin
  local result:=L;
  local changing:=true;
  while(changing,begin
    changing:=false;
    [0..size(result)-1].each(i,begin
      local beforeSwapping:=len4@(result.get([i,i+1,i+2,i+3] mod size(result)));
      local afterSwapping :=len4@(result.get([i,i+2,i+1,i+3] mod size(result)));
      afterSwapping<beforeSwapping ? begin
        changing:=true;
        local j0:=(i+1) mod size(result);
        local j1:=(i+2) mod size(result);
        result:=result.get([0..size(result)-1].each(j,j=j0 ? j1 :
                                                      j=j1 ? j0 : j));
        void;
      end : void;
    end);
  end);
  print('Path length after polishing is    ',round(pathLength(result),3));
  result;
end;


//*Approximately solves the Travelling Salesman Problem using sorting by Sierpinski-Curve
main->begin
  resetRandom;
  plot.setOptions([['axisStyleX',0],['axisStyleY',0]]);
  local L:=polish(scSort(getPoints));
  plot(L|L.get([0]),'. l');
  plot.renderToFile(replace(myPath,'.mnh','.png'),768,768,4);
end;
