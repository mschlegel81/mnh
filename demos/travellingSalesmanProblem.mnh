@demo_for=datastore
//points is quite expensive to obtain, so this is a datastore to allow reusing the input
datastore points;
//*Returns the contents of datastore points.
//*If necessary, the datastore is initialized first.
private getPoints->points orElse (points :=
begin
  //Generate a list of points by dart-throwing
  P:=[random(2)];
  acceptAt:=1;
  tries:=0;
  while(P.size<1000,begin
    tries:=0;
    q:=random(2);
    while(P.each(p,sqr(p-q).agg(+)<acceptAt,OR),begin
      q:=random(2);
      acceptAt:=acceptAt*0.999;
      tries+=1;
    end);
    P|=[q];
  end);
  resetRandom;
  P;
end);

//*Returns the length of path points in Euklidean norm
private pathLength(points)->begin
  result:=0;
  lastPoint:=points.trailing;
  points.each(p,result:=result+euklideanNorm(lastPoint-p),lastPoint:=p);
  result;
end;

//*Returns the length of a 4-node-path in Euklidean norm
private len4(a,b,c,d)->euklideanNorm(b-a)+euklideanNorm(c-b)+euklideanNorm(d-c);

//*Sierpinski-Curve sorting
scSort(L)->begin
  x:=L.getInner(0); local xr:=[min(x),max(x)];
  y:=L.getInner(1); local yr:=[min(y),max(y)];
  h:=max(xr.get(1)-xr.get(0),yr.get(1)-yr.get(0))/2;
  xr:=(xr.get(1)+xr.get(0))*0.5;
  yr:=(yr.get(1)+yr.get(0))*0.5;
  x0:=xr-h;
  x1:=xr+h;
  y0:=yr-h;
  y1:=yr+h;
  mask:=sqr(x-x0)+sqr(y-y1)<
        sqr(x-x1)+sqr(y-y0);
  result:=scSort_(x0,y0,x0,y1,x1,y1,x.get( mask),y.get( mask))|
          scSort_(x1,y1,x1,y0,x0,y0,x.get(!mask),y.get(!mask));
  print('Path length after construction is ',round(pathLength(result),3));
  result;
end;

private scSort_(ax:Numeric,ay:Numeric,bx:Numeric,by:Numeric,cx:Numeric,cy:Numeric,x:NumericList,y:NumericList)->
  size(x)>1
  ? (sqr(ax-cx)+sqr(ay-cy)>1E-12
    ? begin
        mask:=sqr(x-ax)+sqr(y-ay) <
              sqr(x-cx)+sqr(y-cy);
        scSort_(ax,ay,(ax+cx)/2,(ay+cy)/2,bx,by,x.get( mask),y.get( mask)) |
        scSort_(bx,by,(ax+cx)/2,(ay+cy)/2,cx,cy,x.get(!mask),y.get(!mask));
      end
    : begin
        print('Aborting at ',ax,'  ',ay,' | ',
                             bx,'  ',by,' | ',
                             cx,'  ',cy,' with ',size(x),' points');
        [0..size(x)-1].each(i,[x.get(i),y.get(i)]);
      end)
  : size(x)=1 ? [x|y] : [];

private SWAP:=[0,2,1,3];
//*Tries to reduce path length by swapping adjacent nodes
polish(L)->begin
  result:=L;
  changing:=true;
  while(changing,begin
    changing:=false;
    random(size(result)).sortPerm.each(i,begin
      J:=[i..i+3] mod size(result);
      len4@(result.get(J[SWAP]))<
      len4@(result.get(J))
      ? begin
          changing:=true;
          tmp   :=result[J[1]];
          result[J[1]]:=result[J[2]];
          result[J[2]]:=tmp;
          void;
        end
      : void;
    end);
  end);
  print('Path length after polishing is    ',round(pathLength(result),3));
  result;
end;

//*Approximately solves the Travelling Salesman Problem using sorting by Sierpinski-Curve
@demo_for=datastores, plotting, textbook problems
main->begin
  resetRandom;
  plot.setOptions([['axisStyleX',0],['axisStyleY',0]]);
  L:=polish(scSort(getPoints));
  plot(L|L.get([0]),'. l');
  plot.renderToFile(replace(myPath,'.mnh','.png'),768,768);
end;
