private degToRad:=pi/180;
private removeRedundantSequences(s,s)->s;
private removeRedundantSequences(s,prev)->removeRedundantSequences(replace(s,['+-','-+','[]','[+]','[-]'],''),s);

private cleanString(drawChars:String, input:String, allowShortening:Boolean)->begin
  local ignorables:=('~'|input.chars).minus(['+','-','F','[',']']);
  local clean:=replace(replace(input,
                               copy(drawChars,[0..length(drawChars)-1],1),
                               'F'),
                       ignorables,
                       '');

  replace(
    removeRedundantSequences(clean,''),
    allowShortening ? ['F','00','11','22','33','44','55','66','77','88'] : 'F',
    allowShortening ? ['0','1' ,'2' ,'3' ,'4' ,'5' ,'6' ,'7' ,'8' ,'9'] : '0');
end;

turtle(startAngle:Numeric,rotAngleInDegrees:Numeric,drawChars:String,s:String)->turtle(startAngle,rotAngleInDegrees,drawChars,s,true);
turtle(startAngle:Numeric,rotAngleInDegrees:Numeric,drawChars:String,s:String,allowShortening:Boolean)->begin
  local cleanInput:=cleanString(drawChars,s,allowShortening);
  //init State variables
  local turtlePos:=[0,0];
  local turtleDir:=startAngle*degToRad;
  local posStack:=[];
  local dirStack:=[];
  local rotAngle:=rotAngleInDegrees*degToRad;
  local OP:=toMap([['0', {begin local oldPos:=turtlePos; turtlePos+=    [cos(turtleDir),sin(turtleDir)]; oldPos; end}],
                   ['+', {begin turtleDir-=rotAngle; void; end}],
                   ['-', {begin turtleDir+=rotAngle; void; end}],
                   ['[', {begin
                           posStack|=[turtlePos];
                           dirStack|=turtleDir;
                           void;
                         end}],
                   [']', {begin
                           turtlePos:=trailing(posStack);
                           posStack := leading(posStack);
                           turtleDir:=trailing(dirStack);
                           dirStack := leading(dirStack);
                           [[Nan,Nan]] | turtlePos;
                         end}],
                   ['1', {begin local oldPos:=turtlePos; turtlePos+=  2*[cos(turtleDir),sin(turtleDir)]; oldPos; end}],
                   ['2', {begin local oldPos:=turtlePos; turtlePos+=  4*[cos(turtleDir),sin(turtleDir)]; oldPos; end}],
                   ['3', {begin local oldPos:=turtlePos; turtlePos+=  8*[cos(turtleDir),sin(turtleDir)]; oldPos; end}],
                   ['4', {begin local oldPos:=turtlePos; turtlePos+= 16*[cos(turtleDir),sin(turtleDir)]; oldPos; end}],
                   ['5', {begin local oldPos:=turtlePos; turtlePos+= 32*[cos(turtleDir),sin(turtleDir)]; oldPos; end}],
                   ['6', {begin local oldPos:=turtlePos; turtlePos+= 64*[cos(turtleDir),sin(turtleDir)]; oldPos; end}],
                   ['7', {begin local oldPos:=turtlePos; turtlePos+=128*[cos(turtleDir),sin(turtleDir)]; oldPos; end}],
                   ['8', {begin local oldPos:=turtlePos; turtlePos+=256*[cos(turtleDir),sin(turtleDir)]; oldPos; end}],
                   ['9', {begin local oldPos:=turtlePos; turtlePos+=512*[cos(turtleDir),sin(turtleDir)]; oldPos; end}]]);
  cleanInput.chars.each(c,OP[c]()) | [turtlePos];
end;

@demo_for=plotting/turtle, string operations
//*For reg-test
main->plot.setOptions([['axisStyleX',0],['axisStyleY',0]]) and plot(turtle(0,59,'F',[1..100].each(i,repeat('F',i),'+',&))) and renderToFile(replace(myPath,'.mnh','.png'),768,768);
