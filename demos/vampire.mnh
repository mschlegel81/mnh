USE '..\packages\mathUtils.mnh';
private getFangs(i:Int)->begin
  local iDigits:=i.digits.sort;
  local minDiv:=10^(iDigits.size div 2-1);
  local dividers:=factorize(i).elementFrequency.each(x,powers(x),*).toList;
  dividers:=dividers[minDiv<=dividers and sqr(dividers)<=i];
  [dividers,i div dividers].transpose
    .pFilter({!($f mod 10=0).agg(AND) AND $f.digits.flatten.sort==iDigits});
end;

@SuppressUnusedWarning
isVampire(i:Int)->(i.digits.size and 1)=0 AND getFangs(i).size>=1;

private printVampire(i:Int)->begin
  local fangs:=getFangs(i);
  fangs==[]
  ? void
  : print(i," is a vampire. It's fangs are: ",join(fangs," or ")) orElse true;
end;

private verbosePrintVampire(i)->printVampire(i) orElse print(i,' is not a vampire.');

private vampireCandidateGenerator->{
begin
  local next:=1259;
save;
  (next+=1) in [100,10000,1000000]
  ? next*=10
  : next;
end}.toIteratableExpression;

@demo_for=math/strings, generators
//*Solves the "Vampire-Number" task from http://rosettacode.org/wiki/Vampire_number
main('rosetta')->begin
  print('See http://rosettacode.org/wiki/Vampire_number');
  main;
  print('-----------------------------------------------');
  verbosePrintVampire(16758243290880);
  verbosePrintVampire(24959017348650);
  verbosePrintVampire(14593825548650);
end;

//*As above but abridged for regression test
main->vampireCandidateGenerator().lazyMap(::printVampire).head(25);
