private getFangs(i:int)->begin
  local digits:=length(string(i)) div 2;
  local toTest1:=10^(digits-1);
  local toTest2:=round(sqrt(i));
  local toTest3:=10^digits-1;
  local toTest:=abs(toTest2-toTest1)<abs(toTest3-toTest2)
                 ? [toTest1..toTest2]
                 : [toTest3..toTest2];
  local iDigits:=string(i).chars.sort;
  toTest
  .get(i mod toTest=0)
  .pEach(d,(string(d)&string(i div d)).chars.sort==iDigits
           ? [i div d,d]
           : void);
end;

private printVampire(i:int)->begin
  local fangs:=getFangs(i);
  fangs==[]
  ? false
  : begin
      print(i," is a vampire. It's fangs are: ",join(fangs," or "));
      true;
    end;
end;

private verbosePrintVampire(i)->printVampire(i) OR print(i,' is not a vampire.');

private step(99  ):=1000;
private step(9999):=100000;
private step(k)->k+1;

private printFirstKVampires(k:int)->begin
  local found:=0;
  local toTest:=9;
  while(found<k,printVampire(toTest:=step(toTest)) ? found+=1 : void);
end;

//*Solves the "Vampire-Number" task from <a href="http://rosettacode.org/wiki/Vampire_number">RosettaCode</a>
main('rosetta')->begin
  print('See http://rosettacode.org/wiki/Vampire_number');
  main;
  print('-----------------------------------------------');
  verbosePrintVampire(16758243290880);
  verbosePrintVampire(24959017348650);
  verbosePrintVampire(14593825548650);
end;

//*As above but abridged for regression test
main->printFirstKVampires(25);
