memoized
private chars(s:string )->copy(s,[0..length(s)-1],1);
private chars(i:int    )->sort(chars(string(i)));
private chars(i:intList)->sort(each(e,i,|,chars(e)));

memoized
private digits(n:int)->length(string(n));
private dividers(n:int)->dividers(n,floor(10**(digits(n)/2-1)),
                                    floor(sqrt(n)),
                                    floor(10**(digits(n)/2))-1);
private dividers(n,k0,k1,k2)->dividers(n,abs(k1-k0)<abs(k1-k2) ? [k0..k1] : [k1..k2]);
private dividers(n,Candidates)->Candidates%(n mod Candidates=0);

private factorPairs(n)->each(d,dividers(n),[n div d,d]);

private isVampire(i:int)->isVampire(i,chars(i));
private isVampire(i:int,iC)->(size(iC) and 1)=1 ? false : isVampire(i,iC,factorPairs(i));
private isVampire(i,iC,FP)->vampPrint(i,FP%each(p,FP,chars(p)==iC));
private vampPrint(i,[])->false;
private vampPrint(i,fangs)->true and print(i," is a vampire. It's fangs are: ",each(f,fangs,&" or "&,string(f)));

private bigStep(n)->(digits(n) and 1) = 1 ? 10^(digits(n)) : n;

private printFirstVampires(n<=0,k>0)->true;
private printFirstVampires(n   ,k>0)->printFirstVampires(n-(isVampire(k)?1:0),bigStep(k+1));

private verboseCheckIfVampire(n)->isVampire(n) ? true : print(n,' is not a vampire.');

//*Solves the "Vampire-Number" task from <a href="http://rosettacode.org/wiki/Vampire_number">RosettaCode</a>
main->print('See http://rosettacode.org/wiki/Vampire_number') and
      printFirstVampires(25,1) and
      print('-----------------------------------------------') and
      verboseCheckIfVampire(16758243290880) and
      verboseCheckIfVampire(24959017348650) and
      verboseCheckIfVampire(14593825548650);
