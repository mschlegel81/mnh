private target:="METHINKS IT IS LIKE A WEASEL";
private fitness(s:string)->each(delta,
                            abs(ord(target.chars)-
                                ord(     s.chars)),+);
private CHARSET:=['A'..'Z',' '];
private randomCharacter->CHARSET%intRandom(size(CHARSET));

private multiplyAndSelect(parent:string,offspringCount, mutateProb)->
   each(i,[0..offspringCount],
        aggregator({$x%1<=$y%1 ? $x : $y}), //Selection: the fittest survives this aggregator ;-)
        begin
          local individual:=i=0 ? parent : each(c,parent.chars,random<mutateProb ? randomCharacter : c).join;
          [individual,fitness(individual)];
        end)%0;

private evolve(mutationFalloff,offspringCount,generationLimit)->begin
  local parent:=join(each(i,[0..length(target)-1],randomCharacter));
  local generationCount:=0;
  local mutationRate:=1;
  while(parent<>target AND generationCount<generationLimit,
  begin
    parent:=multiplyAndSelect(parent,offspringCount,mutationRate);
    mutationRate:=max(0.05,mutationRate*mutationFalloff);
    (generationCount+=1) mod 20 = 0
    ? printf('%4d %s (%3d)',generationCount,parent,fitness(parent))
    : void;
  end);
  printf('%4d %s',generationCount,parent);
end;

//*See <a href="http://rosettacode.org/wiki/Evolutionary_algorithm">http://rosettacode.org/wiki/Evolutionary_algorithm</a>
main->evolve(0.96,20,10000);
