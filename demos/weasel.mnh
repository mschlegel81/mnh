private target:="METHINKS IT IS LIKE A WEASEL";
private fitness(s:string)-> abs(ord(target.chars)-
                                ord(     s.chars)).agg(+);
private CHARSET:=['A'..'Z',' '];
private randomCharacter->CHARSET.get(intRandom(size(CHARSET)));

private multiplyAndSelect(parent:string,offspringCount, mutateProb)->
   [0..offspringCount].each(i,
        begin
          local individual:=i=0 ? parent : parent.chars.each(c,random<mutateProb ? randomCharacter : c).join;
          [individual,fitness(individual)];
        end,
        aggregator({$x.get(1)<=$y.get(1) ? $x : $y})) //Selection: the fittest survives this aggregator ;-)
        .head;

private evolve(mutationFalloff,offspringCount,generationLimit)->begin
  local parent:=[0..length(target)-1].each(i,randomCharacter,&);
  local generationCount:=0;
  local mutationRate:=1;
  while(parent<>target AND generationCount<generationLimit,
  begin
    parent:=multiplyAndSelect(parent,offspringCount,mutationRate);
    mutationRate:=max(0.05,mutationRate*mutationFalloff);
    (generationCount+=1) mod 20 = 0
    ? printf('%4d %s (%3d)',generationCount,parent,fitness(parent))
    : void;
  end);
  printf('%4d %s',generationCount,parent);
end;

//*See http://rosettacode.org/wiki/Evolutionary_algorithm
main->evolve(0.9,20,10000);
