USE inputs;

private cleanSplitString(s:stringList)->begin
  local result:=join(s,' ')           //join lines -> processing one long string
               .lower                 //convert to lowercase
               .clean(['a'..'z'],' ') //retain only letters
               .split(' ');           //split at spaces
  result[result<>'']; //return those elements from the result list which are not empty strings
end;

private processLinesInChunks(lines:stringList,chunkSize)->
  group(lines,[0..size(lines)-1] div chunkSize)
  .pEach(chunk,cleanSplitString(chunk))
  .flatten
  .elementFrequency;

private analyze(lines:stringList)->begin
  local wordCount:=processLinesInChunks(lines,100).sort({$x[0]>=$y[0]});
  print('Words total:    ',local total:=wordCount.getInner(0).agg(+));
  print('Distinct words: ',size(wordCount));
  local top50:=head(wordCount,50);
  print('Most frequent:');
  printf("%s\t%s\t%s",
    'word' |(top50.getInner(1)),
    'count'|(top50.getInner(0)),
    '%'    |round(top50.getInner(0)/total*100,2));

end;

private filesWords(pattern)->each(f,files(pattern),|,fileLines(f));

//*Displays a short info on words in kjv.txt
main->analyze(fileLines(inputs.kjv));
//*Displays a short info on words in the given file or files matching a search pattern
main(fileOrPattern:string)->analyze(filesWords(fileOrPattern));
