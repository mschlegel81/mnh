USE inputs;

private cleanSplitString(s:string)->each(token,s.lower.clean(['a'..'z'],' ').split(' '),token='' ? void : token);
private processLinesInChunks(lines:stringList,chunkSize)->
  pEach(chunk,
        group(lines,[0..size(lines)-1] div chunkSize,aggregator(&)),
        cleanSplitString(chunk)).flatten.elementFrequency;
        
private analyze(lines:stringList)->begin
  local wordCount:=processLinesInChunks(lines,500).sort({$x%0>=$y%0});
  print('Words total:    ',local total:=each(w,wordCount%%0,+));
  print('Distinct words: ',size(wordCount));
  local top50:=head(wordCount,50);
  print('Most frequent:');
  printf("%X%\t%X%\t%X%",
    'word' |(top50%%1),
    'count'|(top50%%0),
    '%'    |round(top50%%0/total*100,2));

end;

private filesWords(pattern)->each(f,files(pattern),|,fileLines(f));

//*Displays a short info on words in kjv.txt
main->analyze(fileLines(inputs.kjv));
//*Displays a short info on words in the given file or files matching a search pattern
main(fileOrPattern:string)->analyze(filesWords(fileOrPattern));

