arity({3});

arity({sin($x)/$x});

arity({sin($x)/$y});

//For variadic functions only the non-optional parameters are counted:
arity({printf('%X%%X%',$a,...)});

expression("$x-$x^2+$x^3");

expression("");

not(true);

not([true, false, true]);

not({$x});

not(7);

parameterNames({3});

parameterNames({sin($x)/$x});

parameterNames({sin($x)/$y});

//For variadic functions only the non-optional parameters are counted:
parameterNames({printf("%X%%X%", $a, ...)});

ord(3);

ord(true);

ord(false);

ord("A");

ord("abc");

ord(2.1);

softCast("A");

softCast('"B"');

softCast(3);

softCast([1, "2", "true", "'TEXT'", "1.5", "2,6"]);

splitFileName("../test.txt");

string('a');

string(234);

string([1, 2.6, "a", true, {$x}]);

abs(-0.92);

abs(3);

abs({1+$x});

arccos(-0.92);

//Out of function domain
arccos(3);

arccos({1+$x});

arcsin(-0.92);

//Out of function domain
arcsin(3);

arcsin({1+$x});

tan(-0.92);

tan(3);

tan({1+$x});

tan(2*arctan(1));

arctan(-0.92);

pi:=4*arctan(1);
pi;

arctan({$x});

argMax(sin([0..10]));

argMax([1, 3, 3, 0, 2]);

argMin(sin([0..10]));

argMin([1, 3, 3, 0, 2]);

ceil(20/3);

ceil([0..3]/3);

ceil([0..3]/3, 2);

ceil(20/3, [-1..3]);

floor(20/3);

floor([0..3]/3);

floor([0..3]/3, 2);

floor(20/3, [-1..3]);

round(20/3);

//Numbers with ambiguous rounding result are rounded towards even numbers
round([0.5, 1.5, 2.5, 3.5]);

round([0..3]/3, 2);

round(20/3, [-1..3]);

isInRange(7, 0, 10);

//You can use infinite ranges
isInRange(7, 0.3,  Inf);

//The first argument can be a list
isInRange([0..9]/10, 0.3, 0.57);

isInfinite(Nan);

isInfinite(+Inf);

isInfinite(-Inf);

isInfinite([-3.4344, Nan, +Inf]);

isNan(Nan);

isNan(+Inf);

isNan(-Inf);

isNan([-3.4344, Nan, +Inf]);

cos(-0.92);

cos(3);

cos({1+$x});

exp(-0.92);

exp(3);

exp({1+$x});

ln(-0.92);

ln(3);

ln({1+$x});

ln(-0.92);

sin(3);

sin({1+$x});

sqr(-0.92);

sqr(3);

sqr({1+$x});

sqrt(-0.92);

sqrt(3);

sqrt({1+$x});

sign(-0.92);

sign(3);

sign({1+$x});

max(["a".."z"]);

max([0..9]/2);

max(true, false);

min(["a".."z"]);

min([0..9]/2);

min(true, false);

copy("abcde", 1, 3);

escape("a");

escape("\t");

//Use %X% for a left aligned output.
//A number after the X will be interpreted as text width
format("%X5% is a string or something left aligned", true);

//Use %I% for right aligned output.
//A number after the I will be interpreted as text width
format("%I5% is a string or something right aligned", true);

format("%I%", 3);

//You can use special placeholders to format dates and times.
//Note that "mm" corresponds to month and "nn" corresponds to minutes.
format("%dd.mm.yyyy%", 3.21);

format("%hh:nn:ss%", 3.21);

//Use a "picture clause" to format floating point numbers
format("%00.000%", 3.21);

//Use # to specify optionally visible digits.
//If the second (or further) arguments are lists, the result will be a list.
format("%#0.00##%", [3.21567, 5]);

//Group a list of numbers by divisibility by 3
group([1..10],[1..10] mod 3=0);

fail;

fail("Told you this wouldn't work!");

hash(1);

hash([1..3]);

hash("a");

each(func,listBuiltin,copy(func,0,4)=='mnh.' ? func : void);

//Group to join element frequencies
group([[1,'a'],[2,'a'],[1,'b'],[4,'c'],[2,'a'],[2,'b']],1,aggregator({[$x%0+$y%0,$x%1]}));

abs(3);

abs(-3);

abs([-2..2]/2); 

chars('This is a test.');

chars%100;

clean('+21/232/2116-11',['0'..'9'],' ');

join(['a','b','c']);

join([1..5],' ');

length('Test');

length(['Text','AbC']);

lower('Test');

lower(['Text','AbC']);

upper('Test');

upper(['Text','AbC']);

pi:=4*arctan(1);
t:=[0..1000]/1000*2*pi;
plot(t,sin(t));
plot.renderToFile('plotDemo1.png',600,300,4);