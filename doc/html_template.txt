<!--file style.css-->
*{margin: 0; padding: 0;}
html, body, .Container {
  font-family: Georgia, "Times New Roman",Times, serif;
  color: black;
  background-color: #F2F2F2;
  height: 100%;}
ul{padding-left:20px;}
li{padding-left: 10px;}
code {font-family: Courier-New, Courier; white-space: pre}
a:link {color: #0000FF }
a:visited {color: #000066 }
table {display: inline-table}
.oben    { vertical-align:top}
.red {color:#FF0000}
.ruleHead  { vertical-align:top; background-color: #DDDDDD}
.identifier{color:#0000FF}
.builtin{color:#0000FF;font-weight:bold}
.modifier{color:#FF8800;font-weight:bold}
.stringLiteral{color:#008800}
.literal{color:#FF0000}
.operator{color:#000088;font-weight:bold}
.comment{color:#666666;font-style:italic}
.error{color:#FF0000; background-color:#FFFF00}
.Container:before {content: '';height: 100%;float: left;}
.Header{margin-bottom: 0px;background-color: #DDDDDD; padding:0; text-align:center; font-size:32px;}
.Content{position: relative;z-index: 1;margin: 0; padding: 0;}
.Content:after {content: '';clear: both;display: block;}
.Wrapper{position: absolute; width: 100%; height: 100%; }
.Wrapper > div{height: 100%;}
.navContent{background-color: #DDDDDD; float: left; margin-right: 10px;}
.docContent{background-color: #F2F2F2; overflow: auto;}
<!--file index.html-->
<!--begin commonHead-->
<html><head><title>MNH 5</title><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="style.css" type="text/css"></head>
<body><div class="Container"><div class="Header">MNH5 Documentation</div><div class="Content"><div class="Wrapper">
<!--end-->
<!--commonHead-->
<div class="navContent">
  <ul>
  <li><h3><a href="index.html">Quick start</a></h4></li>
  <li><h3><a href="types.html">Types</a></h4></li>
  <li><h3><a href="operators.html">Operators</a></h4></li>
  <li><h3><a href="functions.html">Functions</a></h4></li>
  <li><h3><a href="specials.html">Special constructs</a></h4></li>
  <li><h3><a href="builtin.html">Built-in Functions</a></h4></li>
  <li><h3><a href="formatStrings.html">Format Strings</a></h4></li>
  <li><h3><a href="packages.html">User packages</a></h4></li>
  </ul>
</div>
<div class="docContent">
MNH5 comes in 2 flavours (for each compilation target):<ul>
  <li> <b>mnh</b>: a GUI version with plotting support
  <li> <b>mnh_light</b>: a slimmed down console version without plotting support (for the cases where size matters)
</ul>

You can just start an executable of any flavour and start typing. Most of the inputs will result in understandable outputs (the exception being infinite loops,
fork bombs and other "pathologic" examples).<br>
<br>
The input can consist of several statements, separated by <code>;</code>. An input can be an expression, like:<code>
<!--mnh-->
1+2;
<!--end-->
</code> Or an assignment<code>
<!--mnh-->
x:=1;
<!--end-->
</code> Or a declaration<code>
<!--mnh-->
f(x)->sin(x);
<!--end-->
</div>
<!--begin commonFoot-->
</div></div></div></body></html>
<!--end-->
<!--commonFoot-->
<!--file packages.html-->
<!--commonHead-->
<div class="navContent">
  <ul>
  <li><h3><a href="index.html">Quick start</a></h4></li>
  <li><h3><a href="types.html">Types</a></h4></li>
  <li><h3><a href="operators.html">Operators</a></h4></li>
  <li><h3><a href="functions.html">Functions</a></h4></li>
  <li><h3><a href="specials.html">Special constructs</a></h4></li>
  <li><h3><a href="builtin.html">Built-in Functions</a></h4></li>
  <li><h3><a href="formatStrings.html">Format Strings</a></h4></li>
  <li><h3><a href="packages.html">User packages</a></h4></li>
<ul>
<li><h4><a href="#usage">Usage</a></h4></li>
<ul>
  <li><h5><a href="#defining">Defining a package</a></h5></li>
  <li><h5><a href="#importing">Importing a package</a></h5></li>
  <li><h5><a href="#executables">Executable packages</a></h5></li>
  <li><h5><a href="#comments">Comments</a></h5></li>
</ul>
<li><h4><a href="#defined">Currently defined packages</a></h4></li>
</ul> 
  </ul>
</div>
<div class="docContent">
<h3><a name="usage">Usage</a></h3>
Packages form the major means to structure your implementation so that parts of it can be reused.<br>
Each package is a collection of functions and expressions; each input to MNH is a package.<br>
Expressions in a package will only be executed in interactive mode.<br>
For details on how to define functions, see <a href="functions.html">MNH5 - Functions</a><br>
<h4><a name="defining">Defining a package</a></h4>
To define a package, just create a file with the extension <code>.mnh</code> (or even simpler: start typing in interactive mode). The following restrictions apply:
<ul>
  <li>The filenmae (without extension) should be a valid identifier, i.e. it should start with a letter.<br>This is because the filename wihtout extension will be interpreted as the package-identifier.
  <br>Packages violating this convention cannot be imported by other packages.</li>
  <li>The package must be in the search paths of importing packages (see <a href="#importing">Importing a package</a>).
  <li>The filename must not be any of the built-in pseudo packages' identifiers.</li>
</ul><br>
<h4><a name="importing">Importing a package</a></h4>
To import a package, start your package with a <i>use clause</i>, e.g.:<code>
<!--mnh-->
  USE basic;
<!--end-->
</code>
This will import the first package with a filename <code>basic.mnh</code> in the following folders:<ul>
  <li> The same folder as the importing package, or its subfolders </li>
  <li> The current executable's folders, or its subfolders </li>
  <li> The current working directory, or its subfolders </li>
</ul>
Having imported a package, you might run into naming conflicts. All rules can be accessed using either their name or qualified access via package.name, e.g.<code>
<!--mnh-->
   basic.sum([1,2,6]);
<!--end-->
</code>
<br><h4><a name="executables">Executable packages</a></h4>
A package is <i>executable</i> if it contains a rule called <code>main</code>.
Executable packages can be executed from the command line. If called as<code>
  mnh </code><i>packageName</i><code>.mnh
</code>the nullary main function will be executed. If additional parameters are given, the respective n-ary main rule will be executed, e.g.<code>
  mnh </code><i>packageName</i><code>.mnh </code><i>parameter_1<code> </code> parameter_2</i><br>
All input parameters will be passed as strings; consequently they must be converted to other types (e.g. using <code>softCast</code>) as needed.<br>

<h4><a name="comments">Comments</a></h4>
A comment is any string starting with <code>//</code> and ending with the following line break.<br>
A <i>doc-</i>comment is a comment starting with <code>//*</code>. Doc-comments are always associated with the (sub-)rule following the comment.
They will be shown here (if the page is regenerated).<br>
Additionally, comments of the main rule are shown as help on the package on the command line, e.g.<br>
<code>  mnh -h </code><i>packageName</i><code>.mnh</code><br>

<h3><a name="defined">Currently defined packages</a></h3>
<div class="red">Open the documentation from the GUI via Help -> "Open Documentation with packages" to make sure these are up to date.</div>
<!--USERPKG-->
</div>
<!--commonFoot-->
<!--file operators.html-->
<!--commonHead-->
<div class="navContent">
  <ul>
  <li><h3><a href="index.html">Quick start</a></h4></li>
  <li><h3><a href="types.html">Types</a></h4></li>
  <li><h3><a href="operators.html">Operators</a></h4></li>
<ul>
<li>
<h4><a href="#overview"> Overview</a></h4></li>
<h4><a href="#scalarOps"> Scalar operators</a></h4></li>
<ul>
  <li><h5><a href="#arithOps"> Arithmetic operators</a></h5></li>
  <li><h5><a href="#compOps"> Comparators </a></h5></li>
  <li><h5><a href="#logOps"> Logical operators </a></h5></li>
  <li><h5><a href="#stringOps"> String concatenation</a></h5></li>
  <li><h5><a href="#orElseOp"> orElse</a></h5></li>  
</ul>
<li><h4><a href="#listOps"> List operators </a></h4></li>  
<li><h4><a href="#iifOps"> The ternary inline-if operator</a></h4></li>  
<li><h4><a href="#typecheckOps"> Type check operators</a></h4></li>  
<li><h4><a href="#assignmentOps"> Assignment operators</a></h4></li>  
<li><h4><a href="#cStyleOps"> C-Style operators</a></h4></li>  
</ul> 
  <li><h3><a href="functions.html">Functions</a></h4></li>
  <li><h3><a href="specials.html">Special constructs</a></h4></li>
  <li><h3><a href="builtin.html">Built-in Functions</a></h4></li>
  <li><h3><a href="formatStrings.html">Format Strings</a></h4></li>
  <li><h3><a href="packages.html">User packages</a></h4></li>
</ul>
</div>
<div class="docContent">
<h3><a name="overview"> Overview<a></h3>
<table>
  <tr><td>Op.</td><td>Precedence</td><td>Name</td></tr>
<tr><td><code>|</code></td><td>1</td><td> list concatenation</td></tr>
<tr><td><code>^</code></td><td>2</td><td> potentiation</td></tr>
<tr><td><code>**</code></td><td>2</td><td> potentiation</td></tr>
<tr><td><code>*</code></td><td>3</td><td> multiplication</td></tr>
<tr><td><code>/</code></td><td>3</td><td> division</td></tr>
<tr><td><code>div</code></td><td>3</td><td> integer division</td></tr>
<tr><td><code>mod</code></td><td>3</td><td> modulo</td></tr>
<tr><td><code>+</code></td><td>4</td><td> plus</td></tr>
<tr><td><code>-</code></td><td>4</td><td> minus</td></tr>
<tr><td><code>&</code></td><td>5</td><td> string concatenation</td></tr>
<tr><td><code>=</code></td><td>6</td><td> equals</td></tr>
<tr><td><code><></code></td><td>6</td><td> not equals</td></tr>
<tr><td><code>!=</code></td><td>6</td><td> not equals</td></tr>
<tr><td><code><=</code></td><td>6</td><td> lesser/equals</td></tr>
<tr><td><code>>=</code></td><td>6</td><td> greater/equals</td></tr>
<tr><td><code><</code></td><td>6</td><td> lesser</td></tr>
<tr><td><code>></code></td><td>6</td><td> greater</td></tr>
<tr><td><code>==</code></td><td>6</td><td> list equals</td></tr>
<tr><td><code>in</code></td><td>7</td><td> in</td></tr>
<tr><td><code>+</code></td><td>8</td><td> unary plus</td></tr>
<tr><td><code>-</code></td><td>8</td><td> unary minus</td></tr>
<tr><td><code>and</code></td><td>8</td><td> bitwise and</td></tr>
<tr><td><code>AND</code></td><td>8</td><td> lazy and</td></tr>
<tr><td><code>orElse </code></td><td>9</td><td> orElse</td></tr>
<tr><td><code>or</code></td><td>9</td><td> bitwise or</td></tr>
<tr><td><code>xor</code></td><td>9</td><td> bitwise exclusive or</td></tr>
<tr><td><code>OR</code></td><td>9</td><td> lazy or</td></tr>
<tr><td><code>? :</code></td><td>n/a</td><td> ternary inline if operator</td></tr>
<tr><td><code>@</code></td><td>n/a</td><td> list-to-parameter</td></tr> 
</table>

<h3><a name="scalarOps"> Scalar operators<a></h3>
Scalar operators are those operators which take the form: <code>scalar o scalar -> scalar</code><br>
All of those operators apart from <code>==</code>, <code>AND</code>, <code>OR</code> and <code>orElse</code> are overloaded for lists according to the following prototype (all occuring variables are scalars and none is an expression-literal):<code>
[<span class="identifier">x0</span>,<span class="identifier">x1</span>,<span class="operator">...</span>] <span class="operator">o</span>  <span class="identifier">y</span>          <span class="operator">-></span> [<span class="identifier">x0</span> <span class="operator">o</span> <span class="identifier">y</span> , <span class="identifier">x1</span> <span class="operator">o</span> <span class="identifier">y</span> , <span class="operator">...</span>]
 <span class="identifier">x</span>          <span class="operator">o</span> [<span class="identifier">y0</span>,<span class="identifier">y1</span>,<span class="operator">...</span>] <span class="operator">-></span> [<span class="identifier">x</span>  <span class="operator">o</span> <span class="identifier">y0</span>, <span class="identifier">x</span>  <span class="operator">o</span> <span class="identifier">y1</span>, <span class="operator">...</span>]
[<span class="identifier">x0</span>,<span class="identifier">x1</span>,<span class="operator">...</span>] <span class="operator">o</span> [<span class="identifier">y0</span>,<span class="identifier">y1</span>,<span class="operator">...</span>] <span class="operator">-></span> [<span class="identifier">x0</span> <span class="operator">o</span> <span class="identifier">y0</span>, <span class="identifier">x0</span> <span class="operator">o</span> <span class="identifier">y1</span>, <span class="operator">...</span>]
</code>The last one will work if (and only if) both operators have the same number of list elements.<br>
While this is handy in most situations, there are some counter intutive consequences:<ul>
  <li> Lazy boolean operators behave differently from non-lazy operators (see <a href="#logOps"> Logical operators </a>)</li>
  <li> Equals behaves strangely<br>Comparisons of lists with the <code>=</code>-comparator will return lists of booleans, e.g. <code>
<!--mnh-->
  [1,2]=[1,2] -> [true,true]
<!--end-->
</code>
As a fallback solution, the <code>==</code>-comparator can be used, which will return a scalar <code>true</code> if the operands have the same size and all list elements are equal, e.g. <code>
<!--mnh-->
  [1,2]==[1,2] -> true
<!--end-->
</code>
  </li>
  </ul>
For expression-literals, all operators will be used to expand the expression to a new expression-literal:<code>
{<span class="identifier">expr</span>} <span class="operator">o</span> <span class="identifier">X</span> <span class="operator">-></span> {(<span class="identifier">expr</span> <span class="operator">o</span> <span class="identifier">X</span>)}
</code>

<h4><a name="#arithOps"> Arithmetic operators</a></h4>
<table border="0">
<tr><td><code>+</code></td><td><h5>Addition</h5></td></tr><tr><td></td><td>
This is the common addition operator, which also doubles as an unary "neutral" operator.<br> As in many modern languages, the operator is overloaded for string concatenation.
In contrast to languages as C or Java, it does not allow for concatenation of non-strings and strings.<br>
If both operands are integers, the result will be an integer. <br>
If both operands are numeric and at least one of them is real, the result will be a real number.<br>
Examples:<code>
<!--mnh-->
 in> 1+5
out> 6

 in> [1, 2.4, 3]+5
out> [6, 7.4, 8]

 in> 1+[5,6.2,7]
out> [6, 7.2, 8]

 in> [1.5, 2, 3]+[5, 6, 7.106]
out> [6.5, 8, 10.106]

 in> "a"+"b"
out> "ab"

 in> [1,2,3]+[5,6]
<!--end-->
<span class="red">!! >Ev.Error:  :?,? Invalid list lengths 3 and 2 given for operator +</span>
</code>
</td></tr>
<tr><td><code>-</code></td><td><h5>Subtraction</h5></td></tr><tr><td></td><td>
This is the common subtraction operator, which also doubles as unary negation.<br>
If both operands are integers, the result will be an integer. <br>
If both operands are numeric and at least one of them is real, the result will be a real number.
</td></tr>
<tr><td><code>*</code></td><td><h5>Multiplication</h5></td></tr><tr><td></td><td>
This is the common multiplication operator.<br>
If both operands are integers, the result will be an integer. <br>
If both operands are numeric and at least one of them is real, the result will be a real number.
</td></tr>
<tr><td><code>/</code></td><td><h5>Real division</h5></td></tr><tr><td></td><td>
This is the common division operator.<br>
If both operands are numeric the result is a real number.
</td></tr>
<tr><td><code>**</code>, <code>^</code></td><td><h5>Potentiation</h5></td></tr><tr><td></td><td>
This is the potentiation operator.<br>
The result type will be the simplest possible type possible for representing the analytic result.<br>
Examples: <code>
<!--mnh-->
 in> 2^2
out> 4 //The result is an integer
 in> 2^-2
out> 0.25 //The result is a real number
<!--end-->
</code>
</td></tr>
<tr><td><code>div</code></td><td><h5>Integer division</h5></td></tr><tr><td></td><td>
Inspired by Pascal.
Examples: <code>
<!--mnh-->
 in> 30 div 12;
out> 2
 in> -15 div 12;
out> -1   
<!--end-->
</code>
</td></tr>
<tr><td><code>mod</code></td><td><h5>Integer modulo</h5></td></tr><tr><td></td><td>
Inspired by Pascal.<br>
This is the "symmetric" modulo operator, i.e. <code><span class="identifier">x</span> <span class="operator">mod</span> <span class="identifier">y</span> = <span class="operator">-</span>(<span class="operator">-</span><span class="identifier">x</span> <span class="operator">mod</span> <span class="identifier">y</span>) = <span class="operator">-</span><span class="identifier">x</span> <span class="operator">mod</span> <span class="operator">-</span><span class="identifier">y</span></code>
<br>Examples: <code>
<!--mnh-->
 in> 30 mod 12;
out> 6
 in> -15 mod 12;
out> -3 
<!--end-->
</code>
</td></tr>
</table>

<h4><a name="compOps"> Comparators</a></h4>
Comparators are implemented, so that they return a boolean or a list of booleans for most cases, the only exception being comparison of lists of incompatible sizes.<br>
Consequently all comparators <code>o</code> must be read as<code>
x o y -> [x and y are naively comparable] and (x o y)</code><br>
As a further consequence, the following expressions will return the same result only if x and y are comparable:<code>
<!--mnh-->
x > y
not(x<=y)
<!--end-->
</code><br>
Comparators can be used as in mathematical notation, e.g. <code>
<!--mnh-->
x < y < z
<!--end-->
</code> is identical to <code>
<!--mnh-->
x < y and y < z
<!--end-->
</code>
For comparators in function definitions see <a href="functions.html">MNH5 - Function definitions</a>.
<br>
<table border="0">
<tr><td><code>= </code></td><td><h5>Scalar equals</h5></td></tr><tr><td></td><td>
Returns a boolean or a list of booleans.<br>Returns true if the comparands are comparable and equal. <br> Examples: <code>
<!--mnh-->
 in> 1=1
out> true
 in> 2=2.0
out> true
 in> 3=[3]
out> [true]
 in> 4=[4,5,6]
out> [true,false,false]
 in> [7,8,9]=[7,8,9]
out> [true,true,true]
 in> "a"=3
out> false
<!--end-->
</code></td></tr>
<tr><td><code>==</code></td><td><h5>List equals</h5></td></tr><tr><td></td><td>
Returns a scalar boolean.<br>Returns true if the comparands are comparable, have the same number of list elements and all list elements are equal.<br>
<code>
<!--mnh-->
[x0,x1,...] == [y0,y1,...]  ->  x0 == y0 AND x1 == y1 AND ...
<!--end-->
</code>
For scalars the behavior is the same as the scalar equals'.<br>Examples: <code>
<!--mnh-->
 in> 1==1
out> true
 in> 2==2.0
out> true
 in> 3==[3]
out> false
 in> 4==[4,5,6]
out> false
 in> [7,8,9]==[7,8,9]
out> true
 in> "a"==3
out> false
<!--end-->
</code></td></tr>
<tr><td><code><></code>, <code>!=</code></td><td><h5>Not equals</h5></td></tr><tr><td></td><td>
Returns a boolean or a list of booleans.<br>Returns true if the comparands are comparable and not equal.<br>
In conjuction with equals, one might define a function to find out if two variables are comparable:<br><code>
<!--mnh-->
 in> allTrue(x)->x==true OR trueCount(x)=size(x)
 in> areComparable(x,y)->allTrue(x=y or x<>y)

 in> areComparable(3,4.0)
out> true
 in> areComparable(3,[1,2,"a"])
out> false
<!--end-->
</code></td></tr>
<tr><td><code>> </code></td><td><h5>Greater than</h5></td></tr><tr><td></td><td>
Returns a boolean or a list of booleans.<br>Returns true if the comparands are comparable and the left hand comparand is lesser than the right hand operand.</td></tr>
<tr><td><code>< </code></td><td><h5>Lesser than</h5></td></tr><tr><td></td><td>
Returns a boolean or a list of booleans.<br>Returns true if the comparands are comparable and the left hand comparand is greater than the right hand operand.</td></tr>
<tr><td><code>>=</code></td><td><h5>Greater-or-equal</h5></td></tr><tr><td></td><td>
Returns a boolean or a list of booleans.<br>Returns true if the comparands are comparable and the left hand comparand is greater than the right hand operand or both comparands are equal.</td></tr>
<tr><td><code><=</code></td><td><h5>Lesser-or-equal</h5></td></tr><tr><td></td><td>
Returns a boolean or a list of booleans.<br>Returns true if the comparands are comparable and the left hand comparand is lesser than the right hand operand or both comparands are equal.</td></tr>
</table>

<h4><a name="logOps">Logical operators</a></h4>
<table border="0">
<tr><td><code>and</code></td><td><h5>Logical or bitwise and</h5></td></tr><tr><td></td><td>
Examples: <code>
<!--mnh-->
 in> true and false
out> false
 in> 3 and 6
out> 2
 in> 1 and [1..5]
out> [1,0,1,0,1]
 in> false and 3
<!--end-->
<span class="red">!! >Ev.Error:  :?,? Operator and is not supported for types boolean and int</span>
</code></td></tr>
<tr><td><code>or</code></td><td><h5>Logical or bitwise or</h5></td></tr><tr><td></td><td>
Examples: <code>
<!--mnh-->
 in> true or false
out> true
 in> 3 or 6
out> 7
 in> 1 or [1..5]
out> [1,3,3,5,5]
 in> false or 3
<!--end-->
<span class="red">!! >Ev.Error:  :?,? Operator or is not supported for types boolean and int</span>
</code></td></tr>
<tr><td><code>xor</code></td><td><h5>Logical or bitwise exclusive-or</h5></td></tr><tr><td></td><td>
Examples: <code>
<!--mnh-->
 in> true xor false
out> true
 in> 3 xor 6
out> 5
 in> 1 xor [1..5]
out> [0,3,2,5,4]
 in> false xor 3
<!--end-->
<span class="red">!! >Ev.Error:  :?,? Operator xor is not supported for types boolean and int</span>
</code></td></tr>
<tr><td><code>AND</code></td><td><h5>Logical lazy and</h5></td></tr><tr><td></td><td>
Lazy operators are executed <i>extremely</i> lazy. The left-hand-side operand must be a scalar boolean.
For any right-hand-side expression <code>RHS</code> the behavior is as follows:<code>
<!--mnh-->
  true  AND RHS -> RHS
  false AND RHS -> false
<!--end-->
</code>
Or generally:<code>
<!--mnh-->
  x AND y -> x ? y : x;
<!--end-->
</code>
Used as aggregator in an <code>each</code>, <code>pEach</code> or <code>agg</code> construct, the loop over all elements is cancelled as soon as the first <code>false</code> is encountered.
</td></tr>
<tr><td><code>OR</code></td><td><h5>Logical lazy or</h5></td></tr><tr><td></td><td>
Lazy operators are executed <i>extremely</i> lazy. The left-hand-side operand must be a scalar boolean.
For any right-hand-side expression <code>RHS</code> the behavior is as follows:<code>
<!--mnh-->
  true  OR RHS -> true
  false OR RHS -> RHS
<!--end-->
</code>
Or generally:<code>
<!--mnh-->
  x OR y -> x ? x : y;
<!--end-->
</code>
Used as aggregator in an <code>each</code>, <code>pEach</code> or <code>agg</code> construct, the loop over all elements is cancelled as soon as the first <code>true</code> is encountered.
</td></tr>
</table>

<h4><a name="stringOps">String concatenation</a></h4>
The <code>&</code>-operator for string concatenation (inspired from Excel) was introduced as the preferred method to concatenate strings.<br>
In contrast to the <code>+</code> operator it allows for concatenation of any literals to a string.<br>
Examples:<code>
<!--mnh-->
   in> 1&2+4;
  out> '16'
   in> 1&2=4;
  out> false
<!--end-->
</code>

<h4><a name="orElseOp">orElse</a></h4>
The <code>orElse</code>-operator is intended for cases where the left-hand-side operand may be <code>void</code>, e.g. <code>
<!--mnh-->
   in> sum(L:numericList)->L.agg(+) orElse 0;
   in> sum([1, 2, 3]);
  out> 6
   in> sum([]);
  out> 0
   in> void orElse 2;
  out> 2
   in> 1 orElse 2;
  out> 1
   in> 1+void orElse 2;
  out> 1
   in> false AND true orElse 2;
  out> false
   in> false OR true orElse 2;
  out> true  
<!--end-->
</code>

This is a lazy operator, i.e. the right-hand-side is evaluated only if necessary.<br>
Used as aggregator in an <code>each</code>, <code>pEach</code> or <code>agg</code> construct, the loop over all elements is cancelled as soon as the first non-<code>void</code> element is encountered.

<h3><a name="listOps">List operators</a></h3>
<table border="0">
<tr><td><code>|</code></td><td><h5>List concatenation</h5></td></tr><tr><td></td><td>
The list concatenation operator can be used to construct lists. The general behavior is as follows<code>
<!--mnh-->
   x | y -> [x,y];
   x |[y]-> [x,y];
  [x]| y -> [x,y];
  [x]|[y]-> [x,y];
<!--end-->
</code>
However the result does not have to be a flat list; e.g.<code>
<!--mnh-->
  x |[[y]] -> [x,[y]];
<!--end-->
</code>
</td></tr>

<tr><td><code>in</code></td><td><h5>in-operator</h5></td></tr><tr><td></td><td>
The in-operator (inspired by SQL) tests, if the left hand side operand is contained in the right hand side operand.<br>
For obvious reasons the right hand side operands must be a list.<br>
<code>
<!--mnh-->
x in [y0,y1,...] -> x==y0 or x==y1 or ...;
<!--end-->
</code> or, if you are already famliar with the <a href="specials.html#each">each-construct</a>:<code>
<!--mnh-->
x in Y -> Y.each(y,x==y,OR);
<!--end-->
</code>
</td></tr>
<tr><td><code>@<code></td><td><h5>List-to-parameter operator</h5></td></tr><tr><td></td><td>
The list-to-parameter operator can be used for alternative parameter passing. It converts the list (expression or literal) following the operator to a parameter list for the function preceding the operator.<br>
The following calls are equivalent:<code>
<!--mnh-->
  f(1,2,3,4,5);
  f@[1,2,3,4,5];
  f@[1..5];
<!--end-->
</code>
This can also be applied to implement recursive variadic functions. The following functions <code>sum1</code> and <code>sum2</code> will show the same behaviour, returning the sum of all given parameters:<code>
<!--mnh-->
  sum1->0;
  sum1(x,...)->x+sum1@...;

  sum2->0;
  sum2(...)->... .agg(+);
<!--end-->
</code>
</td></tr>
</table>

<h3><a name="iifOps"> The ternary inline-if operator</a></h3>
The ternary inline-if operator is inspired by C and it's successors.<br>Syntax is <code>B ? X : Y</code>, where <code>B</code> is a boolean scalar, <code>X</code> is the result if <code>B</code> evaluates to true and <code>Y</code> is
the result if <code>B</code> evaluates to false.<br>
Note that <code>B</code> must be a boolean scalar; boolean lists are not allowed.<br>
Lazy evaluation is employed, i.e. <code>X</code> is evaluated only if <code>B</code> is true and <code>Y</code> is evaluated only if <code>B</code> is false.

<h3><a name="typecheckOps"> Type check operators</a></h3>
Type check operators can be employed to test a value or an expression for it's type; they return boolean scalars, true if the types match. <br>Syntactically type checks are unary operators in postfix notation.
<br>The following type checks are defined:<code>
<!--mnh-->
  :scalar
  :list
  :boolean
  :booleanList
  :int
  :intList
  :real
  :realList
  :string
  :stringList
  :numeric
  :numericList
  :keyValueList
  :expression
<!--end-->
</code><br>
Examples: <code>
<!--mnh-->
   in> checkedType(x)->
         (x:scalar      ? 'scalar'      : void)|
         (x:list        ? 'list'        : void)|
         (x:boolean     ? 'boolean'     : void)|
         (x:booleanList ? 'booleanList' : void)|
         (x:int         ? 'int'         : void)|
         (x:intList     ? 'intList'     : void)|
         (x:real        ? 'real'        : void)|
         (x:realList    ? 'realList'    : void)|
         (x:string      ? 'string'      : void)|
         (x:stringList  ? 'stringList'  : void)|
         (x:numeric     ? 'numeric'     : void)|
         (x:numericList ? 'numericList' : void)|
         (x:keyValueList? 'keyValueList': void)|
         (x:expression  ? 'expression'  : void);

   in> checkedType(3)
  out> ["scalar","int","numeric"]
   in> checkedType([1, 2.4, 5])
  out> ["list","numericList"]
   in> checkedType(["A", true, 5])
  out> ["list"]
<!--end-->
</code>

<h3><a name="assignmentOps"> Assignment operators</a></h3>
For sake of completeness we also list the assignment operator and declaration operator here, even though they are not implemented as operators but as special constructs with side effects.
<br>For details on user defined functions see <a href="functions.html">MNH5 - Function definitions</a>.<br>
<table border="0">
<tr><td><code>-></code></td><td><h5>Declaration operator</h5></td></tr><tr><td></td><td>
Declares a function, returning nothing.</td></tr>
<tr><td><code>:=</code></td><td><h5>Assignment operator</h5></td></tr><tr><td></td><td>
Declares a function and resolves the right-hand-side immediately, returning nothing.<br>
It can also be used to assign a value to a mutable rule or a block-local variable, returning the value after assigning:<code>
<!--mnh-->
  mutable last_x_in_f:=void;
  f(x)->print('Last x was: ',last_x_in_f) and
        print('This x is : ',last_x_in_f:=x);
<!--end-->
</code> </td></tr>
</table>

<h3><a name="cStyleOps"> C-Style operators</a></h3>
The following C-Style operators are supported: <ul>
  <li> <code>+=</code> Adds the right-hand-side to the left-hand-side and returns the new value. </li>
  <li> <code>-=</code> Subtracts the right-hand-side from the left-hand-side and returns the new value. </li>
  <li> <code>*=</code> Multiplies the right-hand-side with the left-hand-side and returns the new value. </li>
  <li> <code>/=</code> Divides the right-hand-side by the left-hand-side and returns the new value. </li>
  <li> <code>&=</code> String-Concatenates the right-hand-side with the left-hand-side and returns the new value. </li>
  <li> <code>|=</code> Append the left-hand-side to the right-hand-side and returns the new value. </li>
</ul>
While the first 4 of the above are just "syntactic sugar" and can be equivalently expressed with the operators given in the previous sections,
the latter 2 additionally allow for specific optimizations, making e.g. the operation <code>L|=x;</code> faster than <code>L:=L|x;</code> (though they still are semantically equivalent).
</div>
<!--commonFoot-->
<!--file functions.html-->
<!--commonHead-->
<div class="navContent">
  <ul>
  <li><h3><a href="index.html">Quick start</a></h4></li>
  <li><h3><a href="types.html">Types</a></h4></li>
  <li><h3><a href="operators.html">Operators</a></h4></li>
  <li><h3><a href="functions.html">Functions</a></h4></li>
<ul>
<li><h4><a     href="#calls">Calls</a></h4></li>
<li><h4><a     href="#declarations">Declarations</a></h4></li>
<li><h4><a     href="#assignments">Assignments</a></h4></li>
<li><h4><a     href="#restrictions">Parameter restrictions</a></h4></li>
<li><h4><a     href="#variadic">Variadic functions</a></h4></li>
<li><h4><a     href="#beginEnd">Begin-End-Blocks</a></h4></li>
<li><h4><a     href="#modifiers">Modifiers</a></h4><ul>
<li><h5><a href="#privateMod">private</a></h5></li>
<li><h5><a href="#memoizedMod">memoized</a></h5></li>
<li><h5><a href="#synchronizedMod">synchronized</a></h5></li>
<li><h5><a href="#mutableMod">mutable</a></h5></li>
<li><h5><a href="#persistentMod">persistent</a></h5></li>
<li><h5><a href="#localMod">local</a></h5></li></ul></li>
</ul>
  <li><h3><a href="specials.html">Special constructs</a></h4></li>
  <li><h3><a href="builtin.html">Built-in Functions</a></h4></li>
  <li><h3><a href="formatStrings.html">Format Strings</a></h4></li>
  <li><h3><a href="packages.html">User packages</a></h4></li>
  </ul>
</div>
<div class="docContent">
<h3><a name="calls">Calls</a></h3>
To keep it short:<ul>
<li><b>Calling convention</b><br>
All variables are immutable or when they are not, they behave as immutable variables. Consequently all parameters are passed as references. Trying to assign values passed parameters will cause an error.
<br>
Every function <code>f</code> can be called with any number of parameters; matching parameters will lead to evaluation of some kind, mismatching parameters
will lead to an error output.</li>
<li><b>Omitting parameters</b><br>A nullary function can be called with or without parameters, so the following statements will behave the same:<code>
<!--mnh-->
  someFunction;
  someFunction();
<!--end-->
</code>
If <code>someFunction</code> returns a nullary expression, consider the following:<code>
<!--mnh-->
   in> someFunction :={1+2*3};
   in> someFunction;
  out> {(1+2*3)}
   in> someFunction();
  out> {(1+2*3)}
       //First evaluate someFunction then evaluate the returned expression
   in> someFunction()();
  out> 7           
<!--end-->
</code>
If however <code>someOtherFunction</code> returns an unary expression the behaviour is slightly different:<code>
<!--mnh-->
   in> someOtherFunction:={$x/2};
       //As above
   in> someOtherFunction();
  out> {($x/2)}
       //As above, passing (1) as parameter list to the returned expression
   in> someOtherFunction()(1);
  out> 0.5
       //Fallback behaviour: someOtherFunction cannot be applied to parameter list (1)
       //  but the returned expression can, so it is interpreted as the previous call
   in> someOtherFunction(1);
  out> 0.5
<!--end-->
</code>
</li><li><b>Visibility</b><br>
Visibility is handled as in Pascal, i.e. a local function definition hides all imported functions with the same name. <br>
If a function of the same name is defined in more than one used package, the definition in the last imported package hides previous definitions.<br>
To access a "hidden" function, you can access it by fully qualifying it via <code><i>packageName</i>.<i>functionName</i></code>.<br>
Example: Define a function returning the "square of a string", using the builtin function as a fallback:<code>
<!--mnh-->
  sqr(s:string):=string(math.sqr(softCast(s)));
  sqr(x)->math.sqr(x);
<!--end-->
</code>
</li>
<li><b>Pseudo-Object-Notation</b><br>Even though MNH is not object oriented it supports <i>(Pseudo-)Object-Notation</i>. This means that for some function <code>f</code> the
following statements are equivalent: <code>
<!--mnh-->
  f(x);
  x.f;
<!--end-->
</code>
This can improve readability a lot. For example consider the following equivalent statements:<code>
<!--mnh-->
  sort(trim(replace(fileLines('input.txt'),'x',' ')),{length($x)<=length($y)});
  fileLines('input.txt').replace('x',' ').trim.sort({length($x)<=length($y)});
<!--end-->
</code>
While the first one is virtually unreadable without bracket highlighting, the secon one quite clearly reads: "Read all lines from file 'input.txt', 
then replace every ocurring 'x' by a space, then trim each line, then sort the lines by ascending length.".<br>
This notation can be ambiguous however, since in <code>a.b</code> identifier <code>a</code> can either denote a package (so <code>a.b</code> is a fully qualified function) or
a local function or variable (so <code>a.b</code> is interpreted as <code>b(a)</code>). This is resolved by favouring the first interpretation: if there is an imported package "a", it will be used.
</li>
</ul>

<h3><a name="declarations">Declarations</a></h3>
A function declaration follows the prototype <i>ruleId(pattern)</i><code>-></code><i>ruleBody</i>.<br>
The declaration may be preceded by <a href="#modifiers">modifiers</a>, the pattern may be empty (producing a nullary function).<br>
<i>Patterns</i> form a means for case distinction. They may also serve to make the function "somewhat typesafe". The most primitive pattern element is just an identifier, without any restrictions:<code>
<!--mnh-->
  f(x)->sin(1/x);
<!--end-->
</code>
Patterns may consist of any number of elements:<code>
<!--mnh-->
  g(a,b,c,d,e,f,g)->a+b*c/d^e-f*g;
  randomDigit->floor(random*10);
<!--end-->
</code>
Please have a look at <a href="#restrictions">Parameter restrictions</a> for more sophisticated patterns.

<h3><a name="assignments">Assignments</a></h3>
An assignment follows the prototype <i>ruleId(pattern)</i><code>:=</code><i>ruleBody</i>.<br>
As you can see it is identical to the declaration prototype apart from the assignment operator. Behaviour is only almost identical: An assignment is evaluated "<i>on declaration</i>", while a declaration is evaluated only when it
is called. This is important when you take side effects into account. A reasonable example would be:<code>
<!--mnh-->
  pi:=4*arctan(1);
<!--end-->
</code>
This defines pi and is evaluated only once.<br>
A less reasonable example would be the following declaration - a "random" number which stays the same during evaluation:<code>
<!--mnh-->
  constantRandom:=random;
<!--end-->
</code>
<h3><a name="restrictions">Parameter restrictions</a></h3>
Parameter restrictions fall in three categories:<ul>
  <li> Type checks (see <a href="operators.html#typecheckOps"> operators</a>)
  <li> Comparison with a literal (see <a href="operators.html#compOps"> Comparators</a>)
  <li> Comparison with another parameter
</ul>
Apart from the type checks defined as unary operator there are two type checks which look like comparisons:<ul>
  <li> <code>x=[]</code> matches, if x is an empty list
  <li> <code>x<>[]</code> matches, if x is a list but not empty
</ul>
If a rule has several subrules (i.e. there are several declarations with the same ID), the subrules are tested in order of their declaration and the first matching subrule will be applied.<br>
Example: <code>
<!--mnh-->
  fib(i<=1)->1;                      //recursion terminates
  fib(i:int)->fib(i-1)+fib(i-2);     //recursion step
  fib(I:intList)->I.each(i,fib(i));  //vectorization
<!--end-->
</code>
There is a shorthand for tests on equality: the first comparand can be omitted. The following pairs of function heads are equivalent:<code>
<!--mnh-->
  f(x==1)...;
  f(x)...;

  f(x==y,y)...;
  f(y,y)...;

  f(x==[])...;
  f([])...;
<!--end-->
</code>

<h3><a name="variadic">Variadic functions</a></h3>
Variadic functions can be defined using three dots (<code>...</code>) as last parameter in the function head.
This allows the function to accept any number of additional parameters.<br>
The trailing anonymous parameters can be referenced inside the function body by the pseudo-identifier <code>...</code>, which gives the remaining (anonymous) parameters as a list. 
An example for a variadic recursive function, printing out all parameters in a separate line wold be:<code>
<!--mnh-->
  multiPrint->void;
  multiPrint(x,...)->print(x) | multiPrint@...;
<!--end-->
</code>
<h3><a name="beginEnd">Begin-End-Blocks</a></h3>

<i>Begin-End-Blocks</i> are a means to program in a prodedural manner. It looks as follows <code>
  begin
    <i>statement</i>
    <i>...</i>
    <i>statement</i>
    <i>result statement</i>
  end;
</code> The last statement provides a result which is returned from the block. The other statements are executed before and only have an effect if they
have side effects. <br> Identifiers occuring as the left hand side of an assignment will be created in the current scope if (and only if) they
are declared with a <a href="#localMod">local</a>-modifier <b>or</b> cannot be found in any surrounding scope.
<br>A neat example demonstrating the usefulnes of this feature is calculation of a running sum of a numeric list:<code>
<!--mnh-->
  runningSum(L:numericList)->begin
    local sum:=0;
    L.each(element,sum+=element);
  end;
<!--end-->
</code>This function makes use of the fact that the assignment-operator and C-style operators return the value of the variable after the assignment.<br>
Note, that parallel processing via <code>pEach</code> is unsafe within Begin-End-Blocks if block local variables are reassigned.
to <code>each</code>-statements.

<h3><a name="modifiers">Modifiers</a></h3>
<h4><a name="privateMod">private</a></h4>
The <i>private modifier</i> can be used to hide a subrule from importing packages.
Inside of the package containing the modified subrule it is usable as any other rule.

<h4><a name="memoizedMod">memoized</a></h4>
The <i>memoized modifier</i> enables caching for the complete rule; if one subrule of a rule is marked as memoized, then the complete rule is memoized.
<br>Caching means, that internally a hash map with key value pairs (<i>parameters</i>,<i>function result</i>) is created. For performance reasons this
map has a size limit - if this limit is exceeded, key-value-pairs are "forgotten" based on a mixed strategy combining least-recently-used and least-frequently-used approaches.<br>
Used appropriately, caching results in enormous speedup. <br>
Note that memoized functions do not work well with parallelized evaluations.

<h4><a name="synchronizedMod">synchronized</a></h4>
The <i>synchronized modifier</i> protects a rule against parallel execution.<br>
This is desirable for functions with side effects, such as printing or modifying a <a href="#mutableMod">mutable</a> value.

<h4><a name="mutableMod">mutable</a></h4>
The <i>mutable modifier</i> allows for a rule to be mutable. The following restrictions apply:<ul>
  <li> A mutable rule also is not memoized per definition </li>
  <li> A mutable rule must have exactly one subrule </li>
  <li> A mutable rule's subrule must be nullary </li>
</ul>
Functions modifying the value of a mutable value should be <a href="#synchronizedMod">synchronized</a>.

<h4><a name="persistentMod">persistent</a></h4>
The <i>persistent modifier</i> allows for a rule to be persistent, i.e. the currently assigned value will be written to the source file after evaluation. The following restrictions apply:<ul>
  <li> A persistent rule also is mutable per definition </li>
  <li> A persistent rule also is not memoized per definition </li>
  <li> A persistent rule must have exactly one subrule </li>
  <li> A persistent rule's subrule must be nullary </li>
</ul>
Functions modifying the value of a persistent value should be <a href="#synchronizedMod">synchronized</a>.

<h4><a name="localMod">local</a></h4>
The <i>local modifier</i> ensures, that a variable is declared in the scope of the current <a href="#beginEnd">begin-end-blocks</a>.
It is only allowed in this context. Local variables always are mutable.
</div>
<!--commonFoot-->
<!--file types.html-->
<!--commonHead-->
<div class="navContent">
  <ul>
  <li><h3><a href="index.html">Quick start</a></h4></li>
  <li><h3><a href="types.html">Types</a></h4></li>
<ul>
<li><h4><a href="#intro">Introduction</a></h4></li>
<li><h4><a href="#scalars">Scalar types</a></h4><ul>
  <li><h5><a href="#booleans">Booleans</a></h5></li>
  <li><h5><a href="#integers">Integers</a></h5></li>
  <li><h5><a href="#reals">Reals</a></h5></li>
  <li><h5><a href="#strings">Strings</a></h5></li>
  <li><h5><a href="#expressions">Expressions</a></h5></li>
  <li><h5><a href="#void">void</a></h5></li>
  <li><h5><a href="#errors">Errors</a></h5></li>
</ul></li>
<li><h4><a href="#lists">List types</a></h4></li>
</ul>
  <li><h3><a href="operators.html">Operators</a></h4></li>
  <li><h3><a href="functions.html">Functions</a></h4></li>
  <li><h3><a href="specials.html">Special constructs</a></h4></li>
  <li><h3><a href="builtin.html">Built-in Functions</a></h4></li>
  <li><h3><a href="formatStrings.html">Format Strings</a></h4></li>
  <li><h3><a href="packages.html">User packages</a></h4></li>
  </ul>
</div>
<div class="docContent">
<h3><a name="intro">Introduction</a></h3>
MNH is <i>dynamically typed</i>, i.e. all types are only known at runtime. All types are either <i>scalars</i> (i.e. atomic values) or <i>lists</i>. <br>
This page is about the representation and basic behaviour of the types. For details on the operators defined on these types see <a href="operators.html">MNH5 - Operators</a>.

<h3><a name="scalars">Scalar types</a></h3>
<h4><a name="booleans">Booleans</a></h4>
Booleans are the simplest type. There are only two possible values:<code><span class="literal">true</span></code> and <code><span class="literal">false</span></code>.<br>
To directly input a boolean, use the reserved words <code><span class="literal">true</span></code> and <code><span class="literal">false</span></code>.

<h4><a name="integers">Integers</a></h4>
Integers are internally represented as 64bit two-complement integer numbers. Consequently the smallest possible integer is -9223372036854775808 and the largest possible integer is 9223372036854775807.<br>
Note that no overflow-checking is employed.<br>
Together with reals, integers form the class of <i>numeric</i> values.<br>
To directly input an integer, write a number only containing of digits, without a decimal point.

<h4><a name="reals">Reals</a></h4>
Reals are internally represented as 80bit <i>extended precision</i> floating point numbers in 32bit flavours of mnh and as ordinary 64bit double precision floating point numbers in 64bit flavours.<br>
Together with integers, reals form the class of <i>numeric</i> values.<br>
To directly input a real, write a number containing of digits and a decimal point and/or an exponent, e.g. <code>1.2E-2</code>.

<h4><a name="strings">Strings</a></h4>
Strings are internally represented as ANSI-Strings, without length limitation.<br>
You can use one of the following representations:<br>
<ul>
  <li><b>Pascal Strings</b>: Delimited by <code>'</code>. To insert a quote in the string, use <code>''</code>, e.g.:<code>
  <span class="identifier">quote</span><span class="operator">:=</span><span class="literal">''''</span>;
  <span class="identifier">doubleQuote</span><span class="operator">:=</span><span class="literal">'"'</span>;
  <span class="identifier">backslash</span><span class="operator">:=</span><span class="literal">'\'</span>;
</code></li>
  <li><b>Java Strings</b> (rather: Strings inspired by Java): Delimited by <code>"</code>.
  Within strings the following escape-sequences are defined:<br>
  <table><tr class="ruleHead"><td>Sequence</td><td>Hex-Code</td><td></td></tr>
  <tr><td><code>\n</code></td><td><code>#0A</code></td><td>Line break</td></tr>
  <tr><td><code>\r</code></td><td><code>#0D</code></td><td>Carriage return</td></tr>
  <tr><td><code>\t</code></td><td><code>#09</code></td><td>Tabulator</td></tr>
  <tr><td><code>\\</code></td><td><code>#5C</code></td><td>Backslash</td></tr>
  <tr><td><code>\"</code></td><td><code>#22</code></td><td>The delimiter, a double quote</td></tr>
  <tr><td><code>\0</code></td><td><code>#00</code></td></tr>
  <tr><td><code>\1</code></td><td><code>#01</code></td></tr>
  <tr><td><code>\2</code></td><td><code>#02</code></td></tr>
  <tr><td><code>\3</code></td><td><code>#03</code></td></tr>
  <tr><td><code>\4</code></td><td><code>#04</code></td></tr>
  <tr><td><code>\5</code></td><td><code>#05</code></td></tr>
  <tr><td><code>\6</code></td><td><code>#06</code></td></tr>
  <tr><td><code>\a</code></td><td><code>#07</code></td></tr>
  <tr><td><code>\b</code></td><td><code>#08</code></td></tr>
  <tr><td><code>\v</code></td><td><code>#0B</code></td></tr>
  <tr><td><code>\f</code></td><td><code>#0C</code></td><td>Form feed</td></tr>
  <tr><td><code>\S</code></td><td><code>#0E</code></td></tr>
  <tr><td><code>\s</code></td><td><code>#0F</code></td></tr>
  <tr><td><code>\d</code></td><td><code>#10</code></td></tr>
  <tr><td><code>\A</code></td><td><code>#11</code></td></tr>
  <tr><td><code>\B</code></td><td><code>#12</code></td></tr>
  <tr><td><code>\C</code></td><td><code>#13</code></td></tr>
  <tr><td><code>\D</code></td><td><code>#14</code></td></tr>
  <tr><td><code>\N</code></td><td><code>#15</code></td></tr>
  <tr><td><code>\X</code></td><td><code>#16</code></td></tr>
  <tr><td><code>\T</code></td><td><code>#17</code></td></tr>
  <tr><td><code>\Z</code></td><td><code>#18</code></td></tr>
  <tr><td><code>\M</code></td><td><code>#19</code></td></tr>
  <tr><td><code>\Y</code></td><td><code>#1A</code></td></tr>
  <tr><td><code>\x</code></td><td><code>#1B</code></td></tr>
  <tr><td><code>\F</code></td><td><code>#1C</code></td></tr>
  <tr><td><code>\G</code></td><td><code>#1D</code></td></tr>
  <tr><td><code>\R</code></td><td><code>#1E</code></td></tr>
  <tr><td><code>\U</code></td><td><code>#1F</code></td></tr>
  <tr><td><code>\-</code></td><td><code>#7F</code></td></tr>
  </table><br>
  e.g.:<code>
  <span class="identifier">quote</span><span class="operator">:=</span><span class="literal">"'"</span>;
  <span class="identifier">doubleQuote</span><span class="operator">:=</span><span class="literal">"\""</span>;
  <span class="identifier">backslash</span><span class="operator">:=</span><span class="literal">"\\"</span>;
<!--end-->  
</code></li>
  <li><b>Blobs</b>:
Alternatively strings can be written as "blobs", i.e. as a text block preserving line breaks and indentations. Blobs are started with a special comment
<code>//!</code><b><i><code>symbol</code></i></b> (where <i><code>symbol</code></i></b> is one character) and ended with <b><i><code>symbol</code></i></b>. An example:<code>
  <span class="builtin">print</span>(<span class="literal">//!$
  This is a simple text...
       with a " and a ' one of which would have to be escaped otherwise.
    And indentations of course.$</span>);
</code>
</li>
</ul>

<h4><a name="expressions">Expressions</a></h4>
Expression literals are a MNH5's version of anonymous functions. They are escaped using curly brackets. To define a parameter to an expression literal, use $-Variables.<br>
Example 1: <code>{sin(x)}  </code> This is a nullary (!) function, returning sin(x) if x is defined, or failing otherwise.<br>
Example 2: <code>{sin($x)} </code>  This is an unary function equivalent to the built-in function <code>sin(x)</code>.<br>
If an expression literal accepts more than one parameter, the parameters have to be given <i>in order of appearance</i>, i.e.<code>{$i*arctan($x/$i)}</code> would be called with parameters (i,x).<br>
Expression literals returned by a function are constructed on the fly. Consequently you can pass arguments to them, e.g. <code>
<!--mnh-->
  f(a,b)->{a+b*$x}
<!--end-->
</code> will return a linear scalar function.<br>
Expressions allow for anonymous recursion via the <code>$self</code> pseudo-literal, e.g. (Fibonacci numbers again):<code>
<!--mnh-->
  fib:={$i<=1 ? 1 : $self($i-1)+$self($i-2)};
<!--end-->
</code>
Instead of using parameters like <code>$x</code> you can also refer to parameters by their (zero based) index. For example the following functions are equivalent:<code>
<!--mnh-->
  f1:={$x**$y};
  f2:={$0**$1};
<!--end-->
</code>
Adressing parameters by their index is recommended for expressions in <a href="formatStrings.html">format strings</a>.

<h4><a name="void">void</a></h4>
The <code>void</code>-Literal is a special literal intended mainly for the use in <a href="specials.html#each">each-Clauses</a>. It represents an element <i>which is not there</i>, e.g. to construct a list of primes from 2 through 47 consider<code>
<!--mnh-->
 in> [2..7*7].each(i,(i>2 and i mod 2=0) or
                     (i>3 and i mod 3=0) or
                     (i>5 and i mod 5=0) or
                     (i>7 and i mod 7=0) ? void : i);
out> [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]
<!--end-->
</code>
For usual operators, <code>void</code> behaves as neutral element. <br>
It cannot be passed as a function argument.

<h4><a name="errors">Errors</a></h4>
Errors are no functional literals. They form a fallback for cases, where a literal result was expected but none could be provided (e.g. when invoking an operator with incompatible operands).<br>
You should see them rarely and when you see them they should have a corresponding error message.<br>
There is no way to directly write an error-literal.

<h3><a name="lists">List types</a></h3>
Lists contain zero or more elements of any type. They are represented as an enumeration of their elements, surrounded by square brackets, e.g.<code>
<!--mnh-->
  ["a",true,4.6]
<!--end-->
</code>
This example also shows, that types within a list can be mixed. You can use the same notation to construct lists.<br>In addition there is the <code>..</code>-separator, which is only allowed in list constructors.
It enumerates values, e.g. <code>[1..5]</code> gives <code>[1,2,3,4,5]</code>. Enumeration is possible independent from the ordering and is supported for integers and one-character-strings.<br>
List elements can be extracted from Lists via the <code>get</code> function or the associated shorthand <code>[?]</code>. The most straightforward way is access by a single index:<code>
<!--mnh-->
   in> simpleList :=['A'..'F'];
   in> simpleList.get(4);
  out> 'E'
   in> simpleList[4];
  out> 'E'  
<!--end-->
</code>
Alternative accesses include access by a list of indexes...<code>
<!--mnh-->
   in> simpleList.get([1, 5, 3]);
  out> ['B','F','D']
<!--end-->
</code>
...or by a list of booleans, which must have the same length as the accessed list. <code>
<!--mnh-->
   in> simpleList.get(simpleList<='C');
  out> ['A','B','C']
<!--end-->
</code>
<br>
A key-value-list is a nested list of the form <code>[[key1,value1],[key2,value2],...]</code>, where each key is a string. <br>
For those lists there is also the possibility of accessing the values by key or a list of keys:<code>
<!--mnh-->
   in> keyValueList :=[['one', 1],['two', 2]];
   in> keyValueList.get('one');
  out> 1
   in> keyValueList.get(['two','one']);
  out> [2,1]
<!--end-->
</code>
Additionally there is the function <code>mapGet</code> which accepts a fallback value as an additional argument:<code>
<!--mnh-->
   in> keyValueList.mapGet('three', 0);
  out> 0
   in> keyValueList.mapGet('two', 0);
  out> 2
<!--end-->
</code>

<br>
Elements of general nested lists can also be accessed conveniently (or inconveniently as you can see in the following equivalent examples):<code>
<!--mnh-->
   in> nested :=[[1, 2, 3],[4, 5, 6],[7, 8, 9]];
   in> nested.get(1).get(2);
  out> 6
   in> nested.get(1, 2);
  out> 6
   in> nested[1][2];
  out> 6
   in> nested[1,2];
  out> 6
<!--end-->
</code>
And finally there is the function <code>getInner</code> which allows access by index <i>k</i>, returning the <i>k</i>-th element of each sublist:<code>
<!--mnh-->
 in> nested.getInner(1);
out> [2,5,8]
<!--end-->
</code>
</div>
<!--commonFoot-->
<!--file specials.html-->
<!--commonHead-->
<div class="navContent">
  <ul>
  <li><h3><a href="index.html">Quick start</a></h4></li>
  <li><h3><a href="types.html">Types</a></h4></li>
  <li><h3><a href="operators.html">Operators</a></h4></li>
  <li><h3><a href="functions.html">Functions</a></h4></li>
  <li><h3><a href="specials.html">Special constructs</a></h4></li>
<ul>
<li><h4><a href="#each">each and pEach</a></h4></li>
<ul>
<li><h5><a href="#syntax">Syntax</a></h5></li>
<li><h5><a href="#construction">List construction</a></h5></li>
<li><h5><a href="#aggregation">List aggregation</a></h5></li>
<li><h5><a href="#consAgg">List construction and aggregation</a></h5></li>
<li><h5><a href="#parallelization">Parallelization</a></h5></li>
</ul>
<li><h4><a href="#aggregator">aggregator</a></h4></li>
<li><h4><a href="#while">while</a></h4></li>
<li><h4><a href="#when">when</a></h4></li>
<li><h4><a href="#try">try</a></h4></li>
</ul>
  <li><h3><a href="builtin.html">Built-in Functions</a></h4></li>
  <li><h3><a href="formatStrings.html">Format Strings</a></h4></li>
  <li><h3><a href="packages.html">User packages</a></h4></li>
  </ul>
</div>
<div class="docContent">
<h3><a name="each">each and pEach</a></h3>
<h4><a name="syntax">Syntax</a></h4>
The general syntax is: <code>
<!--mnh-->
  list.each(id,body,aggregator)
  list.pEach(id,body,aggregator)
  list.PEach(id,body,aggregator)
  list.agg(aggregator)
<!--end-->
</code>
Where <code>id</code> is an identifier,<br>
<code>list</code> is a list or an expression returning a list,<br>
<code>aggregator</code> (optional for <code>each</code> and <code>pEach</code>) is a full aggregator expression or a binary operator and<br>
<code>body</code> is an expression or list of expressions.<br>

<code>agg</code> is just a shorthand for an <code>each</code> construct without a body (consequently not needing an id to be used inside of the body).
If <code>agg</code> is used with a body which neither a primitive aggregator (as e.g. <code>+</code>) nor an aggregator (as e.g. <code>aggregator({$0/(1+$1)})</code>) 
but can be converted to an aggregator via the <a href="#aggregator">aggregator construct</a>, it will be converted to an aggregator.

<h4><a name="construction">List construction</a></h4>
To construct a list, ommit the aggregator. The body part is mandatory.<br>
Simple example: return the input list<code>
<!--mnh-->
   in> [0..3].each(i,i);
  out> [0,1,2,3]
<!--end-->
</code>
You can also use multiple body parts. These are then interlaced in the resulting list:<code>  
<!--mnh-->
   in> ['a'..'c'].each(c,c,upper(c));
  out> ['a','A','b','B','c','C']
<!--end-->
</code>
Reasonable example: return <code>f(i)</code> for every element <code>i</code> in the input list:<code>  
<!--mnh-->
   in> f(i)->-2*i;
   in> [0..3].each(i,f(i));
  out> [0,-2,-4,-6]
<!--end-->
</code>
More complex: a function returning the intersection of sets A and B<code>  
<!--mnh-->
   in> intersect(A,B)->A.get(A.each(a,a in B));
   in> intersect(2*[0..10],3*[0..10]);
  out> [0,6,12,18]
<!--end-->
</code>


<h4><a name="aggregation">List aggregation</a></h4>
To aggregate a list, use an aggregator but no body.<br>
If the list is empty, <code>void</code> is returned.<br>
Simple example: a function returing the sum of the argument:<code>
<!--mnh-->
   in> sum([]):=0;
   in> sum(L<>[])->L.agg(+);
   in> sum([1,5,-2,7]);
  out> 11
<!--end-->
</code>
Generally an aggregator is an expression expecting two parameters. Given an aggregator <code>a</code>, aggregation will be performed as follows:<code>
<!--mnh-->
   in> [x0,x1,x2,x3,...].agg(a);
  out> a(...a(a(a(x0,x1),x2),x3),...)
<!--end-->
</code>

<h4><a name="consAgg">List construction and aggregation</a></h4>
You can also use aggregator and body in the same each-/pEach clause.<br><br>
Nested each: construct a cross product:<code>  
<!--mnh-->
   in> [0..9].each(i,[0..9].each(j,[i,j]));
  out> [[[0,0],...,[0,9]],[[1,0],...,[1,9]],...]
<!--end-->
</code>
This returns a nested list which is probably one level deeper than intended.<code>
<!--mnh-->
   in> [0..9].each(i,[0..9].each(j,[i,j]),|);
  out> [[0,0],...,[0,9],[1,0],...,[1,9],...];
<!--end-->
</code>
This returns a nested list.<br><br>
Compute Euler's number based on inverse factorials<code>
<!--mnh-->
   in> fak(n<1)->1;
   in> fak(n :int)->[1..n].agg(*);
   in> [0..20].each(n,1/fak(n),+);
  out> 2.71828182845905
<!--end-->
</code>

<h4><a name="parallelization">Parallelization</a></h4>
This is simple.<br>In order to parallelize your existing <code>each</code>-expression just replace <code>each</code> by <code>pEach</code>.<br>
However <code>pEach</code> uses only as many threads as configured. If you want make sure that processing takes place in a parallel fashion, use the
<code>PEach</code> keyword instead. <br>

<h3><a name="aggregator">aggregator</a></h3>
The <code>aggregator</code> construct can be used to mark an expression for the use within an each-/pEach-clause.<code>
<!--mnh-->
       //A simple expression, interpreted as each-body
   in> [1..5].each(x,{1/$x+$y});
  out> [{(1/$x+$y)},{(1/$x+$y)},{(1/$x+$y)},{(1/$x+$y)},{(1/$x+$y)}]
       //An aggregator, interpreted as such           
   in> [1..5].each(x,aggregator({1/$x+$y}));
  out> 5.23255813953488
<!--end-->
</code>
<br>
As an additional effect, the expression is modified to accept an arbitrary number of parameters. This means that you can construct an aggregator using the
first argument only. Again the comparison with and without the <code>aggregator</code> keyword:
<code>
<!--mnh-->
   in> {$x}(1,2);
  Error  @:1,2 Cannot evaluate inline function {$x} with the given number of parameters; Got 2, expected 1
  Error [stack trace] @:1,1 0:  || {$x}(1,2)    
   in> aggregator({$x})(1,2);
  out> 1
<!--end-->
</code>
<br>
Finally you can use the <code>aggregator</code> keyword to construct simple binary expressions. For this you can use operators and the built-in functions 
<code>min</code> and <code>max</code>:<code>
<!--mnh-->
   in> aggregator(+);
  out> {($x+$y)}
   in> aggregator(min);
  out> {min($x,$y)}
<!--end-->
</code>
In each construct you should prefer passing a single operator as aggregator instead of a full blown expression for preformance reasons:<code>
<!--mnh-->
   in> list:=random(1000);
       //Run with "complex" aggregator
   in> run1:=time({list.each(x,aggregator(+))});
       //Run with "simple" aggregator
   in> run2:=time({list.each(x,           + )});
       //Are results equivalent ?
   in> run1.result==run2.result;
  out> true
       //Relative cost:
   in> run1['time']/run2['time'];
  out> 5.99899703090362
<!--end-->
</code>

<h3><a name="while">while</a></h3>
The <code>while</code> construct can be used to construct head-controlled loops. The general syntax is:<code>
<!--mnh-->
  while(condition,body);
<!--end-->
</code> 
Where <code>condition</code> is an expression returning a boolean value and body is one expression.<code>
<!--mnh-->
 in> greatestCommonDivisor(xIn:int,yIn:int)->
       begin
         local x:=xIn;
         local y:=yIn;
         while(
           x!=0!=y,
           x>y ? x:=x mod y
               : y:=y mod x);
         max(x,y);
       end;
 in> greatestCommonDivisor(12,102);
out> 6
<!--end-->
</code> 

<h3><a name="when">when</a></h3>
The <code>when</code> construct is an alternative to using cascaded if-then-else statements.<br>
With an odd number of arguments, the last arument will be interpreted as fallback statement if none of the condition statements returns true:
<code>
<!--mnh-->
  when(condition1,statement1,
       condition2,statement2,
                  elseStatement);
<!--end-->
</code> 
is equivalent to:
<code>
<!--mnh-->
  condition1 ? statement1 :
  condition2 ? statement2 : elseStatement;
<!--end-->
</code> 
With an even number of arguments, <code>void</code> will be returned if none of the condition statements returns true:
<code>
<!--mnh-->
  when(condition1,statement1,
       condition2,statement2);
<!--end-->
</code> 
is equivalent to:
<code>
<!--mnh-->
  condition1 ? statement1 :
  condition2 ? statement2 : void;
<!--end-->
</code> 

<h3><a name="try">try</a></h3>
The <code>try</code> construct can be used for basic exception handling.<br>
Syntax:<code>
<!--mnh-->
  try(body,exceptionHandling);
<!--end-->
</code>
First <code>body</code> is executed. If no exception is encountered, <code>exceptionHandling</code> is ignored.<br>
If there is an exception, <code>exceptionHandling</code> is executed and messages (infos, warnings, errors and even console-outputs) are
made available in a special variable <code>messages</code>. Plot output however is rolled back to the state before entering the try-construct.<br>
Each element of <code>messages</code> is a triplet <code>[messageText, level, location]</code>, where levels are:<br>
<ul>
  <li> <b>5: Severe errors</b> (stack overflow, out of memory, etc.)
  <li> <b>4: Parsing errors</b> (errors ocurring on tokenizing)
  <li> <b>3: Evaluation errors</b> (errors ocurring on evaluation)
  <li> <b>2: Warnings</b> 
  <li> <b>1: Notes</b> 
  <li> <b>-1: Internal messages</b> (plot creation messages, etc.)
  <li> <b>-2: Console ouput</b>
</ul>
Note that only a message of level 3 or higher will lead to execution of the <code>exceptionHandling</code> block.<br>
Example:<code>
<!--mnh-->
   in>  safeParse(s:string)->
          try(expression(s),
              //exception handling:
              begin
                print('Parsing failed with:');
                messages.each(m,m[1]>=3
                                ? print('  ',m[2],' ',m[0])
                                : void);
                print('Returning fallback result.');
                {0};
              end);   
   in> safeParse('!');
<!--end-->   
  Parsing failed with:
    @<new 9>:3,1 Cannot parse: ! (first char is "!"=#33)
    @<new 9>:3,7 The parsed expression appears to be empty
    @<new 9>:3,7   # expression('!')
  Returning fallback result.
<!--mnh-->  
  out> {0}
   in> safeParse('2+$x^2');
  out> {(2+$x^2)}                  
<!--end-->
</code>
</div>
</div>
<!--commonFoot-->
<!--file formatStrings.html-->
<!--commonHead-->
<div class="navContent">
  <ul>
  <li><h3><a href="index.html">Quick start</a></h4></li>
  <li><h3><a href="types.html">Types</a></h4></li>
  <li><h3><a href="operators.html">Operators</a></h4></li>
  <li><h3><a href="functions.html">Functions</a></h4></li>
  <li><h3><a href="specials.html">Special constructs</a></h4></li>
  <li><h3><a href="builtin.html">Built-in Functions</a></h4></li>
  <li><h3><a href="formatStrings.html">Format Strings</a></h4></li>
<ul>
<li><h4><a href="#generalFmt">General formatting</a></h4></li>
<li><h4><a href="#timeFmt">Time formatting</a></h4></li>
</ul>
  <li><h3><a href="packages.html">User packages</a></h4></li>
  </ul>
</div>
<div class="docContent">
<h3><a name="generalFmt">General formatting</a></h3>
Format Strings are used in conjunction with the builtin functions <a href="builtin.html#strings.format">strings.format</a> and 
<a href="builtin.html#system.printf">system.printf</a>. They contain parts of the string which are independent from the remaining arguments and placeholders for the remaining arguments.

Every placeholder begins with a percent-sign "<code>%</code>". If you want to have a percent-sign in your output, use "<code>%%</code>" instead.
A placeholder looks as follows<code>
  '%' [{expression}] ['-'] [Width] ['.' Precision] ArgType
</code>
where <ul><li><code>expression</code> is a valid MNH expression (in curly brackets)</li>
<li>the minus indicates that the formatted string shall be left-aligned</li>
<li><code>width</code> is the width of the result</li>
<li><code>precision</code> is the number of decimal digits for number formats and</li>
<li><code>ArgType</code> is one of the following<ul>
    <li> <code>d  </code> decimal format
    <li> <code>e  </code> scientific format
    <li> <code>f  </code> fixed point format
    <li> <code>g  </code> general number format
    <li> <code>s  </code> string format
    <li> <code>x  </code> hexadecimal format
</ul>
</ul>

The expression parts can be used both for calculations and for selecting a specific parameter. E.g.:<code>
   in>  <span class="builtin">format</span>(<span class="literal">'%{$2}s/%{$1}s/%{$0}s'</span>,<span class="literal">1</span>,<span class="literal">2</span>,<span class="literal">3</span>);
  out>  <span class="literal">'3/2/1'</span>
   in>  <span class="builtin">format</span>(<span class="literal">'sqrt(%{$0}g)=%{sqrt($0)}g'</span>,<span class="literal">2</span>);
  out>  <span class="literal">'sqrt(2)=1.4142135623731'</span>
</code>
<br>
Using list parameters as arguments to be formatted results in multi-line-printing for <code><span class="builtin">printf</span></code> and list results for <code><span class="builtin">format</span></code>.<code>

   in>  <span class="modifier">private</span> <span class="identifier">B</span>(<span class="literal">1</span>)<span class="operator">-></span><span class="literal">'1 bottle'</span>;
   in>  <span class="modifier">private</span> <span class="identifier">B</span>(<span class="identifier">n</span>)<span class="operator">-></span><span class="identifier">n</span><span class="operator">&</span><span class="literal">' bottles'</span>;
   in>  <span class="builtin">printf</span>(<span class="literal">"%{B($n)}s of beer on the wall\n"</span><span class="operator">&
               </span><span class="literal">"%{B($n)}s of beer\n"</span><span class="operator">&
               </span><span class="literal">"Take one down, pass it around\n"</span><span class="operator">&
               </span><span class="literal">"%{B($n-1)}s of beer on the wall.\n"</span>,[<span class="literal">99</span>..<span class="literal">1</span>]);
        99 bottles of beer on the wall
        99 bottles of beer
        Take one down, pass it around
        98 bottles of beer on the wall.
        
        98 bottles of beer on the wall
        98 bottles of beer
        Take one down, pass it around
        97 bottles of beer on the wall.
</code>
(Output abridged... obviously.)
<br>
<h3><a name="timeFmt">Time formatting</a></h3>
There are additional routines for formatting and parsing dates and times. Some of the available placeholders can be used in 
<code><span class="builtin">formatTime</span></code> only, others can be used both in <code><span class="builtin">formatTime</span></code> and in <code><span class="builtin">parseTime</span></code>.
<br>
<table><tr class="ruleHead">
    <td>placeholder</td><td>usable for parsing</td><td>explanation</td></tr>
<tr><td><code>c</code>     </td><td>no </td><td>Formats date using shortdateformat and formats time using longtimeformat if the time is not zero.</td></tr>
<tr><td><code>f</code>     </td><td>no </td><td>Same as c, but adds the time even if it is zero.</td></tr>
<tr><td><code>d</code>     </td><td>yes</td><td>day of month</td></tr>
<tr><td><code>dd</code>    </td><td>yes</td><td>day of month (leading zero)</td></tr>
<tr><td><code>ddd</code>   </td><td>no </td><td>day of week (abbreviation)</td></tr>
<tr><td><code>dddd</code>  </td><td>no </td><td>day of week (full)</td></tr>
<tr><td><code>ddddd</code> </td><td>no </td><td>shortdateformat</td></tr>
<tr><td><code>dddddd</code></td><td>no </td><td>longdateformat</td></tr>
<tr><td><code>m</code>     </td><td>yes</td><td>month</td></tr>
<tr><td><code>mm</code>    </td><td>yes</td><td>month (leading zero)</td></tr>
<tr><td><code>mmm</code>   </td><td>no </td><td>month (abbreviation)</td></tr>
<tr><td><code>mmmm</code>  </td><td>no </td><td>month (full)</td></tr>
<tr><td><code>y</code>     </td><td>no </td><td>year (2 digits)</td></tr>
<tr><td><code>yy</code>    </td><td>no </td><td>year (two digits)</td></tr>
<tr><td><code>yyyy</code>  </td><td>yes</td><td>year (with century)</td></tr>
<tr><td><code>h</code>     </td><td>yes</td><td>hour</td></tr>
<tr><td><code>hh</code>    </td><td>yes</td><td>hour (leading zero)</td></tr>
<tr><td><code>n</code>     </td><td>yes</td><td>minute</td></tr>
<tr><td><code>nn</code>    </td><td>yes</td><td>minute (leading zero)</td></tr>
<tr><td><code>s</code>     </td><td>yes</td><td>second</td></tr>
<tr><td><code>ss</code>    </td><td>yes</td><td>second (leading zero)</td></tr>
<tr><td><code>t</code>     </td><td>no </td><td>shorttimeformat</td></tr>
<tr><td><code>tt</code>    </td><td>no </td><td>longtimeformat</td></tr>
<tr><td><code>am/pm</code> </td><td>no </td><td>use 12 hour clock and display am and pm accordingly</td></tr>
<tr><td><code>a/p</code>   </td><td>no </td><td>use 12 hour clock and display a and p accordingly</td></tr>
<tr><td><code>/</code>     </td><td>-  </td><td>insert date seperator</td></tr>
<tr><td><code>:</code>     </td><td>-  </td><td>insert time seperator</td></tr>
<tr><td><code>"xx"</code>  </td><td>-  </td><td>literal text</td></tr>
<tr><td><code>'xx'</code>  </td><td>-  </td><td>literal text</td></tr>
<tr><td><code>z</code>     </td><td>yes</td><td>milliseconds</td></tr>
<tr><td><code>zzz</code>   </td><td>yes</td><td>milliseconds(leading zero)</td></tr>
</table>
</div>
<!--commonFoot-->
<!--file builtin.html-->
<!--commonHead-->
<!--BUILTIN-->
<!--commonFoot-->