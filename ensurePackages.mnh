{
[['packages/lindenmayer.mnh',"USE turtleGfx;\r\n\r\nlindenmayer(config,depth)->lindenmayer@(config|depth);\r\nprivate lindenmayer(data,productionLHS,productionRHS,depth>0)->\r\n        lindenmayer(replace(upper(data),upper(productionLHS),lower(productionRHS)),\r\n                    productionLHS,\r\n                    productionRHS,\r\n                    depth-1);\r\nprivate lindenmayer(data,productionLHS,productionRHS,depth)->upper(data);\r\nlindenmayerTurtle(config,depth)->turtle@(config.get(1)|lindenmayer(config.get(0),depth));\r\n\r\nHILBERT       :=[['A'      ,['A','B'],['-BF+AFA+FB-','+AF-BFB-FA+']],[ 0, 90,'F' ]];\r\nKOCH_SNOWFLAKE:=[['F++F++F',['F'    ],['F-F++F-F'                 ]],[ 0, 60,'F' ]];\r\nSIERPINSKI    :=[['A'      ,['A','B'],['B-A-B'      ,'A+B+A'      ]],[ 0, 60,'AB']];\r\nSIERPINSKI2   :=[['F-G-G'  ,['F','G'],['F-G+F+G-F'  ,'GG'         ]],[ 0,120,'FG']];\r\nPLANT         :=[['X'      ,['X','F'],['F-[[X]+X]+F[+FX]-X','FF'  ]],[70, 25,'F' ]];\r\n\r\n//*For regTest\r\nmain->print(round(lindenmayerTurtle(HILBERT,3),2));\r\n"]
,['packages/statistics.mnh',"//*Returns the mean of all values in <code>X</code>\r\nmean    (X:numericList)->X.agg(+)/size(X);\r\n//*Returns the (statistical) variance of all values in <code>X</code>\r\nvariance(X:numericList)->mean(X^2)-mean(X)^2;\r\n\r\nmedian(X:numericList)->sort(X).get(size(X) div 2);\r\n\r\ndecils(L)->sort(L).get(round([0..10]/10*(size(L)-1)));\r\n\r\nprivate testEx(e:expression)->printf(\"%-29s = %s\",unbrace(toString(e)),toString(e()));\r\nmain->testEx({mean([1,2,3.2,-1.8])}) |\r\n      testEx({variance([1,2,3.2,-1.8])})|\r\n      testEx({median(random(100))}) |\r\n      testEx({decils(round(random(1000),3))});\r\n"]
,['packages/turtleGfx.mnh',"private degToRad:=arctan(1)/45;\r\nprivate removeRedundantSequences(s,s)->s;\r\nprivate removeRedundantSequences(s,prev)->removeRedundantSequences(replace(s,['+-','-+','[]','[+]','[-]'],''),s);\r\n\r\nprivate cleanString(drawChars:string, input:string, allowShortening:boolean)->begin\r\n  local ignorables:=('~'|input.chars).minus(['+','-','F','[',']']);\r\n  local clean:=replace(replace(input,\r\n                               copy(drawChars,[0..length(drawChars)-1],1),\r\n                               'F'),\r\n                       ignorables,\r\n                       '');\r\n\r\n  replace(\r\n    removeRedundantSequences(clean,''),\r\n    allowShortening ? ['F','00','11','22','33','44','55','66','77','88'] : 'F',\r\n    allowShortening ? ['0','1' ,'2' ,'3' ,'4' ,'5' ,'6' ,'7' ,'8' ,'9'] : '0');\r\nend;\r\n\r\n\r\nturtle(startAngle:numeric,rotAngleInDegrees:numeric,drawChars:string,s:string)->turtle(startAngle,rotAngleInDegrees,drawChars,s,true);\r\nturtle(startAngle:numeric,rotAngleInDegrees:numeric,drawChars:string,s:string,allowShortening:boolean)->begin\r\n  local cleanInput:=cleanString(drawChars,s,allowShortening);\r\n  //init State variables\r\n  local turtlePos:=[0,0];\r\n  local turtleDir:=startAngle*degToRad;\r\n  local posStack:=[];\r\n  local dirStack:=[];\r\n  local rotAngle:=rotAngleInDegrees*degToRad;\r\n  local OP:=toMap([['0', {begin local oldPos:=turtlePos; turtlePos+=    [cos(turtleDir),sin(turtleDir)]; oldPos; end}],\r\n                   ['+', {begin turtleDir-=rotAngle; void; end}],\r\n                   ['-', {begin turtleDir+=rotAngle; void; end}],\r\n                   ['[', {begin\r\n                           posStack|=[turtlePos];\r\n                           dirStack|=turtleDir;\r\n                           void;\r\n                         end}],\r\n                   [']', {begin\r\n                           turtlePos:=trailing(posStack);\r\n                           posStack := leading(posStack);\r\n                           turtleDir:=trailing(dirStack);\r\n                           dirStack := leading(dirStack);\r\n                           [[Nan,Nan]] | turtlePos;\r\n                         end}],\r\n                   ['1', {begin local oldPos:=turtlePos; turtlePos+=  2*[cos(turtleDir),sin(turtleDir)]; oldPos; end}],\r\n                   ['2', {begin local oldPos:=turtlePos; turtlePos+=  4*[cos(turtleDir),sin(turtleDir)]; oldPos; end}],\r\n                   ['3', {begin local oldPos:=turtlePos; turtlePos+=  8*[cos(turtleDir),sin(turtleDir)]; oldPos; end}],\r\n                   ['4', {begin local oldPos:=turtlePos; turtlePos+= 16*[cos(turtleDir),sin(turtleDir)]; oldPos; end}],\r\n                   ['5', {begin local oldPos:=turtlePos; turtlePos+= 32*[cos(turtleDir),sin(turtleDir)]; oldPos; end}],\r\n                   ['6', {begin local oldPos:=turtlePos; turtlePos+= 64*[cos(turtleDir),sin(turtleDir)]; oldPos; end}],\r\n                   ['7', {begin local oldPos:=turtlePos; turtlePos+=128*[cos(turtleDir),sin(turtleDir)]; oldPos; end}],\r\n                   ['8', {begin local oldPos:=turtlePos; turtlePos+=256*[cos(turtleDir),sin(turtleDir)]; oldPos; end}],\r\n                   ['9', {begin local oldPos:=turtlePos; turtlePos+=512*[cos(turtleDir),sin(turtleDir)]; oldPos; end}]]);\r\n  cleanInput.chars.each(c,OP[c]()) | [turtlePos];\r\nend;\r\n\r\n//*For reg-test\r\nmain->plot.setAxisStyle([0,0]) and plot(turtle(0,59,'F',[1..100].each(i,repeat('F',i),'+',&))) and renderToFile(replace(myPath,'.mnh','.png'),768,768,4);\r\n\r\n"]
].each(f,fileExists($0&f[0]) ? void : writeFile($0&f[0],f[1]))}
