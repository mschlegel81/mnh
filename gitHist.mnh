parseIsoDate(s:string)->parseTime('yyyy-mm-dd hh:nn:ss      ',s)+s.split(' ').trailing.toInt / 2400;


commitHistory->'git'.exec(['log','--all','--date=iso'])[0]
               .each(line,line.matches('^commit') ? line.replaceOne('commit','').trim :
                          line.matches('^Date:' ) ? line.replaceOne('Date:','').trim.parseIsoDate : void)
               .{$L.each(d,(index and 1)=0 ? [d,$L[index+1]] : void)}
               .sort(1)
               .{print('Commit history has ',$L.size,' entries') orElse $L};

private acceptedExt:=[['.bat','batch'],
                      ['.sh' ,'batch'],
                      ['.pas','source'],
                      ['.inc','source'],
                      ['.lpi','sourceMeta'],
                      ['.lpr','sourceMeta'],
                      ['.lps','sourceMeta'],
                      ['.lfm','sourceMeta'],
                      ['.mnh','mnh'],
                      ['.ico' ,'resource'],
                      ['.txt' ,'resource'],
                      ['.foot','resource'],
                      ['.head','resource'],
                      ['.html','resource'],
                      ['.css' ,'resource'],
                      ['.xml' ,'resource'],
                      ['.svg' ,'resource']];

fileCategory(filename:string)->acceptedExt[filename.extractFileExt.lower] orElse '-';

analyzeFolder->
allFiles('D:\dev\temp','*'&acceptedExt.getInner(0))
  .pEach(file,[fileCategory(file),fileStats(file)[[0,2]]])
  .group(0,{[$x[0],$x[1]+$y[1]]})
  .{[$L['source'] orElse [0,0],
     $L['sourceMeta'] orElse [0,0],
     $L['mnh'] orElse [0,0],
     $L['batch'] orElse [0,0],
     $L['resource'] orElse [0,0]]};

datastore history;
datastore names;

fetchData->history:=commitHistory.each(entry,begin
  allFiles('D:\dev\temp').each(file,deleteFile(file));
  'git'.exec(['--work-tree=D:\dev\temp','checkout',entry[0],'--','.']);
  names:=names.union(allFiles('D:\dev\temp'));
  local stats:=analyzeFolder;
  print('Commit ',index,' ',entry[0],' ',stats);
  [entry[1],stats];
end);

plotHistory(lines:boolean)->begin
  plot([]);
  plot.display;
  [0..5].each(cat,addPlot(history.getInner(1,cat,lines ? 0 : 1),
                          history.getInner(0)));
  plot.display;
end;

//*Initializes datastores (this will take a while)
main('init')->begin
  names:=[];
  fetchData;
end;

//*Plots the history
main('plot')->plotHistory(true);

//*Lists all file names
main('names')->printf("%s\t%s",names,names.pEach(name,fileCategory(name)));
