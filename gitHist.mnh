parseIsoDate(s:string)->parseTime('yyyy-mm-dd hh:nn:ss      ',s)+s.split(' ').trailing.toInt / 2400;


commitHistory->'git'.exec(['log','--all','--date=iso'])[0]
               .each(line,line.matches('^commit') ? line.replaceOne('commit','').trim :
                          line.matches('^Date:' ) ? line.replaceOne('Date:','').trim.parseIsoDate : void)
               .{$L.each(d,(index and 1)=0 ? [d,$L[index+1]] : void)}
               .sort(1)
               .{print('Commit history has ',$L.size,' entries') orElse $L};

fileCategory(filename:string)->begin
  local ext:=splitFileName(filename)['extension'].upper;
  ext='.LFM' ? 'gui' :
  ext='.MNH' ? (filename.matches('demo') ? 'demo' : 'mnh') :
  ext='.TXT' ? 'resource' :
  filename.matches('func') ? 'fSource' :
  filename.matches('gui' ) ? 'gui'
                           : 'source';
end;

analyzeFolder->
allFiles('D:\dev\temp',['*.pas','*.inc','*.mnh','*.lfm','*.txt'])
  .each(file,[fileCategory(file),fileStats(file)[[0,2]]])
  .group(0,{[$x[0],$x[1]+$y[1]]})
  .{[$L['demo'] orElse [0,0],
     $L['mnh'] orElse [0,0],
     $L['gui'] orElse [0,0],
     $L['source'] orElse [0,0],
     $L['fSource'] orElse [0,0],
     $L['resource'] orElse [0,0]]};

datastore history;

fetchData->history:=commitHistory.each(entry,begin
  allFiles('D:\dev\temp').each(file,deleteFile(file));
  'git'.exec(['--work-tree=D:\dev\temp','checkout',entry[0],'--','.']);
  local stats:=analyzeFolder;
  print('Commit ',index,' ',entry[0],' ',stats);
  [entry[1],stats];
end);


plotHistory(lines:boolean)->begin
  plot([]);
  [0..5].each(cat,addPlot(history.getInner(1,cat,lines ? 0 : 1),
                          history.getInner(0)));
end;

plotHistory(true);

//plot(history.getInner(1,0,0),history.getInner(0));
