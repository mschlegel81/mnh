USE testLog,mnhInfo,formattingUtils,make_config,distroLog;

tprint(...)->print@(formatTime('hh:nn.ss ',systime)|...);
//Configuration:=====================================================
private needBuilt(B:BuildConfig)->B.canBuild AND (not(B.binName.fileExists) OR not([B[2].flavour,B[2].codeVersion]==[B[1],ensureCodeHash]));

private delp->(isLinux ? 'delp' : DelpPath).execPipeless(
       ['gui/lib/i386-win32',
        'gui/lib/x86_64-linux',
        'gui/lib/x86_64-win64',
        'core',
        '../common',
        'consoles/lib/i386-win32',
        'consoles/lib/x86_64-linux',
        'consoles/lib/x86_64-win64',
        '../art.source/display/lib/i386-win32',
        '../art.source/display/lib/x86_64-win64',
        '../art.source/im/lib/i386-win32',
        '../art.source/im/lib/x86_64-win64',
        '../art.source/igSrc']);

private templateToInc(inFile,inLines,outFile<>inFile)->begin
  local pasId:=clean(inFile.extractFileName,['a'..'z','A'..'Z'],'_');
  local outText:=
  'CONST '&pasId&': array[0..'&(inLines.size-1)&"] of string=(\n"&
  inLines.each(line,line='' ? "''" : join('#'&(line.bytes.ord))).join(",\n")&');';
  outFile.fileContents==outText
  ? void
  : writeFile(outFile,outText);
end;

private templateToInc(inFile,outFile<>inFile)->templateToInc(inFile,fileLines(inFile),outFile);

private ensurePackagesLines->'{'|
    sort(files('demos/*.mnh')|'demos/inputs/inputs.mnh'|files('packages/*.mnh'))
    .each(file,(index=0 ? '[' : ',') & ('['&escape(file)&','&escape(fileContents(file).compress)&']'))|
    "].each(f,fileExists($0&f[0]) ? void : writeFile($0&f[0],decompress(f[1])))}";

private mutable currentCodeHash:=void;
private synchronized updateCurrentCodeHash->
currentCodeHash:=begin
  tprint('Checkstyle');
  executor.execPipeless(['../checkstyle.mnh','fix']);
  tprint('Updating generated files');
  //convert here to ensure these files are considered in code hash calculation
  templateToInc('resources/examples.txt'                   ,'core/res_examples.inc');
  templateToInc('resources/html_template.txt'              ,'core/res_html_template.inc');
  templateToInc('resources/ensureNotepad++Highlighting.mnh','core/res_ensureNppHighlighting.inc');
  templateToInc('resources/ensureAssoc.mnh'                ,'core/res_ensureAssoc.inc');
  templateToInc('resources/removeAssoc.mnh'                ,'core/res_removeAssoc.inc');
  templateToInc('resources/ensurePackages.mnh',ensurePackagesLines,'core/res_ensurePackages.inc');
  //update code hash
  tprint('Updating code hash based on ',hashFiles.size,' files');
  local result:=format('%8.8x',fileStats(hashFiles).getInner(3).agg(+)).copy(0,8);
  local expectedContents:=format("CODE_HASH='%s';",result);
  fileContents('core/code_hash.inc')==expectedContents
  ? void
  : begin
      writeFile('core/code_hash.inc',expectedContents);
      tprint('core/code_hash.inc updated with current hash ',result);
    end;
  result;
end;
private ensureCodeHash->currentCodeHash orElse updateCurrentCodeHash;

private ensureBuiltNumber->begin
  local expectedContents:=format("BUILT_NUMBER=%s;",getBuiltNumber(ensureCodeHash));
  fileContents('core/built_number.inc')==expectedContents
  ? void
  : begin
      writeFile('core/built_number.inc',expectedContents);
      tprint('core/built_number.inc updated with current hash ',getBuiltNumber(ensureCodeHash));
    end;
end;

private myMove(source,dest:String)->fileExists(source) ? begin
  local tries:=3;
  while(fileExists(dest) AND tries>0,
    deleteFile(dest) ? void : begin
    tries-=1;
    sleep(0.1);
  end);
  fileExists(dest) ? fail('Failed deleting '+dest) : void;
  moveFile(source,dest) ? void : fail('File move '+source+' -> '+dest+' failed!');
end : fail('File  '+source+' does not exist');

private BUILD_LOG:='build.log';
private buildExe(B:BuildConfig)->
  B.needBuilt
  ? begin
      ensureCodeHash;
      ensureBuiltNumber;
      tprint('Building ',B[2]);
      local compilerOutput:=B[3].exec(B[4]).head;
      local sepLine:=repeat('-',compilerOutput.each(line,line.length,max) orElse 0);
      compilerOutput:=sepLine|
                      (B[3]|B[4]).join(' ')|
                      sepLine|
                      compilerOutput;
      BUILD_LOG.appendFileLines(compilerOutput);
      myMove(B[5],B[2]);
      local ok:=not(B.needBuilt);
      ok ? tprint('Built successful')
         : fail('Built failed - see '&BUILD_LOG&' for details');
    end
  : void;

testExe(B:BuildConfig,...)->
  not(B.canBuild)
  ? void
  : (B[6] ? void : B.buildExe) orElse (...==[]) and testAlreadyPassed(B[2]) or needBuilt(B)
    ? void
    : tprint('Testing ',B[2]) orElse
      B[2].execPipeless(['regTest/regTest.mnh']|...)=0
      ? tprint('Test passed')
      : fail('Test failed');

private showStatus->
  print orElse
  tprint('Current code hash: ',ensureCodeHash,"\n") orElse
  ([['Flavour','Binary','CodeVersion','Compile time','Time for test']]|
  (BUILTS.each(B,[B[1],
                 B[2],
                 canBuild(B) ? needBuilt(B) ? B[2].codeVersion : 'o.k.' : '?' ,
                 canBuild(B) ? B[2].compileTime : '?',
                 (canBuild(B) ? timeForTest(B[2]) : timeForTest(B[1],ensureCodeHash)) orElse '.']))).formatTable.join("\n").print
  orElse print;

private cleanup->begin
  allFolders('.')
  .each(f,extractFileName(f) in ["nppBackup","backup"] ? f : void)
  .each(f,begin
           tprint('Deleting ',f);
           deleteDir(f);
          end);
  (files(allFolders('.')&'/*.png')|
   files(allFolders('..')&'/*.bak')|
   files('core/res_*.inc')|
   allFiles('versions','*.exe')|
   files(BUILTS.getInner(5))|
   files('build.log'))
  .unique
  .each(file,tprint('Deleting ',file,' ',deleteFile(file) ? 'ok' : 'ERR!'));
  delp;
  currentCodeHash:=void;
end;

testIsPassedAccordingToLog(B:BuildConfig)->
  testLog.log[testLog.log.getInner(0)=B[1] and testLog.log.getInner(1)=ensureCodeHash].size>0;

private isSameFileName(filename1:String,filename2:String)->begin
  local case:=isLinux ? {$x} : {$x.upper};
  (filename1.expandedFileName.case)==
  (filename2.expandedFileName.case);
end;

private isSimilarFile(filename1:String,filename2:String)->pos(filename2.upper,filename1.upper)>=0;
private acceptedMainParameters->inspect['declares','main','subrules'].getInner('pattern').clean(['a'..'z','A'..'Z'],' ').trim.each(p,p='' ? void : p);
main->main('build');
//*Build all targets
main('build')->BUILTS.each(B,B.buildExe);
//*Test all targets - non-debug versions will be built if necessary
main('test')->BUILTS.each(B,B.testExe);
//*Test all targets even if the test already has been passed - non-debug versions will be built if necessary
main('retest')->BUILTS.each(B,B.testExe('retest'));
//*Show the current built status
main('status')->showStatus;
//*Show the current built status
main('prepare')->ensureCodeHash;
//*Clean the output files
main('clean')->tprint('Cleaning') orElse cleanup;
//*Deep cleaning, including deleting all executables
main('CLEAN')->begin
  tprint('Deep cleaning');
  cleanup;
  files('versions/*').|(files(BUILTS.getInner(2))).each(file,tprint('Deleting ',file,' ',deleteFile(file) ? 'ok' : 'ERR!'));
end;
//*Beep - just for notification purposes
main('beep')->beep;

main('distro')->isLinux ? fail('Must be executed in windows environment') : begin
  BUILTS.each(B,B.canBuild AND not(B[6]) ? B.testExe : void);
  local linuxBuiltReady:=LINUX_BUILTS.each(linuxConfig,testIsPassedAccordingToLog(linuxConfig),AND);
  packSets(linuxBuiltReady,getBuiltNumber(ensureCodeHash)).pEach(zipTask,call7z@zipTask);
  {fileExists($0)
   ? executor.execPipeless([$0])
   : void}('distro_hook.mnh');
end;

//*Build one specific target
main(target:String)->begin
  local testAfterBuild:=false;
  local tgt:=target;
  target.copy(target.length-1,1)=='!'
  ? begin
      tgt:=target.copy(0,target.length-1);
      testAfterBuild:=true;
    end
  : void;
  local buildAndTest:=
    testAfterBuild ? {buildExe($B) orElse testExe($B) orElse true}
                   : {buildExe($B) orElse true};

  BUILTS.each(B,isSameFileName(B[2],tgt) OR tgt=B[1] ? buildAndTest(B) orElse true : false,OR) OR
  BUILTS.each(B,isSimilarFile (B[2],tgt)             ? buildAndTest(B) orElse true : false,or)
  ? void
  : fail("Don't know what to do with: "+target+". Accepted parameters are\n"+(acceptedMainParameters | VALID_TARGETS).join("\n"));
end;

//*Several steps in succession
main(...)->... .each(step,
  print('******************************'),
  print('* ',step),
  print('******************************'),
  main(step));
