USE hash,testLog;
private delp->'..\lazarus64\fpc\3.0.0\bin\x86_64-win64\delp.exe'.execAsync(
       ['gui\lib\i386-win32',
        'gui\lib\x86_64-linux',
        'gui\lib\x86_64-win64',
   'consoles\lib\i386-win32',
   'consoles\lib\x86_64-linux',
   'consoles\lib\x86_64-win64']);

private templateToInc(inFile,outFile<>inFile)->begin
  local inLines:=inFile.fileContents;
  local pasId:=clean(inFile,['a'..'z','A'..'Z'],'_');
  local outText:=
  'VAR '&pasId&'cache:T_arrayOfString;'&
  'FUNCTION '&pasId&': T_arrayOfString;'&
  'CONST raw='& join('#'&strings.compress(inLines).chars.ord) &';'&
  'begin if length('&pasId&'cache)=0 then '&pasId&'cache:=split(decompressString(raw)); result:='&pasId&'cache; end;';
  outFile.fileContents==outText 
  ? void 
  : writeFile(outFile,outText);
end;

private tryPack(filename)->'['&escape(filename)&','&escape(fileContents(filename))&']';

private ensureDemos->fileExists('ensureDemos.mnh') ? void : begin
  writeFileLines('ensureDemos.mnh','{'|
    (files('demos/*.mnh')|'demos/inputs/inputs.mnh')
    .each(file,(index=0 ? '[' : ',') & tryPack(file))|
    "].each(f,fileExists($0&f[0]) ? void : writeFile($0&f[0],f[1]))}");
end;

private ensurePackages->fileExists('ensurePackages.mnh') ? void : begin
  writeFileLines('ensurePackages.mnh','{'|
    files('packages/*.mnh').each(file,(index=0 ? '[' : ',') & tryPack(file))|
    "].each(f,fileExists($0&f[0]) ? void : writeFile($0&f[0],f[1]))}");
end;

private mutable currentCodeHash:=void;
private synchronized updateCurrentCodeHash->
currentCodeHash:=begin
  ensureDemos;
  ensurePackages;
  //convert here to ensure these files are considered in code hash calculation
  templateToInc('doc/examples.txt','core/res_examples.inc');
  templateToInc('doc/html_template.txt','core/res_html_template.inc');
  templateToInc('ensureMnhFileAssociations.mnh','core/res_ensureMnhFileAssociations.inc');
  templateToInc('removeMnhFileAssociations.mnh','core/res_removeMnhFileAssociations.inc');  
  templateToInc('ensureNotepad++Highlighting.mnh','core/res_ensureNppHighlighting.inc');  
  templateToInc('ensureDemos.mnh','core/res_ensureDemos.inc');  
  templateToInc('ensurePackages.mnh','core/res_ensurePackages.inc');    
  local relevantFiles:=flatten(files(allFolders('.')&'/*.lpr'),
                               files(allFolders('.')&'/*.pas'),
                               files(allFolders('.')&'/*.inc').each(f,splitFileName(f).filename='code_hash.inc' ? void : f));
  executor.execPipeless(['../checkstyle.mnh','fix']);
  //update code hash
  local result:=fileStats(relevantFiles).getInner(3).agg(+).hex;
  fileContents('core/code_hash.inc')=="writeln(':"&result&"');" 
  ? void 
  : begin
      writeFile('core/code_hash.inc',"writeln(':"&result&"');");
      print('core/code_hash.inc updated with current hash ',result);
    end;
  result;
end;

private binName(FI:int)->format('%smnh%s%s.exe',
                                (FI and 1)>0 ? '.\' : 'bin32\',
                                (FI and 2)>0 ? ''   : '_light',
                                (FI and 4)>0 ? '_debug' : '');

private exeHasWrongVersion(FI:int)->begin
  local exeName:=binName(FI);
  fileExists(exeName) ? begin
    local fullCodeHash:=split(head(exec(exeName,["-codeHash"])),':');
    size(fullCodeHash)!=2 OR (fullCodeHash[1] != (currentCodeHash orElse updateCurrentCodeHash));
  end : true;
end;

private build(FI:int)->
exeHasWrongVersion(FI) ? begin
  local bin64:=(FI and 1)>0;
  local full :=(FI and 2)>0;
  local debug:=(FI and 4)>0;
  local compiler:=bin64 ? '..\lazarus64\lazbuild.exe'
                        : '..\lazarus32\lazbuild.exe';
  local exeName:=binName(FI);
  local outName:=(full ? 'gui\mnh' : 'consoles\mnh_light') & (debug ? '_debug' : '') & '.exe';
  local parameters:=['-B','--bm='&(debug ? 'Default' : 'deployment'),full ? 'gui\mnh_gui.lpi' : 'consoles\mnh_light.lpi'];

  deleteFile(exeName);
  deleteFile(outName);
  local logName:=replace('make_'&exeName,['.exe','.','/','\','__'],['','','_','_','_'])&'.log.txt';
  printf('Compiling %-25s logging to %s',exeName,logName);
  writeFileLines(logName,(compiler&' '&(parameters.join(' ')))|exec(compiler,parameters));
  moveFile(outName,exeName);
  full OR debug
  ? void
  : execPipeless('..\upx.exe',['-9',binName(FI)]);
  delp;
  not(exeHasWrongVersion(FI));
end : true;

private call7z(fileList,suffix)->begin
  local zipParams:=['a','-mx=9',format('versions/mnh5_%s_%s.7z',formatTime('yyyymmdd',systime),suffix)]|fileList;
  execPipeless("c:/Program Files/7-Zip/7z.exe",zipParams);
  execPipeless("c:/Program Files (x86)/7-Zip/7z.exe",zipParams);
end;

private movePairs:=[['mnh.exe','mnh64.exe'],
                    ['mnh_light.exe','mnh64_light.exe'],
                    ['bin32/mnh.exe','mnh.exe'],
                    ['bin32/mnh_light.exe','mnh_light.exe']];
private verboseMove(src,dest)->begin
  printf('move %-19s -> %-19s',src,dest);
  moveFile(src,dest);
end;
                    
//*Make distro 7z - including build if needed
main('distro')->begin
  updateCurrentCodeHash;
  [0..3].each(i,
    begin
      local buildOk:=build(i);
      local testOk:=testAlreadyPassed(binName(i));
      buildOk ? void : print('Building of ',binName(i),' failed');
      testOk ? void : print(binName(i),' has not been tested successfully');
      buildOk and testOk;
    end,
    AND) ? begin
    call7z(['mnh.exe','mnh_light.exe'],'64bit');
    movePairs.each(pair,verboseMove@pair,AND)
    ? begin
        call7z(['mnh.exe','mnh_light.exe'],'32bit');
        movePairs.get([3..0]).each(pair,verboseMove@(pair.get([1,0])));
      end
    : print('Error moving files! 32bit distro has not been created!');
    //Linux executables exist and are less than one hour old
    ['mnh','mnh_light'].each(file,fileExists(file) AND systime-file.fileInfo["time"]<1/24,AND)
    AND linuxTestsPassed
    ? begin
        execPipeless('..\upx.exe',['-9','mnh_light']);
        call7z(['mnh','mnh_light'],'64bit_Linux');
      end
    : void;
  end : void;
end;

//*Build - ignoring potentially existing executables
main('build')->begin
  updateCurrentCodeHash;
  [0..7].each(i,build(i),AND);
end;

//*Build - ignoring potentially existing executables
main->main('build');

//*Deletes all nppBackup folders, temporary object files, executables and png-files
main('clean')->begin
  allFolders('.').each(f,
       splitFileName(f).filename in ["nppBackup","backup"]
       ? begin
           print('Deleting ',f);
           deleteDir(f);
         end
       : void);
  (files(allFolders('.')&'/*.png')|
   files(allFolders('.')&'/*.bak')|
   files('doc/package_doc/*.html')|
   files('doc/*.html')|
   files('doc/*.css')|
   files('install.mnh')|
   files('ensureDemos.mnh')|
   files('ensurePackages.mnh')|
   files('core/res_examples.inc')|
   files('core/res_html_template.inc')|
   files('core/res_ensureMnhFileAssociations.inc')|
   files('core/res_removeMnhFileAssociations.inc')|
   files('core/res_ensureNppHighlighting.inc')|
   files('core/res_ensureDemos.inc')|
   files('core/res_ensurePackages.inc')|
   files('make*.log.txt')).each(file, print('Deleting ',file,' ',deleteFile(file) ? 'ok' : 'ERR!'));
  delp;   
end;
     
//*Tests all files
main('test')->begin
  updateCurrentCodeHash;
  [0..3].each(i,
  build(i), 
  print('Testing ',binName(i)),
  testAlreadyPassed(binName(i))
  ? void
  : binName(i).execPipeless(['-el5','regTest/regTest.mnh','doc/examples.txt'.splitFileName.expanded]));
end;

//*Only prepare code hash
main('prepare')->updateCurrentCodeHash;
  
//*Several steps in succession
main(...)->begin
  updateCurrentCodeHash;
  ... .each(p,
  [0..7].each(i,
    pos(upper(p),upper(binName(i)))>=0 
    ? build(i) OR true
    :             false,or)
  ? void
  : p in ['distro','build','clean','test','prepare']
    ? main(p)
    : void);
end;
