USE testLog,mnhInfo;

tprint(...)->print@(formatTime('hh:nn.ss ',systime)|...);
type BuildConfig(L:list(7))->L[0].isBoolean AND
                             L[1].isString AND
                             L[2].isString AND
                             L[3].isString AND
                             L[4].isStringList(3) AND
                             L[5].isString AND
                             L[6].isBoolean;

//BUILTS  linux, flavour , binary                    , compiler                  , compilerOptions                                 , compilerOutput
BUILTS:=[[false,'LOWin32','bin32/mnh_light.exe'      ,'..\lazarus32\lazbuild.exe',['-B','--bm=deployment','consoles/mnh_light.lpi'],'consoles/mnh_light.exe'      ,false],
         [false,'LOWin64','./mnh_light.exe'          ,'..\lazarus64\lazbuild.exe',['-B','--bm=deployment','consoles/mnh_light.lpi'],'consoles/mnh_light.exe'      ,false],
         [false,'FOWin32','bin32/mnh.exe'            ,'..\lazarus32\lazbuild.exe',['-B','--bm=deployment','gui/mnh_gui.lpi']       ,'gui/mnh.exe'                 ,false],
         [false,'FOWin64','./mnh.exe'                ,'..\lazarus64\lazbuild.exe',['-B','--bm=deployment','gui/mnh_gui.lpi']       ,'gui/mnh.exe'                 ,false],
         [false,'LDWin32','bin32/mnh_light_debug.exe','..\lazarus32\lazbuild.exe',['-B','--bm=Default'   ,'consoles/mnh_light.lpi'],'consoles/mnh_light_debug.exe',true],
         [false,'LDWin64','./mnh_light_debug.exe'    ,'..\lazarus64\lazbuild.exe',['-B','--bm=Default'   ,'consoles/mnh_light.lpi'],'consoles/mnh_light_debug.exe',true],
         [false,'FDWin32','bin32/mnh_debug.exe'      ,'..\lazarus32\lazbuild.exe',['-B','--bm=Default'   ,'gui/mnh_gui.lpi']       ,'gui/mnh_debug.exe'           ,true],
         [false,'FDWin64','./mnh_debug.exe'          ,'..\lazarus64\lazbuild.exe',['-B','--bm=Default'   ,'gui/mnh_gui.lpi']       ,'gui/mnh_debug.exe'           ,true],
         [true ,'LOLinux','./mnh_light'              ,'lazbuild'                 ,['-B','--bm=deployment','consoles/mnh_light.lpi'],'consoles/mnh_light'          ,false],
         [true ,'FOLinux','./mnh'                    ,'lazbuild'                 ,['-B','--bm=deployment','gui/mnh_gui.lpi']       ,'gui/mnh'                     ,false],
         [true ,'LDLinux','./mnh_light_debug'        ,'lazbuild'                 ,['-B','--bm=Default'   ,'consoles/mnh_light.lpi'],'consoles/mnh_light_debug'    ,true],
         [true ,'FDLinux','./mnh_debug'              ,'lazbuild'                 ,['-B','--bm=Default'   ,'gui/mnh_gui.lpi']       ,'gui/mnh_debug'               ,true],
         [false,'FIOWin64','./mnh_imig.exe'          ,'..\lazarus64\lazbuild.exe',['-B','--bm=imig'      ,'gui/mnh_gui.lpi']       ,'gui/mnh_imig.exe'            ,false],
         [true ,'FIOLinux','./mnh_imig'              ,'lazbuild'                 ,['-B','--bm=imig'      ,'gui/mnh_gui.lpi']       ,'gui/mnh_imig'                ,false]];
//Configuration:=====================================================
private canBuild(B:BuildConfig)->B[0]=isLinux;
private VALID_TARGETS:=BUILTS.each(B,B.canBuild ? B[2] : void);
private binName(B:BuildConfig)->B[2];
private needBuilt(B:BuildConfig)->B.canBuild AND (not(B.binName.fileExists) OR not([B[2].flavour,B[2].codeVersion]==[B[1],ensureCodeHash]));

private isLinux:=mnhInfo['targetOs']='Linux' orElse false;
private delp->(isLinux ? 'delp' : '..\lazarus64\fpc\3.0.0\bin\x86_64-win64\delp.exe').execPipeless(
       ['gui/lib/i386-win32',
        'gui/lib/x86_64-linux',
        'gui/lib/x86_64-win64',
        'core',
        '../common',
        'consoles/lib/i386-win32',
        'consoles/lib/x86_64-linux',
        'consoles/lib/x86_64-win64',
        '../art.source/igSrc']);

private templateToInc(inFile,outFile<>inFile)->begin
  local inLines:=inFile.fileLines;
  local pasId:=clean(inFile.splitFileName['filename'],['a'..'z','A'..'Z'],'_');
  local outText:=
  'CONST '&pasId&': array[0..'&(inLines.size-1)&"] of string=(\n"&
  inLines.each(line,line='' ? "''" : join('#'&(line.chars.ord))).join(",\n")&');';
  outFile.fileContents==outText
  ? void
  : writeFile(outFile,outText);
end;

private ensurePackages->fileExists('resources/ensurePackages.mnh') ? void :
  writeFileLines('resources/ensurePackages.mnh','{'|
    (files('demos/*.mnh')|'demos/inputs/inputs.mnh'|files('packages/*.mnh'))
    .each(file,(index=0 ? '[' : ',') & ('['&escape(file)&','&escape(fileContents(file))&']'))|
    "].each(f,matches(f[0],'packages/').not AND fileExists($0&f[0]) ? void : writeFile($0&f[0],f[1]))}","\n");

private mutable currentCodeHash:=void;
private synchronized updateCurrentCodeHash->
currentCodeHash:=begin
  tprint('Checkstyle');
  executor.execPipeless(['../checkstyle.mnh','fix']);
  tprint('Updating generated files');
  ensurePackages;
  //convert here to ensure these files are considered in code hash calculation
  templateToInc('resources/examples.txt'                   ,'core/res_examples.inc');
  templateToInc('resources/html_template.txt'              ,'core/res_html_template.inc');
  templateToInc('resources/ensureNotepad++Highlighting.mnh','core/res_ensureNppHighlighting.inc');
  templateToInc('resources/ensureAssoc.mnh'                ,'core/res_ensureAssoc.inc');
  templateToInc('resources/ensureAssoc_imig.mnh'           ,'core/res_ensureAssoc_imig.inc');
  templateToInc('resources/removeAssoc.mnh'                ,'core/res_removeAssoc.inc');
  templateToInc('resources/removeAssoc_imig.mnh'           ,'core/res_removeAssoc_imig.inc');
  templateToInc('resources/ensurePackages.mnh'             ,'core/res_ensurePackages.inc');
  local relevantFiles:=allFiles('.','*.lpr;*.pas;*.inc').each(f,splitFileName(f)['filename']='code_hash.inc' ? void : f);
  //update code hash
  tprint('Updating code hash based on ',relevantFiles.size,' files');
  local result:=format('%8.8x',fileStats(relevantFiles).getInner(3).agg(+)).copy(0,8);
  fileContents('core/code_hash.inc')=="CODE_HASH='"&result&"';"
  ? void
  : begin
      writeFile('core/code_hash.inc',"CODE_HASH='"&result&"';");
      tprint('core/code_hash.inc updated with current hash ',result);
    end;
  result;
end;
private ensureCodeHash->currentCodeHash orElse updateCurrentCodeHash;

private myMove(source,dest:string)->fileExists(source) ? begin
  local tries:=3;
  while(fileExists(dest) AND tries>0,
    deleteFile(dest) ? void : begin
    tries-=1;
    sleep(0.1);
  end);
  fileExists(dest) ? fail('Failed deleting '+dest) : void;
  moveFile(source,dest) ? void : fail('File move '+source+' -> '+dest+' failed!');
end : fail('File  '+source+' does not exist');

private BUILD_LOG:='build.log';
private buildExe(B:BuildConfig)->
  B.needBuilt
  ? begin
      tprint('Building ',B[2]);
      local compilerOutput:=B[3].exec(B[4]);
      local sepLine:=repeat('-',compilerOutput.each(line,line.length,max));
      compilerOutput:=sepLine|
                      (B[3]|B[4]).join(' ')|
                      sepLine|
                      compilerOutput;
      BUILD_LOG.appendFileLines(compilerOutput);
      myMove(B[5],B[2]);
      local ok:=not(B.needBuilt);
      ok ? tprint('Built successful')
         : fail('Built failed - see '&BUILD_LOG&' for details');
    end
  : void;

private testExe(B:BuildConfig,...)->
  not(B.canBuild)
  ? void
  : (B[6] ? void : B.buildExe) orElse testAlreadyPassed(B[2]) or not(fileExists(B[2]))
    ? void
    : tprint('Testing ',B[2]) orElse
      B[2].execPipeless(['-el5','-quiet','regTest/regTest.mnh','resources/examples.txt'.splitFileName['expanded']]|...) and testAlreadyPassed(B[2])
      ? tprint('Test passed')
      : fail('Test failed');

private showStatus->
  print orElse
  tprint('Current code hash: ',ensureCodeHash,"\n") orElse
  (['Flavour','Binary','CodeVersion','Compile time','Time for test'].join("\t")|
  (BUILTS.each(B,[B[1],
                 B[2],
                 canBuild(B) ? needBuilt(B) ? B[2].codeVersion : 'o.k.' : '?' ,
                 B[2].compileTime,
                 (canBuild(B) ? timeForTest(B[2]) : timeForTest(B[1],ensureCodeHash)) orElse '.'].join("\t")))).join("\n").print
  orElse print;

private cleanup->begin
  tprint('Cleaning');
  allFolders('..')
  .each(f,splitFileName(f)['filename'] in ["nppBackup","backup"] ? f : void)
  .each(f,begin
           tprint('Deleting ',f);
           deleteDir(f);
          end);
  (files(allFolders('.')&'/*.png')|
   files(allFolders('..')&'/*.bak')|
   files('resources/ensureDemos.mnh')|
   files('resources/ensurePackages.mnh')|
   files('core/res_*.inc')|
   allFiles('versions','*.exe')|
   files(BUILTS.getInner(5))|
   files('build.log'))
  .unique
  .each(file,tprint('Deleting ',file,' ',deleteFile(file) ? 'ok' : 'ERR!'));
  delp;
  currentCodeHash:=void;
end;

private call7z(fileList,suffix)->isLinux ? void : begin
  local zipParams:=['a','-mx=9',format('versions/mnh5_%s_%s.7z',formatTime('yyyymmdd',systime),suffix)]|fileList;
  execPipeless("c:/Program Files/7-Zip/7z.exe",zipParams);
  execPipeless("c:/Program Files (x86)/7-Zip/7z.exe",zipParams);
end;

private testIsPassedAccordingToLog(B:BuildConfig)->
  testLog.log[testLog.log.getInner(0)=B[1] and testLog.log.getInner(1)=ensureCodeHash].size>0;

private makeDistro->begin
  BUILTS.each(B,B.canBuild AND not(B[6]) ? B.testExe : void);
  execPipeless('..\upx.exe',['-9','mnh_light.exe']);
  call7z(['mnh.exe','mnh_light.exe'],'64bit_windows');
  execPipeless('..\upx.exe',['-9','bin32/mnh_light.exe']);
  call7z(['bin32/mnh.exe','bin32/mnh_light.exe'],'32bit_windows');
  BUILTS[[8,9]].each(linuxConfig,testIsPassedAccordingToLog(linuxConfig),AND)
  ? begin
      execPipeless('..\upx.exe',['-9','mnh_light']);
      call7z(['mnh','mnh_light'],'linux');
    end
  : void;
  fileExists('distro_hook.mnh')
  ? executor.execPipeless(['distro_hook.mnh'])
  : void;
end;

private isSameFileName(filename1:string,filename2:string)->begin
  local case:=isLinux ? {$x} : {$x.upper};
  (filename1.splitFileName['expanded'].case)==
  (filename2.splitFileName['expanded'].case);
end;

private isSimilarFile(filename1:string,filename2:string)->pos(filename2.upper,filename1.upper)>=0;
private acceptedMainParameters->inspect['declares','main','subrules'].getInner('pattern').clean(['a'..'z','A'..'Z'],' ').trim.each(p,p='' ? void : p);
main->main('build');
//*Build all targets
main('build')->BUILTS.each(B,B.buildExe);
//*Test all targets - non-debug versions will be built if necessary
main('test')->BUILTS.each(B,B.testExe);
//*Test all targets even if the test already has been passed - non-debug versions will be built if necessary
main('test')->BUILTS.each(B,B.testExe('retest'));
//*Show the current built status
main('status')->showStatus;
//*Show the current built status
main('prepare')->ensureCodeHash;
//*Clean the output files
main('clean')->cleanup;
//*Create 7z distro
main('distro')->makeDistro;
//*Deep cleaning, including deleting all executables
main('CLEAN')->begin
  cleanup;
  BUILTS.getInner(2).each(binary,deleteFile(binary));
end;

//*Build one specific target
main(target:string)->
  BUILTS.each(B,isSameFileName(B[2],target) OR target=B[1] ? buildExe(B) orElse true : false,OR) OR
  BUILTS.each(B,isSimilarFile (B[2],target)                ? buildExe(B) orElse true : false,or)
  ? void
  : fail("Don't know what to do with: "+target+". Accepted parameters are\n"+(acceptedMainParameters | VALID_TARGETS).join("\n"));
//*Several steps in succession
main(...)->... .each(step,main(step));
