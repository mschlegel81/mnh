USE hash,testLog,mnhInfo;

private delp->'..\lazarus64\fpc\3.0.0\bin\x86_64-win64\delp.exe'.execPipeless(
       ['gui\lib\i386-win32',
        'gui\lib\x86_64-linux',
        'gui\lib\x86_64-win64',
   'consoles\lib\i386-win32',
   'consoles\lib\x86_64-linux',
   'consoles\lib\x86_64-win64']);

private templateToInc(inFile,outFile<>inFile)->begin
  local inLines:=inFile.fileContents;
  local pasId:=clean(inFile.splitFileName['filename'],['a'..'z','A'..'Z'],'_');
  local outText:=
  'VAR '&pasId&'cache:T_arrayOfString;'&
  'FUNCTION '&pasId&': T_arrayOfString;'&
  'CONST raw='& join('#'&strings.compress(inLines).chars.ord) &';'&
  'begin if length('&pasId&'cache)=0 then '&pasId&'cache:=split(decompressString(raw)); result:='&pasId&'cache; end;';
  outFile.fileContents==outText
  ? void
  : writeFile(outFile,outText);
end;

private nameAndContents(filename)->'['&escape(filename)&','&escape(fileContents(filename))&']';

private ensureDemos->fileExists('resources/ensureDemos.mnh') ? void : begin
  writeFileLines('resources/ensureDemos.mnh','{'|
    (files('demos/*.mnh')|'demos/inputs/inputs.mnh')
    .each(file,(index=0 ? '[' : ',') & nameAndContents(file))|
    "].each(f,fileExists($0&f[0]) ? void : writeFile($0&f[0],f[1]))}");
end;

private ensurePackages->fileExists('resources/ensurePackages.mnh') ? void : begin
  writeFileLines('resources/ensurePackages.mnh','{'|
    files('packages/*.mnh').each(file,(index=0 ? '[' : ',') & nameAndContents(file))|
    "].each(f,fileExists($0&f[0]) ? void : writeFile($0&f[0],f[1]))}");
end;

private mutable currentCodeHash:=void;
private synchronized updateCurrentCodeHash->
currentCodeHash:=begin
  isLinux ? print('Checkstyle skipped!') : executor.execPipeless(['../checkstyle.mnh','fix']);
  ensureDemos;
  ensurePackages;
  //convert here to ensure these files are considered in code hash calculation
  templateToInc('resources/examples.txt','core/res_examples.inc');
  templateToInc('resources/html_template.txt','core/res_html_template.inc');
  templateToInc('resources/ensureNotepad++Highlighting.mnh','core/res_ensureNppHighlighting.inc');
  templateToInc('resources/ensureDemos.mnh','core/res_ensureDemos.inc');
  templateToInc('resources/ensureInstallScripts.mnh','core/res_ensureInstallScripts.inc');
  templateToInc('resources/ensurePackages.mnh','core/res_ensurePackages.inc');
  local relevantFiles:=allFiles('.','*.lpr;*.pas;*.inc').each(f,splitFileName(f)['filename']='code_hash.inc' ? void : f);
  //update code hash
  local result:=fileStats(relevantFiles).getInner(3).agg(+).hex;
  fileContents('core/code_hash.inc')=="writeln(':"&result&"');"
  ? void
  : begin
      writeFile('core/code_hash.inc',"writeln(':"&result&"');");
      print('core/code_hash.inc updated with current hash ',result);
    end;
  result;
end;

binName(FI:int)->format('%smnh%s%s%s',
                                (FI and 1)>0 OR isLinux ? './' : 'bin32/',
                                (FI and 2)>0 ? '' : '_light',
                                (FI and 4)>0 ? '_debug' : '',
                                isLinux ? '' : '.exe');

private exeHasWrongVersion(FI:int)->begin
  local exeName:=binName(FI);
  fileExists(exeName)
  ? exeName.codeVersion != (currentCodeHash orElse updateCurrentCodeHash)
  : true;
end;

private deleteStubbornly(file:string)->begin
  local tries:=3;
  while(fileExists(file) AND tries>0,
    deleteFile(file) ? void : begin
    tries-=1;
    sleep(0.1);
  end);
end;

private myMove(source,dest:string)->fileExists(source) ? begin
  deleteStubbornly(dest);
  moveFile(source,dest) ? void : print('File move ',source,' -> ',dest,' failed!');
end : print('File  ',source,' does not exist');

private build(FI:int)->
exeHasWrongVersion(FI) ? begin
  local bin64:=(FI and 1)>0;
  local full :=(FI and 2)>0;
  local debug:=(FI and 4)>0;
  local compiler:=isLinux ? 'lazbuild'
                          : bin64 ? '..\lazarus64\lazbuild.exe'
                                  : '..\lazarus32\lazbuild.exe';
  local exeName:=binName(FI);
  local outName:=(full ? 'gui/mnh' : 'consoles/mnh_light') & (debug ? '_debug' : '') & (isLinux ? '' : '.exe');
  local parameters:=['-B','--bm='&(debug ? 'Default' : 'deployment'),full ? 'gui/mnh_gui.lpi' : 'consoles/mnh_light.lpi'];

  deleteStubbornly(exeName);
  local logName:=replace('make_'&exeName,['.exe','.','/','\','__'],['','','_','_','_'])&'.log.txt';
  printf('Compiling %-25s logging to %s',exeName,logName);
  writeFileLines(logName,(compiler&' '&(parameters.join(' ')))|exec(compiler,parameters));
  myMove(outName,exeName);
  not(exeHasWrongVersion(FI));
end : true;

private call7z(fileList,suffix)->isLinux ? void : begin
  local zipParams:=['a','-mx=9',format('versions/mnh5_%s_%s.7z',formatTime('yyyymmdd',systime),suffix)]|fileList;
  execPipeless("c:/Program Files/7-Zip/7z.exe",zipParams);
  execPipeless("c:/Program Files (x86)/7-Zip/7z.exe",zipParams);
end;

private movePairs:=[['mnh.exe','mnh64.exe'],
                    ['mnh_light.exe','mnh64_light.exe'],
                    ['bin32/mnh.exe','mnh.exe'],
                    ['bin32/mnh_light.exe','mnh_light.exe']];
private verboseMove(src,dest)->begin
  printf('move %-19s -> %-19s',src,dest);
  moveFile(src,dest);
end;

//*Make distro 7z - including build if needed
main('distro')->isLinux ? fail('Distro building is currently not supported under Linux') : begin
  updateCurrentCodeHash;
  [0..3].scramble.each(i,
  begin
    local buildOk:=build(i);
    local testOk:=testAlreadyPassed(binName(i));
    buildOk ? void : print('Building of ',binName(i),' failed');
    testOk ? void : print(binName(i),' has not been tested successfully');
    buildOk and testOk;
  end,
  AND)
  ? begin
      execPipeless('..\upx.exe',['-9','mnh_light.exe']);
      call7z(['mnh.exe','mnh_light.exe'],'64bit');
      movePairs.each(pair,verboseMove@pair,AND)
      ? begin
          execPipeless('..\upx.exe',['-9','mnh_light.exe']);
          call7z(['mnh.exe','mnh_light.exe'],'32bit');
          movePairs.get([3..0]).each(pair,verboseMove@(pair.get([1,0])));
        end
      : print('Error moving files! 32bit distro has not been created!');
      //Linux executables exist and are less than one hour old
      ['mnh','mnh_light'].each(file,fileExists(file) AND systime-file.fileInfo["time"]<1/24,AND)
      AND linuxTestsPassed
      ? begin
          execPipeless('..\upx.exe',['-9','mnh_light']);
          call7z(['mnh','mnh_light'],'64bit_Linux');
        end
      : void;
    end
  : void;
end;

//*Build - ignoring potentially existing executables
main('build')->begin
  updateCurrentCodeHash;
  (isLinux ? [0,2,4,6] : [0..7]).scramble.each(i,build(i),AND);
end;

//*Build - ignoring potentially existing executables
main->main('build');

//*Deletes all nppBackup folders, temporary object files, executables and png-files
main('clean')->isLinux ? fail('Cleanup is currently not supported under Linux') : begin
  allFolders('..')
  .each(f,splitFileName(f)['filename'] in ["nppBackup","backup"] ? f : void)
  .union('C:\ProgramData\MNH\*'.folders) //cleanup default install directory, but keep settings untouched
  .each(f,begin
           print('Deleting ',f);
           deleteDir(f);
          end);
  (files(allFolders('.')&'/*.png')|
   files(allFolders('..')&'/*.bak')|
   files('resources/ensureDemos.mnh')|
   files('resources/ensurePackages.mnh')|
   files('core/res_examples.inc')|
   files('core/res_html_template.inc')|
   files('core/res_ensureMnhFileAssociations.inc')|
   files('core/res_removeMnhFileAssociations.inc')|
   files('core/res_ensureNppHighlighting.inc')|
   files('core/res_ensureDemos.inc')|
   files('core/res_ensurePackages.inc')|
   allFiles('versions','*.exe')|
   allFiles('gui','*.exe')|
   allFiles('consoles','*.exe')|
   files('make*.log.txt'))
  .unique
  .each(file,print('Deleting ',file,' ',deleteFile(file) ? 'ok' : 'ERR!'));
  delp;
end;

private scramble(L:list)->L[L.size.random.sortPerm];

private testMnh(...)->begin
  updateCurrentCodeHash;
  (isLinux ? [0,2,4,6] : [0..7])
  .scramble
  .each(i,
  i in [0..3]
  ? build(i)
  : void,
  exeHasWrongVersion(i)
  ? void
  : print('Testing ',binName(i)) orElse
    binName(i).execPipeless(['-el5','-quiet','regTest/regTest.mnh','resources/examples.txt'.splitFileName['expanded']]|...) and testAlreadyPassed(binName(i)),
  AND);
end;


//*Tests all files
main('test')->testMnh;

//*Retests all files
main('retest')->testMnh('retest');

//*Only prepare code hash
main('prepare')->updateCurrentCodeHash;

//*Several steps in succession
main(...)->begin
  updateCurrentCodeHash;
  ... .each(p,
  (isLinux ? [0,2,4,6] : [0..7]).each(i,
    pos(upper(p),upper(binName(i)))>=0
    ? build(i) OR true
    :             false,or)
  ? void
  : p in inspect['declares','main','subrules'].getInner('pattern').clean(['a'..'z','A'..'Z'],' ').trim.each(p,p='' ? void : p)
    ? main(p)
    : void);
end;
