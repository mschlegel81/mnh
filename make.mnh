USE fileUtil, regTest, checkstyle;

memoized hashChanged->begin
  local oldFile:=fileContents('core/code_hash.inc');
  deleteFile('core/code_hash.inc');
  local codeHash:=each(filename,recFiles('.',['*.pas','*.inc']),+,hash(fileContents(filename)));
  local newFile:=format("writeln('"&codeHash&"');");
  writeFile('core/code_hash.inc',newFile);
  oldFile==newFile ? false : begin
    checkstyle.main('fix');
    deleteFile('core/code_hash.inc');
    codeHash:=each(filename,recFiles('.',['*.pas','*.inc']),+,hash(fileContents(filename)));
    newFile:=format("writeln('"&codeHash&"');");
    writeFile('core/code_hash.inc',newFile);
    true;
  end;
end;

private allFolders(base)->flatten(base,each(subFolder,folders(base&'/*'),allFolders(subFolder)));

private binName(bin64,full,debug)->(bin64 ? '.\\' : 'bin32\\') & 'mnh' & (full ? '' : '_light') & (debug ? '_debug' : '') & '.exe';

private build(bin64,full,debug)->hashChanged or not(fileExists(binName(bin64,full,debug))) ? begin
  local compiler:=bin64 ? 'C:/lazarus64/fpc/2.6.4/bin/x86_64-win64/fpc.exe'
                        : 'C:/lazarus32/fpc/2.6.4/bin/i386-win32/fpc.exe';
  local parameters:=
       (full ? ['gui\\mnh_gui.lpr','-dfullVersion'] : 'consoles\\mnh_console.pas')|
       ('-o'&binName(bin64,full,debug))|
       (debug ? ['-g','-gl','-Si','-ddebugMode']
              : ['-O3','-CX','-XX','-Si']) |
       ['-Fugui','-l','-dLCL','-dLCLwin32','-MObjFPC','-Scgh','-Fucore','-Fuutil','-Ficore'] |
       (bin64 ? ['-FuC:\\lazarus64\\components\\synedit\\units\\x86_64-win64\\win32','-FuC:\\lazarus64\\lcl\\units\\x86_64-win64\\win32','-FuC:\\lazarus64\\lcl\\units\\x86_64-win64','-FuC:\\lazarus64\\components\\lazutils\\lib\\x86_64-win64','-FuC:\\lazarus64\\packager\\units\\x86_64-win64','-dversion64bit']
              : ['-FuC:\\lazarus32\\components\\synedit\\units\\i386-win32\\win32'  ,'-FuC:\\lazarus32\\lcl\\units\\i386-win32\\win32'  ,'-FuC:\\lazarus32\\lcl\\units\\i386-win32'  ,'-FuC:\\lazarus32\\components\\lazutils\\lib\\i386-win32'  ,'-FuC:\\lazarus32\\packager\\units\\i386-win32']);
  execPipeless(compiler,parameters);
  execPipeless('C:\\lazarus64\\fpc\\2.6.4\\bin\\x86_64-win64\\delp',['.','core','util','test','consoles','bin32','gui\\lib\\i386-win32','gui\\lib\\x86_64-win64','gui']);
  each(file,
       files('./*.lfm')|files('bin32/*.lfm')|files('./mnh_gui.obj'),
       print('Deleting ',file,' ',deleteFile(file) ? 'ok' : 'ERR!'));
  void;
end : print('Unneccessary build of ',binName(bin64,full,debug),' skipped');

private compress(suffix)->
  (size(files('regTest/*.last'))=0 AND regTest.main('mnh.exe','randomSample') AND regTest.main('mnh_light.exe','randomSample')) OR
  regTest.main('mnh.exe') AND regTest.main('mnh_light.exe') ? begin
  fileExists('setup.mnh') ? void : writeFile('setup.mnh',
//!BLOB START
writeNppUserLang(notePadConfigFolder)->
  folderExists(notePadConfigFolder) ? begin
    local xmlOpeningTag:='<NotepadPlus>';
    local xmlClosingTag:='</NotepadPlus>';
    local xmlLines:=[
  '    <UserLang name="MNH" ext="mnh" udlVersion="2.1">',
  '        <Settings>',
  '            <Global caseIgnored="no" allowFoldOfComments="no" foldCompact="no" forcePureLC="0" decimalSeparator="0" />',
  '            <Prefix Keywords1="no" Keywords2="no" Keywords3="no" Keywords4="no" Keywords5="yes" Keywords6="no" Keywords7="no" Keywords8="no" />',
  '        </Settings>',
  '        <KeywordLists>',
  '            <Keywords name="Comments">00//! 01 02 03//* 04&#x000A;</Keywords>',
  '            <Keywords name="Numbers, prefix1"></Keywords>',
  '            <Keywords name="Numbers, prefix2"></Keywords>',
  '            <Keywords name="Numbers, extras1"></Keywords>',
  '            <Keywords name="Numbers, extras2"></Keywords>',
  '            <Keywords name="Numbers, suffix1"></Keywords>',
  '            <Keywords name="Numbers, suffix2"></Keywords>',
  '            <Keywords name="Numbers, range"></Keywords>',
  '            <Keywords name="Operators1">:keyValueList :booleanList :numericList :stringList :expression :realList :boolean :intList :numeric :scalar :string :list :real %%%% :int %%% .. &lt;&gt; &lt;= &gt;= == %% -&gt; := , = &lt; &gt; + - * / ^ + - &amp; % | ? : @ ;</Keywords>',
  '            <Keywords name="Operators2">and xor div mod or in AND OR</Keywords>',
  '            <Keywords name="Folders in code1, open"></Keywords>',
  '            <Keywords name="Folders in code1, middle"></Keywords>',
  '            <Keywords name="Folders in code1, close"></Keywords>',
  '            <Keywords name="Folders in code2, open"></Keywords>',
  '            <Keywords name="Folders in code2, middle"></Keywords>',
  '            <Keywords name="Folders in code2, close"></Keywords>',
  '            <Keywords name="Folders in comment, open"></Keywords>',
  '            <Keywords name="Folders in comment, middle"></Keywords>',
  '            <Keywords name="Folders in comment, close"></Keywords>',
  '            <Keywords name="Keywords1">synchronized&#x000D;&#x000A;memoized&#x000D;&#x000A;private&#x000D;&#x000A;mutable&#x000D;&#x000A;local</Keywords>',
  '            <Keywords name="Keywords2">'&each(func,sort(listBuiltin),aggregator({$x&'&#x000D;&#x000A;'&$y}))&'</Keywords>',
  '            <Keywords name="Keywords3">true&#x000D;&#x000A;false&#x000D;&#x000A;Nan&#x000D;&#x000A;Inf&#x000D;&#x000A;void</Keywords>',
  '            <Keywords name="Keywords4">aggregator&#x000D;&#x000A;pEach&#x000D;&#x000A;begin&#x000D;&#x000A;while&#x000D;&#x000A;each&#x000D;&#x000A;end&#x000D;&#x000A;</Keywords>',
  '            <Keywords name="Keywords5">$</Keywords>',
  '            <Keywords name="Keywords6"></Keywords>',
  '            <Keywords name="Keywords7"></Keywords>',
  '            <Keywords name="Keywords8"></Keywords>',
  '            <Keywords name="Delimiters">00( 01 02) 03[ 04 05] 06{ 07 08} 09&quot; 10\\ 11&quot; 12&apos; 13\\ 14&apos; 15// 16 17&#x000A; 18 19 20 21 22 23</Keywords>',
  '        </KeywordLists>',
  '        <Styles>',
  '            <WordsStyle name="DEFAULT" fgColor="000000" bgColor="FFFFFF" fontName="" fontStyle="0" nesting="0" />',
  '            <WordsStyle name="COMMENTS" fgColor="808080" bgColor="FFFFFF" fontName="" fontStyle="3" nesting="0" />',
  '            <WordsStyle name="LINE COMMENTS" fgColor="808080" bgColor="FFFFFF" fontName="" fontStyle="7" nesting="0" />',
  '            <WordsStyle name="NUMBERS" fgColor="FF0000" bgColor="FFFFFF" fontName="" fontStyle="0" nesting="0" />',
  '            <WordsStyle name="KEYWORDS1" fgColor="FF8000" bgColor="FFFFFF" fontName="" fontStyle="1" nesting="0" />',
  '            <WordsStyle name="KEYWORDS2" fgColor="0000FF" bgColor="FFFFFF" fontName="" fontStyle="1" nesting="0" />',
  '            <WordsStyle name="KEYWORDS3" fgColor="FF8000" bgColor="FFFFFF" fontName="" fontStyle="0" nesting="0" />',
  '            <WordsStyle name="KEYWORDS4" fgColor="0000FF" bgColor="FFFFFF" fontName="" fontStyle="3" nesting="0" />',
  '            <WordsStyle name="KEYWORDS5" fgColor="000000" bgColor="FFFFFF" fontName="" fontStyle="2" nesting="0" />',
  '            <WordsStyle name="KEYWORDS6" fgColor="800040" bgColor="FFFFFF" fontName="" fontStyle="0" nesting="0" />',
  '            <WordsStyle name="KEYWORDS7" fgColor="000000" bgColor="FFFFFF" fontName="" fontStyle="0" nesting="0" />',
  '            <WordsStyle name="KEYWORDS8" fgColor="000000" bgColor="FFFFFF" fontName="" fontStyle="0" nesting="0" />',
  '            <WordsStyle name="OPERATORS" fgColor="400080" bgColor="FFFFFF" fontName="" fontStyle="1" nesting="0" />',
  '            <WordsStyle name="FOLDER IN CODE1" fgColor="000000" bgColor="FFFFFF" fontName="" fontStyle="0" nesting="0" />',
  '            <WordsStyle name="FOLDER IN CODE2" fgColor="000000" bgColor="FFFFFF" fontName="" fontStyle="0" nesting="0" />',
  '            <WordsStyle name="FOLDER IN COMMENT" fgColor="000000" bgColor="FFFFFF" fontName="" fontStyle="0" nesting="0" />',
  '            <WordsStyle name="DELIMITERS1" fgColor="000000" bgColor="FFFFFF" fontName="" fontStyle="0" nesting="117701887" />',
  '            <WordsStyle name="DELIMITERS2" fgColor="000000" bgColor="FFFFFF" fontName="" fontStyle="0" nesting="117701887" />',
  '            <WordsStyle name="DELIMITERS3" fgColor="000000" bgColor="FFFFFF" fontName="" fontStyle="1" nesting="117701887" />',
  '            <WordsStyle name="DELIMITERS4" fgColor="008000" bgColor="FFFFFF" fontName="" fontStyle="0" nesting="0" />',
  '            <WordsStyle name="DELIMITERS5" fgColor="008000" bgColor="FFFFFF" fontName="" fontStyle="0" nesting="0" />',
  '            <WordsStyle name="DELIMITERS6" fgColor="808080" bgColor="FFFFFF" fontName="" fontStyle="2" nesting="0" />',
  '            <WordsStyle name="DELIMITERS7" fgColor="000000" bgColor="FFFFFF" fontName="" fontStyle="0" nesting="0" />',
  '            <WordsStyle name="DELIMITERS8" fgColor="000000" bgColor="FFFFFF" fontName="" fontStyle="0" nesting="0" />',
  '        </Styles>',
  '    </UserLang>'];

    fileExists(notePadConfigFolder&"/userDefineLang.xml")
    ? begin
        local ignoreBlock:=false;
        local oldLines:=
        each(l,fileLines(notePadConfigFolder&"/userDefineLang.xml"),begin
          trim(l)=xmlOpeningTag or trim(l)=xmlClosingTag ? void :
          pos('<UserLang name="MNH"',l)>0 ? begin ignoreBlock:=true; void; end :
          trim(l)='</UserLang>' ? (ignoreBlock ? begin ignoreBlock:=false; void; end : print(l)) :
          ignoreBlock ? void : l;
        end);
        writeFileLines(notePadConfigFolder&"/userDefineLang.xml",xmlOpeningTag|oldLines|xmlLines|xmlClosingTag);
      end
    : writeFileLines(notePadConfigFolder&"/userDefineLang.xml",xmlOpeningTag|xmlLines|xmlClosingTag);
    true;
  end : false;

main('run')->begin
  execAsync('mnh',['-doc']);
  local appdataFolder:=head(each(e,getEnv,split(upper(e),'=')%0="APPDATA" ? split(e,'=')%1 : void));
  writeNppUserLang(appdataFolder&"/Notepad++");
  writeNppUserLang(appdataFolder&"/Roaming/Notepad++");
  writeNppUserLang(appdataFolder&"/Local/Notepad++");
  writeFileLines('getadmin.vbs',['Set UAC = CreateObject("Shell.Application")','UAC.ShellExecute "'&splitFileName('install.bat')%'expanded'&'", "", "", "runas", 1']);
  writeFile('install.bat',replace(
//!BLOB START
@assoc .mnh=mnh.script
@ftype mnh.script="#" %%1 %%*
@if "%errorlevel%" NEQ "0" getadmin.vbs
//!BLOB END
  ,'#',executor));
  execPipeless('cmd',['/c','install.bat']);
  deleteFile('install.bat');
  deleteFile('getadmin.vbs');
  deleteFile(myPath);
end;

main->begin
  local reply:=
  ask('This script ('&myPath&') creates\n'&
      '  - MNH Highlighting for Notepad++\n'&
      '  - file associations\n'&
      '  - the html documentation\n'&
      'and deletes itself afterwards.\n'&
      'Do you want to run it?',['Yes','No','Maybe later',"Later but don't ask me again"]);
  reply='Yes' ? main('run') :
  reply='No' ? deleteFile(myPath) :
  reply="Later but don't ask me again" ? begin
    myPath='setup.mnh' ? begin
      writeFile('setup_.mnh',fileContents(myPath));
      deleteFile(myPath);
    end : void;
  end : void;
end;
//!BLOB END
  );
  fileExists('doTests.bat') ? void : writeFile('doTests.bat',
//!BLOB START
@mnh.exe       regTest\regTest.mnh mnh.exe       %1 %2 %3 %4 %5 %6 %7 %8 %9
@mnh_light.exe regTest\regTest.mnh mnh_light.exe %1 %2 %3 %4 %5 %6 %7 %8 %9
//!BLOB END
  );

  writeFile('distro.list',
//!BLOB START
packages\*.mnh
demos\*.mnh
doc\html_template.txt
setup.mnh
mnh.exe
mnh_light.exe
regTest\*.expected
regTest\*.mnh
regTest\regTestCases.dat
regTest\t.bat
doTests.bat
//!BLOB END
  );
  execPipeless("c:/Program Files/7-Zip/7z.exe",['a','-mx=9',format('versions/mnh5_%yyyymmdd%_%X%.7z',systime,suffix),'@distro.list']);
  execPipeless("c:/Program Files (x86)/7-Zip/7z.exe",['a','-mx=9',format('versions/mnh5_%yyyymmdd%_%X%.7z',systime,suffix),'@distro.list']);
  deleteFile('distro.list');
end : ask('Regression test failed! Distro will not be created!');

private movePairs:=[['mnh.exe','mnh64.exe'],
                    ['mnh_light.exe','mnh64_light.exe'],
                    ['bin32/mnh.exe','mnh.exe'],
                    ['bin32/mnh_light.exe','mnh_light.exe']];

//*Make distro 7z - including build and regTest if needed
main('distro')->begin
  each(bin64,[false,true],each(full,[false,true],build(bin64,full,false)));
  compress('64bit');
  each(pair,movePairs,moveFile@pair);
  compress('32bit');
  each(pair,movePairs%[3..0],moveFile@(pair%[1,0]));
end;

//*Build - ignoring potentially existing executables
main->each(bin64,[false,true],each(full,[false,true],each(debug,[false,true],build(bin64,full,debug))));

//*Deletes all nppBackup folders, temporary object files, executables and png-files
main('clean')->
each(f,allFolders('.'),
     splitFileName(f)%'filename'="nppBackup"
     ? begin
         print('Deleting ',f);
         deleteDir(f);
       end
     : void)|
each(file,
     files(allFolders('.')&'/*.exe')|files(allFolders('.')&'/*.png')|files('doc/*.html')|files('doc/*.css')|files('doTests.bat')|files('setup.mnh')|files('regTest/*.last'),
     print('Deleting ',file,' ',deleteFile(file) ? 'ok' : 'ERR!'));

//*First clean then make distro
main('clean','distro')->main('clean')|main('distro');

//*Tests all files
main('test')->each(bin64,[false,true],AND,each(full,[false,true],AND,each(debug,[false,true],AND,
  begin
    build(bin64,full,debug);
    regTest.main(binName(bin64,full,debug));
  end)));

//*Tests some files - randomly
main('quicktest')->each(bin64,[false,true],AND,each(full,[false,true],AND,each(debug,[false,true],AND,
  begin
    build(bin64,full,debug);
    regTest.main(binName(bin64,full,debug),'randomSample');
  end)));
