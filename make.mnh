USE regTest, hash;

private memoized templateToInc(inFile,outFile<>inFile)->begin
  local inLines:=inFile.fileContents;
  local pasId:=clean(inFile,['a'..'z','A'..'Z'],'_');
  local outText:=
  'VAR '&pasId&'cache:T_arrayOfString;'&
  'FUNCTION '&pasId&': T_arrayOfString;'&
  'CONST raw='& join('#'&strings.compress(inLines).chars.ord) &';'&
  'begin if length('&pasId&'cache)=0 then '&pasId&'cache:=split(decompressString(raw)); result:='&pasId&'cache; end;';
  writeFile(outFile,outText);
end;

private tryPack(filename)->'['&escape(filename)&','&escape(fileContents(filename))&']';

private memoized ensureDemos->fileExists('ensureDemos.mnh') ? void : begin
  writeFileLines('ensureDemos.mnh','{'|
    (files('demos/*.mnh')|'demos/inputs/inputs.mnh')
    .each(file,(index=0 ? '[' : ',') & tryPack(file))|
    "].each(f,fileExists($0&f[0]) ? void : writeFile($0&f[0],f[1]))}");
end;

private memoized ensurePackages->fileExists('ensurePackages.mnh') ? void : begin
  writeFileLines('ensurePackages.mnh','{'|
    files('packages/*.mnh').each(file,(index=0 ? '[' : ',') & tryPack(file))|
    "].each(f,fileExists($0&f[0]) ? void : writeFile($0&f[0],f[1]))}");
end;

private
currentCodeHash->begin
  ensureDemos;
  ensurePackages;
  //convert here to ensure these files are considered in code hash calculation
  templateToInc('doc/examples.txt','core/res_examples.inc');
  templateToInc('doc/html_template.txt','core/res_html_template.inc');
  templateToInc('ensureMnhFileAssociations.mnh','core/res_ensureMnhFileAssociations.inc');
  templateToInc('removeMnhFileAssociations.mnh','core/res_removeMnhFileAssociations.inc');  
  templateToInc('ensureNotepad++Highlighting.mnh','core/res_ensureNppHighlighting.inc');  
  templateToInc('ensureDemos.mnh','core/res_ensureDemos.inc');  
  templateToInc('ensurePackages.mnh','core/res_ensurePackages.inc');    
  local relevantFiles:=flatten(files(allFolders('.')&'\*.lpr'),
                               files(allFolders('.')&'\*.pas'),
                               files(allFolders('.')&'\*.inc').each(f,splitFileName(f).filename='code_hash.inc' ? void : f));
  //update code hash
  local result:=relevantFiles.each(filename,hash(fileContents(filename)),+).hex;
  fileContents('core/code_hash.inc')=="writeln(':"&result&"');" 
  ? void 
  : begin
      writeFile('core/code_hash.inc',"writeln(':"&result&"');");
      print('core/code_hash.inc updated with current hash ',result);
    end;
  result;
end;

private binName(FI:int)->format('%smnh%s%s.exe',
                                (FI and 1)>0 ? '.\' : 'bin32\',
                                (FI and 2)>0 ? ''   : '_light',
                                (FI and 4)>0 ? '_debug' : '');

private exeHasWrongVersion(FI:int)->begin
  local exeName:=binName(FI);
  fileExists(exeName) ? begin
    local fullCodeHash:=split(head(exec(exeName,["-codeHash"])),':');
    size(fullCodeHash)!=2 OR (fullCodeHash[1] != currentCodeHash);
  end : true;
end;

private build(FI:int)->
exeHasWrongVersion(FI) ? begin
  local bin64:=(FI and 1)>0;
  local full :=(FI and 2)>0;
  local debug:=(FI and 4)>0;

  local compiler:=bin64 ? '../lazarus64/fpc/2.6.4/bin/x86_64-win64/fpc.exe'
                        : '../lazarus32/fpc/2.6.4/bin/i386-win32/fpc.exe';
  local exeName:=binName(FI);
  local parameters:=
       (full ? ['gui\mnh_gui.lpr','-dfullVersion'] : 'consoles\mnh_console.pas')|
       ('-o'&exeName)|
       (debug ? ['-gl','-ddebugMode']
              : ['-O3','-CX','-XX','-Si']) |
       ['-Fugui','-l','-dLCL','-S2cgh','-Fucore','-Fu..\common','-Fu..\common\*','-Ficore','-vewnhi'] |
       (bin64 ? ['-Fu..\lazarus64\components\synedit\units\x86_64-win64\win32','-Fu..\lazarus64\lcl\units\x86_64-win64\win32','-Fu..\lazarus64\lcl\units\x86_64-win64','-Fu..\lazarus64\components\lazutils\lib\x86_64-win64','-Fu..\lazarus64\packager\units\x86_64-win64','-dversion64bit']
              : ['-Fu..\lazarus32\components\synedit\units\i386-win32\win32'  ,'-Fu..\lazarus32\lcl\units\i386-win32\win32'  ,'-Fu..\lazarus32\lcl\units\i386-win32'  ,'-Fu..\lazarus32\components\lazutils\lib\i386-win32'  ,'-Fu..\lazarus32\packager\units\i386-win32']);
  deleteFile(exeName);
  local logName:=replace('make_'&exeName,['.exe','.','/','\','__'],['','','_','_','_'])&'.log.txt';
  printf('Compiling %-25s logging to %s',exeName,logName);
  writeFileLines(logName,(compiler&' '&(parameters.join(' ')))|exec(compiler,parameters));

  exec('..\lazarus64\fpc\2.6.4\bin\x86_64-win64\delp',['.','core','..\common','..\common\synapse','test','consoles','bin32','gui\lib\i386-win32','gui\lib\x86_64-win64','gui']);
  (files('./*.lfm')|files('bin32/*.lfm')|files('./mnh_gui.obj')).each(file,deleteFile(file));
  not(exeHasWrongVersion(FI));
end : true;


private compress(suffix)->
  (size(files('regTest/*.last'))=0 ? regTest.main('mnh.exe','randomSample') AND regTest.main('mnh_light.exe','randomSample')
                                   : regTest.main('mnh.exe')                AND regTest.main('mnh_light.exe'))
  ? begin
      local zipParams:=['a','-mx=9',format('versions/mnh5_%s_%s.7z',formatTime('yyyymmdd',systime),suffix),'mnh.exe','mnh_light.exe'];
      execPipeless("c:/Program Files/7-Zip/7z.exe",zipParams);
      execPipeless("c:/Program Files (x86)/7-Zip/7z.exe",zipParams);
    end
  : ask("Regression test failed! Distro will not be created!\nPress Enter.");

private movePairs:=[['mnh.exe','mnh64.exe'],
                    ['mnh_light.exe','mnh64_light.exe'],
                    ['bin32/mnh.exe','mnh.exe'],
                    ['bin32/mnh_light.exe','mnh_light.exe']];
private verboseMove(src,dest)->begin
  printf('move %-19s -> %-19s',src,dest);
  moveFile(src,dest);
end;
                    
//*Make distro 7z - including build and regTest if needed
main('distro')->
  [0..3].each(i,build(i),AND) ? begin
    compress('64bit');
    movePairs.each(pair,verboseMove@pair,AND)
    ? begin
        compress('32bit');
        movePairs.get([3..0]).each(pair,verboseMove@(pair.get([1,0])));
      end
    : print('Error moving files! 32bit distro has not been created!');
  end : void;

//*Build - ignoring potentially existing executables
main('build')->[0..7].each(i,build(i),AND);

//*Build - ignoring potentially existing executables
main->main('build');

//*Deletes all nppBackup folders, temporary object files, executables and png-files
main('clean')->begin
  allFolders('..').each(f,
       splitFileName(f).filename in ["nppBackup","backup"]
       ? begin
           print('Deleting ',f);
           deleteDir(f);
         end
       : void);
  (files(allFolders('.')&'/*.exe')|
   files(allFolders('.')&'/*.png')|
   files(allFolders('.')&'/*.bak')|
   files('doc/package_doc/*.html')|
   files('doc/*.html')|
   files('doc/*.css')|
   files('install.mnh')|
   files('make*.log.txt')|
   files('regTest/*.last')).each(file, print('Deleting ',file,' ',deleteFile(file) ? 'ok' : 'ERR!'));
  sandBoxExecute('USE passedTestsStore; passedTestsStore.main("clear");');
end;
     
//*Tests all files
main('test')->[3..0].each(i,
  build(i), 
  regTest.main(binName(i)),AND);

//*Tests some files - randomly
main('quicktest')->[3..0].each(i,
  build(i),
  regTest.main(binName(i),'randomSample'),AND);

//*Several steps in succession
main(...)->... .each(p,
  [0..7].each(i,
    pos(upper(p),upper(binName(i)))>=0 
    ? build(i) OR true
    :             false,or)
  ? void
  : p in ['distro','build','clean','test','quicktest']
    ? main(p)
    : void);

