USE testLog,mnhInfo,formattingUtils;

tprint(...)->print@(formatTime('hh:nn.ss ',systime)|...);
type BuildConfig(L:list(7))->L[0].isBoolean AND
                             L[1].isString AND
                             L[2].isString AND
                             L[3].isString AND
                             L[4].isStringList(3) AND
                             L[5].isString AND
                             L[6].isBoolean;

//BUILTS  linux, flavour , binary                    , compiler                  , compilerOptions                                 , compilerOutput
BUILTS:=[[false,'LOWin64','./mnh_light.exe'          ,'..\lazarus64\lazbuild.exe',['-B','--bm=deployment','consoles/mnh_light.lpi'],'consoles/mnh_light.exe'      ,false],
         [false,'FOWin64','./mnh.exe'                ,'..\lazarus64\lazbuild.exe',['-B','--bm=deployment','gui/mnh_gui.lpi']       ,'gui/mnh.exe'                 ,false],
         [false,'FIOWin64','./mnhi.exe'              ,'..\lazarus64\lazbuild.exe',['-B','--bm=imig'      ,'gui/mnh_gui.lpi']       ,'gui/mnhi.exe'                ,false],
         [false,'LOWin32','bin32/mnh_light.exe'      ,'..\lazarus32\lazbuild.exe',['-B','--bm=deployment','consoles/mnh_light.lpi'],'consoles/mnh_light.exe'      ,false],
         [false,'FOWin32','bin32/mnh.exe'            ,'..\lazarus32\lazbuild.exe',['-B','--bm=deployment','gui/mnh_gui.lpi']       ,'gui/mnh.exe'                 ,false],
         [true ,'LOLinux','./mnh_light'              ,'lazbuild'                 ,['-B','--bm=deployment','consoles/mnh_light.lpi'],'consoles/mnh_light'          ,false],
         [true ,'FOLinux','./mnh'                    ,'lazbuild'                 ,['-B','--bm=deployment','gui/mnh_gui.lpi']       ,'gui/mnh'                     ,false],
         [true ,'FIOLinux','./mnhi'                  ,'lazbuild'                 ,['-B','--bm=imig'      ,'gui/mnh_gui.lpi']       ,'gui/mnhi'                    ,false],
         [false,'LDWin64','./mnh_light_debug.exe'    ,'..\lazarus64\lazbuild.exe',['-B','--bm=Default'   ,'consoles/mnh_light.lpi'],'consoles/mnh_light_debug.exe',true],
         [false,'FDWin64','./mnh_debug.exe'          ,'..\lazarus64\lazbuild.exe',['-B','--bm=Default'   ,'gui/mnh_gui.lpi']       ,'gui/mnh_debug.exe'           ,true],
         [false,'FIDWin64','./mnhi_debug.exe'        ,'..\lazarus64\lazbuild.exe',['-B','--bm=imig_debug','gui/mnh_gui.lpi']       ,'gui/mnhi_debug.exe'          ,true],
         [false,'LDWin32','bin32/mnh_light_debug.exe','..\lazarus32\lazbuild.exe',['-B','--bm=Default'   ,'consoles/mnh_light.lpi'],'consoles/mnh_light_debug.exe',true],
         [false,'FDWin32','bin32/mnh_debug.exe'      ,'..\lazarus32\lazbuild.exe',['-B','--bm=Default'   ,'gui/mnh_gui.lpi']       ,'gui/mnh_debug.exe'           ,true],
         [true ,'LDLinux','./mnh_light_debug'        ,'lazbuild'                 ,['-B','--bm=Default'   ,'consoles/mnh_light.lpi'],'consoles/mnh_light_debug'    ,true],
         [true ,'FDLinux','./mnh_debug'              ,'lazbuild'                 ,['-B','--bm=Default'   ,'gui/mnh_gui.lpi']       ,'gui/mnh_debug'               ,true],
         [true ,'FIDLinux','./mnhi_debug'            ,'lazbuild'                 ,['-B','--bm=imig_debug','gui/mnh_gui.lpi']       ,'gui/mnhi_debug'              ,true]];
LINUX_BUILTS:=BUILTS.each(b,b[0] AND not(b[6]) ? b : void);
//Configuration:=====================================================
private canBuild(B:BuildConfig)->B[0]=isLinux;
VALID_TARGETS:=BUILTS.each(B,B.canBuild ? B[2] : void);
private binName(B:BuildConfig)->B[2];
private needBuilt(B:BuildConfig)->B.canBuild AND (not(B.binName.fileExists) OR not([B[2].flavour,B[2].codeVersion]==[B[1],ensureCodeHash]));

private isLinux:=mnhInfo['targetOs']='Linux' orElse false;
private delp->(isLinux ? 'delp' : '..\lazarus64\fpc\3.0.0\bin\x86_64-win64\delp.exe').execPipeless(
       ['gui/lib/i386-win32',
        'gui/lib/x86_64-linux',
        'gui/lib/x86_64-win64',
        'core',
        '../common',
        'consoles/lib/i386-win32',
        'consoles/lib/x86_64-linux',
        'consoles/lib/x86_64-win64',
        '../art.source/display/lib/i386-win32',
        '../art.source/display/lib/x86_64-win64',
        '../art.source/im/lib/i386-win32',
        '../art.source/im/lib/x86_64-win64',
        '../art.source/igSrc']);

private templateToInc(inFile,inLines,outFile<>inFile)->begin
  local pasId:=clean(inFile.extractFileName,['a'..'z','A'..'Z'],'_');
  local outText:=
  'CONST '&pasId&': array[0..'&(inLines.size-1)&"] of string=(\n"&
  inLines.each(line,line='' ? "''" : join('#'&(line.bytes.ord))).join(",\n")&');';
  outFile.fileContents==outText
  ? void
  : writeFile(outFile,outText);
end;

private templateToInc(inFile,outFile<>inFile)->templateToInc(inFile,fileLines(inFile),outFile);

private ensurePackagesLines->'{'|
    sort(files('demos/*.mnh')|'demos/inputs/inputs.mnh'|files('packages/*.mnh'))
    .each(file,(index=0 ? '[' : ',') & ('['&escape(file)&','&escape(fileContents(file))&']'))|
    "].each(f,fileExists($0&f[0]) ? void : writeFile($0&f[0],f[1]))}";

private hashFiles:=['../3rd_party/diff/diff.pas',
                    '../3rd_party/epikTimer/epiktimer.pas',
                    '../3rd_party/synapse/blcksock.pas',
                    '../3rd_party/synapse/synacode.pas',
                    '../3rd_party/synapse/synafpc.pas',
                    '../3rd_party/synapse/synaip.pas',
                    '../3rd_party/synapse/synautil.pas',
                    '../3rd_party/synapse/synsock.pas',
                    '../art.source/igSrc/complex.pas',
                    '../art.source/igSrc/darts.pas',
                    '../art.source/igSrc/ig_bifurcation.pas',
                    '../art.source/igSrc/ig_epicycles.pas',
                    '../art.source/igSrc/ig_expoClouds.pas',
                    '../art.source/igSrc/ig_fractals.pas',
                    '../art.source/igSrc/ig_funcTrees.pas',
                    '../art.source/igSrc/ig_gradient.pas',
                    '../art.source/igSrc/ig_ifs.pas',
                    '../art.source/igSrc/ig_perlin.pas',
                    '../art.source/igSrc/ig_simples.pas',
                    '../art.source/igSrc/imagegeneration.pas',
                    '../art.source/igSrc/myColors.pas',
                    '../art.source/igSrc/myParams.pas',
                    '../art.source/igSrc/mypics.pas',
                    '../art.source/igSrc/workflows.pas',
                    '../common/httpUtil.pas',
                    '../common/huffman.pas',
                    '../common/myGenerics.pas',
                    '../common/myStringUtil.pas',
                    '../common/mySys.pas',
                    '../common/myTools.pas',
                    '../common/serializationUtil.pas',
                    'consoles/mnh_light.lpr',
                    'core/consoleAsk.pas',
                    'core/mnh_basicTypes.pas',
                    'core/mnh_caches.pas',
                    'core/mnh_cmdLineInterpretation.pas',
                    'core/mnh_constants.pas',
                    'core/mnh_contexts.pas',
                    'core/mnh_datastores.pas',
                    'core/mnh_doc.pas',
                    'core/mnh_fileWrappers.pas',
                    'core/mnh_fmtStmt.inc',
                    'core/mnh_func_defines.inc',
                    'core/mnh_funcs.inc',
                    'core/mnh_funcs.pas',
                    'core/mnh_funcs_files.pas',
                    'core/mnh_funcs_list.pas',
                    'core/mnh_funcs_math.pas',
                    'core/mnh_funcs_mnh.pas',
                    'core/mnh_funcs_plot.pas',
                    'core/mnh_funcs_regex.pas',
                    'core/mnh_funcs_server.pas',
                    'core/mnh_funcs_strings.pas',
                    'core/mnh_funcs_system.pas',
                    'core/mnh_funcs_types.pas',
                    'core/mnh_funcs_xml.pas',
                    'core/mnh_futureTask.inc',
                    'core/mnh_html.pas',
                    'core/mnh_imig.pas',
                    'core/mnh_litvar.pas',
                    'core/mnh_out_adapters.pas',
                    'core/mnh_packages.pas',
                    'core/mnh_pattern.inc',
                    'core/mnh_plotData.pas',
                    'core/mnh_procBlock.inc',
                    'core/mnh_rule.inc',
                    'core/mnh_settings.pas',
                    'core/mnh_subrule.inc',
                    'core/mnh_token.inc',
                    'core/mnh_tokens.pas',
                    'core/res_ensureAssoc.inc',
                    'core/res_ensureNppHighlighting.inc',
                    'core/res_ensurePackages.inc',
                    'core/res_examples.inc',
                    'core/res_html_template.inc',
                    'core/res_removeAssoc.inc',
                    'gui/askdialog.pas',
                    'gui/closedialog.pas',
                    'gui/completionLogic.inc',
                    'gui/debuggerLogic.inc',
                    'gui/editorMeta.inc',
                    'gui/filesLogic.inc',
                    'gui/guiEditorInterface.inc',
                    'gui/guiOutAdapters.pas',
                    'gui/mnhFormHandler.pas',
                    'gui/mnh_evalThread.pas',
                    'gui/mnh_gui.lpr',
                    'gui/mnh_gui_main.pas',
                    'gui/mnh_gui_outputonly.pas',
                    'gui/mnh_gui_settings.pas',
                    'gui/mnh_imig_form.pas',
                    'gui/mnh_plotform.pas',
                    'gui/mnh_tables.pas',
                    'gui/mnh_workspaces.pas',
                    'gui/newcentralpackagedialog.pas',
                    'gui/openDemoDialog.pas',
                    'gui/runnerLogic.inc',
                    'gui/searchLogic.inc',
                    'gui/settingsLogic.inc',
                    'gui/synhighlightermnh.pas'];

private mutable currentCodeHash:=void;
private synchronized updateCurrentCodeHash->
currentCodeHash:=begin
  tprint('Checkstyle');
  executor.execPipeless(['../checkstyle.mnh','fix']);
  tprint('Updating generated files');
  //convert here to ensure these files are considered in code hash calculation
  templateToInc('resources/examples.txt'                   ,'core/res_examples.inc');
  templateToInc('resources/html_template.txt'              ,'core/res_html_template.inc');
  templateToInc('resources/ensureNotepad++Highlighting.mnh','core/res_ensureNppHighlighting.inc');
  templateToInc('resources/ensureAssoc.mnh'                ,'core/res_ensureAssoc.inc');
  templateToInc('resources/removeAssoc.mnh'                ,'core/res_removeAssoc.inc');
  templateToInc('resources/ensurePackages.mnh',ensurePackagesLines,'core/res_ensurePackages.inc');
  //update code hash
  tprint('Updating code hash based on ',hashFiles.size,' files');
  local result:=format('%8.8x',fileStats(hashFiles).getInner(3).agg(+)).copy(0,8);
  fileContents('core/code_hash.inc')=="CODE_HASH='"&result&"';"
  ? void
  : begin
      writeFile('core/code_hash.inc',"CODE_HASH='"&result&"';");
      tprint('core/code_hash.inc updated with current hash ',result);
    end;
  result;
end;
private ensureCodeHash->currentCodeHash orElse updateCurrentCodeHash;

private myMove(source,dest:string)->fileExists(source) ? begin
  local tries:=3;
  while(fileExists(dest) AND tries>0,
    deleteFile(dest) ? void : begin
    tries-=1;
    sleep(0.1);
  end);
  fileExists(dest) ? fail('Failed deleting '+dest) : void;
  moveFile(source,dest) ? void : fail('File move '+source+' -> '+dest+' failed!');
end : fail('File  '+source+' does not exist');

private BUILD_LOG:='build.log';
private buildExe(B:BuildConfig)->
  B.needBuilt
  ? begin
      ensureCodeHash;
      tprint('Building ',B[2]);
      local compilerOutput:=B[3].exec(B[4]).head;
      local sepLine:=repeat('-',compilerOutput.each(line,line.length,max));
      compilerOutput:=sepLine|
                      (B[3]|B[4]).join(' ')|
                      sepLine|
                      compilerOutput;
      BUILD_LOG.appendFileLines(compilerOutput);
      myMove(B[5],B[2]);
      local ok:=not(B.needBuilt);
      ok ? tprint('Built successful')
         : fail('Built failed - see '&BUILD_LOG&' for details');
    end
  : void;

private testExe(B:BuildConfig,...)->
  not(B.canBuild)
  ? void
  : (B[6] ? void : B.buildExe) orElse (...==[]) and testAlreadyPassed(B[2]) or needBuilt(B)
    ? void
    : tprint('Testing ',B[2]) orElse
      B[2].execPipeless(['-quiet','regTest/regTest.mnh','resources/examples.txt'.expandedFileName]|...)=0
      ? tprint('Test passed')
      : fail('Test failed');

private showStatus->
  print orElse
  tprint('Current code hash: ',ensureCodeHash,"\n") orElse
  ([['Flavour','Binary','CodeVersion','Compile time','Time for test']]|
  (BUILTS.each(B,[B[1],
                 B[2],
                 canBuild(B) ? needBuilt(B) ? B[2].codeVersion : 'o.k.' : '?' ,
                 canBuild(B) ? B[2].compileTime : '?',
                 (canBuild(B) ? timeForTest(B[2]) : timeForTest(B[1],ensureCodeHash)) orElse '.']))).formatTable.join("\n").print
  orElse print;

private cleanup->begin
  allFolders('.')
  .each(f,extractFileName(f) in ["nppBackup","backup"] ? f : void)
  .each(f,begin
           tprint('Deleting ',f);
           deleteDir(f);
          end);
  (files(allFolders('.')&'/*.png')|
   files(allFolders('..')&'/*.bak')|
   files('core/res_*.inc')|
   allFiles('versions','*.exe')|
   files(BUILTS.getInner(5))|
   files('build.log'))
  .unique
  .each(file,tprint('Deleting ',file,' ',deleteFile(file) ? 'ok' : 'ERR!'));
  delp;
  currentCodeHash:=void;
  clearAllCaches;
end;

private call7z(fileList,suffix)->isLinux ? void : begin
  local zipParams:=['a','-mx=9',format('versions/mnh5_%s_%s.7z',formatTime('yyyymmdd',systime),suffix)]|fileList;
  execPipeless("c:/Program Files/7-Zip/7z.exe",zipParams);
  execPipeless("c:/Program Files (x86)/7-Zip/7z.exe",zipParams);
end;

private testIsPassedAccordingToLog(B:BuildConfig)->
  testLog.log[testLog.log.getInner(0)=B[1] and testLog.log.getInner(1)=ensureCodeHash].size>0;

private makeDistro->isLinux ? fail : begin
  BUILTS.each(B,B.canBuild AND not(B[6]) ? B.testExe : void);
  local linuxBuiltReady:=LINUX_BUILTS.each(linuxConfig,testIsPassedAccordingToLog(linuxConfig),AND);
  ['mnh_light.exe','bin32/mnh_light.exe',linuxBuiltReady ? 'mnh_light' : void].pEach(lightBinary,execPipeless('..\upx.exe',['-9',lightBinary]));
  [                 [[      'mnh.exe',      'mnh_light.exe'],'64bit_windows'],
                    [['bin32/mnh.exe','bin32/mnh_light.exe'],'32bit_windows'],
  linuxBuiltReady ? [[      'mnh'    ,      'mnh_light'    ],'linux'] : void,
                    [[linuxBuiltReady ? 'mnh' : void,linuxBuiltReady ? 'mnh_light' : void ,
                                        'mnh.exe',                     'mnh_light.exe',
                                  'bin32/mnh.exe',               'bin32/mnh_light.exe'],'all']]
  .pEach(zipTask,call7z@zipTask);
  fileExists('distro_hook.mnh')
  ? executor.execPipeless(['distro_hook.mnh'])
  : void;
end;

private isSameFileName(filename1:string,filename2:string)->begin
  local case:=isLinux ? {$x} : {$x.upper};
  (filename1.expandedFileName.case)==
  (filename2.expandedFileName.case);
end;

private isSimilarFile(filename1:string,filename2:string)->pos(filename2.upper,filename1.upper)>=0;
private acceptedMainParameters->inspect['declares','main','subrules'].getInner('pattern').clean(['a'..'z','A'..'Z'],' ').trim.each(p,p='' ? void : p);
main->main('build');
//*Build all targets
main('build')->BUILTS.each(B,B.buildExe);
//*Test all targets - non-debug versions will be built if necessary
main('test')->BUILTS.each(B,B.testExe);
//*Test all targets even if the test already has been passed - non-debug versions will be built if necessary
main('retest')->BUILTS.each(B,B.testExe('retest'));
//*Show the current built status
main('status')->showStatus;
//*Show the current built status
main('prepare')->ensureCodeHash;
//*Clean the output files
main('clean')->tprint('Cleaning') orElse cleanup;
//*Create 7z distro
main('distro')->makeDistro;
//*Deep cleaning, including deleting all executables
main('CLEAN')->begin
  tprint('Deep cleaning');
  cleanup;
  files('versions/*').|(files(BUILTS.getInner(2))).each(file,tprint('Deleting ',file,' ',deleteFile(file) ? 'ok' : 'ERR!'));
end;
//*Beep - just for notification purposes
main('beep')->beep;

//*Build one specific target
main(target:string)->
  BUILTS.each(B,isSameFileName(B[2],target) OR target=B[1] ? buildExe(B) orElse true : false,OR) OR
  BUILTS.each(B,isSimilarFile (B[2],target)                ? buildExe(B) orElse true : false,or)
  ? void
  : fail("Don't know what to do with: "+target+". Accepted parameters are\n"+(acceptedMainParameters | VALID_TARGETS).join("\n"));
//*Several steps in succession
main(...)->... .each(step,
  print('******************************'),
  print('* ',step),
  print('******************************'),
  main(step));
