USE regTest, checkstyle, hash, shorten;

private tryPack(filename)->begin
  filename='regTest/passedTestsStore.mnh' 
  ? begin
      copyFile('regTest/passedTestsStore.mnh','regTest/passedTestsStore.mnh.stashed');
      sandBoxExecute('USE passedTestsStore; passedTestsStore.main("clear");');
      void;
    end
  : void;
  
  print(filename);
  local oldContents:=fileContents(filename);
  filename='regTest/passedTestsStore.mnh' 
  ?                                      deleteFile('regTest/passedTestsStore.mnh') AND
    moveFile('regTest/passedTestsStore.mnh.stashed','regTest/passedTestsStore.mnh')
  : void;

  local newContents:=shortenSilently(oldContents);
  local oldContents:=escape(oldContents);
  'fileExists('&escape(filename)&') ? void : writeFile('&escape(filename)&','&
  (length(newContents)<length(oldContents)
   ? newContents
   : oldContents)&');';
end;

private ensureInstall->fileExists('install.mnh') ? void : begin
  writeFileLines('install.mnh','main->begin'|each(file,
    'doTests.bat'|
    'ensureMnhFileAssociations.mnh'|
    'ensureNotepad++Highlighting.mnh'|
    'doc/html_template.txt'|
    'doc/examples.txt'|
    files('demos/*.mnh')|
          'demos/inputs/inputs.mnh'|
    files('packages/*.mnh')|
    files('regTest/*.mnh')|
    files('regTest/*.expected')|
          'regTest/regTestCases.dat',
    tryPack(file))|
    ["deleteFile(myPath);",
     "execPipeless(executor,['-doc']);",
     "end;"]);
end;


memoized private 
relevantFiles->flatten(files(allFolders('.')&'\*.lpr'),
                       files(allFolders('.')&'\*.pas'),
                       each(f,files(allFolders('.')&'\*.inc'),splitFileName(f)%"filename"='code_hash.inc' ? void : f));
                               
memoized private 
currentCodeHash->begin
  //update code hash
  local result:=pEach(filename,relevantFiles,+,hash(fileContents(filename))).hex;
  fileContents('core/code_hash.inc')=="writeln(':"&result&"');" ? void : begin
    //If the hash has changed, checkstyle fixes might be necessary
    checkstyle.main('fix');
    //update result after checkstyle fixes
    result:=pEach(filename,relevantFiles,+,hash(fileContents(filename))).hex;
    //update core/code_hash.inc with expected result
    writeFile('core/code_hash.inc',"writeln(':"&result&"');");
  end;
  result;
end;

private binName(FI:int)->((FI and 1)>0 ? '.\' : 'bin32\') & 'mnh' & ((FI and 2)>0 ? '' : '_light') & ((FI and 4)>0 ? '_debug' : '') & '.exe';

private exeHasWrongVersion(FI:int)->begin
  local exeName:=binName(FI);
  fileExists(exeName) ? begin
    local fullCodeHash:=split(head(exec(exeName,["-codeHash"])),':');
    size(fullCodeHash)!=2 OR (fullCodeHash%1 != currentCodeHash);
  end : true;
end;

private build(FI:int)->
exeHasWrongVersion(FI) ? begin
  local bin64:=(FI and 1)>0;
  local full :=(FI and 2)>0;
  local debug:=(FI and 4)>0;

  local compiler:=bin64 ? 'C:/lazarus64/fpc/2.6.4/bin/x86_64-win64/fpc.exe'
                        : 'C:/lazarus32/fpc/2.6.4/bin/i386-win32/fpc.exe';
  local exeName:=binName(FI);
  local parameters:=
       (full ? ['gui\mnh_gui.lpr','-dfullVersion'] : 'consoles\mnh_console.pas')|
       ('-o'&exeName)|
       (debug ? ['-gl','-ddebugMode']
              : ['-O3','-CX','-XX','-Si']) |
       ['-Fugui','-l','-dLCL','-dLCLwin32','-MObjFPC','-Scgh','-Fucore','-Fuutil','-Ficore','-vewnhi'] |
       (bin64 ? ['-FuC:\lazarus64\components\synedit\units\x86_64-win64\win32','-FuC:\lazarus64\lcl\units\x86_64-win64\win32','-FuC:\lazarus64\lcl\units\x86_64-win64','-FuC:\lazarus64\components\lazutils\lib\x86_64-win64','-FuC:\lazarus64\packager\units\x86_64-win64','-dversion64bit']
              : ['-FuC:\lazarus32\components\synedit\units\i386-win32\win32'  ,'-FuC:\lazarus32\lcl\units\i386-win32\win32'  ,'-FuC:\lazarus32\lcl\units\i386-win32'  ,'-FuC:\lazarus32\components\lazutils\lib\i386-win32'  ,'-FuC:\lazarus32\packager\units\i386-win32']);
  deleteFile(exeName);
  local logName:=replace('make_'&exeName,['.exe','.','/','\','__'],['','','_','_','_'])&'.log.txt';
  printf('Compiling %X25% logging to %X%',exeName,logName);
  writeFileLines(logName,exec(compiler,parameters));

  exec('C:\lazarus64\fpc\2.6.4\bin\x86_64-win64\delp',['.','core','util','test','consoles','bin32','gui\lib\i386-win32','gui\lib\x86_64-win64','gui']);
  each(file,files('./*.lfm')|files('bin32/*.lfm')|files('./mnh_gui.obj'),deleteFile(file));
  not(exeHasWrongVersion(FI));
end : true;


private compress(suffix)->
  (size(files('regTest/*.last'))=0 ? regTest.main('mnh.exe','randomSample') AND regTest.main('mnh_light.exe','randomSample')
                                   : regTest.main('mnh.exe')                AND regTest.main('mnh_light.exe'))
  ? begin
      ensureInstall;
      writeFileLines('distro.list',['install.mnh','mnh.exe','mnh_light.exe']);
      execPipeless("c:/Program Files/7-Zip/7z.exe",['a','-mx=9',format('versions/mnh5_%yyyymmdd%_%X%.7z',systime,suffix),'@distro.list']);
      execPipeless("c:/Program Files (x86)/7-Zip/7z.exe",['a','-mx=9',format('versions/mnh5_%yyyymmdd%_%X%.7z',systime,suffix),'@distro.list']);
      deleteFile('distro.list');
    end
  : ask("Regression test failed! Distro will not be created!\nPress Enter.");

private movePairs:=[['mnh.exe','mnh64.exe'],
                    ['mnh_light.exe','mnh64_light.exe'],
                    ['bin32/mnh.exe','mnh.exe'],
                    ['bin32/mnh_light.exe','mnh_light.exe']];

//*Make distro 7z - including build and regTest if needed
main('distro')->
  each(i,[0..3],AND,build(i)) ? begin
    compress('64bit');
    each(pair,movePairs,moveFile@pair);
    compress('32bit');
    each(pair,movePairs%[3..0],moveFile@(pair%[1,0]));
  end : void;

//*Build - ignoring potentially existing executables
main('build')->each(i,[0..7],AND,build(i));

//*Build - ignoring potentially existing executables
main->main('build');

//*Deletes all nppBackup folders, temporary object files, executables and png-files
main('clean')->begin
  each(f,allFolders('.'),
       splitFileName(f)%'filename'="nppBackup"
       ? begin
           print('Deleting ',f);
           deleteDir(f);
         end
       : void);
  each(file,
       files(allFolders('.')&'/*.exe')|
       files(allFolders('.')&'/*.png')|
       files(allFolders('.')&'/*.bak')|
       files('doc/*.html')|
       files('doc/*.css')|
       files('install.mnh')|
       files('make*.log.txt')|
       files('demos/inputs/*.txt')|
       files('regTest/*.last'),
       print('Deleting ',file,' ',deleteFile(file) ? 'ok' : 'ERR!'));
  sandBoxExecute('USE passedTestsStore; passedTestsStore.main("clear");');
end;
     
//*Tests all files
main('test')->each(i,[0..3],AND, 
  build(i), 
  regTest.main(binName(i)));

//*Tests some files - randomly
main('quicktest')->each(i,[0..3],AND,
  build(i),
  regTest.main(binName(i),'randomSample'));

//*Several steps in succession
main(...)->each(p,...,
  each(i,[0..7],or,
    pos(upper(p),upper(binName(i)))>=0 
    ? build(i) OR true
    :             false)
  ? void
  : p in ['distro','build','clean','test','quicktest']
    ? main(p)
    : void);
