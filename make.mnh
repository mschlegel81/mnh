USE mnhExeInfo,formattingUtils,make_config,distroLog,testExpectation,guiScripts;
tprint(...)->print@(formatTime('hh:nn.ss ',systime)|...);
//Configuration:=====================================================
private needBuild(B)->B['canBuild'] AND (!(B['targetDest'].fileExists) OR !([B['targetDest'].flavour,B['targetDest'].codeVersion]==[B['flavour'],ensureCodeHash(false)]));

private delp->(isLinux ? 'delp' : DelpPath).exec(
       ['core',
        'common',
        '3rd_party',
        'consoles/lib/i386-win32',
        'consoles/lib/x86_64-linux',
        'consoles/lib/x86_64-win64']);

private templateToInc(inFile,outFile<>inFile)->templateToInc(inFile,outFile,clean(inFile.extractFileName,['a'..'z','A'..'Z'],'_'));
private templateToInc(inFile,outFile<>inFile,pasId)->begin
  inLines:=fileLines(inFile).join("\n").compress;
  outText:=
  'CONST '&pasId&': string='&inLines.escapePascal&';';
  outFile.fileContents==outText
  ? void
  : writeFile(outFile,outText);
end;

private ensureDefaultFilesSource(skipFileScan:Boolean)->begin
  if not skipFileScan AND
     sort(allFiles('demos\','*.mnh')|allFiles('packages\','*.mnh'))
     .map((f)->[f,mnhInfo['configDir']&f])
     .map((a,b)->fileContents(a)==fileContents(b) ? void : begin
       warn("Files differ:\t",a,"\n\t",b);
       unifiedDiff(a.systemSpecificFilename,b.systemSpecificFilename,a.fileLines,b.fileLines,3).join("\n").print;
       true;
     end).size>0
  then halt;

  code:=
  format('(%{escapePascal($0)}s,%{escapePascal($0.fileContents.compress)}s)',
  sort(allFiles('demos\','*.mnh')|allFiles('packages\','*.mnh')));


  header:='CONST DEFAULT_FILES:array[0..'&(code.size-1)&',0..1] of string=(';
  code:=header|code.each(f,f&(index=code.size-1 ? ');':','));

  filename:='ide/res_defaultFiles.inc';
  fileExists(filename) AND fileLines(filename)==code
  ? void
  : writeFileLines(filename,code);
end;

private ensureFilesToDeleteSource->begin
  code:=[SSL64.extractFileName.{'CONST ADDITIONAL_FILES_TO_DELETE:array[0..%s] of string=(%s);'.format($x.size-1, $x.escapePascal.join(','))}];
  filename:='ide/res_toDeleteOnUninstall.inc';
  fileExists(filename) AND fileLines(filename)==code
  ? void
  : writeFileLines(filename,code);
end;

private mutable currentCodeHash:=void;
private synchronized updateCurrentCodeHash(skipFileScan:Boolean)->
currentCodeHash:=begin
  fileExists('../checkstyle.mnh')
  ? begin
      tprint('Checkstyle');
      runScript(['name'=>'../checkstyle.mnh','parameters'=> ['fix'],'connection level'=> 3,'side effects'=>['output','alter package state','read file','write file']].toMap);
    end
  : void;
  tprint('Updating generated files');
  //convert here to ensure these files are considered in code hash calculation
  docCodeFuture:= if mnhInfo['isFullVersion']
                  then future(::exec,[executor,['make_doc_code.mnh','resources/examples_processed.txt']])
                  else ()->void;

  templateToInc('resources/html_template.txt'              ,'ide/res_html_template.inc');
  templateToInc('resources/ensureAssoc.mnh'                ,'ide/res_ensureAssoc.inc');
  templateToInc('resources/removeAssoc.mnh'                ,'ide/res_removeAssoc.inc');
  docCodeFuture();
  templateToInc('resources/examples_processed.txt'         ,'ide/res_examples.inc','examples_txt');
  ensureDefaultFilesSource(skipFileScan);
  ensureFilesToDeleteSource;
  //update code hash
  tprint('Updating code hash based on ',hashFiles.size,' files');
  result:=format('%x',fileStats(hashFiles).getInner(3).agg(+));
  expectedContents:=expectedVersionInfoSource(result);
  fileLines('core/res_version.inc')==expectedContents
  ? void
  : begin
      print('Version info updated:');
      printf('  %s',expectedContents);
      writeFileLines('core/res_version.inc',expectedContents);
    end;
  if not mnhInfo['isFullVersion'] then warn('Generated doc may be erroneous due to light version');
  result;
end;

private ensureCodeHash(skipFileScan:Boolean)->currentCodeHash orElse updateCurrentCodeHash(skipFileScan);

private myMove(source,dest:String)->fileExists(source) ? begin
  tries:=3;
  while fileExists(dest) AND tries>0 do
    deleteFile(dest) ? void : begin
    tries-=1;
  end;
  assert(!fileExists(dest),'Failed deleting '+dest);
  assert(moveFile(source,dest),'File move '+source+' -> '+dest+' failed!');
end : fail('File  '+source+' does not exist');

private BUILD_LOG:='build.log';
private buildExe(B:Map)->
  B.needBuild AND B['canBuild']
  ? begin
      ensureCodeHash(false);
      tprint('Building ',B['targetDest'].systemSpecificFilename);
      compilerOutput:=exec@(B['compilerCall']);
      sepLine:=repeatString('-',compilerOutput[0].each(line,line.length,max) orElse 0);
      compilerOutput[0]:=sepLine|
                         B['compilerCall'].flatten.join(' ')|
                         sepLine|
                         compilerOutput[0];
      BUILD_LOG.appendFileLines(compilerOutput[0]);
      assert(compilerOutput[1]==0,' compiler returned a nonzero exit code ',compilerOutput[1]);
      myMove(B['compilate'],B['targetDest']);
      B.needBuild
      ? fail('Build failed - see '&BUILD_LOG&' for details')
      : tprint('Build successful');
    end
  : void;

private testExe(B:Map,...)->begin
  forceTest:='retest' in ...;
  //Skip entries that should not be tested
  !(B['canBuild']) OR !(B['doTest'])
  ? return void
  : void;
  //Ensure build if B is part of distro
  B['distro'] AND needBuild(B)
  ? B.buildExe
  : void;
  //Skip entries which are already tested
  (!forceTest AND allTestsPassed(B['flavour'],ensureCodeHash(false))) OR needBuild(B)
  ? return true
  : void;

  tprint('Testing ',B['targetDest']) orElse
  B['targetDest'].execPipeless(['regTest/regTest.mnh']|...)=0
  ? tprint('Test passed') orElse true
  : tprint('Test failed') orElse false;
end;

private showStatus->begin
  print;
  tprint('Current code hash: ',ensureCodeHash(false));
  BUILDS.each(B,begin
    exe  :=B['targetDest'].systemSpecificFilename;
    exist:=fileExists(exe);
    canBuild:=B['canBuild'];
    version    :=exist ? canBuild ? exe.codeVersion : '?' : '';
    testVersion:=exist ? canBuild ? exe.codeVersion : currentCodeHash : '';
    cmpTime :=exist ? canBuild ? exe.compileTime : formatTime('YYYY/MM/DD hh:nn:ss',fileInfo(exe)['time']) : '';
    [B['flavour'],
     exe,
     version==currentCodeHash ? 'o.k.' : version.copy(0,8),
     cmpTime,
     B['doTest'] ? timeForFullTest(B['flavour'],testVersion).roundToRelevantDigits(4) : '(n/a)'
     ];
  end).formatTable(['Flavour','Binary','CodeVersion','Compile time','Time for test']).join("\n").print;
  BUILDS.each(B,B['distro'] ? allTestsPassed(B['flavour'],currentCodeHash) AND B['targetDest'].systemSpecificFilename.fileExists : void,AND)
  ? DOUBLE_BOX_FRAME_FMT.printf('READY FOR DISTRO')
  : print;
end;

private verboseDelete(file)->
  fileExists(file)
  ? assert(deleteFile(file),'Could not delete ',file)
  : void;

private cleanup->begin
  allFolders('.')
  .each(f,extractFileName(f) in ["nppBackup","backup"] ? f : void)
  .each(f,begin
           tprint('Deleting ',f);
           deleteDir(f);
          end);
  (files(allFolders('.')&'/*.png')|
   files(allFolders('..')&'/*.bak')|
   allFiles('consoles/lib')|
   files(['consoles','ide']&'/wpoData*')|
   allFiles('ide/compilates')|
   files('ide/res_*.inc')|
   files('core/res_*.inc')|
   files('regTest/testFailures.log')|
   allFiles('versions')|
   files(BUILDS.map({$B['compilate']}))|
   files('build.log'))
  .unique
  .map(::verboseDelete);
  delp;
  currentCodeHash:=void;
end;

private isSameFileName(filename1:String,filename2:String)->begin
  case:=isLinux ? {$x} : {$x.upper};
  (filename1.expandedFileName.case)==
  (filename2.expandedFileName.case);
end;

main->main('build');
//*Build all targets, skipping checks for differing files
main('BUILD')->begin
  ensureCodeHash(true);
  BUILDS.reverseList.each(B,B.buildExe);
end;
//*Build all targets
main('build')->BUILDS.reverseList.each(B,B.buildExe(false));
//*Test all targets - non-debug versions will be built if necessary
main('test')->BUILDS.reverseList.each(B,B.testExe,and).assert('There are failed tests');
//*Test all targets even if the test already has been passed - non-debug versions will be built if necessary
main('retest')->BUILDS.reverseList.each(B,B.testExe('retest'),and).assert('There are failed tests');
//*Test all targets even if the test already has been passed - non-debug versions will be built if necessary
main('noLogTest')->BUILDS.reverseList.each(B,B.testExe('noLog'),and).assert('There are failed tests');
//*Show the current built status
main('status')->showStatus;
//*Show the current built status
main('prepare')->ensureCodeHash(false);
//*Clean the output files
main('clean')->tprint('Cleaning') orElse cleanup;
//*Deep cleaning, including deleting all executables
main('CLEAN')->begin
  tprint('Deep cleaning');
  cleanup;
  allFiles('target').map(::verboseDelete);
  files('3rd_party/*').minus(hashFiles).map(::verboseDelete);
end;
//*Beep - just for notification purposes
main('beep')->beep;

main('distro')->isLinux ? fail('Must be executed in windows environment') : begin
  assert(mnhInfo['isFullVersion']);
  BUILDS.each(B,B['canBuild'] AND B['distro'] ? B.testExe : void,AND)
  ? void
  : fail('Cannot make distro because there are failed tests');
  for zipTask in packSets(getBuildNumberAndVersion(ensureCodeHash)) do parallel call7z@zipTask;
  writeAllDataStores;
  {fileExists($0)
   ? runScript(['name'=>$0,"side effects"=>listSideEffects,"connection level"=>3].toMap)
   : void}('distro_hook.mnh');
end;

//*Create FP-Doc
main('doc')->make_config.makedoc;

//*Display help
main('-h')->print(helpOnMain);

//*Build one specific target
main(target:String)->begin
  testAfterBuild:=false;
  tgt:=target;
  target.copy(target.length-1,1)=='!'
  ? begin
      tgt:=target.copy(0,target.length-1);
      testAfterBuild:=true;
    end
  : void;
  buildAndTest:=
    testAfterBuild ? {buildExe($B) orElse testExe($B) orElse true}
                   : {buildExe($B) orElse                    true};

  BUILDS.each(B,isSameFileName(B['targetDest'],tgt) OR tgt=B['flavour'] ? buildAndTest(B).assert orElse true : false,OR) OR
  BUILDS.each(B,matches       (B['targetDest'],tgt)                     ? buildAndTest(B).assert orElse true : false,or)
  ? void
  : fail("Don't know what to do with: "+target+". Accepted parameters are" & helpOnMain);
end;

//*Several steps in succession
main(...)->... .each(step,
  printf(BOX_FRAME_FMT,step),
  main(step));
