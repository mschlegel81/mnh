//Windows only:
Lazarus64Path:='..\lazarus64';
DelpPath     :='..\lazarus64\fpc\3.2.0\bin\x86_64-win64\delp.exe';
FPDocPath    :='..\lazarus64\fpc\3.2.0\bin\x86_64-win64\fpdoc.exe';
SSL32   :=files('../3rd_party/openSsl32/*').expandedFileName;
SSL64   :=files('../3rd_party/openSsl64/*').expandedFileName;
SSL(w)->copy(w,0,5)=='Win32' ? SSL32 : SSL64;

makedoc->FPDocPath.exec('--package=mnh'|hashFiles.map({format('--input=%s',$0)}));

isLinux:=mnh.mnhInfo['targetOs']='Linux' orElse false;

private
TARGET_PLATFORM:=['Linux'=>['compiler'=> 'lazbuild'                                    ].toMap,
                  'Win64'=>['compiler'=> Lazarus64Path&'\lazbuild.exe','outExt'=>'.exe'].toMap].toMap;
private
TARGET_PROJECT :=[['light',['lpi' =>'consoles/mnh_light.lpi',
                            'out' =>'consoles/mnh_light',
                            'part'=>'L'].toMap],
                  ['full' ,['lpi' =>'ide/ide.lpi',
                            'out' =>'ide/mnh',
                            'part'=>'F'].toMap]].toMap;
private
TARGET_FLAVOUR :=['debug'  =>['flags'    =>['-B','--bm=Default'],
                              'doTest'   =>true,
                              'part'     =>'D',
                              'outSuffix'=>'_debug'].toMap,
                  'normal' =>['flags'    =>['-B','--bm=deployment'],
                              'part'     =>'O',
                              'doTest'   =>true].toMap,
                  'profile'=>['flags'    =>['-B','--bm=profiling'],
                               'doTest'   =>false,
                               'part'     =>'P',
                               'outSuffix'=>'_prof'].toMap].toMap;
private
buildConfig(platformKey in (TARGET_PLATFORM.getInner(0)),
            projectKey  in (TARGET_PROJECT.getInner(0)),
            flavourKey  in (TARGET_FLAVOUR.getInner(0)))->
begin
  local result:=[].toMap;
  local platform:=TARGET_PLATFORM[platformKey];
  local project :=TARGET_PROJECT [projectKey ];
  local flavor  :=TARGET_FLAVOUR [flavourKey ];
  result['platform'    ]:=platformKey;
  result['flavour'     ]:=project['part']&flavor['part']&platformKey;
  result['compilerCall']:=[platform['compiler'],flavor['flags'] | project['lpi']];
  result['compilate'   ]:=project['out']&flavor['outSuffix']&platform['outExt'];
  result['targetDest'  ]:='target/'&platformKey&(flavourKey=='portable' ? '_portable' : '') &'/'&result['compilate'].extractFileName;
  result['distro'      ]:=flavourKey in ['normal','portable'];
  result['doTest'      ]:=flavor['doTest'];
  result['canBuild'    ]:=(platformKey=='Linux')==isLinux;
  result;
end;

BUILDS:=cross(TARGET_PLATFORM.getInner(0),
              TARGET_PROJECT .getInner(0),
              TARGET_FLAVOUR .getInner(0))
        .filter({$x[0]!='Linux' OR $x[2]!='portable'})
        .filter({$x[0]=='Linux' OR $x[2]!='profile' })
        .map({buildConfig@$x});

//*Prints out code size (excluding 3rd party code)
main->
hashFiles.pMap({$f|$f.fileStats.tail(2)})
         .map({format("%s\t%5.1f\vkb\t%8.8x",$x[0],$x[1]/1024,$x[2])}).join("\n").print orElse
printf@("Code Size:\v%s\tkLOC\n\v%s\tkB"|round(
hashFiles
.filter({!($x.matches('3rd_party'))})
.fileStats
.agg(+)
.get([0,2])/1024));

@SuppressUnusedWarning
packSets(builtNo:Int)->
  BUILDS.filter({$B['distro']})
        .map({[$B['targetDest'].extractFileDirectory.extractFileNameOnly,$B['platform']!='Linux',$B['targetDest']]})
        .group(0).getInner(1)
        .map({[$x[0,0],$x[0,1],$x.getInner(2)]})
        .each(B,B[1] ? [B[2] | SSL(B[0]),B[0]&'_ssl'] : void ,
                       [B[2]            ,B[0]       ])
        .each(B,[B[0].expandedFileName,builtNo,B[1]]);

memoized sevenZipExe->
  ["c:/Program Files/7-Zip/7z.exe",
   "c:/Program Files (x86)/7-Zip/7z.exe"]
  .each(file,file.fileExists ? file : void,head)
  orElse fail('7-Zip could not be located!');

@SuppressUnusedWarning
call7z(fileList:StringList,builtNo,suffix)->begin
  local zipFileName:=format('target/mnh5_%s_%s.zip',builtNo,suffix);
  fileExists(zipFileName)
  ? return print('Not creating ',zipFileName,' because the file already exists')
  : void;
  sevenZipExe.exec(['a','-mx=9','-bd',zipFileName]|fileList)
             .trailing==0
             ? print(zipFileName,' created')
             : fail('Failed creating ',zipFileName);
end;

hashFiles:=['3rd_party/blcksock.pas',
            '3rd_party/epiktimer.pas',
            '3rd_party/jedi.inc',
            '3rd_party/ssfpc.inc',
            '3rd_party/sslinux.inc',
            '3rd_party/sswin32.inc',
            '3rd_party/synacode.pas',
            '3rd_party/synafpc.pas',
            '3rd_party/synaip.pas',
            '3rd_party/synautil.pas',
            '3rd_party/synsock.pas',
            'common/bigint.pas',
            'common/complex.pas',
            'common/diff.pas',
            'common/heaps.pas',
            'common/httpUtil.pas',
            'common/huffman_model_default.inc',
            'common/huffman_model_mnh.inc',
            'common/huffman_model_numeric.inc',
            'common/huffman_model_wiki.inc',
            'common/myCrypto.pas',
            'common/myGenerics.pas',
            'common/myStringUtil.pas',
            'common/mySys.pas',
            'common/serializationUtil.pas',
            'consoles/mnh_light.lpr',
            'consoles/substitute_funcs.pas',
            'core/aggregators.pas',
            'core/basicTypes.pas',
            'core/builtinGenerators.pas',
            'core/caches.pas',
            'core/cmdLineInterpretation.pas',
            'core/commandlineparameters.pas',
            'core/consoleAsk.pas',
            'core/contexts.pas',
            'core/datastores.pas',
            'core/evaluation.pas',
            'core/fileWrappers.pas',
            'core/func_defines.inc',
            'core/func_queues.pas',
            'core/funcs.pas',
            'core/funcs_files.pas',
            'core/funcs_filestreams.pas',
            'core/funcs_format.pas',
            'core/funcs_interpolators.pas',
            'core/funcs_ipc.pas',
            'core/funcs_json.pas',
            'core/funcs_list.pas',
            'core/funcs_math.pas',
            'core/funcs_mnh.pas',
            'core/funcs_package.inc',
            'core/funcs_regex.pas',
            'core/funcs_server.pas',
            'core/funcs_strings.pas',
            'core/funcs_system.pas',
            'core/funcs_types.pas',
            'core/funcs_xml.pas',
            'core/listProcessing.pas',
            'core/literalRecycler.inc',
            'core/literalSerialization.inc',
            'core/litvar.pas',
            'core/messageFormatting.pas',
            'core/mnh_constants.pas',
            'core/mnh_messages.pas',
            'core/mnh_settings.pas',
            'core/operators.pas',
            'core/out_adapters.pas',
            'core/packages.pas',
            'core/patterns.pas',
            'core/profiling.pas',
            'core/recyclers.pas',
            'core/rules.pas',
            'core/subrules.pas',
            'core/tokenArray.pas',
            'core/tokenStack.pas',
            'core/tokens.pas',
            'core/valueStore.pas',
            'ide/ask/askdialog.pas',
            'ide/ask/customrundialog.pas',
            'ide/assistant/assistanceformunit.pas',
            'ide/assistant/codeassistance.pas',
            'ide/assistant/helperforms.pas',
            'ide/close/closedialog.pas',
            'ide/cmdlineframes.pas',
            'ide/customForms/component_button.inc',
            'ide/customForms/component_changeListener.inc',
            'ide/customForms/component_checkbox.inc',
            'ide/customForms/component_combobox.inc',
            'ide/customForms/component_edit.inc',
            'ide/customForms/component_grid.inc',
            'ide/customForms/component_inputMemo.inc',
            'ide/customForms/component_label.inc',
            'ide/customForms/component_outputMemo.inc',
            'ide/customForms/component_outputRedirect.inc',
            'ide/customForms/component_panel.inc',
            'ide/customForms/component_plotConnector.inc',
            'ide/customForms/component_plotDock.inc',
            'ide/customForms/component_splitPanel.inc',
            'ide/customForms/component_worker.inc',
            'ide/customForms/mnhcustomform.pas',
            'ide/debugger/breakpointsforms.pas',
            'ide/debugger/debuggerforms.pas',
            'ide/debugger/debuggervarforms.pas',
            'ide/debugger/debugging.pas',
            'ide/debugger/debuggingVar.pas',
            'ide/editors/editorMeta.pas',
            'ide/editors/editormetabase.pas',
            'ide/editors/editscripts.pas',
            'ide/editors/fileHistory.inc',
            'ide/editors/gotolinedialogs.pas',
            'ide/editors/mnhCompletion.pas',
            'ide/editors/openfile.pas',
            'ide/editors/renamedialog.pas',
            'ide/editors/runnermodel.inc',
            'ide/editors/savefile.pas',
            'ide/editors/searchModel.pas',
            'ide/editors/workspace.inc',
            'ide/evalThread.pas',
            'ide/eventscomponent.pas',
            'ide/ide.lpr',
            'ide/idelayoututil.pas',
            'ide/idemain.pas',
            'ide/ipcModel.pas',
            'ide/menuutil.pas',
            'ide/mnh_doc.pas',
            'ide/mnh_html.pas',
            'ide/outline/outlineformunit.pas',
            'ide/output/guiOutAdapters.pas',
            'ide/output/outputformunit.pas',
            'ide/output/synOutAdapter.pas',
            'ide/plot/funcs_plot.pas',
            'ide/plot/mnh_plotData.pas',
            'ide/plot/mnh_plotform.pas',
            'ide/plot/plotexport.pas',
            'ide/plot/plotmath.pas',
            'ide/plot/plotstyles.pas',
            'ide/profiling/profilingview.pas',
            'ide/quick/quickevalforms.pas',
            'ide/reevaluationforms.pas',
            'ide/res_defaultFiles.inc',
            'ide/res_ensureAssoc.inc',
            'ide/res_examples.inc',
            'ide/res_html_template.inc',
            'ide/res_removeAssoc.inc',
            'ide/settings/mnh_gui_settings.pas',
            'ide/shebangdialog.pas',
            'ide/splash/mnh_splash.pas',
            'ide/synhighlightermnh.pas',
            'ide/tables/mnh_tables.pas',
            'ide/treeUtil.pas',
            'ide/vartree/variabletreeviews.pas'];
