//Windows only:
Lazarus64Path:='..\lazarus64';
Lazarus32Path:='..\lazarus32';
@SuppressUnusedWarning
DelpPath     :='..\lazarus64\fpc\3.0.4\bin\x86_64-win64\delp.exe';
SSL32   :=files('..\3rd_party\openSsl32\*').expandedFileName;
SSL64   :=files('..\3rd_party\openSsl64\*').expandedFileName;
SSL(w)->copy(w,0,5)=='Win32' ? SSL32 : SSL64;
@SuppressUnusedWarning
projectSLOC->hashFiles
             .filter({!($file.matches('3rd_party'))})
             .pMap({$file.fileLines.trim.filter({$line!='' AND !($line.matches('^//'))})})
             .flatten;

isLinux:=mnh.mnhInfo['targetOs']='Linux' orElse false;

private
TARGET_PLATFORM:=[['Linux',[['compiler','lazbuild'                   ]                  ].toMap],
                  ['Win32',[['compiler',Lazarus32Path&'\lazbuild.exe'],['outExt','.exe']].toMap],
                  ['Win64',[['compiler',Lazarus64Path&'\lazbuild.exe'],['outExt','.exe']].toMap]].toMap;
private
TARGET_PROJECT :=[['light',[['lpi','consoles/mnh_light.lpi'],
                            ['out','consoles/mnh_light'],
                            ['part','L']].toMap],
                  ['full' ,[['lpi','gui/mnh_gui.lpi'],
                            ['out','gui/mnh'],
                            ['part','F']].toMap]].toMap;
private
TARGET_FLAVOUR :=[['debug'   ,[['flags',['-B','--bm=Default']],
                               ['doTest',true],
                               ['part','D'],
                               ['outSuffix','_debug']].toMap],
                  ['normal'  ,[['flags',['-B','--bm=deployment']],
                               ['part','O'],
                               ['doTest',true]].toMap],
                  ['profile' ,[['flags',['-B','--bm=profiling']],
                               ['doTest',false],
                               ['part','P'],
                               ['outSuffix','_prof']].toMap]].toMap;
private
buildConfig(platformKey in (TARGET_PLATFORM.getInner(0)),
            projectKey  in (TARGET_PROJECT.getInner(0)),
            flavourKey  in (TARGET_FLAVOUR.getInner(0)))->
begin
  local result:=[].toMap;
  local platform:=TARGET_PLATFORM[platformKey];
  local project :=TARGET_PROJECT [projectKey ];
  local flavor  :=TARGET_FLAVOUR [flavourKey ];
  result['platform'    ]:=platformKey;
  result['flavour'     ]:=project['part']&flavor['part']&platformKey;
  result['compilerCall']:=[platform['compiler'],flavor['flags'] | project['lpi']];
  result['compilate'   ]:=project['out']&flavor['outSuffix']&platform['outExt'];
  result['targetDest'  ]:='target/'&platformKey&(flavourKey=='portable' ? '_portable' : '') &'/'&result['compilate'].extractFileName;
  result['distro'      ]:=flavourKey in ['normal','portable'];
  result['doTest'      ]:=flavor['doTest'];
  result['canBuild'    ]:=(platformKey=='Linux')==isLinux;
  result;
end;

@SuppressUnusedWarning
BUILDS:=cross(TARGET_PLATFORM.getInner(0),
              TARGET_PROJECT .getInner(0),
              TARGET_FLAVOUR .getInner(0))
        .filter({$x[0]!='Linux' OR $x[2]!='portable'})
        .filter({$x[0]=='Linux' OR $x[2]!='profile' })
        .map({buildConfig@$x});

//*Prints out code size (excluding 3rd party code)
main->
hashFiles.pMap({$f|$f.fileStats.tail(2)})
         .map({format("%s\t%5.1f\vkb\t%8.8x",$x[0],$x[1]/1024,$x[2])}).join("\n").print orElse
printf@("Code Size:\v%s\tkLOC\n\v%s\tkB"|round(
hashFiles
.filter({!($x.matches('3rd_party'))})
.fileStats
.agg(+)
.get([0,2])/1024));

@SuppressUnusedWarning
packSets(builtNo:Int)->
  BUILDS.filter({$B['distro']})
        .map({[$B['targetDest'].extractFileDirectory.extractFileNameOnly,$B['platform']!='Linux',$B['targetDest']]})
        .group(0)
        .map({[$x[0,0],$x[0,1],$x.getInner(2)]})
        .each(B,B[1] ? [B[2] | SSL(B[0]),B[0]&'_ssl'] : void ,
                       [B[2]            ,B[0]       ])
        .each(B,[B[0].expandedFileName,builtNo,B[1]]);

memoized sevenZipExe->
  ["c:/Program Files/7-Zip/7z.exe",
   "c:/Program Files (x86)/7-Zip/7z.exe"]
  .each(file,file.fileExists ? file : void,head)
  orElse fail('7-Zip could not be located!');

@SuppressUnusedWarning
call7z(fileList:StringList,builtNo,suffix)->begin
  local zipFileName:=format('target/mnh5_%s_%s.zip',builtNo,suffix);
  fileExists(zipFileName)
  ? return print('Not creating ',zipFileName,' because the file already exists')
  : void;
  sevenZipExe.exec(['a','-mx=9','-bd',zipFileName]|fileList)
             .trailing==0
             ? print(zipFileName,' created')
             : fail('Failed creating ',zipFileName);
end;

hashFiles:=['3rd_party/blcksock.pas',
            '3rd_party/epiktimer.pas',
            '3rd_party/jedi.inc',
            '3rd_party/ssfpc.inc',
            '3rd_party/sslinux.inc',
            '3rd_party/sswin32.inc',
            '3rd_party/synacode.pas',
            '3rd_party/synafpc.pas',
            '3rd_party/synaip.pas',
            '3rd_party/synautil.pas',
            '3rd_party/synsock.pas',
            'common/bigint.pas',
            'common/diff.pas',
            'common/httpUtil.pas',
            'common/huffman.pas',
            'common/myCrypto.pas',
            'common/myGenerics.pas',
            'common/myStringUtil.pas',
            'common/mySys.pas',
            'common/serializationUtil.pas',
            'consoles/mnh_light.lpr',
            'core/consoleAsk.pas',
            'core/listProcessing.pas',
            'core/mnh_aggregators.pas',
            'core/mnh_basicTypes.pas',
            'core/mnh_builtinGenerators.pas',
            'core/mnh_caches.pas',
            'core/mnh_cmdLineInterpretation.pas',
            'core/mnh_constants.pas',
            'core/mnh_contexts.pas',
            'core/mnh_datastores.pas',
            'core/mnh_evaluation.pas',
            'core/mnh_fileWrappers.pas',
            'core/mnh_func_defines.inc',
            'core/mnh_funcs.inc',
            'core/mnh_funcs.pas',
            'core/mnh_funcs_files.pas',
            'core/mnh_funcs_format.pas',
            'core/mnh_funcs_ipc.pas',
            'core/mnh_funcs_list.pas',
            'core/mnh_funcs_math.pas',
            'core/mnh_funcs_mnh.pas',
            'core/mnh_funcs_regex.pas',
            'core/mnh_funcs_server.pas',
            'core/mnh_funcs_strings.pas',
            'core/mnh_funcs_system.pas',
            'core/mnh_funcs_types.pas',
            'core/mnh_funcs_xml.pas',
            'core/mnh_litvar.pas',
            'core/mnh_messages.pas',
            'core/mnh_operators.pas',
            'core/mnh_out_adapters.pas',
            'core/mnh_packages.pas',
            'core/mnh_patterns.pas',
            'core/mnh_profiling.pas',
            'core/mnh_rule.pas',
            'core/mnh_settings.pas',
            'core/mnh_subrules.pas',
            'core/mnh_tokenArray.pas',
            'core/mnh_tokens.pas',
            'core/tokenStack.pas',
            'core/valueStore.pas',
            'gui/askdialog.pas',
            'gui/closedialog.pas',
            'gui/codeassistance.pas',
            'gui/component_button.inc',
            'gui/component_changeListener.inc',
            'gui/component_checkbox.inc',
            'gui/component_combobox.inc',
            'gui/component_edit.inc',
            'gui/component_grid.inc',
            'gui/component_inputMemo.inc',
            'gui/component_label.inc',
            'gui/component_outputMemo.inc',
            'gui/component_outputRedirect.inc',
            'gui/component_panel.inc',
            'gui/component_plotConnector.inc',
            'gui/component_splitPanel.inc',
            'gui/component_worker.inc',
            'gui/editorMeta.pas',
            'gui/editormetabase.pas',
            'gui/guiOutAdapters.pas',
            'gui/ipcModel.pas',
            'gui/menuutil.pas',
            'gui/mnhCompletion.pas',
            'gui/mnhFormHandler.pas',
            'gui/mnh_debugging.pas',
            'gui/mnh_debuggingVar.pas',
            'gui/mnh_doc.pas',
            'gui/mnh_evalThread.pas',
            'gui/mnh_funcs_plot.pas',
            'gui/mnh_gui.lpr',
            'gui/mnh_gui_main.pas',
            'gui/mnh_gui_main_events.inc',
            'gui/mnh_gui_outputonly.pas',
            'gui/mnh_gui_settings.pas',
            'gui/mnh_html.pas',
            'gui/mnh_plotData.pas',
            'gui/mnh_plotform.pas',
            'gui/mnh_splash.pas',
            'gui/mnh_tables.pas',
            'gui/mnhcustomform.pas',
            'gui/openfile.pas',
            'gui/outlines.pas',
            'gui/plotexport.pas',
            'gui/plotmath.pas',
            'gui/plotstyles.pas',
            'gui/renamedialog.pas',
            'gui/res_defaultFiles.inc',
            'gui/res_ensureAssoc.inc',
            'gui/res_examples.inc',
            'gui/res_html_template.inc',
            'gui/res_removeAssoc.inc',
            'gui/savefile.pas',
            'gui/searchModel.pas',
            'gui/settingsLogic.inc',
            'gui/synOutAdapter.pas',
            'gui/synhighlightermnh.pas',
            'gui/treeUtil.pas',
            'gui/variabletreeviews.pas'];
