tprint(...)->print@(formatTime('hh:nn.ss ',systime)|...);
//Configuration:=====================================================
type BuildConfig(L:list(7))->L[0].isBoolean AND
                             L[1].isString AND
                             L[2].isString AND
                             L[3].isString AND
                             L[4].isStringList(3) AND
                             L[5].isString AND
                             L[6].isBoolean;

//BUILTS  linux, flavour , binary                    , compiler                  , compilerOptions                                 , compilerOutput
BUILTS:=[[false,'LOWin32','bin32/mnh_light.exe'      ,'..\lazarus32\lazbuild.exe',['-B','--bm=deployment','consoles/mnh_light.lpi'],'consoles/mnh_light.exe'      ,false],
         [false,'LOWin64','./mnh_light.exe'          ,'..\lazarus64\lazbuild.exe',['-B','--bm=deployment','consoles/mnh_light.lpi'],'consoles/mnh_light.exe'      ,false],
         [false,'FOWin32','bin32/mnh.exe'            ,'..\lazarus32\lazbuild.exe',['-B','--bm=deployment','gui/mnh_gui.lpi']       ,'gui/mnh.exe'                 ,false],
         [false,'FOWin64','./mnh.exe'                ,'..\lazarus64\lazbuild.exe',['-B','--bm=deployment','gui/mnh_gui.lpi']       ,'gui/mnh.exe'                 ,false],
         [false,'LDWin32','bin32/mnh_light_debug.exe','..\lazarus32\lazbuild.exe',['-B','--bm=Default'   ,'consoles/mnh_light.lpi'],'consoles/mnh_light_debug.exe',true],
         [false,'LDWin64','./mnh_light_debug.exe'    ,'..\lazarus64\lazbuild.exe',['-B','--bm=Default'   ,'consoles/mnh_light.lpi'],'consoles/mnh_light_debug.exe',true],
         [false,'FDWin32','bin32/mnh_debug.exe'      ,'..\lazarus32\lazbuild.exe',['-B','--bm=Default'   ,'gui/mnh_gui.lpi']       ,'gui/mnh_debug.exe'           ,true],
         [false,'FDWin64','./mnh_debug.exe'          ,'..\lazarus64\lazbuild.exe',['-B','--bm=Default'   ,'gui/mnh_gui.lpi']       ,'gui/mnh_debug.exe'           ,true],
         [true ,'LOLinux','./mnh_light'              ,'lazbuild'                 ,['-B','--bm=deployment','consoles/mnh_light.lpi'],'consoles/mnh_light'          ,false],
         [true ,'FOLinux','./mnh'                    ,'lazbuild'                 ,['-B','--bm=deployment','gui/mnh_gui.lpi']       ,'gui/mnh'                     ,false],
         [true ,'LDLinux','./mnh_light_debug'        ,'lazbuild'                 ,['-B','--bm=Default'   ,'consoles/mnh_light.lpi'],'consoles/mnh_light_debug'    ,true],
         [true ,'FDLinux','./mnh_debug'              ,'lazbuild'                 ,['-B','--bm=Default'   ,'gui/mnh_gui.lpi']       ,'gui/mnh_debug'               ,true]];

private canBuilt(B:BuildConfig)->B[0]=isLinux;
private binName(B:BuildConfig)->B[2];

private memoized memExeInfo(exe,exeFileInfo)->
  exe=executor
  ? mnh.mnhInfo
  : (exe.exec(['-echo','-time','-cmd','mnhInfo.print'],false)[0] orElse '[]').toExpression()();

private exeInfo(executable:string)->memExeInfo(executable,fileInfo(executable)[['time','size']]);
private isLinux:=mnhInfo['targetOs']='Linux' orElse false;
private delp->(isLinux ? 'delp' : '..\lazarus64\fpc\3.0.0\bin\x86_64-win64\delp.exe').execPipeless(
       ['gui/lib/i386-win32',
        'gui/lib/x86_64-linux',
        'gui/lib/x86_64-win64',
        'core',
        '../common',
   'consoles/lib/i386-win32',
   'consoles/lib/x86_64-linux',
   'consoles/lib/x86_64-win64']);

private templateToInc(inFile,outFile<>inFile)->begin
  local inLines:=inFile.fileLines;
  local pasId:=clean(inFile.splitFileName['filename'],['a'..'z','A'..'Z'],'_');
  local outText:=
  'CONST '&pasId&': array[0..'&(inLines.size-1)&"] of string=(\n"&
  inLines.each(line,line='' ? "''" : join('#'&(line.chars.ord))).join(",\n")&');';
  outFile.fileContents==outText
  ? void
  : writeFile(outFile,outText);
end;

private ensurePackages->fileExists('resources/ensurePackages.mnh') ? void : begin
  writeFileLines('resources/ensurePackages.mnh','{'|
    (files('demos/*.mnh')|'demos/inputs/inputs.mnh'|files('packages/*.mnh'))
    .each(file,(index=0 ? '[' : ',') & ('['&escape(file)&','&escape(fileContents(file))&']'))|
    "].each(f,matches(f[0],'packages/').not AND fileExists($0&f[0]) ? void : writeFile($0&f[0],f[1]))}","\n");
end;

private mutable currentCodeHash:=void;
private synchronized updateCurrentCodeHash->
currentCodeHash:=begin
  tprint('Checkstyle');
  executor.execPipeless(['../checkstyle.mnh','fix']);
  tprint('Updating generated files');
  ensurePackages;
  //convert here to ensure these files are considered in code hash calculation
  templateToInc('resources/examples.txt'                   ,'core/res_examples.inc');
  templateToInc('resources/html_template.txt'              ,'core/res_html_template.inc');
  templateToInc('resources/ensureNotepad++Highlighting.mnh','core/res_ensureNppHighlighting.inc');
  templateToInc('resources/ensureAssoc.mnh'                ,'core/res_ensureAssoc.inc');
  templateToInc('resources/ensureAssoc_imig.mnh'           ,'core/res_ensureAssoc_imig.inc');
  templateToInc('resources/removeAssoc.mnh'                ,'core/res_removeAssoc.inc');
  templateToInc('resources/removeAssoc_imig.mnh'           ,'core/res_removeAssoc_imig.inc');
  templateToInc('resources/ensurePackages.mnh'             ,'core/res_ensurePackages.inc');
  local relevantFiles:=allFiles('.','*.lpr;*.pas;*.inc').each(f,splitFileName(f)['filename']='code_hash.inc' ? void : f);
  //update code hash
  local result:=format('%8.8x',fileStats(relevantFiles).getInner(3).agg(+));
  fileContents('core/code_hash.inc')=="CODE_HASH='"&result&"';"
  ? void
  : begin
      writeFile('core/code_hash.inc',"CODE_HASH='"&result&"';");
      tprint('core/code_hash.inc updated with current hash ',result);
    end;
  result;
end;
private ensureCodeHash->currentCodeHash orElse updateCurrentCodeHash;


