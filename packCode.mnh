USE make_config, distroLog;

DEFAULT_TARGET_FOLDER:='D:\dev\temp\';
PACKED_CODE_FILE:='D:\dev\mnh5\versions\mnh5_'&maxLoggedBuildNumber&'_code.zip';
ALL_PACKED_FILES:='D:\dev\mnh5\versions\mnh5_'&maxLoggedBuildNumber&'*.zip';
WEB_PAGE_FOLDER :='D:\dev\web\page\mnh\';
EDITOR_CALL     :='C:\Program Files (x86)\Notepad++\notepad++.exe';

NeedLicense(filename:String)->filename.extractFileExt.upper in ['.PAS','.INC','.LPR'];
License:=//!~
//
// This file is part of the MNH project.
// Author: Martin Schlegel <m.schlegel81[at]googlemail.com>
// (c) Martin Schlegel 2010 - %{formatTime('yyyy',systime)}s
// Generated at %{formatTime('c',systime)}s
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//
// This library is licensed on the same Modified LGPL as Free Pascal RTL and LCL are
// (http://wiki.freepascal.org/modified_LGPL)
//
// Please contact the author if you'd like to use this component but the Modified LGPL
// doesn't work with your project licensing.
//
~.format.split("\n");

Readme:=//!~
This is the MNH project.

Author: Martin Schlegel <m.schlegel81[at]googlemail.com>
(c) Martin Schlegel 2010 - %{formatTime('yyyy',systime)}s
Generated at %{formatTime('c',systime)}s

Windows users:
  - If not present, install Lazarus (32bit and/or 64bit version)
  - modify make.bat        (set path to lazbuild.exe correctly)
  - modify make_config.mnh (set paths to lazbuild.exe, delp.exe, 7z.exe correctly; maybe remove build targets not needed for you)
  - run make.bat

Linux users:
  - If not present, install Lazarus (32bit and/or 64bit version)
  - run make.sh

Usage of make.bat/.sh/.mnh
  - The .bat/.sh script calls the .mnh script, ensuring that a (light) MNH-executable is present to execute it
  - The .mnh script creates the (full) MNH-exectuable - including GUI, documentation, etc.
  - Run make[.bat|.sh] -h to find out about the accepted parameters

~.format.split("\n");

copyWithLicense(sourceName:String,targetName:String)->
  sourceName.NeedLicense
  ? targetName.writeFileLines(License|sourceName.fileLines)
  : copyFile(sourceName,targetName);

private copyToWeb->begin
  files(WEB_PAGE_FOLDER&'*.zip').map(::deleteFile);
  files(ALL_PACKED_FILES)
    .map({[$name,WEB_PAGE_FOLDER&extractFileName($name)]})
    .map({copyFile@$p});
  EDITOR_CALL.execAsync([WEB_PAGE_FOLDER&'downloads.html']);
end;

main->begin
  local CORE_TARGET_FOLDER:=DEFAULT_TARGET_FOLDER&'core\';
  local THIRD_TARGET_FOLDER:=DEFAULT_TARGET_FOLDER&'3rd_party\';

  print('Cleaning output folder');
  allFiles(DEFAULT_TARGET_FOLDER,'*').map(::deleteFile);

  print('Copying MNH sources');
  allFiles('',['*.inc','*.pas','*.lfm','*.lpi','*.lpr','*.txt','*.mnh','make.bat','make.sh','*.expected'])
    .filter({not($0.matches('/lib/|core/res_.*inc$|core/built_number.inc$|core/code_hash.inc$|demos/inputs/.*txt$')) AND
             $0.expandedFileName<>myPath.expandedFileName})
    .pMap({copyWithLicense($0,DEFAULT_TARGET_FOLDER&$0)});

  print('Copying common sources');
  hashFiles
    .filter({$0.matches('common|diff')})
    .pMap({copyWithLicense($0,CORE_TARGET_FOLDER&extractFileName($0))});

  print('Copying 3rd party sources');
  ['../3rd_party/epikTimer/','../3rd_party/synapse/']
    .each(root,allFiles(root,['*.inc','*.pp','*.pas'])
    .pMap({copyFile($0,THIRD_TARGET_FOLDER&extractFileName($0))}));

  print('Creating readme');
  writeFileLines(DEFAULT_TARGET_FOLDER&'readme.txt',Readme);

  changeDirectory(DEFAULT_TARGET_FOLDER);

  sevenZipExe.execPipeless(['a','-r','-bd',PACKED_CODE_FILE,'*']);
  print('File ',PACKED_CODE_FILE,' created');
  print('Cleaning output folder');
  allFiles(DEFAULT_TARGET_FOLDER,'*').map(::deleteFile);

  ask('Update web page ?',['Y','N'])=='Y' ? copyToWeb : void;
end;
