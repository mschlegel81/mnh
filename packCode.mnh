USE make_config, distroLog;

DEV_ROOT:=myPath.extractFileDirectory.extractFileDirectory.replace('/','\');
DEFAULT_TARGET_FOLDER:=DEV_ROOT&'\temp\';
CORE_TARGET_FOLDER   :=DEFAULT_TARGET_FOLDER&'core\';
THIRD_TARGET_FOLDER  :=DEFAULT_TARGET_FOLDER&'3rd_party\';
PACKED_CODE_FILE     :=DEV_ROOT&'\mnh5\versions\mnh5_'&maxLoggedBuildNumber&'_code.zip';
ALL_PACKED_FILES     :=DEV_ROOT&'\mnh5\versions\mnh5_'&maxLoggedBuildNumber&'*.zip';
WEB_PAGE_FOLDER      :=DEV_ROOT&'\web\page\mnh\';
EDITOR_CALL          :='C:\Program Files (x86)\Notepad++\notepad++.exe';

NeedLicense(filename:String)->filename.extractFileExt.upper in ['.PAS','.INC','.LPR'];
License:=//!~
//
// This file is part of the MNH project.
// Author: Martin Schlegel <m.schlegel81[at]googlemail.com>
// (c) Martin Schlegel 2010 - %{formatTime('yyyy',systime)}s
// Generated at %{formatTime('c',systime)}s
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//
// This library is licensed on the same Modified LGPL as Free Pascal RTL and LCL are
// (http://wiki.freepascal.org/modified_LGPL)
//
// Please contact the author if you'd like to use this component but the Modified LGPL
// doesn't work with your project licensing.
//
~.format.split("\n");

Readme:=//!~
This is the MNH project.

Author: Martin Schlegel <m.schlegel81[at]googlemail.com>
(c) Martin Schlegel 2010 - %{formatTime('yyyy',systime)}s
Generated at %{formatTime('c',systime)}s

Windows users:
  - If not present, install Lazarus (32bit and/or 64bit version)
  - modify make.bat        (set path to lazbuild.exe correctly)
  - modify make_config.mnh (set paths to lazbuild.exe, delp.exe, 7z.exe correctly; maybe remove build targets not needed for you)
  - run make.bat

Linux users:
  - If not present, install Lazarus (32bit and/or 64bit version)
  - run make.sh

Usage of make.bat/.sh/.mnh
  - The .bat/.sh script calls the .mnh script, ensuring that a (light) MNH-executable is present to execute it
  - The .mnh script creates the (full) MNH-exectuable - including GUI, documentation, etc.
  - Run make[.bat|.sh] -h to find out about the accepted parameters

~.format.split("\n");

copyWithLicense(sourceName:String,targetName:String)->
  sourceName.NeedLicense
  ? targetName.writeFileLines(License|sourceName.fileLines)
  : copyFile(sourceName,targetName);

private copyToWeb->begin
  files(WEB_PAGE_FOLDER&'*.zip').map(::deleteFile);
  files(ALL_PACKED_FILES)
    .map({[$name,WEB_PAGE_FOLDER&extractFileName($name)]})
    .map({copyFile@$p});

  local downloads_file:=WEB_PAGE_FOLDER&'downloads.html';
  downloads_file.writeFile(
    regex.replace(fileContents(downloads_file),'<!--GEN0-->.*<!--GEN1-->',
    //!~<!--GEN0-->
Die Aktuelle Version ist Build Nr. %{$0}s
<table>
<tr><td><a href="mnh5_%{$0}s_linux.zip"         target="_blank">Linux                  </a></td><td>MD5: %{md5(fileContents(DEV_ROOT&'\mnh5\versions\mnh5_'&$0&'_linux.zip'))}32.32x</td></tr>
<tr><td><a href="mnh5_%{$0}s_win32.zip"         target="_blank">Win32                  </a></td><td>MD5: %{md5(fileContents(DEV_ROOT&'\mnh5\versions\mnh5_'&$0&'_win32.zip'))}32.32x</td></tr>
<tr><td><a href="mnh5_%{$0}s_win32_openSsl.zip" target="_blank">Win32 mit SSL-Libraries</a></td><td>MD5: %{md5(fileContents(DEV_ROOT&'\mnh5\versions\mnh5_'&$0&'_win32_openSsl.zip'))}32.32x</td></tr>
<tr><td><a href="mnh5_%{$0}s_win64.zip"         target="_blank">Win64                  </a></td><td>MD5: %{md5(fileContents(DEV_ROOT&'\mnh5\versions\mnh5_'&$0&'_win64.zip'))}32.32x</td></tr>
<tr><td><a href="mnh5_%{$0}s_win64_openSsl.zip" target="_blank">Win64 mit SSL-Libraries</a></td><td>MD5: %{md5(fileContents(DEV_ROOT&'\mnh5\versions\mnh5_'&$0&'_win64_openSsl.zip'))}32.32x</td></tr>
<tr><td><a href="mnh5_%{$0}s_code.zip"          target="_blank">Quelltext              </a></td><td>MD5: %{md5(fileContents(DEV_ROOT&'\mnh5\versions\mnh5_'&$0&'_code.zip'))}32.32x</td></tr>
</table>
<!--GEN1-->~.format(maxLoggedBuildNumber)));
  EDITOR_CALL.execAsync([WEB_PAGE_FOLDER&'downloads.html']);
end;

main->begin

  print('Cleaning output folder');
  allFiles(DEFAULT_TARGET_FOLDER,'*').map(::deleteFile);

  print('Copying MNH sources');
  allFiles('',['*.inc','*.pas','*.lfm','*.lpi','*.lpr','*.txt','*.mnh','make.bat','make.sh','*.expected','testExpectation.datastore0','distroLog.datastore0'])
    .filter({not($0.matches('/lib/|core/res_.*inc$|core/build_number.inc$|core/code_hash.inc$|demos/inputs/.*txt$')) AND
             $0.expandedFileName<>myPath.expandedFileName})
    .pMap({copyWithLicense($0,DEFAULT_TARGET_FOLDER&$0)});

  print('Copying common sources');
  hashFiles
    .filter({$0.matches('common|diff')})
    .pMap({copyWithLicense($0,CORE_TARGET_FOLDER&extractFileName($0))});

  print('Copying 3rd party sources');
  ['../3rd_party/epikTimer/','../3rd_party/synapse/']
    .each(root,allFiles(root,['*.inc','*.pp','*.pas'])
    .pMap({copyFile($0,THIRD_TARGET_FOLDER&extractFileName($0))}));

  print('Creating readme');
  writeFileLines(DEFAULT_TARGET_FOLDER&'readme.txt',Readme);

  changeDirectory(DEFAULT_TARGET_FOLDER);

  sevenZipExe.execPipeless(['a','-r','-bd',PACKED_CODE_FILE,'*']);
  print('File ',PACKED_CODE_FILE,' created');
  print('Cleaning output folder');
  allFiles(DEFAULT_TARGET_FOLDER,'*').map(::deleteFile);

  ask('Update web page ?',['Y','N'])=='Y' ? copyToWeb : void;
end;
