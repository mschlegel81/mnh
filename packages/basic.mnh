//Basics package
//--------------
//This package contains general purpose/convenience methods

//Aggregations:--------------------------------------------
sum([]):=0;
sum(L)->each(n,L,+,n);

prod([]):=1;
prod(L)->each(n,L,*,n);

And([]):=true;
And(L:booleanList)->each(n,L,and,n);

Or([]):=false;
Or(L:booleanList)->each(n,L,or,n);

join([])->"";
join(L<>[])->each(n,L,&,string(n));

join([],joiner:string)->"";
join(L<>[],joiner:string)->each(n,L,&joiner&,string(n));

join([],joiner1:string,joiner2:string)->"";
join(L<>[],joiner1:string,joiner2:string)->each(inner,L,&joiner1&,each(n,inner,&joiner2&,string(n)));
//--------------------------------------------:Aggregations
//Statistics:----------------------------------------------
mean    (X)->sum(X)/size(X);

variance(X)->mean(X^2)-mean(X)^2;
//----------------------------------------------:Statistics
//Pretty printing
tabPrint(L)->print(join(L,"\n","\t"));
//---------------------------------------------------------
//Set operations:------------------------------------------
union    (A:list,B:list)->unique(A|B);
intersect(A:list,B:list)->A%    each(a,A,a in B);
minus    (A:list,B:list)->A%not(each(a,A,a in B));
//------------------------------------------:Set operations
//List operations:-----------------------------------------
indexes(A:list)->[0..size(A)-1];
reverse(A:list)->A%[size(A)-1..0];
//-----------------------------------------:List operations

histogram(L<>[])          ->histogram(L,1);
histogram(L<>[],h:numeric)->histogram(L,h,floor(min(L)/h),ceil(max(L)/h));
histogram(L,h,i0,i1)->each(i,[i0 .. i1],[i*h,each(flag,i*h<L<(i+1)*h,+,flag?1:0)/size(L)/h]);


