private drop(L<>[],i:int)->L%each(j,[0..size(L)-1],j<>i);
private myUnique([])->[];
private myUnique(L)->[head(L)]|myUnique(L%each(E,L,not(E==head(L))));

permutations(i:int)->permutations([],[0..i-1]);
permutations(L:list)->myUnique(permutations([],L));
private permutations(Head:list,[])->[Head];
private permutations(Head:list,L)->each(i,[0..size(L)-1],|,permutations(Head|(L%i),drop(L,i)));

subsets(S:scalar)->[[],[S]];
subsets(L:list)->myUnique(subsets([],L));
private subsets(Head:list,[])->[Head];
private subsets(Head:list,L)->subsets(Head,tail(L))|subsets(Head|head(L),tail(L));



