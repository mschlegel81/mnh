//@SuppressUnusedParameterWarning
type Complex(x:NumericList(2))->true;

//@SuppressUnusedWarning
//*Returns the real part of a complex number x
Re(x:Complex)->x[0];

//@SuppressUnusedWarning
//*Returns the imaginary part of a complex number x
Im(x:Complex)->x[1];

//@SuppressUnusedWarning
//@Override
//*Returns the absolute value of a complex number
abs(x:Complex)->x.sqr.agg(+).sqrt;
//*Returns the argument of x
arg(x:Complex)->arctan2(x[1],x[0]);

//@Override
OPERATOR_MULT(x:Complex,y:Complex)->[x[0]*y[0]-x[1]*y[1],x[0]*y[1]+x[1]*y[0]].toComplex;


//*Returns the square of complex number x
cSqr(x:NumericList(2))->[sqr(x[0])-sqr(x[1]),2*x[0]*x[1]];
//*Returns 1/x for a complex number x
cInv(x:NumericList(2))->[x[0],-x[1]]/(sqr(x[0])+sqr(x[1]));
//@SuppressUnusedWarning
//*Returns x/y for complex numbers x and y
cDiv(x:NumericList(2),y:NumericList(2))->x*y.cInv;
//*Returns exponential of complex x
cExp(x:NumericList(2))->exp(x[0])*[cos(x[1]),sin(x[1])];
//*Returns the natural logarithm of complex x
cLn(x:NumericList(2))->[0.5*(x.sqr.agg(+)).ln,arg(x)];
//*Returns the k-th power of complex x
cPot(x:NumericList(2),k<0  )->x.cInv.cPot(-k);
cPot(x:NumericList(2),k=0  )->[1,0];
cPot(x:NumericList(2),k:Int)->(k and 1)=1 ? x.cPot(k-1)*x
                                          : x.cSqr.cPot(k div 2);
cPot(x:NumericList(2),k:Real)->k=0 ? [1,0] : (x.cLn*k).cExp;
cPot(x:NumericList(2),k:NumericList(2))->k=0 ? [1,0] : (x.cLn*k).cExp;

//@SuppressUnusedWarning
//*Returns cosinus of complex x
cCos(x:NumericList(2))->begin
  //cos(x)=(e^(ix)+e^(-ix))/2
  local result:=cExp([0, 1]*x);
  (result+cInv(result))*0.5;
end;

//@SuppressUnusedWarning
//*Returns sinus of complex x
cSin(x:NumericList(2))->begin
  //sin(x)=(e^(ix)-e^(-ix))/2
  local result:=cExp([0, 1]*x);
  (result-cInv(result))*0.5;
end;
