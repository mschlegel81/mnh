HIGHLIGHTERS:=['mnh','cpp','c','h','hh','css','diff','html','ini','java','js','json','pas','perl','php','py','sh','sql','vb','bat','xml','txt','output'];

ducktype StringOrNullaryExpression(x)->x.isString OR x.isExpression(0);
ducktype StringListOrNullaryExpression(x)->x.isStringList OR x.isExpression(0);
ducktype BooleanOrNullaryExpression(x)->x.isBoolean OR x.isExpression(0);
ducktype HighlighterOrNullaryExpression(x)->x in HIGHLIGHTERS OR x.isExpression(0);
ducktype NullaryOrUnaryExpression(e:Expression)->e.isExpression(0) OR e.isExpression(1);

@SuppressUnusedWarning=all
//Elements:
newButton                                                  ->['type'=>'button'  ].toMap;
newEdit                                                    ->['type'=>'edit'    ].toMap;
newCheckbox                                                ->['type'=>'checkbox'].toMap;
newInputEditor (highlighter:HighlighterOrNullaryExpression)->['type'=>'inputEditor','highlight'=>highlighter].toMap;
newOutputEditor(highlighter:HighlighterOrNullaryExpression)->['type'=>'outputEditor','highlight'=>highlighter].toMap;
newOutputConsole                                           ->['type'=>'console'].toMap;
newComboBox(options:StringListOrNullaryExpression)         ->['type'=>'comboBox','items'=>options].toMap;
newLabel                                                   ->['type'=>'label'  ].toMap;
newPanel(contents:List)                                    ->['type'=>'panel','parts'=>contents].toMap;
newSplitPanel(left:List,right:List)                        ->['type'=>'splitPanel','left'=>left,'right'=>right].toMap;
newPlotLink                                                ->['type'=>'plot'].toMap;
//*Workers are background tasks without corresponding GUI element
//*If no interval is given, the worker is invoked in every GUI-evaluation step
newWorker(alwaysDo:Expression(0)                          )->['type'=>'worker','action'=>alwaysDo                              ].toMap;
newWorker(alwaysDo:Expression(0),intervalInSeconds:Numeric)->['type'=>'worker','action'=>alwaysDo,'interval'=>intervalInSeconds].toMap;
newGrid(colCount>=0,contents:List)                         ->['type'=>'grid','colCount'=>colCount,'parts'=>contents].toMap;

private addOption(M:Map,L:List(2))->[L].toMap.mergeMaps(M,::orElse);
//Element options:
withCaption(m:Map,caption:StringOrNullaryExpression)       ->m.addOption('caption'=>caption);
withAction (m:Map,action:NullaryOrUnaryExpression)         ->m.addOption('action' =>action);
withActionOnChange(m:Map,action:NullaryOrUnaryExpression)  ->m.addOption('actionOnChange'=>action);
withEnabledRule(m:Map,enabled:BooleanOrNullaryExpression)  ->m.addOption('enabled'=>enabled);
bind(m:Map,idOfLocalVariable:String)                       ->m.addOption('bind'=>idOfLocalVariable);
withMouseMoved  (m:Map,onMouseMove :Expression(2))         ->m.addOption('mouseMoved'=>onMouseMove);
withMouseClicked(m:Map,onMouseClick:Expression(2))         ->m.addOption('mouseClicked'=>onMouseClick);
