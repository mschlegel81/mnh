ducktype NumericOrList(x)->x.isNumeric OR x.isNumericList;

@SuppressUnusedWarning=all
//*Returns the year of the given time
year(time:NumericOrList)->formatTime('yyyy',time).softCast;
//*Returns the month of the given time
month(time:NumericOrList)->formatTime('mm',time).softCast;
//*Returns the day of month of the given time
dayOfMonth(time:NumericOrList)->formatTime('dd',time).softCast;
//*Returns the day of week of the given time
dayOfWeek(time:NumericOrList)->(time.floor+5) mod 7;
#*Constant to be used in conjunction with dayOfWeek# SATURDAY :=5;
#*Constant to be used in conjunction with dayOfWeek# SUNDAY   :=6;
#*Constant to be used in conjunction with dayOfWeek# MONDAY   :=0;
#*Constant to be used in conjunction with dayOfWeek# TUESDAY  :=1;
#*Constant to be used in conjunction with dayOfWeek# WEDNESDAY:=2;
#*Constant to be used in conjunction with dayOfWeek# THURSDAY :=3;
#*Constant to be used in conjunction with dayOfWeek# FRIDAY   :=4;

//*Constructs a date from year, month and day of month
dateOf(year>0,month in [1..12],dayOfMonth in [1..31])->parseTime('yyyymmdd',format('%4.4d%2.2d%2.2d',year,month,dayOfMonth)).round;

//*Format used in fmtTime
mutable defaultTimeFormat:='c';
//*Quick time format using defaultTimeFormat
fmtTime(time:NumericOrList)->formatTime(defaultTimeFormat,time);

//*Returns the day of the year (with 1.1.yyyy having zero index)
dayOfYear(time:NumericOrList)->floor(time-dateOf(time.year,1,1));

//*Returns the calendar week (cf. ISO8601)
calendarWeek(time:NumericOrList)->(time.dayOfYear-3) div 7+1;

getEasterDate(year:Int)->begin
  local a := year mod 19;
  local bc:=year.divMod(100);
  local de:= bc[0].divMod(4);
  local f := (bc[0] + 8) div 25;
  local g := (bc[0] - f + 1) div 3;
  local h := (19 * a + bc[0] - de[0] - g + 15) mod 30;
  local ik:= bc[1].divMod(4);
  local l := (32 + 2 * de[1] + 2 * ik[0] - h - ik[1]) mod 7;
  local m := (a + 11 * h + 22 * l) div 451;
  local np:= (h + l - 7 * m + 114).divMod(31);
  dateOf(year,np[0], np[1] + 1);
end;
