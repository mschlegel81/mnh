//*Returns downhill simplex options:
//*alpha: Reflection factor (usually 1)
//*beta : Contraction factor (usually 0.5);
//*gamma: Expansion factor (usually 2)
//*sigma: Compression factor (usually 0.5);
downhillSimplexOptions(alpha,beta,gamma,sigma)->
[['alpha',alpha],
 ['beta' ,beta ],
 ['gamma',gamma],
 ['sigma',sigma]].toMap;

DEFAULT_DOWNHILL_SIMPLEX_OPTIONS:=downhillSimplexOptions(1,1/2,2,1/2);

@SuppressUnusedWarning
//*To be used with downhillSimplexOptions or DEFAULT_DOWNHILL_SIMPLEX_OPTIONS to provide a specific initial simplex
withStartSimplex(simplexOptions:Map,simplex:List)->simplexOptions.mergeMaps([['simplex',simplex]].toMap,::orElse);

@SuppressUnusedWarning
//*To be used with downhillSimplexOptions or DEFAULT_DOWNHILL_SIMPLEX_OPTIONS to provide a specific initial simplex
withStepLimit(simplexOptions:Map,maxSteps>1)->simplexOptions.mergeMaps([['maxSteps',maxSteps]].toMap,::orElse);

@SuppressUnusedWarning
//*To be used with downhillSimplexOptions or DEFAULT_DOWNHILL_SIMPLEX_OPTIONS to provide an action on new best point
//*The best point is passed to action in the form [f(x),x];
withActionOnBestPoint(simplexOptions:Map,action:Expression(1))->simplexOptions.mergeMaps([['onNewBest',action]].toMap,::orElse);

downhillSimplex(toMinimize:Expression(1),startVector:NumericList,startSpread>0.0,precision>0.0)->
downhillSimplex(toMinimize              ,startVector            ,startSpread    ,precision,DEFAULT_DOWNHILL_SIMPLEX_OPTIONS);

downhillSimplex(toMinimize:Expression(1),startVector:NumericList,startSpread>0.0,precision>0.0,options:Map)->begin
  simplex:=void;

  options['simplex'].isVoid
  ? begin
      simplex:=[0..startVector.size].each(i,([0..startVector.size-1]=i).ord*(intRandom(2)*2-1)*startSpread+startVector).map({[toMinimize($x),$x]}).sort;
      simplex.each(i,i[0].isNumeric,AND) ? void : fail('Invalid function toMinimize; must return a numeric scalar');
    end
  : begin
      note('Using initial simplex from options');
      simplex:=options['simplex'].sort;
      simplex.size=startVector.size+1 ? void : fail('Simplex has wrong number of elements; expected ',startVector.size+1,' but is ',simplex.size);
    end;

  N:=startVector.size;
  alpha:=options['alpha'];
  beta :=options['beta' ];
  gamma:=options['gamma'];
  sigma:=options['sigma'];
  maxSteps:=options['maxSteps'] orElse Inf;
  stepCounter:=-1;
  while (stepCounter+=1)<maxSteps AND (simplex[0,1]-simplex[N,1]).sqr.agg(+)>precision^2 do
  begin
    xc:=simplex.leading.getInner(1).agg(+)/(simplex.size-1);
    xr:=(1+alpha)*xc-alpha*simplex.trailing[1];
    fr:=toMinimize(xr);
    if fr<simplex[0,0] then begin
        xe:=(1+gamma)*xc-gamma*(simplex.trailing[1]);
        fe:=toMinimize(xe);
        simplex[N]:=(fe<fr
                     ? [fe,xe]
                     : [fr,xr]);
        options['onNewBest'].isVoid
        ? void
        : options['onNewBest'](simplex[N]);
    end else
    if fr<simplex[N-1,0]
    then simplex[N]:=[fr,xr]
    else begin
      xe:=beta*xc+(1-beta)*(fr<simplex[N,0]
                            ? xr
                            : simplex[N,1]);
      fe:=toMinimize(xe);
      if fe<simplex[N,0]
      then simplex[N]:=[fe,xe]
      else simplex:=simplex.each(S,index=0 ? S : begin p:=simplex[0,1]*sigma+S[1]*(1-sigma); [toMinimize(p),p]; end);
    end;
    simplex:=simplex.sort(0);
    void;
  end;
  simplex[0];
end;
