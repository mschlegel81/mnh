//*recursively finds all files
recFiles(rootFolder,searchPatterns:stringList)->flatten(each(folder,allFolders(rootFolder),pEach(pat,searchPatterns,files(folder&"/"&pat))));
//*recursively finds all files; searchPattern may be delimited by ; or ,
recFiles(rootFolder,searchPattern:string)->recFiles(rootFolder,trim(split(searchPattern,[";",","])));

private containsCaseSensitive  (lookFor)->{trueCount(pos(      lookFor ,      $lookIn )>=0)>0};
private containsCaseInsensitive(lookFor)->{trueCount(pos(upper(lookFor),upper($lookIn))>=0)>0};

//*finds a search string in all files (recursively)
find(rootFolder,filePattern,searchStrings,caseSensitive:boolean)->
  findInFiles(recFiles(rootFolder,filePattern),
              caseSensitive ? containsCaseSensitive  (searchStrings)
                            : containsCaseInsensitive(searchStrings));

private findInFiles([]       ,F:expression)->print('No files matching the pattern were found.');
private findInFiles(fileNames,F:expression)->each(fname,fileNames,findInLines(fname,fileLines(fname),F));
private findInLines(filename:string,lines:stringList,F)->each(i,[0..size(lines)-1],and,F(lines%i) ?  print(filename,'@',i+1,': ',trim(lines%i)) : true);
private findInLines(filename:string,[],F)->print('Empty file ',filename,' ?');

//*Finds searchStrings (case insensitive) in the given files, searcing recursively from the current directory
main(patterns,searchString,...)->find('.',patterns,tail($params),false);
//*For regression test
main->main('packages/*.mnh','trueCount');
