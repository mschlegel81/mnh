#@SuppressUnusedWarning##*Format for a frame of ---; accepts one parameter
MINUS_FRAME_FMT   :="+%{repeat('-',$0.length+2)}s+\n| %{$0}s |\n+%{repeat('-',$0.length+2)}s+";
#@SuppressUnusedWarning##*Format for a frame of ===; accepts one parameter
EQUALS_FRAME_FMT  :="#%{repeat('=',$0.length+2)}s#\n# %{$0}s #\n#%{repeat('=',$0.length+2)}s#";
#@SuppressUnusedWarning##*Format for a frame of ***; accepts one parameter
ASTERISK_FRAME_FMT:="*%{repeat('*',$0.length+2)}s*\n* %{$0}s *\n*%{repeat('*',$0.length+2)}s*";
#@SuppressUnusedWarning##*Format for a pretty frame of diagonal outline; accepts one parameter
SKEWED_FRAME_FMT:="   %{repeat('_',$0.length+3)}s\n  /%{repeat(' ',$0.length+2)}s/\n / %{$0}s /\n/%{repeat('_',$0.length+2)}s/";

//*Formats a list as a table for printout. The result is a stringList
formatTable(L:List)->begin
  local columnCount:=0;
  local txt:=L.each(row,begin
    columnCount:=max(columnCount,row.size);
    row.each(entry,entry.toString);
  end)
  .{$L.head(1)|[[]]|$L.tail} //insert splitter row
  .each(row,row.size<columnCount ? row|([row.size+1..columnCount].each(i,'')) : row) //add columns where necessary
  .each(row,row.join("\t|\t"))
  .join("\n")
  .formatTabs;
  columnCount:=txt.length.max;
  txt.each(line,index=1 ? line.replace([' ','|'],['-','+'])&repeat('-',columnCount-line.length) : line);
end;

//*Formats a list as a table for printout. The result is a stringList
formatTable(L:List,header:StringList)->formatTable([header]|L);

//*Rounds value to digits relevant digits
//*e.g. roundToRelvantDigits(1.234,2) -> 1.2
roundToRelevantDigits(value:Numeric,digits>0)->
  abs(value)<1E-20 ? 0 : begin
    local relevant:=digits-ceil(ln(value.abs)/ln(10));
    relevant=0 ? round(value) :
    relevant<0 ? round(value,relevant).round
               : round(value,relevant);
  end;
//*Fallback for void values
roundToRelevantDigits(digits>0)->void;
