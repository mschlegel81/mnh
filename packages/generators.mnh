//*Wraps sourceGenerator so that it generates (at max) for the given period of time
@SuppressUnusedWarning=all
timingOutGenerator(sourceGenerator:IteratableExpression,runForSeconds:Numeric)->
{begin
   gen:=sourceGenerator;
   timeout:=scriptTime+runForSeconds;
 save;
   scriptTime<timeout
   ? gen()
   : generatorClosed;
 end}.toGenerator;

//*Returns a list of all integer pairs [a,b] with initialSum<=(a+b)<=finalSum and a,b>=minElementValue, ordered by (a+b)
pairGenerator(initialSum,finalSum,minElementValue<=initialSum)->{begin
  k:=initialSum;
  i:=minElementValue-1;
save;
  (k-i<=minElementValue) ? begin k+=1; i:=minElementValue-1; end : void;
  k<=finalSum ? [i+=1,k-i] : generatorClosed;
end}.toGenerator;

//*Returns a list of all integer pairs [a,b] with initialSum<=(a+b) and a,b>=1, ordered by (a+b)
//*Warning: (potentially) infinite generator!
pairGenerator(initialSum)->pairGenerator(initialSum,2^63-1,1);

private subsetMapping(elements,basePerElement)->begin
  assert(elements.isList);
  assert(basePerElement.isList(elements.size));
  {begin
     k:=[$0];
     [elements,basePerElement.each(b,k:=divMod(k[0],b)).getInner(1)].transpose.each(V,V[1]=0 ? void : [1..V[1]].each(i,V[0]),|);
   end};
end;

//*Returns an iterator over all distinct subsets of C
subSetIterator(C:Collection)->
begin
  elements:=C.elementFrequency.sort;
  basePerElement:=elements.getInner(1)+1;
  rangeGenerator(0,basePerElement.agg(*)-1).pMap(subsetMapping(elements.getInner(0),basePerElement));
end;

//*Returns the count of iteratable expression i
count(i:IterableExpression)->begin
  result:=0;
  while !isVoid(i()) do result+=1;
  result;
end;

//*The fallback for other literals is size
count(i)->i.size;

//*Returns an "out-of-order-map"
//*Behaves mostly like pMap but returns the elements in the order
//*  their calculation is finished, not in enqueue-order.
outOfOrderMap(parameters:Collection,f:Expression(1))->{begin
  pending:=map(parameters,(parameter)->future(f,[parameter]));
save;
  pending.size=0
  ? return generatorClosed
  : void;
  firstDone:=void;
  sleepTime:=1E-4;
  while firstDone.isVoid do
    firstDone:=pending.each(task,task.peekFuture
                                 ? index
                                 : void,orElse)
    orElse sleep(sleepTime:=min(sleepTime*1.2,1)); //sleep not longer than one second
  result:=pending[firstDone]();
  pending[firstDone]:=void;
  result;
end}.toGenerator;

//*Wraps iterator in a new IterableExpression which removes duplicates
deduplicate(iterator:IterableExpression)->{begin
  seen:=[].toSet;
save;
  next:=iterator();
  while !next.isVoid AND next in seen do next:=iterator();
  seen||=next;
  next;
end}.toGenerator;

//*Wraps iterator in a new IterableExpression which removes duplicates
//*Terminates when more than maxDuplicates duplicates have been encountered or the underlying iterator terminates
deduplicate(iterator:IterableExpression,maxDuplicates>=1)->{begin
  seen:=[].toSet;
  duplicatesCounted:=0;
save;
  next:=iterator();
  while !next.isVoid AND next in seen AND (duplicatesCounted+=1)<=maxDuplicates do next:=iterator();
  seen||=next;
  duplicatesCounted>maxDuplicates
  ? generatorClosed
  : next;
end}.toGenerator;

//*Performs a dovetailing iteration over g1 and g2
//*E.g. to iterate over all rational numbers r with 0<r<1 use:
//*  dovetail(rangeGenerator(1),rangeGenerator(1))
//*  .filter((i)->i.agg(<) AND gcd@i=1);
dovetail(g1:IterableExpression,g2:IterableExpression)->{begin
  l1:=[g1()];
  l2:=[g2()];
  k:=0;
  i:=-1;
save;
  while true do begin
    (k-i<=0)
    ? begin
        k+=1;
        l1||=g1();
        l2||=g2();
        k>l1.size+l2.size-2
        ? return generatorClosed
        : i:=-1;
      end
    : void;
    a:=l1[i+=1];
    b:=l2[k-i];
    a.isVoid OR b.isVoid ? void : return [a,b];
  end;
end}.toGenerator;

//*Returns a window iterator, effectively returning all consecutive sub-lists of the given width/size
window(I:Iteratable,width>1)->{begin
  gen:=I.toGenerator;
  window:=[];
  begin
    next:=void;
    while window.size<width AND !isVoid(next:=gen())
       do window||=next;
  end;
save;
  out:=window;
  window:=window.tail;
  window||=gen();
  out.size=width ? out : generatorClosed;
end}.toGenerator;

//*Returns a dynamic concatenation of all given iteratables
concat(A:Iteratable,...)->toGenerator(()->begin
  remainingGenerators:=map($params,::toGenerator);
save;
  nextOutput:=(remainingGenerators[0] orElse {void})();
  while remainingGenerators.size>0 AND nextOutput.isVoid do begin
    remainingGenerators:=remainingGenerators.tail;
    nextOutput:=(remainingGenerators[0] orElse {void})();
  end;
  nextOutput;
end);
