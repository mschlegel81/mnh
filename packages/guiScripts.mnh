@SuppressUnusedWarning=all
@insertScript=Pick file or directory
@SuppressUnusedParameterWarning
pickFile(s:String)->ask('Pick file or directory').escape;

@editScript=edit/Trim trailing spaces
trimTrailingSpaces(s:StringList)->s.trimRight;

@editScript=edit/Remove double blank lines
removeDoubleBlanks(s:StringList)->s.trimRight.join("\n").replace("\n\n\n","\n\n").split("\n");

@editScript=edit/Sort lines and remove duplicates
sortLines(s:StringList)->s.unique.sort;

unifiedDiff(aName:String,bName:String,aLines:StringList,bLines:StringList,additionalLines>=0)->begin
  edit:=diff(aLines,bLines,true)['edit'].pEach(e,e[0]='+' ? [e[0],e[1]+1,e[2]+1,bLines[e[2]]]
                                                          : [e[0],e[1]+1,e[2]+1,aLines[e[1]]]);
  runs:=
  begin
    indexes:=edit.pEach(e,e[0]<>' ' ? [index-additionalLines..index+additionalLines] : void,|) //add additional lines to each run and concatenate all
                 .unique //remove duplicate lines and sort
                 .each(i,i>=edit.size or i<0 ? void : i);
    splits:=(indexes.tail<>indexes.leading+1);
    [indexes[true|splits],indexes[splits|true]].transpose;
  end;
  ['--- '&aName,'+++ '&bName]|
  runs.each(run,
      join(['@@ -',edit[run[0],1],',',edit[run[1],1]-edit[run[0],1]+1,
              ' +',edit[run[0],2],',',edit[run[1],2]-edit[run[0],2]+1,' @@']),
      edit[[run[0]..run[1]]].each(e,(e[0]='.' ? '  ' : e[0]&' ')&e[3]),|);

end;

@utility=diff/new editor
@newEdit
@language=diff
editDiff(editorFile:String)->begin
  compareWith:=ask("Pick tab to compare with",editors.each(e,e=editorFile ? void : e));
  unifiedDiff(compareWith,editorFile,editorContent(compareWith),editorContent(editorFile),2);
end;

@utility=diff/print
editDiffPrint(editorFile:String)->printf("%s",editDiff(editorFile));

private printFileLink(filename:String,lineIndex,rowIndex)->print('@',filename,':',lineIndex+1,',',rowIndex+1);
private printFileLink(filename:String,lineIndex)->printFileLink(filename,lineIndex,0);
private printFileLink(filename:String)->printFileLink(filename,0,0);

@utility=search/find in all open files
@SuppressUnusedParameterWarning
findInAll(editorFile:String)->begin
  searchRegex:=ask('Please enter regex for search.');
  searchRegex<>''
  ? editors.each(editor,editor.editorContent.each(line,line.matches(searchRegex) ? printFileLink('@',editor,':',index+1,',',1) : void))
  : print('No regex given - search cancelled');
  void;
end;

@utility=diff/Compare folders (new editor)
@newEdit
@language=diff
@SuppressUnusedParameterWarning
compareFolders(editorFile:String)->begin
  folder1:=ask('Please enter folder 1').expandedFileName;
  filesIn1:=folder1.allFiles.replaceOne(folder1,'');
  folder2:=ask('Please enter folder 2').expandedFileName;
  filesIn2:=folder2.allFiles.replaceOne(folder2,'');
  toCompare:=filesIn1.intersect(filesIn2)
                  .each(file,fileContents(folder1&file)==fileContents(folder2&file) ? void : file)
                  .union(filesIn1.minus(filesIn2),
                         filesIn2.minus(filesIn1));
  toCompare.each(file,unifiedDiff(folder1&file,folder2&file,fileLines(folder1&file),fileLines(folder2&file),2),' ',|);
end;

USE inspectionUtil;
@utility=List demos/by category
@SuppressUnusedParameterWarning
demosByCategory(dummyParameter)->
allFiles(mnhInfo['configDir'],'*.mnh')
  .toIteratableExpression
  .pMap({inspect($file)})
  .map({$x['path']=>$x['declares'].map(::ruleAttributes).map({$att['demo_for']})})
  .map({$x[1].size>0 ? $x[0]=>$x[1].head.split(',').trim : void})
  .each(e,e[1].each(b,[e[0],b]),|)
  .group(1)
  .map({$g[0]=>$g[1].getInner(0)})
  .sort(0)
  .each(sample,
    print('Examples for ',sample[0],':'),printf('  @%s:1,1',sample[1]));

@utility=List demos/by used builtin functions
@SuppressUnusedParameterWarning
demosByFunc(dummyParameter)->
allFiles(mnhInfo['configDir'],'*.mnh')
  .map({$f.inspect.getAll(['path','called builtin','uses'])})
  .map({'@'&$f[0]&':1,1'&(
        $f[2].isList AND $f[2].size>0
        ? ' or used packages'
        : '')=>$f[1]})
  .each(e,e[1].each(b,[e[0],b]),|)
  .group(1)
  .map({$g[0]=>$g[1].getInner(0)})
  .sort(0)
  .each(sample,
    print(sample[0],' is used in'),printf('  %s',sample[1]));

@utility=diff/file changes
@newEdit
@language=diff
editDiff2(editorFile:String)->
  unifiedDiff(editorFile&' (from disk)',
              editorFile,
              fileLines(editorFile),
              editorContent(editorFile),2);

@utility=Check for updates
@SuppressUnusedParameterWarning
checkForUpdates(editorFile:String)->begin
  mnhReleasesUrl:='https://github.com/mschlegel81/mnh/releases/';
  latestPage:=mnhReleasesUrl&'latest';
  httpResult:=httpGet(latestPage);
  httpResult.isVoid ? return warn('Could not contact github') : void;
  resolvedTag:=httpResult['body'].matchComposite(f'{mnhReleasesUrl}tag/\d+\.\d+\.\d+').head.head;
  online_version :=resolvedTag.split('/').trailing.split('.').softCast;
  current_version:=mnhInfo['version']             .split('.').softCast;

  online_version==current_version
  ? print('MNH is up to date')
  : current_version.composeDigits(1000)>online_version .composeDigits(1000)
    ? print('Your local version is newer than what is online... how did you do that?')
    : ask(f'A newer version ({online_version.join(".")}) has been found.'"\nDo you want to go to the download page?",
          ['yes','no'])=='yes' ? openUrl(latestPage) : void;
  [online_version .composeDigits(1000),current_version.composeDigits(1000),online_version .composeDigits(1000)>current_version.composeDigits(1000)];
end;

@utility=create encrypted script
@newEdit
@language=mnh
formatCipherScript(editorFile:String)->begin
  local plainTextSource:=editorContent(editorFile).join("\n");
  local passphrase:=ask('Please enter passphrase');
  local cipherSource:=plainTextSource.compress;
  cipherSource:=chars[isaacRandomGenerator(passphrase.sha256,256).head(cipherSource.byteLength) xor cipherSource.bytes.ord].join.base64encode;
  local scriptSource:=['plain script;',
    'scriptSource:=//!~'&copy(cipherSource,0,150-18)];
  cipherSource:=cipherSource.copy(150-18);
  while(cipherSource.byteLength>0,begin
    scriptSource|=cipherSource.copy(0,150);
    cipherSource:=cipherSource.copy(150);
  end);
  scriptSource[scriptSource.size-1]&='~.base64decode;';
  scriptSource|=['deciphered:=chars[isaacRandomGenerator(ask("Enter passphrase").sha256,256).head(scriptSource.byteLength) xor scriptSource.bytes.ord].join.decompress;',
                 'deciphered.sha256=='&plainTextSource.sha256,
                 '? runScript(myPath,deciphered.split("\n"),$params,3)',
                 ': fail("Wrong passphrase");'];
  scriptSource;
end;

@utility=Show Cheat Sheet
@SuppressUnusedParameterWarning
showCheatSheet(editorFile:String)->print(
"Strg + C\tcopy\tStrg + F\tfind",
"\nStrg + V\tpaste\tStrg + R\treplace",
"\nStrg + X\tcut\tF3\tfind next",
"\nStrg + Y\tdelete line\tShift + F3\tfind previous",
"\nStrg + Z\tundo",
"\nStrg + Shift + Z\tredo\tStrg + Shift + B\ttoggle breakpoint",
"\n\t\tStrg + Shift + [number]\ttoggle bookmark",
"\nStrg + Shift + R\trename under cursor\tStrg + [number]\tjump to bookmark",
"\nAlt + Up\tmove line/selection up\tStrg + G\tgoto line",
"\nAlt + Down\tmove line/selection down\tStrg + Enter\tjump to declaration",
"\nAlt + Shift + ...\tblock selection\tAlt + Enter\thighlight word under cursor",
"\nStrg + I\tindent",
"\nStrg + U\tunindent\tStrg + Shift + L\tconvert selection to lowercase",
"\nStrg + Shift + C\ttoggle comment\tStrg + Shift + U\tcovert selection to uppercase",
"\nStrg + Space\tcomplete\tStrg + E\tescape selection",
"\n\t\tStrg + Shift + E\tunescape selection");

@utility=Index scripts on drive
@SuppressUnusedParameterWarning
scanDrive(editorFile:String)->begin
  local roots:=mnhInfo['targetOs']=='Linux'
               ? '/'
               : interpret("sort(driveInfo.getInner(0)&':')");
  local rootToScan:=ask('Which drive/root folder should be scanned?',roots);
  rootToScan==''
  ? return void
  : print('Scanning: ',rootToScan);
  allFiles(rootToScan,'*.mnh')
  //for indexing it is sufficient to take one file per folder
  .{$L.group($L.extractFileDirectory,::orElse).getInner(1)}
  .map({print($fileName) orElse try(::inspect,[$fileName],::warn)});
  void;
end;
