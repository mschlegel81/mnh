@SuppressUnusedWarning
@insertScript=Pick file or directory
@SuppressUnusedParameterWarning
pickFile(s:String)->ask('Pick file or directory').escape;

@SuppressUnusedWarning
@editScript=edit/Trim trailing spaces
trimTrailingSpaces(s:StringList)->s.trimRight;

@SuppressUnusedWarning
@editScript=edit/Remove double blank lines
removeDoubleBlanks(s:StringList)->s.join("\n").replace("\n\n\n","\n\n").split("\n");

@SuppressUnusedWarning
@editScript=edit/Sort lines and remove duplicates
sortLines(s:StringList)->s.unique.sort;

unifiedDiff(aName:String,bName:String,aLines:StringList,bLines:StringList,additionalLines>=0)->begin
  local edit:=diff(aLines,bLines,true)['edit'].each(e,e[0]='+' ? [e[0],e[1]+1,e[2]+1,bLines[e[2]]]
                                                               : [e[0],e[1]+1,e[2]+1,aLines[e[1]]]);
  local runs:=
  begin
    local indexes:=edit.each(e,e[0]<>' ' ? [index-additionalLines..index+additionalLines] : void,|) //add additional lines to each run and concatenate all
                       .unique //remove duplicate lines and sort
                       .each(i,i>=edit.size or i<0 ? void : i);
    local splits:=(indexes.tail<>indexes.leading+1);
    [indexes[true|splits],indexes[splits|true]].transpose;
  end;
  ['--- '&aName,'+++ '&bName]|
  runs.each(run,
      join(['@@ -',edit[run[0],1],',',edit[run[1],1]-edit[run[0],1]+1,
              ' +',edit[run[0],2],',',edit[run[1],2]-edit[run[0],2]+1,' @@']),
      edit[[run[0]..run[1]]].each(e,(e[0]='.' ? '  ' : e[0]&' ')&e[3]),|);

end;

@utility=diff/new editor
@newEdit
@language=diff
editDiff(editorFile:String)->begin
  local compareWith:=ask("Pick tab to compare with",editors.each(e,e=editorFile ? void : e));
  unifiedDiff(compareWith,editorFile,editorContent(compareWith),editorContent(editorFile),2);
end;

@SuppressUnusedWarning
@utility=diff/print
editDiffPrint(editorFile:String)->printf("%s",editDiff(editorFile));

@SuppressUnusedWarning
@utility=search/find in all open files
@SuppressUnusedParameterWarning
findInAll(editorFile:String)->begin
  local searchRegex:=ask('Please enter regex for search.');
  searchRegex<>''
  ? editors.each(editor,editor.editorContent.each(line,line.matches(searchRegex) ? print('@',editor,':',index+1,',',1) : void))
  : print('No regex given - search cancelled');
  void;
end;

@SuppressUnusedWarning
@utility=dependencies/open all imported files
openImported(editorFile:String)->inspect(editorFile,editorFile.editorContent).useAndIncPaths.map(::openInEditor);

private plain datastore scriptFolders:=void;

findAllMnhScripts->begin
  scriptFolders.isVoid OR (ask("Do you want to rescan all drives for .mnh files?\nIt might take a while if you choose yes.",['Yes','No'])=='Yes')
  ? begin
      local result:=(mnhInfo['targetOs']=='Linux'
                     ? driveInfo.map({$x[1,'type']='fixed' ? $x[0] : void})&':'
                     : ['/'])
                    .pEach(root,allFiles(root,'*.mnh'),|);
      scriptFolders:=result.extractFileDirectory.unique;
      result;
    end
  : scriptFolders.pEach(root,allFiles(root,'*.mnh',false),|);
end;

private useAndIncPaths(inspectionResult:Map)->inspectionResult.getAll(['uses','includes']).each(x,x.getInner(1),|);

@SuppressUnusedWarning
@utility=dependencies/open all importing files
openImporting(editorFile:String)->begin
  print(editorFile);
  findAllMnhScripts.minus([editorFile]).pEach(script,note(script),editorFile in inspect(script).useAndIncPaths ? script.openInEditor : void);
  void;
end;

@SuppressUnusedWarning
@utility=diff/Compare folders (new editor)
@newEdit
@language=diff
@SuppressUnusedParameterWarning
compareFolders(editorFile:String)->begin
  local folder1:=ask('Please enter folder 1').expandedFileName;
  local filesIn1:=folder1.allFiles.replaceOne(folder1,'');
  local folder2:=ask('Please enter folder 2').expandedFileName;
  local filesIn2:=folder2.allFiles.replaceOne(folder2,'');
  local toCompare:=filesIn1.intersect(filesIn2)
                  .each(file,fileContents(folder1&file)==fileContents(folder2&file) ? void : file)
                  .union(filesIn1.minus(filesIn2),
                         filesIn2.minus(filesIn1));
  toCompare.each(file,unifiedDiff(folder1&file,folder2&file,fileLines(folder1&file),fileLines(folder2&file),2),' ',|);
end;

@SuppressUnusedWarning
@utility=List demos by category
@SuppressUnusedParameterWarning
demosByCategory(dummyParameter)->
allFiles(mnhInfo['configDir'],'*.mnh')
.each(file,file.inspect['declares']
   .each(rule,rule[1,'subrules'].map({$sub.getAll(['location','attributes'])}),|),|)
   .map({[$info[0],$info[1,'demo_for']]})
   .each(entry,entry.size=2 ? entry[1].split(",").trim.map({[$d,entry[0]]}) : void,|)
   .group(0,{[$x[0],$x[1]|$y[1]]})
   .sort({$x[1].size>$y[1].size})
   .each(demoGroup,
     print('Demos for: ',demoGroup[0],"\n  ",demoGroup[1].join("\n  ")));

@SuppressUnusedWarning
@utility=diff/file changes
@newEdit
@language=diff
editDiff2(editorFile:String)->
  unifiedDiff(editorFile&' (from disk)',
              editorFile,
              fileLines(editorFile),
              editorContent(editorFile),2);

@SuppressUnusedWarning
@utility=Check for updates
@SuppressUnusedParameterWarning
checkForUpdates(editorFile:String)->begin
  local availableDownloads:=
  httpGet(local downloadPage:='http://schlegel.bplaced.de/mnh/downloads.html')
  .split("\n")
  .matchComposite('a href="mnh5_.*\.zip"')
  .flatten
  .filter(::isString)
  .replace(['a href="','"'],'');
  local downloadableBuild:=availableDownloads.split("_").flatten.softCast.filter(::isNumeric).max;
  downloadableBuild==mnhInfo['build']
  ? print('Your version of MNH5 is up to date')
  : begin
      ask(format("Your version is %s, download version %s?",mnhInfo['build'],downloadableBuild),
          ['Yes','No'])=="Yes"
      ? openUrl(downloadPage)
      : void;
    end;
  void;
end;
