private unescapeKey(s:String)->begin
  local result:=s.softCast;
  (result==s) OR !result.isString
  ? fail('Invalid json key ',escape(s))
  : void;
  result;
end;

private castWarning(s:String,insteadOfNull:Scalar)->(s=='null' ? warn("Mapping null JSON value to ",insteadOfNull) orElse '' : s.softCast);

private traverseList(L:StringList,insteadOfNull:Scalar)->begin
  local parsed:=[];
  local toParse:=L;
  local listFinished:=false;
  toParse.head==']' ? toParse:=toParse.tail :
  while(toParse.size>0 AND !listFinished,begin
    local value:=toParse.head;
    value='[' ? begin
      local sub:=traverseList(toParse.tail(3));
      value  :=sub[0];
      toParse:=sub[1];
    end :
    value='{' ? begin
      local sub:=traverseObject(toParse.tail(3));
      value  :=sub[0];
      toParse:=sub[1];
    end : begin
      value  :=value.castWarning(insteadOfNull);
      toParse:=toParse.tail;
    end;
    parsed|=[value];
    toParse.head==']'
    ? listFinished:=true
    : toParse.head==','
      ? void
      : fail('Expected element-separator "," but got ',toParse.head==[] ? 'nothing' : escape(toParse.head));
    toParse:=toParse.tail;
  end);
  [parsed,toParse];
end;

private traverseObject(L:StringList,insteadOfNull:Scalar)->begin
  local parsed:=[].toMap;
  local toParse:=L;
  local objectFinished:=false;
  while(toParse.size>0 AND !objectFinished,begin
    local key:=unescapeKey(toParse[0]);
    local value:=toParse[2];
    toParse[1]==':' ? void : fail('Expected key-value-separator ":" but got ',escape(toParse[1]));
    toParse:=toParse.tail(3);
    value='[' ? begin
      local sub:=traverseList(toParse,insteadOfNull);
      value  :=sub[0];
      toParse:=sub[1];
    end :
    value='{' ? begin
      local sub:=traverseObject(toParse,insteadOfNull);
      value  :=sub[0];
      toParse:=sub[1];
    end : begin
      value  :=value.castWarning(insteadOfNull);
    end;
    parsed[key]:=value;
    toParse.head=='}'
    ? objectFinished:=true
    : toParse.head==','
      ? void
      : fail('Expected element-separator "," but got ',toParse.head==[] ? 'nothing' : escape(toParse.head));
    toParse:=toParse.tail;
  end);
  [parsed,toParse];
end;

parseJson(s:StringList,insteadOfNull:Scalar)->parseJson(s.join);
parseJson(s:String,insteadOfNull:Scalar)->begin
  local tokens:=s.tokenSplit("java").trim.each(t,t='' ? void : t);
  tokens.head=='{'
  ? void
  : fail('String does not seem to contain a valid JSON Object. First token is ',tokens.head,' instead of {');
  local resultPair:=traverseObject(tokens.tail,insteadOfNull);
  resultPair[1]==[]
  ? void
  : warn('There is an unparsed rest ',resultPair[1]);
  resultPair.head;
end;

formatJson(s:String)->s.escapeJava;
formatJson(s:Scalar)->toString(s);
formatJson(L:Map)->'{'&L.each(pair,pair[0].escapeJava&':'&formatJson(pair[1])).join(",")&'}';
formatJson(L:List)->'['&L.each(entry,entry.formatJson).join(',')&']';
