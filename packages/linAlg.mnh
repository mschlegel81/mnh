//================Type definitions===================
type Matrix(M:List)->M.pEach(row,row.isNumericList,AND) AND M.pEach(row,row.size).unique.size=1;
ducktype SquareMatrix(M:Matrix)->M.each(row,row.isNumericList(M.size),AND);
@SuppressUnusedParameterWarning
ducktype Vector(V:NumericList)->true;
//================Basic operations===================
private subMatrix(M:List,skipRow,skipCol)->
  M.each(row,index=skipRow
             ? void
             : row.each(cell,index=skipCol ? void : cell));

private matrixDimensions(M:Matrix)->[M.size,M[0].size];

//*Matrix multiplication
@Override
OPERATOR_MULT(x:Matrix,y:Matrix)->begin
  local dimX:=matrixDimensions(x);
  local dimY:=matrixDimensions(y);
  (dimX[1]==dimY[0]) ? [0..dimX[0]-1].each(i,
                       [0..dimY[1]-1].each(k,(x.get(i)*y.getInner(k)).agg(+))).toMatrix
                     : fail('Matrices must have compatible sizes for multiplication.');
end;
//*Matrix+vector multiplication
@Override
OPERATOR_MULT(x:Matrix,vec:Vector)->x*(vec.each(c,[c]).toMatrix);
//*Vector+matrix multiplication
OPERATOR_MULT(vec:NumericList,y:Matrix)->[vec].toMatrix*y;
@Override
OPERATOR_MULT(x:Matrix,i:Numeric)->(x.toBuiltin*i).toMatrix;
@Override
OPERATOR_MULT(i:Numeric,x:Matrix)->(x.toBuiltin*i).toMatrix;
@Override
OPERATOR_PLUS(x:Matrix,y:Matrix)->(x.toBuiltin+y.toBuiltin).toMatrix;
@Override
OPERATOR_MINUS(x:Matrix,y:Matrix)->(x.toBuiltin-y.toBuiltin).toMatrix;

determinant(M:SquareMatrix)->
  M.size=1 ? M[0,0] :
  M.size=2 ? M[0,0]*M[1,1]-M[1,0]*M[0,1] :
             [0..M.size-1].each(i,-1^(i)*M[i,0]*M.subMatrix(i,0).determinant,+);

crossProd(x:NumericList(3),y:NumericList(3))->[x[1]*y[2]-y[1]*x[2],
                                               x[2]*y[0]-y[2]*x[0],
                                               x[0]*y[1]-y[0]*x[1]];
euclideanNorm(x:NumericList)->x.sqr.agg(+).sqrt;
randomVec3OnSphere->begin
  local x:=random(3)-0.5;
  x/euclideanNorm(x);
end;

@SuppressUnusedWarning=all
randomOrthoMatrix->begin
  local x:=randomVec3OnSphere;
  local y:=x.crossProd(randomVec3OnSphere);
        y:=y/euclideanNorm(y);
  local z:=x.crossProd(y);
  [x,y,z];
end;

printMatrix(M:Matrix)->M.each(row,row.join("\t")).join("\n").print;

private sortByValueInRowDescending(L:List,rowIndex:Int)->L[sortPerm(-L.getInner(rowIndex).abs)];

cramerInvert(M:SquareMatrix)->begin
(abs(local determinant:=M[0,0]*M[1,1]-M[1,0]*M[0,1])>1E-30
   ? [[ M[1,1],-M[0,1]],
      [-M[1,0], M[0,0]]]/determinant
   : [[Nan,Nan],[Nan,Nan]]).toSquareMatrix;
end;

invert(M:SquareMatrix)->M.size=2 ? M.cramerInvert : begin
  //Gauss-Jordan Algorithm
  local aid:=M.each(row,begin local i:=index; row|(row.each(r,index=i ? 1 : 0)); end);
  [0..M.size-1].each(rowIndex,
    begin
      //Pivot
      aid:=aid.head(rowIndex) | //upper rows remain untouched
           aid.tail(rowIndex).sortByValueInRowDescending(rowIndex);
      //Divide by diagonal element
      aid[rowIndex]:=aid[rowIndex]/aid[rowIndex,rowIndex];
      //Subtract
      local x:=aid[rowIndex];
      [0..M.size-1].each(i,i=rowIndex ? void :
        aid[i]:=aid[i]-aid[i,rowIndex]*x);
      void;
    end);
  aid.each(row,row.tail(M.size)).toSquareMatrix;
end;

isUnitMatrix(M:SquareMatrix)->M.each(row,begin local rowIndex:=index; row.each(x,index=rowIndex ? x=1 : x=0,AND); end,AND);
isUnitMatrix(M:Matrix)->false;

rotZ(angle)->[[ cos(angle),sin(angle),0],
              [-sin(angle),cos(angle),0],
              [         0 ,        0 ,1]].toSquareMatrix;
rotY(angle)->[[ cos(angle),0,sin(angle)],
              [         0 ,1,        0 ],
              [-sin(angle),0,cos(angle)]].toSquareMatrix;
rotX(angle)->[[1,         0 ,        0 ],
              [0, cos(angle),sin(angle)],
              [0,-sin(angle),cos(angle)]].toSquareMatrix;
rot2D(angle)->[[ cos(angle),sin(angle)],
               [-sin(angle),cos(angle)]].toSquareMatrix;

identityMatrix(dimensions>=1)->[0..dimensions-1].each(i,ord([0..dimensions-1]=i)).toSquareMatrix;

dyadicProduct(v1,v2:Vector)->v1.each(e,v2*e).toMatrix;

//*Returns the QR-decomposition of Matrix A
//*See https://www.keithlantz.net/2012/05/qr-decomposition-using-householder-transformations/
qrDecomposition(A:Matrix)->
  begin
    local R:=A;
    local Q:=(local I:=identityMatrix(A.matrixDimensions[0]));
    [0..A.matrixDimensions[1]-1].each(i,begin
      print(R.getInner(i),' ',i);
      local u:=R.getInner(i).each(x,index<i ? 0 : x);
      local alpha:=((u[i] orElse 0)<0 ? 1 :-1) * u.euclideanNorm;
      local v:=u.each(x,index=i ? x+alpha : x);
      (alpha:=v.euclideanNorm)<1E-10
      ? void
      : begin
          v/=alpha;
          local P:=I-v.each(x,x*v*2).toMatrix;
          R:=P*R;
          Q:=Q*P;
        end;
    end);
    [Q,R];
  end;
