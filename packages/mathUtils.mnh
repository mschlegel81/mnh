iterate(x0,function:Expression(1),stepCount>=1)->iterate(x0,function,stepCount,true);
iterate(x0,function:Expression(1),stepCount>=1,lastOnly=true )->iterate(x0,function,stepCount,false).trailing;
iterate(x0,function:Expression(1),stepCount>=1,lastOnly=false)->begin
  local x:=x0;
  [1..stepCount].each(step,x:=function(x));
end;

@SuppressUnusedWarning=all
sum(L:NumericList)->L.agg(+) orElse 0;
prod(L:NumericList)->L.agg(*) orElse 1;

runningSum(L:NumericList)->begin
  (local s:=0)|(L.each(x,s+=x));
end;

memoized
factorial(i=0)->1;
factorial(i>0)->[1..i].agg(*);

memoized
binomCoeff(0)->[1];
binomCoeff(n>=1)->begin
  local b:=binomCoeff(n-1);
  ([0]|b)+(b|[0]);
end;
binomCoeff(n>=0,k)->binomCoeff(n)[k];

sinh(x:Numeric)->(exp(x)-exp(-x))/2;

//*An approximation to the (real valued) Gamma function
Gamma(i>=1)->factorial(i-1);
Gamma(x<36.5)->Gamma(x+1)/x;
Gamma(x>37.5)->Gamma(x-1)*(x-1);
//*Approximation of the Gamma-Function; see http://www.ebyte.it/library/docs/math07/GammaApproximation.html
Gamma(x)->exp(0.5*ln(2*pi)+(x-1/2)*ln(x)-x+x/2*ln(x*sinh(1/x)+1/(810*x^6)));

memoized
Bernoulli(n=0)->1;
Bernoulli(n)  ->-1/(n+1)*[0..n-1].each(k,binomCoeff(n+1,k)*Bernoulli(k),+);

sumOfProperDividers(n>=1)->n.factorize.elementFrequency.each(x,(x[0]^(x[1]+1)-1)/(x[0]-1),*)-n;
