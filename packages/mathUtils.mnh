iterate(x0,function:Expression(1),stepCount>=1)->iterate(x0,function,stepCount,true);
iterate(x0,function:Expression(1),stepCount>=1,lastOnly=true )->iterate(x0,function,stepCount,false).trailing;
iterate(x0,function:Expression(1),stepCount>=1,lastOnly=false)->begin
  x:=x0;
  [1..stepCount].each(step,x:=function(x));
end;

@SuppressUnusedWarning=all
sum(L:NumericList)->L.agg(+) orElse 0;
prod(L:NumericList)->L.agg(*) orElse 1;

runningSum(L:NumericList)->begin
  (s:=0)|(L.each(x,s+=x));
end;

memoized
factorial(i=0)->1;
factorial(i>0)->[1..i].agg(*);

memoized
binomCoeff(0)->[1];
binomCoeff(n>=1)->begin
  b:=binomCoeff(n-1);
  ([0]|b)+(b|[0]);
end;
binomCoeff(n>=0,k)->binomCoeff(n)[k];

sinh(x:Numeric)->(exp(x)-exp(-x))/2;

gamma_by_integral(z,errorTolerance>=0.0)->integrate((t)->t^(z-1)*exp(-t),0  ,z   ,1000000,errorTolerance)+
                                          integrate((t)->t^(z-1)*exp(-t),z  ,1E50,1000000,errorTolerance);

//*An approximation to the (real valued) Gamma function
Gamma(i>=1)->factorial(i-1);
Gamma(x<36.5)->Gamma(x+1)/x;
Gamma(x>37.5)->Gamma(x-1)*(x-1);
//*Approximation of the Gamma-Function; see http://www.ebyte.it/library/docs/math07/GammaApproximation.html
Gamma(x)->exp(0.5*ln(2*pi)+(x-1/2)*ln(x)-x+x/2*ln(x*sinh(1/x)+1/(810*x^6)));

memoized
Bernoulli(n=0)->1;
Bernoulli(n)  ->-1/(n+1)*[0..n-1].each(k,binomCoeff(n+1,k)*Bernoulli(k),+);

sumOfProperDividers(n>1)->n.factorize.elementFrequency.each(x,(x[0]^(x[1]+1)-1)/(x[0]-1),*)-n;
sumOfProperDividers(n<=1)->0;

memoized powers(x:IntList(2))->toSet(x[0]^[0..x[1]]);
allDividerPairs(n>=10000)->
  begin
    d:=factorize(n).elementFrequency.each(x,powers(x),*).toList;
    d:=d[d*d<=n];
    [d,n div d].transpose;
  end;

allDividerPairs(n>=1)->begin
  range:=[1..isqrt(n)[0]];
  mask:=(d:=divMod(n,range)).getInner(1)=0;
  [range[mask],d[mask].getInner(0)].transpose;
end;

allPartitions(L:List)->begin
  rangeGenerator(2^L.size,2^(L.size)+2^(L.size-1)-1).pEach(maskIndex,
    begin
      mask:=tail(maskIndex.digits(2)=0);
      mask;
      [L[!mask],L[mask]];
    end);
end;

 //*Returns the real roots of {a*x^2+b*x+c} or void if there is none
rootOfQuadraticPoly(squareFactor:Numeric,
                    linearFactor:Numeric,
                    constantPart:Numeric)->begin
  discriminant:=linearFactor^2-4*squareFactor*constantPart;
  discriminant<0 ? return [] : void;
  (-linearFactor+sqrt(discriminant)*[-1,1])/(2*squareFactor);
end;

//*Returns the points where the given circles intersect
circleIntersection(c0:NumericList(2),r0:Numeric,
                   c1:NumericList(2),r1:Numeric)->begin
  d:=euklideanNorm(c1-c0);
  a:=(r0^2-r1^2+d^2)/(2*d);
  h:=r0^2-a^2;
  h<0 ? return void : h:=sqrt(h);
  X:=c0+a*(c1-c0)/d;
  Y:=[c1[1]-c0[1],c0[0]-c1[0]]*h/d;
  [X+Y,X-Y];
end;
