USE polynomials, basic;
//*Returns the <code>n</code>-th numerical derivative at point <code>x</code> with a stepsize <code>h=0.1</code>
D(f:expression,n   ,x:numeric          )->D(f,n,x,0.1);
//*Returns the function itself
D(f:expression,n<=0,x:numeric,h:numeric)->f(x);
//*Returns the <code>n</code>-th numerical derivative at point <code>x</code>
D(f:expression,n >0,x:numeric,h:numeric)->(D(f,n-1,x+h,h)-D(f,n-1,x-h,h))/(2*h);

TaylorSeries  (f:expression,nMax>=0,x0:numeric,h:numeric)->polyExpression(-x0,each(n,[0..nMax],D(f,n,x0,h)/fak(n)));
McLaurinSeries(f:expression,nMax>=0,           h:numeric)->polyExpression(    each(n,[0..nMax],D(f,n, 0,h)/fak(n)));

main->plot (McLaurinSeries({sin($x)},10,  0.1),-5,5,100) and
      addPlot(TaylorSeries({sin($x)},10,2,0.1),-5,5,100) and
      addPlot({sin($x)},-5,5,100);
