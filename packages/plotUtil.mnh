implicitFunctionContour(F:Expression(2),x0:Numeric,x1>x0,y0:Numeric,y1>y0,samplingPoints,maxSegmentLength>0.0)->begin
  //Helper function to calculate a root between two points (Regula Falsi)
  local findRootBetween:=(p0:NumericList(2),f0_:Numeric,p1:NumericList(2),f1_:Numeric)->begin
    local x0:=p0; local f0:=f0_;
    local x1:=p1; local f1:=f1_;
    local counter:=20;
    while(euklideanNorm(x1-x0)>1E-3 AND (counter-=1)>0,begin
      local xm:=x0-(x1-x0)*(f0/(f1-f0));
      local fm:=F@xm;
      sign(fm)=sign(f0) ? begin x0:=xm; f0:=fm; end :
      sign(fm)=sign(f1) ? begin x1:=xm; f1:=fm; end : abs(f1)<abs(f0)
      ? begin x0:=xm; f0:=fm; end
      : begin x1:=xm; f1:=fm; end;
    end);
    x0-(x1-x0)*(f0/(f1-f0));
  end;

  //Determine points to sample at:
  local px:=max(1,round(sqrt((x1-x0)/(y1-y0)*samplingPoints))-1); px:=[0..px]*(x1-x0)/px+x0;
  local py:=max(1,round(sqrt((y1-y0)/(x1-x0)*samplingPoints))-1); py:=[0..py]*(y1-y0)/py+y0;

  local edges:=cross([0..px.size-1],[0..py.size-1]).each(idxPair,
                     idxPair[0]=px.size-1 ? void : [idxPair,idxPair+[1,0]] ,
                     idxPair[1]=py.size-1 ? void : [idxPair,idxPair+[0,1]]);

  local pxy:=cross(px,py);
  local fxy:=pxy.map((p)->F@p);


  //filter out edges without sign changes
  local sxy:=sign(fxy);
  local edgeIdx :=edges.map((pair)->pair.map((p)->p[0]*py.size+p[1]));
  local mask:=sxy[edgeIdx.getInner(0)]!=sxy[edgeIdx.getInner(1)];
  edges  :=edges[mask];
  edgeIdx:=edgeIdx[mask];

  local edgePoint:=edges.each(edge,begin
    local I:=edgeIdx[index];
    findRootBetween(pxy[I[0]],fxy[I[0]],pxy[I[1]],fxy[I[1]]);
  end);

  local edgeMap:=edges.each(edge,edge=>index).toMap;

  //which edges are adjacent?
  local adj:=edges
  .each(e,begin
     local p0:=e[0]; local p1:=e[1];
     local myIdx:=edgeMap[e];
     local horizontal:=p1==p0+[1,0];
     (horizontal
      ? [e+[[0,1],[0,1]],[p0,p0+[0,1]],[p1,p1+[0,1]],[p0-[0,1],p0],[p1-[0,1],p1]]
      : [e+[[1,0],[1,0]],[p0,p0+[1,0]],[p1,p1+[1,0]],[p0-[1,0],p0],[p1-[1,0],p1]])
     .map((e2)->edgeMap[e2.sort])
     .each(otherIdx,[myIdx,otherIdx],[otherIdx,myIdx]);
   end,|)
  .unique
  .{$L.getInner(0).group($L.getInner(1))}
  .each(ad,begin
     (local A:=ad[1]).size<=2
     ? void
     : begin
         local p0:=edgePoint[ad[0]];
         A:=
         A.each(i1,begin
           local p1:=edgePoint[i1];
           abs(F@((p0+p1)*0.5))|i1;
         end).sort.head(2).getInner(1);
       end;
     A.each(a,[ad[0],a],[a,ad[0]]);
   end,|).unique;
  // adj:=adj[adj.getInner(1)>adj.getInner(0)];

  adj:=adj[adj.getInner(1)>adj.getInner(0)]
  .each(a,begin
    local d:=edgePoint[a].agg(-); d/=d.euklideanNorm;
    d.isNan.agg(or) or d.isInfinite.agg(or)
    ? void
    : [a|[-d],a.reverseList|[d]];
  end,|);
  adj:=group(adj.map(::tail),adj.map(::head)).map((g)->g[0]=>g[1].toMap).toMap;

  local toBeVisited:=adj.getInner(0);

  local runs:=[];
  while(toBeVisited.size>0,begin
    local n0:=toBeVisited.head; toBeVisited>>n0;
    local n1:=adj[n0].getInner(0).intersect(toBeVisited).head;
    local direction:=adj[n0,n1];
    local currentRun:=[n0,n1];
    [0..1].each(loop,begin
      local next:=void;
      while(toBeVisited.size>0 AND !isVoid(next:=adj[n1].orElse([]).each(entry,entry[0] in toBeVisited ? [(direction*entry[1]).agg(+),entry] : void,max)),begin
        n0:=n1; n1:=next[1,0]; direction:=next[1,1]; currentRun|=n1; toBeVisited>>n1;
      end);
      currentRun:=currentRun.reverseList;
      direction:=adj[currentRun.leading.trailing,currentRun.trailing];
    end);
    runs||=currentRun;
  end);

  runs:=runs
  .each(run,edgePoint[run])
  .pEach(run,begin
    local refined:=run.head(1);
    local prev:=refined[0];
    run.tail(1).each(point,begin
      local distance:=euklideanNorm(local step:=point-prev);
      while(distance>maxSegmentLength,begin
        step/=ceil(distance/maxSegmentLength);
        local side:=step.reverseList*[-0.1,0.1];
        local p0:=local p1:=
        local f0:=local f1:=1;
        while(sign(f0)=sign(f1),begin
          side*=2;
          f0:=F@(p0:=prev+step-side);
          f1:=F@(p1:=prev+step+side);
        end);
        refined|=[prev:=findRootBetween(p0,f0,p1,f1)];
        distance:=euklideanNorm(step:=point-prev);
      end);
      refined|=[prev:=point];
    end);
    refined;
  end);
  runs.each(run,run,[[Nan,Nan]],|);
end;


private hexPoints(x0,x1,y0,y1,n)->
begin
  // kx*ky = n
  // kx/ky = (x1-x0)/(y1-y0)*sqrt(0.5)
  // kx    = ky   * (x1-x0)/(y1-y0)*sqrt(0.5)
  // kx    = n/kx * (x1-x0)/(y1-y0)*sqrt(0.5)
  // kx    = sqrt(n    * (x1-x0)/(y1-y0)*sqrt(0.5))
  local kx:=max(2,round(sqrt(n*(x1-x0)/(y1-y0)*sqrt(0.5))));
  local ky:=max(2,n div (kx*2)*2+1);
  local edges:=[];

  local outIdx:=0;
  local P:=[0..ky-1].cross([0..kx-1]).each(c,
  begin
    local ix:=c[1];
    local iy:=c[0];
    ix==(kx-1) AND (iy and 1)=1 ? void :
    begin
      ////Straight upward neighbor:
      ix in [0,kx-1] AND (iy and 1)=0 AND iy<ky-1
      ? edges||=[outIdx,outIdx+kx+kx-1]
      : void;
      ////Right neighbor:
      ix<kx-1-(iy and 1)
      ? edges||=[outIdx,outIdx+1]
      : void;
      //upper right neighbor
      ix<kx-1 AND iy<ky-1
      ? edges||=[outIdx,outIdx+kx]
      : void;
      //upper left neighbor:
      (1-(iy and 1))<=ix<kx AND iy<ky-1
      ? edges||=[outIdx,outIdx+kx-1]
      : void;
      outIdx+=1;
      [ix+0.5*(iy and 1),
       iy*sqrt(0.5)];
    end;
  end);

  local edgesByPoint:=edges.each(edge,[edge[0],edge],[edge[1],edge])
                           .group(0)
                           .each(g,[g[0],g[1].getInner(1)])
                           .toMap;
  local triangles:= edges.each(edge,intersect(edgesByPoint[edge[0]].flatten,
                                              edgesByPoint[edge[1]].flatten)
                                    .minus(edge)
                                    .each(k,sort(edge|k)),|)
                         .unique;
  local f:=[(x1-x0)/P.getInner(0).max,
            (y1-y0)/P.getInner(1).max];
  local o:=[x0,y0];
  P:=P.map({$p*f+o});
  [P,triangles];
end;

//*Returns a list of edges in the polyon (in node index space)
//*The returned edges are sorted
private edges(poly:IntList)->transpose([[0..poly.size-1],[1..poly.size-1,0]]).map({poly.getAll($i).sort});

private cutLine(F:Expression(2),x:NumericList(2),dx:NumericList(2),level:Numeric,
                t_:Numeric,F0:Numeric,F1:Numeric,quality:Int)->begin
  local t0:= 0; local f0:=F0         -level;
  local t1:= 1; local f1:=F1         -level;
  local tm:=t_; local fm:=F@(x+dx*t_)-level;
  [1..quality].each(step,begin
    f0*fm>0
    ? begin f0:=fm; t0:=tm; end
    : begin f1:=fm; t1:=tm; end;
    local tm_:=t1-f1*(t0-t1)/(f0-f1);
    tm:=0<=tm_<=1
        ? tm_
        : (t0+t1)/2;
    fm:=F@(x+dx*tm)-level;
  end);
  x+dx*tm;
end;

USE customFormUtil;

@SuppressUnusedWarning=all
contourPlot(F:Expression(2),x0,x1>x0,y0,y1>y0,triangleCount>=2,contourLevels:NumericList,maxSegmentLength,interactive:Boolean)->
  plot() orElse addContourPlot(F,x0,x1,y0,y1,triangleCount,contourLevels,maxSegmentLength,interactive);
addContourPlot(F:Expression(2),x0,x1>x0,y0,y1>y0,triangleCount>=2,contourLevels:NumericList,maxSegmentLength,interactive:Boolean)->begin
  local contourForLevel:=[].toMap;
  local dataForLevel:=(level)->contourForLevel[level] orElse contourForLevel[level]:=implicitFunctionContour(level==0 ? F : F-level,x0,x1,y0,y1,triangleCount,maxSegmentLength);

  contourLevels
  .sort
  .pEach(level,dataForLevel(level).addPlot(contourLevels.size=0 ? 'black' : 'HUE'&(index*2/(3*contourLevels.size-1))));

  interactive ? void : return void;
  display;
  local x:=0;
  local y:=0;
  local f:=0;
  showDialog('Interactive Contour Plot',[
    newLabel.withCaption({'x='&x}),
    newLabel.withCaption({'y='&y}),
    newLabel.withCaption({'f(x,y)='&f}),
    newPlotLink.withMouseMoved({begin
      x:=$x;
      y:=$y;
      f:=F($x,$y);
      local lines:=dataForLevel(f);
      lines.size==0 ? void : addPlot(lines,'black');
      display;
      lines.size==0 ? void : removePlot;
    end}),
    newPlotDock]);
end;

densityPlot(F:Expression(2),x0,x1>x0,y0,y1>y0,sampleCount>=4,interactive:Boolean)->
  plot() orElse addDensityPlot(F,x0,x1,y0,y1,sampleCount,interactive);

addDensityPlot(F:Expression(2),x0,x1>x0,y0,y1>y0,sampleCount>=4,interactive:Boolean)->begin
  local h:=sqrt((x1-x0)*(y1-y0)/sampleCount);
  local px:=max(1,ceil((x1-x0)/h)); px:=([0..px-1]+0.5)*h+x0;
  local py:=max(1,ceil((y1-y0)/h)); py:=([0..py-1]+0.5)*h+y0;

  local fxy:=cross(py.reverseList,px).pMap((xy)->F@xy);
  local Q:=
  [vectorIfThenElse(fxy<0,1,0),
   vectorIfThenElse(fxy<0,0,0),
   vectorIfThenElse(fxy<0,0,1),
   fxy.abs.sortPerm.sortPerm*(1/fxy.size)].transpose;
  Q.plotRasterImage(py.size,h,x0,y0);
  interactive ? void : return void;

  display;
  local x:=0;
  local y:=0;
  local f:=0;
  showDialog('Interactive Density Plot',[
    newLabel.withCaption({'x='&x}),
    newLabel.withCaption({'y='&y}),
    newLabel.withCaption({'f(x,y)='&f}),
    newPlotLink.withMouseMoved({begin
      x:=$x;
      y:=$y;
      f:=F($x,$y);
    end}),
    newPlotDock]);
end;

private PLOT_STYLE_KEYS:=['scale','color','ti','style','style2'];
type PlotStyle(m:Map)->m.getInner(0).minus(PLOT_STYLE_KEYS).size=0;
private modifyStyle(S:PlotStyle,key=='style2',value)->begin
  local R:=S;
  R[key]:=isVoid(S[key])
          ? value
          : S[key]&' '&value;
  R.toPlotStyle;
end;
private modifyStyle(S:PlotStyle,key in PLOT_STYLE_KEYS,value)->begin
  local R:=S;
  R[key]:=value;
  R.toPlotStyle;
end;

@SuppressUnusedWarning=all
@Override
toString(style:PlotStyle)->style.getInner(1).join(" ");

LINE     :=['style'=>'line'     ].toMap.toPlotStyle; LINE     (S:PlotStyle)->modifyStyle(S,'style','line'     );
STEPLEFT :=['style'=>'stepLeft' ].toMap.toPlotStyle; STEPLEFT (S:PlotStyle)->modifyStyle(S,'style','stepLeft' );
STEPRIGHT:=['style'=>'stepRight'].toMap.toPlotStyle; STEPRIGHT(S:PlotStyle)->modifyStyle(S,'style','stepRight');
BAR      :=['style'=>'bar'      ].toMap.toPlotStyle; BAR      (S:PlotStyle)->modifyStyle(S,'style','bar'      );
BOX      :=['style'=>'box'      ].toMap.toPlotStyle; BOX      (S:PlotStyle)->modifyStyle(S,'style','box'      );
ELLIPSE  :=['style'=>'ellipse'  ].toMap.toPlotStyle; ELLIPSE  (S:PlotStyle)->modifyStyle(S,'style','ellipse'  );
TUBE     :=['style'=>'tube'     ].toMap.toPlotStyle; TUBE     (S:PlotStyle)->modifyStyle(S,'style','tube'     );
POLYGON  :=['style'=>'polygon'  ].toMap.toPlotStyle; POLYGON  (S:PlotStyle)->modifyStyle(S,'style','polygon'  );
DOT      :=['style'=>'.'        ].toMap.toPlotStyle; DOT      (S:PlotStyle)->modifyStyle(S,'style','.'        );
PLUS     :=['style'=>'+'        ].toMap.toPlotStyle; PLUS     (S:PlotStyle)->modifyStyle(S,'style','+'        );
CROSS    :=['style'=>'x'        ].toMap.toPlotStyle; CROSS    (S:PlotStyle)->modifyStyle(S,'style','x'        );
IMPULSE  :=['style'=>'i'        ].toMap.toPlotStyle; IMPULSE  (S:PlotStyle)->modifyStyle(S,'style','i'        );
withDot    (S:PlotStyle)->modifyStyle(S,'style2','.');
withPlus   (S:PlotStyle)->modifyStyle(S,'style2','+');
withCross  (S:PlotStyle)->modifyStyle(S,'style2','x');
withImpulse(S:PlotStyle)->modifyStyle(S,'style2','i');
filled     (S:PlotStyle)->modifyStyle(S,'style2','f');
fillSolid  (S:PlotStyle)->modifyStyle(S,'style2','fs');
withScale(S:PlotStyle,scaleModifier>=0.0)->modifyStyle(S,'scale',scaleModifier);
coloredBlack (S:PlotStyle)->modifyStyle(S,'color','black');
coloredRed   (S:PlotStyle)->modifyStyle(S,'color','red');
coloredBlue  (S:PlotStyle)->modifyStyle(S,'color','blue');
coloredGreen (S:PlotStyle)->modifyStyle(S,'color','green');
coloredPurple(S:PlotStyle)->modifyStyle(S,'color','purple');
coloredOrange(S:PlotStyle)->modifyStyle(S,'color','orange');
coloredRGB   (S:PlotStyle,r:Numeric,g:Numeric,b:Numeric)->modifyStyle(S,'color',format('RGB%s,%s,%s',r,g,b));
coloredHSV   (S:PlotStyle,h:Numeric,s:Numeric,v:Numeric)->modifyStyle(S,'color',format('HSV%s,%s,%s',h,s,v));
coloredHUE   (S:PlotStyle,hue:Numeric)->modifyStyle(S,'color',format('HUE%s',hue));
coloredGREY  (S:PlotStyle,brightness:Numeric)->modifyStyle(S,'color',format('GREY%s',brightness));


setPlotAutoscaleFactor(factor) ->
  setOptions('autoscaleFactor',factor);
setPlotAutoscale(axis in ['x','y'],enableAutoscale:Boolean) ->
  setOptions('autoscale'&upper(axis),enableAutoscale);
setPlotAxisStyle(axis in ['x','y'],tics:Boolean,majorGrid:Boolean,minorGrid<=majorGrid) ->
  setOptions('axisStyle'&upper(axis),(tics ? 1 : 0) or (majorGrid ? 2 : 0 ) or (minorGrid ? 4: 0));
setPlotLogscale(axis in ['x','y'],useLoscale:Boolean) ->
  setOptions('logscale'&upper(axis),useLoscale);
setPlotPreserveAspect(preserve:Boolean) ->
  setOptions('preserveAspect',preserve);
setPlotFontsize(relativeSize>=0.1) ->
  setOptions('fontsize',relativeSize);
setPlotRangeManually(x0:Numeric,x1>x0,y0:Numeric,y1>y0) ->
  setOptions([['autoscaleX',false],
              ['autoscaleY',false],
              ['x0'        ,x0],
              ['x1'        ,x1],
              ['y0'        ,y0],
              ['y1'        ,y1]]);
setPlotRangeManually(centerX:Numeric,centerY:Numeric,range:Numeric) ->
  setOptions([['autoscaleX',false],
              ['autoscaleY',false],
              ['preserveAspect',true],
              ['x0'        ,centerX-range],
              ['x1'        ,centerX+range],
              ['y0'        ,centerY-range],
              ['y1'        ,centerY+range]]);

//*Add a tube plot based on expressions; samples are distributed linearly
addTubePlot(f0:Expression(1),f1:Expression(1),x0:Numeric,x1>x0,sampleCount>=2,style:PlotStyle)->begin
  (x0+(x1-x0)/(sampleCount-1)*[0..sampleCount-1])
  .pEach(x,[x,f0(x)],[x,f1(x)]).addPlot(style.TUBE.toString);
end;

//*Add a tube plot based on value lists
addTubePlot(x:NumericList,y0:NumericList,y1:NumericList,style:PlotStyle)->begin
  x.size==y0.size==y1.size ? void : fail('Size mismatch');
  x.each(px,[px,y0[index]],[px,y1[index]]).addPlot(style.TUBE.toString);
end;

//*Add plot showing transparent boxes from lowValues to high values with middleValues as lines
addBinPlot(binLimits:NumericList,lowValues:NumericList,middleValues:NumericList,highValues:NumericList,style:PlotStyle)->begin
  binLimits.size-1==lowValues.size==middleValues.size==highValues.size ? void : fail('Size mismatch');
  [0..lowValues.size-1].each(i,[binLimits[i],lowValues[i]],[binLimits[i+1],highValues[i]])
                       .addPlot(style.BOX.filled.withScale(0).toString);
  [0..middleValues.size-1].each(i,[binLimits[i],middleValues[i]],[binLimits[i+1],middleValues[i]],[Nan,Nan])
                          .addPlot(style.LINE.toString);
end;

//*Plot bars with labels per bar
barPlot(values:NumericList,texts:StringList,style:PlotStyle)->begin
  resetOptions;
  setPlotAxisStyle('x',false,false,false);
  setPlotAxisStyle('y',true,true,false);
  setPlotRangeManually(0,values.size,min(0,values.min),max(0,values.max));
  setPlotPreserveAspect(false);
  plot(values|0,style.toString);
  texts.each(text,drawText(index+0.5,0,text,10,'B'));
end;
