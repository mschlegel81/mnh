private expandPrimes(P:intList,pMax:int)->expandPrimes(P,pMax,[max(P)+1..pMax]);
private expandPrimes(P:intList,pMax:int,C:intList)-> P|each(c,C,each(p,c mod P<>0,and) ? c : void);

//*Special case 1: Prime numbers lesser than 3
memoized
primes(nMax<3)->[2];
//*Special case 2: Prime numbers lesser than 5
primes(nMax<5)->[2,3];
//*Special case 3: Prime numbers lesser than 7
primes(nMax<7)->[2,3,5];
//*General case: Generate list of primes from preceding primes
primes(nMax)->expandPrimes(primes(round(sqrt(nMax))),floor(nMax));

isPrime(n)->trueCount(n mod primes(sqrt(n))=0) = 0;

//*Factorize number <code>n</code> using prime numbers from function <code>primes</code>
memoized factorize(n:int)->factorize(n,primes(sqrt(n))%(n mod primes(sqrt(n))=0));
private factorize(1,[])->[];
private factorize(n:int,[])->n;
private factorize(n:int,dividers:intList)->dividers|factorize(n div each(d,dividers,*));

//*Return the dividers of integer <code>n</code>
dividers(n:int)->dividers_A(n,[2..floor(sqrt(n))]);
private dividers_A(n,C)->dividers_B(n,C%(n mod C = 0));
private dividers_B(n,D)->1|unique(D|(n div D));
//*Return the divider-sum of integer <code>n</code>
memoized dividerSum(n:int)->each(d,dividers(n),+);

memoized factors(n:int)->factors(n,primes(sqrt(sqrt(n)))%(n mod primes(sqrt(sqrt(n)))=0));
private factors(1,[])->[];
private factors(n:int,[])->factorize(n);
private factors(n:int,dividers:intList)->dividers|factors(n div each(d,dividers,*));
