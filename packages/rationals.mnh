type RegularContinuedFraction(x:IntList)->x.size>=1;
type Rational(x:IntList(2))->!x.isRegularContinuedFraction;
ducktype GeneralNumber(x)->x.isNumeric OR x.isRational;
ducktype GeneralNumberList(l:List)->!l.isRational AND l.each(entry,entry.isGeneralNumber,AND);

//*Returns rational number r in canonical form or as integer
@SuppressUnusedWarning=all
shortenRational(r:IntList)->begin
  x:=abs(r);
  x:=x div gcd@x;
  x[1]=1
  ? (r[0]<0 xor r[1]<0)
    ? -x[0]
    :  x[0]
  : (r[0]<0 xor r[1]<0
     ? [-x[0],x[1]]
     : x).toRational;
end;

toReal(rat:Rational)->toReal(rat[0])/toReal(rat[1]);
//*Converts continued fraction f to a real number
private toReal(f:RegularContinuedFraction)->begin
  r:=0;
  f.reverseList.each(i,index=0 ? r:=i : r:=i+1.0/r);
  r;
end;

@Override
toRational(i:Int)->[i,1];
@Override
toRational(f:RegularContinuedFraction)->begin
  r:=void;
  f.reverseList.each(i,index=0 ? r:=[i,1].toRational : r:=i+1/r);
  r.isInt ? r.toRational
          : r;
end;

@Override
//*Converts continued fraction f to a rational number
toRational(x:Real)->begin
  assert(!x.isNan and !x.isInfinite);
  negative:=x<0;
  rest:=x.abs;
  integerPart:=floor(rest);
  rest-=integerPart;
  A:=[0,1];
  B:=[1,1];
  A:=[1..100].each(step,begin
    N:=A+B;
    N[0]>rest*N[1]
    ? B:=N
    : A:=N;
    [abs(N[1]*rest-N[0]),N];
  end,min)[1];
  [(A[0]+A[1]*integerPart)*(negative ? -1 : 1),A[1]].toRational;
end;

@Override
toString(r:Rational)->r[1]=1 ? r[0].toString : r.join("/");

//*The result always is a rational number
@Override
OPERATOR_PLUS(a:Rational,b:Rational)->[a[0]*b[1]+b[0]*a[1],a[1]*b[1]].shortenRational;
OPERATOR_PLUS(a:Rational,b:Int     )->[a[0]+b*a[1],a[1]].toRational;
OPERATOR_PLUS(a:Rational,b:Real    )->a.toReal+b;
OPERATOR_PLUS(a:Int     ,b:Rational)->[a*b[1]+b[0],b[1]].toRational;
OPERATOR_PLUS(a:Real    ,b:Rational)->a+b.toReal;
@SuppressWarning
OPERATOR_PLUS(A:GeneralNumberList,b:GeneralNumber)->A.map((a)->a+b);
@SuppressWarning
OPERATOR_PLUS(a:GeneralNumber,B:GeneralNumberList)->B.map((b)->a+b);
@SuppressWarning
OPERATOR_PLUS(A:GeneralNumberList,B:GeneralNumberList)->[A,B].transpose.map((pair)->pair[0]+pair[1]);

OPERATOR_MINUS(a:Rational,b:Rational)->[a[0]*b[1]-b[0]*a[1],a[1]*b[1]].shortenRational;
OPERATOR_MINUS(a:Rational,b:Int     )->[a[0]-b*a[1],a[1]].toRational;
OPERATOR_MINUS(a:Rational,b:Real    )->a.toReal-b;
OPERATOR_MINUS(a:Int     ,b:Rational)->[a*b[1]-b[0],b[1]].toRational;
OPERATOR_MINUS(a:Real    ,b:Rational)->a-b.toReal;
OPERATOR_MINUS(A:GeneralNumberList,b:Rational)->A.map((a)->a-b);
OPERATOR_MINUS(a:Rational,B:GeneralNumberList)->B.map((b)->a-b);
@SuppressWarning
OPERATOR_MINUS(A:GeneralNumberList,B:GeneralNumberList)->[A,B].transpose.map((pair)->pair[0]-pair[1]);


OPERATOR_MULT(a:Rational,b:Rational)->shortenRational([a[0]*b[0],a[1]*b[1]]);
OPERATOR_MULT(a:Rational,b:Int     )->shortenRational([a[0]*b,a[1]]);
OPERATOR_MULT(a:Rational,b:Real    )->a.toReal*b;
OPERATOR_MULT(a:Int     ,b:Rational)->shortenRational([a*b[0],b[1]]);
OPERATOR_MULT(a:Real    ,b:Rational)->a*b.toReal;
@SuppressWarning
OPERATOR_MULT(A:GeneralNumberList,b:GeneralNumber)->A.map((a)->a*b);
@SuppressWarning
OPERATOR_MULT(a:GeneralNumber,B:GeneralNumberList)->B.map((b)->a*b);
@SuppressWarning
OPERATOR_MULT(A:GeneralNumberList,B:GeneralNumberList)->[A,B].transpose.map((pair)->pair[0]*pair[1]);


@Override
OPERATOR_DIVREAL(a:Rational,b:Rational)->shortenRational([a[0]*b[1],a[1]*b[0]]);
@SuppressWarning
OPERATOR_DIVREAL(a:Int     ,b:Int     )->shortenRational([a,b]);
OPERATOR_DIVREAL(a:Rational,b:Int     )->shortenRational([a[0],b*a[1]]);
OPERATOR_DIVREAL(a:Rational,b:Real    )->a.toReal/b;
OPERATOR_DIVREAL(a:Int     ,b:Rational)->shortenRational([a*b[1],b[0]]);
OPERATOR_DIVREAL(a:Real    ,b:Rational)->a/b.toReal;
@SuppressWarning
OPERATOR_DIVREAL(A:GeneralNumberList,b:GeneralNumber)->A.map((a)->a/b);
@SuppressWarning
OPERATOR_DIVREAL(a:GeneralNumber,B:GeneralNumberList)->B.map((b)->a/b);
@SuppressWarning
OPERATOR_DIVREAL(A:GeneralNumberList,B:GeneralNumberList)->[A,B].transpose.map((pair)->pair[0]/pair[1]);

@Override
OPERATOR_POT(a:Rational,p>=0)->(a.toBuiltin^p).toRational;
OPERATOR_POT(a:Rational,p<0)->(a.reverseList^-p).toRational;
@SuppressWarning
OPERATOR_POT(L:GeneralNumberList,p>=0)->L.map((x)->x^p);

OPERATOR_NEGATE_ARITHMETIC(a:Rational)->[-a[0],a[1]].toRational;

sqr(x:Rational)->sqr(x.toBuiltin).shortenRational;
sqrt(x:Rational)->begin
  a:=isqrt(x[0]);
  b:=isqrt(x[1]);
  a[1] AND b[1] ? [a[0],b[0]].shortenRational : sqrt(x.toReal);
end;

@Override
toRegularContinuedFraction(r:Real)->r.toRational.toRegularContinuedFraction;

//*Converts rational number r to a continued fraction
@Override
toRegularContinuedFraction(r:Rational)->begin
  x:=r.toBuiltin;
  cf:=[];
  while x[1]!=0 do begin
    integerPart:=x[0] div x[1];
    x[0]-=x[1]*integerPart;
    x:=x.reverseList;
    cf|=integerPart;
  end;
  cf;
end;

//*Returns a decimal representation of the given rational number
//*Periodic parts are shown in round brackets; periods longer than 200 will not be found
decimalForm(rat:Rational)->begin
  enum:=rat[1];
  r:=divMod(rat[0],rat[1]);
  first:=r[0]; r:=r[1]*10;
  result:=[];
  hist:=[];
  while !(r in hist) AND result.size<200 do begin
    hist|=r;
    q:=divMod(r,enum);
    r:=q[1]*10;
    result|=q[0];
  end;
  h:=indexOf(hist=r)[0];
  h.isVoid
  ? first&'.'&result.join
  : begin
      periodicPart:=result.tail(h);
      first&'.'&result.head(h).join&
      (periodicPart==[0]
       ? ''
       : '('&periodicPart.join&')');
    end;
end;
decimalForm(i:Int)->i.toString;
decimalForm(r:Real                     )->r.toRational.decimalForm;
decimalForm(cf:RegularContinuedFraction)->cf.toRational.decimalForm;

//*Lists the first 30 approximations for r
listApprox(cf:RegularContinuedFraction)->begin
  r:=cf.toReal;
  [1..min(30,cf.size)].each(k,cf.head(k).toRegularContinuedFraction)
  .pMap({begin
      rat:=$cf.toRational;
      "["&abs(rat[1]*r-rat[0])& "]\t"&rat.toString&"\t=\t"&$cf.toString;
    end})
  .join("\n")
  .print;
end;

memoized private cfFormat(count=1)->'%s';
memoized private cfFormat(count=2)->'%s+1/%s';
memoized private cfFormat(count>1)->'%s+1/('+cfFormat(count-1)+')';

//*Returns a continued fraction in the form cf[0]+1/(cf[0]+1/(...))
toString(cf:RegularContinuedFraction)->cfFormat(cf.size).format@cf;

convergents(cf:RegularContinuedFraction)->
  [1..cf.size].pEach(k,cf.head(k).toRegularContinuedFraction.toRational);

parseRational(s:String)->
  s.matches('^ *-?\d+ */ *-?\d+ *$')
  ? begin
      s.split('/').trim.map(::toInt);
    end
  : s.matches('^-?\d+(.\d*(\(\d+\))?)?$')
    ? begin
        p:=s.split('.');
        sig:=s.matches('^-') ? -1 : 1;
        intPart:=p.head.toInt;
        fracPart:=p.tail.head.split(['(',')']).head(2);
        periodicPart   :=fracPart[1] orElse '0';
        nonperiodicPart:=fracPart[0] orElse '0';
        sig*intPart.abs+(nonperiodicPart.toInt+periodicPart.toInt/(10^periodicPart.length-1))/10^nonperiodicPart.length;
      end
    : fail('cannot parse ',s);
