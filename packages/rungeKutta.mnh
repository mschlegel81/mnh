//*Butcher Tableau of an explicit Runge-Kutta method (ERK)
type ERK_ButcherTableau(T:List)->T.each(row,row.isNumericList AND row.size<=index+1,AND);

@SuppressUnusedWarning=all
absNorm(x:NumericList)->x.abs.agg(+)/x.size;
absNorm(l:List)->begin
  f:=l.flatten;
  f.isNumericList ? absNorm(f) : fail;
end;

private rkCodeStart(intermediate)->[
                          'F0'         ,':=dt*f(y0)',';']|
  intermediate.each(stage,'F'&(index+1),':=dt*f(y0' ,
                          stage.each(a ,a=0 ? void : [a,'F'&index])
                               .each(af,'+',
                                        af[0]=1 ? void : af[0],
                                        af[0]=1 ? void : '*',
                                        af[1],|),
                          ')',';',|);
private summationStageCode(summationStage:NumericList)->
  ('y0')| summationStage.each(a ,a=0 ? void : [a,'F'&index])
                      .each(af,'+',
                            af[0]=1 ? void : af[0],
                            af[0]=1 ? void : '*',
                            af[1],|);

//*Constructs an explicit Runge-Kutta method from its Butcher Tableau
//*The resulting expression accepts/expects parameters: (y0,F:expression(1),dt:numeric)
private rungeKuttaStepper(Tableau:ERK_ButcherTableau)->begin
  intermediate  :=Tableau.leading;
  summationStage:=Tableau.trailing;
  ('(y0,f:Expression(1),dt>0.0)->begin'|rkCodeStart(intermediate)|
                summationStageCode(summationStage)|';'|'end').toExpression;
end;

//*Constructs an embedded explicit Runge-Kutta method from its Butcher Tableau
//*The resulting expression accepts/expects parameters: (y0,F:expression(1),dt:numeric,errorTolerance)
private embeddedRungeKuttaStepper(Tableau:ERK_ButcherTableau,order:Int)->begin
  intermediate   :=Tableau.leading(2);
  summationStages:=Tableau.trailing(2);
  code:=['(y0_,f,dtMacro,errorTolerance)->begin microStep:=(y0,dt)->begin'             ,rkCodeStart       (intermediate),
                   '[result:=',summationStageCode(summationStages[0]),',',
                                '((',summationStageCode(summationStages[1]),'-result).flatten.abs.max/errorTolerance)^',1/order,']; end;'&//!~
    dtSub:=dtMacro;
  save;
    y:=y0_;
    dtRest:=dtMacro;
    dtSub:=dtRest/max(1,ceil(min(1000,dtRest/dtSub)));
    while dtRest>0 do begin
      y1:=microStep(y,dtSub);
      errorEstimate:=y1[1];
      errorEstimate<1
      ? begin
          y:=y1[0];
          dtRest-=dtSub;
        end
      : void;
      //pick a sub step size assuming that all remaining steps will be of equal size
      dtRest>0 ? begin
        dtSub:=dtRest/max(1,ceil(min(1000,dtRest/dtSub*errorEstimate)));
      end : void;
    end;
    y;
  end;~].flatten;
  code.toExpression;
end;

//*Explicit Runge-Kutta Method RK4, a.k.a. "The" Runge-Kutta Method
//*The resulting expression accepts/expects parameters: (y0,F:expression(1),dt:numeric)
memoized RK4->rungeKuttaStepper(
  [[1/2            ],
   [ 0 ,1/2        ],
   [ 0 , 0 , 1     ],
   [1/6,1/3,1/3,1/6]].toERK_ButcherTableau);

//*Explicit Runge-Kutta Method RK4b
//*The resulting expression accepts/expects parameters: (y0,F:expression(1),dt:numeric)
memoized RK4b->rungeKuttaStepper(
  [[ 1/3            ],
   [-1/3, 1         ],
   [  1 ,-1 , 1     ],
   [1/8 ,3/8,3/8,1/8]].toERK_ButcherTableau);

//*Explicit Runge-Kutta Method RK32 (3-stage 2nd order)
//*The resulting expression accepts/expects parameters: (y0,F:expression(1),dt:numeric)
memoized RK32->rungeKuttaStepper(
  [[1/2        ],
   [1/2,1/2    ],
   [1/3,1/3,1/3]].toERK_ButcherTableau);

//*Family of 2-stage 2nd order Runge-Kutta Methods
//*The resulting expression accepts/expects parameters: (y0,F:expression(1),dt:numeric)
memoized RK2(a)->rungeKuttaStepper(
  [[a                ],
   [1-1/(2*a),1/(2*a)]].toERK_ButcherTableau);

//*Euler Forward, as Runge-Kutta Method
//*The resulting expression accepts/expects parameters: (y0,F:expression(1),dt:numeric)
memoized RK1->rungeKuttaStepper([[1]].toERK_ButcherTableau);

//*Heun-Euler embedded explicit Runge-Kutta Method (Order 2)
//*The resulting expression accepts/expects parameters: (y0,F:expression(1),dt:numeric,errorTolerance)
HEUN_EULER->embeddedRungeKuttaStepper(
  [[ 1     ],
   [1/2,1/2],
   [ 1 , 0 ]].toERK_ButcherTableau,2);

//*Fehlberg RK1(2) embedded explicit Runge-Kutta Method (Order 2)
//*The resulting expression accepts/expects parameters: (y0,F:expression(1),dt:numeric,errorTolerance)
//FEHLBERG_RK12->embeddedRungeKuttaStepper(
//  [[1/2                ],
//   [1/256,255/256      ],
//   [1/512,255/256,1/512],
//   [1/256,255/256      ]].toERK_ButcherTableau,2);

FEHLBERG_RK12->(y0_, f, dtMacro, errorTolerance)->
  begin
    F0:=void;
    microStep:=(y0, dt)->begin
            F0:=F0 orElse dt*f(y0);
      F1:=dt*f(y0+0.5*F0);
      F2:=dt*f(lowerOrderApprox:=y0+0.00390625*F0+0.99609375*F1);
      [result:=y0+0.001953125*F0+0.99609375*F1+0.001953125*F2,((lowerOrderApprox-result).flatten.abs.max/errorTolerance)^0.5];
    end;
    dtSub:=dtMacro;
  save;
    y:=y0_;
    dtRest:=dtMacro;
    dtSub:=dtRest/max(1, ceil(min(1000, dtRest/dtSub)));
    while dtRest>0 do begin
      y1:=microStep(y, dtSub);
      errorEstimate:=y1[1];
      errorEstimate<1
      ? begin
          y:=y1[0];
          dtRest-=dtSub;
          F0:=void;
        end
      : void;
      dtRest>0
      ? dtSub:=dtRest/max(1, ceil(min(1000, dtRest/dtSub*errorEstimate)))
      : dtSub/=errorEstimate;
    end;
    y;
  end;

//*Bogacki-Shampine embedded explicit Runge-Kutta Method (Order 3)
//*The resulting expression accepts/expects parameters: (y0,F:expression(1),dt:numeric,errorTolerance)
//BOGACKI_SHAMPINE->embeddedRungeKuttaStepper(
//  [[1/2              ],
//   [ 0  ,3/4         ],
//   [2/9 ,1/3,4/9     ],
//   [2/9 ,1/3,4/9     ],
//   [7/24,1/4,1/3,1/8]].toERK_ButcherTableau,3);

BOGACKI_SHAMPINE->(y0_, f, dtMacro, errorTolerance)->
  begin
    F0:=void;
    F3:=void;
    microStep:=(y0, dt)->begin
            F0:=F0 orElse dt*f(y0);
      F1:=dt*f(y0+0.5*F0);
      F2:=dt*f(y0+0.75*F1);
            F3:=dt*f(result:=y0+0.2222222222222222*F0+0.3333333333333333*F1+0.4444444444444444*F2);
      [result,((y0+0.29166666666666669*F0+0.25*F1+0.3333333333333333*F2+0.125*F3-result).flatten.abs.max/errorTolerance)^0.3333333333333333];
    end;
    dtSub:=dtMacro;
  save;
    y:=y0_;
    dtRest:=dtMacro;
    dtSub:=dtRest/max(1, ceil(min(1000, dtRest/dtSub)));
    while dtRest>0 do begin
      y1:=microStep(y, dtSub);
      errorEstimate:=y1[1];
      errorEstimate<1
      ? begin
          y:=y1[0];
          dtRest-=dtSub;
          F0:=F3;
        end
      : void;
      dtRest>0
      ? dtSub:=dtRest/max(1, ceil(min(1000, dtRest/dtSub*errorEstimate)));
      : dtSub/=errorEstimate;
    end;
    y;
  end;


//*RK3-3/2 embedded explicit Runge-Kutta Method (Order 3)
//*The resulting expression accepts/expects parameters: (y0,F:expression(1),dt:numeric,errorTolerance)
SCHLEGEL->embeddedRungeKuttaStepper(
  [[ 1          ],
   [1/4 ,1/4    ],
   [1/6 ,1/6,2/3],
   [1/3 ,1/3,1/3]].toERK_ButcherTableau,3);


//*Fehlberg embedded explicit Runge-Kutta Method (Order 5)
//*The resulting expression accepts/expects parameters: (y0,F:expression(1),dt:numeric,errorTolerance)
FEHLBERG->embeddedRungeKuttaStepper(
  [[   1/4                                                  ],
   [   3/32  ,    9/32                                      ],
   [1932/2197,-7200/2197, 7296/2197                         ],
   [ 439/216 ,    -8    , 3680/513  , -845/4104             ],
   [  -8/27  ,     2    ,-3544/2565 , 1859/4104 ,-11/40     ],
   [  16/135 ,     0    , 6656/12825,28561/56430, -9/50,2/55],
   [  25/216 ,     0    , 1408/2565 , 2197/4104 , -1/5 , 0  ]].toERK_ButcherTableau,5);

//*Cash-Carp embedded explicit Runge-Kutta Method (Order 5)
//*The resulting expression accepts/expects parameters: (y0,F:expression(1),dt:numeric,errorTolerance)
CASH_KARP->embeddedRungeKuttaStepper(
[[   1/5                                                        ],
 [   3/40   ,  9/40                                             ],
 [   3/10   , -9/10 ,    6/5                                    ],
 [ -11/54   ,  5/2  ,  -70/27   ,   35/27                       ],
 [1631/55296,175/512,  575/13824,44275/110592,253/4096          ],
 [  37/378  ,   0   ,  250/621  ,  125/594   ,      0  ,512/1771],
 [2825/27648,   0   ,18575/48384,13525/55296 ,277/14336,  1/4   ]].toERK_ButcherTableau,5);

//*Returns an integrator based on an explicit Runge-Kutta method
integrator(ERK :Expression(3),df:Expression(1),dt:Numeric              )->(state)->ERK(state,df,dt);
//*Returns an integrator based on an embedded explicit Runge-Kutta method
integrator(EERK:Expression(4),df:Expression(1),dt:Numeric,tolerance>0.0)->(state)->EERK(state,df,dt,tolerance);

//*Iterates, returning all results
iterate(initialValue,f:Expression(1),stepCount>=1)->begin
  [y:=initialValue]| rangeGenerator(1,stepCount).each(step,y:=f(y));
end;

//*Iterates, returning only the last value
iterateLast(initialValue,f:Expression(1),stepCount>=1)->begin
  y:=initialValue;
  rangeGenerator(1,stepCount).each(step,y:=f(y),trailing);
end;
