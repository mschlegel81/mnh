shortenSilently(s:string)->begin
  local result:=shorten(s,2);
  local tryOn:=true;
  each(subLen,[3..32],tryOn ? begin
    local newResult:=shorten(s,subLen);
    length(newResult)<length(result)
    ? result:=newResult
    : tryOn:=false;
    void;
  end : void);
  result;
end;

shortenWithLittleOutput(s:string)->begin
  local result:=shorten(s,2);
  printf('    Sub-Length=%I2%; ratio=%##0.00%%%',2,length(result)/length(escape(s))*100);
  local tryOn:=length(result)<length(escape(s));
  each(subLen,[3..32],tryOn ? begin
    local newResult:=shorten(s,subLen);
    printf('    Sub-Length=%I2%; ratio=%##0.00%%%',subLen,length(newResult)/length(escape(s))*100);
    length(newResult)<length(result)
    ? result:=newResult
    : tryOn:=false;
    void;
  end : void);
  result;
end;

private bestSubString(s:string,len:int)->
  pEach(ef,
        copy(s,[0..length(s)-len],len).elementFrequency,
        aggregator({$x%0<$y%0 ? $y : $x}),
        [(length(escape(ef%1))-2)*(ef%0-1)-1,ef%1]);

shorten(s:string)->begin
  local result:=shortenSilently(s);
  print ('Input length  : ',length(escape(s)));
  print ('Result length : ',length(result));
  printf('Ratio         :%##0.00%%%',length(result)/length(escape(s))*100);
  print (result);
  result;
end;

private shorten(s:string,subLength)->begin
  local alphabetOut:=[];
  local workString:=s;
  local replacements:=[];
  local proceed:=true;
  local result:=escape(s);
  local prevResult:=result;
  each(run,[0..9],begin
    each(alphabetChar,chars.minus(workString.chars).minus(chars%[26]),
    proceed
    ? begin
        local sub:=bestSubString(workString,subLength);
        sub%0<=0
        ? proceed:=false
        : begin
            replacements:=sub%1|replacements;
            alphabetOut:=alphabetChar|alphabetOut;
            workString:=replace(workString,sub%1,alphabetChar);
            result:='replace('&escape(workString)&','&
                      'chars('&escape(join(alphabetOut ))&'),'&
                       'copy('&escape(join(replacements))&',[0..'&(size(replacements)-1)&']*'&subLength&','&subLength&'))';
            length(result)>=length(prevResult)
            ? proceed:=false 
            : prevResult:=result;
          end;
        void;
      end
    : void);
  end);
  prevResult;
end;

//*For regression test
main->begin
  local input:=fileContents(myPath);
  local shortCmd:=shorten(input);
  print('Can reconstruct correctly : ',expression(shortCmd)()=input);
end;
//*Shorten the given input file
main(filename)->shorten(fileContents(filename));
//*Shorten multiple input files:
main(filename,...)->printf("writeFile('%X%',%X%);",$params, pEach(p,$params,shortenSilently(fileContents(p))));
