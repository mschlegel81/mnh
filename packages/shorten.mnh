shortenSilently(s:string)->begin
  local result:=shorten(s,2);
  local tryOn:=length(formatResult(result))<length(escape(s));
  [3..32].each(subLen,tryOn ? begin
    local newResult:=shorten(s,subLen);
    length(formatResult(newResult))<length(formatResult(result))
    ? result:=newResult
    : tryOn:=false;
    void;
  end : void);
  result;
end;

private bestSubString(s:string,len:int)->begin
  local freq:=copy(s,[0..length(s)-len],len).elementFrequency;
  local benefits:=(length(escape(freq.getInner(1)))-2)*(freq.getInner(0)-1)-1;
  local best:=argMax(benefits);
  [benefits.get(best),freq.get(best).get(1)];
end;

formatResult(result:list)->
  format('replace(%s,chars(%s),copy(%s,[0..%d]*%d,%d))',
         escape(result.get(0)),
         escape(join(result.get(1))),
         escape(join(result.get(2))),
         size(result.get(2))-1,
         result.get(3),
         result.get(3));

private fallbackResult(s:string)->[s,[' '],[' '],1];

shorten(s:string)->begin
  local result:=shortenSilently(s);
  print ('Input length  : ',length(escape(s)));
  print ('Result length : ',length(formatResult(result)));
  printf('Ratio         :%6.2f%%',length(formatResult(result))/length(escape(s))*100);
  print (formatResult(result));
  result;
end;

shorten(nonString)->shorten(string(nonString));

private shorten(s:string,subLength)->begin
  local alphabetOut:=[];
  local workString:=s;
  local replacements:=[];
  local proceed:=true;
  local result:=fallbackResult(s);
  local prevResult:=result;
  [0..19].each(run,begin
    run=10 ? proceed:=true : void;
    (run<10
     ? chars.get([33..91,93..126])
     : chars.get([33..91,93..126,128..255,0..32,92,127]))
    .minus(workString.chars)
    .each(alphabetChar,
    proceed
    ? begin
        local sub:=bestSubString(workString,subLength);
        sub.get(0)<=0
        ? proceed:=false
        : begin
            replacements:=sub.get(1)|replacements;
            alphabetOut:=alphabetChar|alphabetOut;
            workString:=replace(workString,sub.get(1),alphabetChar);
            result:=[workString,alphabetOut,replacements,subLength];
            length(formatResult(result))>=length(formatResult(prevResult))
            ? proceed:=false 
            : prevResult:=result;
          end;
        void;
      end
    : void);
  end);
  prevResult;
end;

//*For regression test
main->begin
  local input:=fileContents(myPath);
  local shortCmd:=formatResult(shorten(input));
  print('Can reconstruct correctly : ',expression(shortCmd)()=input);
end;
//*Shorten the given input file
main(filename)->shorten(fileContents(filename));
//*Shorten multiple input files:
main(filename,...)->printf("writeFile('%X%',%X%);",$params, pEach(p,$params,shortenSilently(fileContents(p))));
