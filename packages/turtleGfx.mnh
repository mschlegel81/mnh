private degToRad:=arctan(1)/45;
private removeRedundantSequences(s,s)->s;
private removeRedundantSequences(s,prev)->removeRedundantSequences(replace(s,['+-','-+','[]','[+]','[-]'],''),s);

private cleanString(drawChars:string, input:string, allowShortening:boolean)->begin
  local ignorables:=each(c,unique('~'|copy(input,[0..length(input)-1],1)),c in ['+','-','F','[',']'] ? void : c);
  local clean:=replace(replace(input,
                               copy(drawChars,[0..length(drawChars)-1],1),
                               'F'),
                       ignorables,
                       '');

  replace(
    removeRedundantSequences(clean,''),
    allowShortening ? ['F','00','11','22','33','44','55','66','77','88'] : 'F',
    allowShortening ? ['0','1' ,'2' ,'3' ,'4' ,'5' ,'6' ,'7' ,'8' ,'9'] : '0');
end;


turtle(startAngle:numeric,rotAngleInDegrees:numeric,drawChars:string,s:string)->turtle(startAngle,rotAngleInDegrees,drawChars,s,true);
turtle(startAngle:numeric,rotAngleInDegrees:numeric,drawChars:string,s:string,allowShortening:boolean)->begin
  local cleanInput:=cleanString(drawChars,s,allowShortening);
  //init State variables
  local turtlePos:=[0,0];
  local turtleDir:=startAngle*degToRad;
  local posStack:=[];
  local dirStack:=[];
  local rotAngle:=rotAngleInDegrees*degToRad;
  each(c,cleanInput .chars,when(
    c='0', begin local oldPos:=turtlePos; turtlePos+=    [cos(turtleDir),sin(turtleDir)]; oldPos; end,
    c='+', begin turtleDir-=rotAngle; void; end,
    c='-', begin turtleDir+=rotAngle; void; end,
    c='[', begin
             posStack|=[turtlePos];
             dirStack|=turtleDir;
             void;
           end,
    c=']', begin
             turtlePos:=trailing(posStack);
             posStack := leading(posStack);
             turtleDir:=trailing(dirStack);
             dirStack := leading(dirStack);
             [[Nan,Nan]] | turtlePos;
           end,
    c='1', begin local oldPos:=turtlePos; turtlePos+=  2*[cos(turtleDir),sin(turtleDir)]; oldPos; end,
    c='2', begin local oldPos:=turtlePos; turtlePos+=  4*[cos(turtleDir),sin(turtleDir)]; oldPos; end,
    c='3', begin local oldPos:=turtlePos; turtlePos+=  8*[cos(turtleDir),sin(turtleDir)]; oldPos; end,
    c='4', begin local oldPos:=turtlePos; turtlePos+= 16*[cos(turtleDir),sin(turtleDir)]; oldPos; end,
    c='5', begin local oldPos:=turtlePos; turtlePos+= 32*[cos(turtleDir),sin(turtleDir)]; oldPos; end,
    c='6', begin local oldPos:=turtlePos; turtlePos+= 64*[cos(turtleDir),sin(turtleDir)]; oldPos; end,
    c='7', begin local oldPos:=turtlePos; turtlePos+=128*[cos(turtleDir),sin(turtleDir)]; oldPos; end,
    c='8', begin local oldPos:=turtlePos; turtlePos+=256*[cos(turtleDir),sin(turtleDir)]; oldPos; end,
    c='9', begin local oldPos:=turtlePos; turtlePos+=512*[cos(turtleDir),sin(turtleDir)]; oldPos; end)) | [turtlePos];
end;

//*For reg-test
main->plot.setAxisStyle([0,0]) and plot(turtle(0,59,'F',each(i,[1..100],&,repeat('F',i),'+'))) and renderToFile(replace(myPath,'.mnh','.png'),768,768,4);
