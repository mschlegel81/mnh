USE hash;
private TEST_DIRECTORY    :=replace(splitFileName(myPath)%"relative",splitFileName(myPath)%"filename","");
private ROOT_DIRECTORY    :=TEST_DIRECTORY&'../';
private persistent passedTests:=[];

synchronized markAsPassed(case,exeHash,runTime)->begin
  local contained:=false;
  passedTests:=each(pt,passedTests,
                    pt%0=exeHash AND pt%1=case ? begin
                      contained:=true;
                      [exeHash,case,fileHash(ROOT_DIRECTORY&case),(runTime+pt%3)/2];
                    end : pt);
  contained ? void
            : passedTests|=[[exeHash,case,fileHash(ROOT_DIRECTORY&case),runTime]];
  void;
end;

private memoized memFileHash(case)->fileHash(ROOT_DIRECTORY&case);

synchronized isMarkedAsPassed(case,exeHash)->[exeHash,case,memFileHash(case)] in passedTests%%[0..2];

//*Clear all passed tests
main('clear')->(passedTests:=[]);

//*Remove all passed tests related to versions with different code hashes
main('cleanup')->begin
  local currentExeHash:= executor.exec(["-codeHash"]).head.split(':').trailing;
  print('Cleaned up. ',size(passedTests:=each(pt,passedTests,split(pt%0,':').trailing = currentExeHash ? pt : void)),' passed tests remain.');
end;

//*Remove all passed tests related to versions with equal (!) code hashes
main('retest')->begin
  local currentExeHash:= executor.exec(["-codeHash"]).head.split(':').trailing;
  print('Cleaned up. ',size(passedTests:=each(pt,passedTests,split(pt%0,':').trailing = currentExeHash ? void : pt)),' passed tests remain.');
end;

//*Remove passed tests related to versions with equal (!) code hashes and containing one of the given test name parts
main('retest',...)->begin
  local currentExeHash:= executor.exec(["-codeHash"]).head.split(':').trailing;
  print('Cleaned up. ',size(passedTests:=each(pt,passedTests,split(pt%0,':').trailing = currentExeHash AND trueCount(pos(...,pt%1)>=0)>0 ? void : pt)),' passed tests remain.');
end;

//*Shows statistics on passed tests
main('compare')->main('compare','');

private printComparison(testFile)->begin
  local currentBin:=executor.exec(["-codeHash"]).head;
  local relAvgTimePerBin:=each(t,passedTests%(passedTests%%1=testFile)%%[0,3],(t%0)=currentBin ? t|'(current)' : t|'').sort({$x%1<=$y%1});
  printf("%s\t:\t%s\t%6.4f\t \t%g",
    split(relAvgTimePerBin%%0,':')%%0,
    split(relAvgTimePerBin%%0,':')%%1,
    relAvgTimePerBin%%1,
    relAvgTimePerBin%%2);
  print;
end;

private average(L:numericList)->each(x,L,+)/size(L);
//*Shows statistics on passed tests containing infix
main('compare',infix,...)->
begin
  local filteredPassedTests:=(infix='')
                             ? passedTests
                             : each(test,passedTests,trueCount(pos(infix|...,test%1)>=0)>0 ? test : void);

  size(filteredPassedTests)<=0 ? print('No tests ',infix='' ? '' : 'matching "'&infix&'" ','have been passed.') : begin
    print('Calculating statistics over ',size(filteredPassedTests)," passed tests.\n");
  
    local timePerTest:=each(testFile,unique(filteredPassedTests%%1),begin
      local avg  :=average(filteredPassedTests%(filteredPassedTests%%1=testFile)%%3);
      local sigma:=sqrt(average(sqr(avg-(filteredPassedTests%(filteredPassedTests%%1=testFile)%%3))));
      [testFile, avg,sigma];
    end).sort({$x%1<=$y%1});
  
    print('All tests ordered by time:');
    printf("%s\t%7.3s\t+/-\t%g\ts",timePerTest%%0,round(timePerTest%%1,4),round(timePerTest%%2,4));
    print;

    local currentBin:=executor.exec(["-codeHash"]).head;
    
    printf@('Fastest test: %s; average time: %6.4fs+/-%gs'| timePerTest%(argMin(timePerTest%%1)));
    printComparison(timePerTest%(argMin(timePerTest%%1))%0);
  
    printf@('Slowest test: %s; average time: %6.4fs+/-%gs'| timePerTest%(argMax(timePerTest%%1)));
    printComparison(timePerTest%(argMax(timePerTest%%1))%0);
    local testWithTime:=timePerTest%(argMax(timePerTest%%2/timePerTest%%1));
    printf@('Test with the largest relative variance: %s; average time: %6.4fs+/-%gs'|(testWithTime));
    printComparison(testWithTime%0);
    
    currentBin:=currentBin.split(':');
    local relAvgTimePerBin:=each(bin,unique((filteredPassedTests%%0).split(':')%%0),begin
      local passedByBin:=filteredPassedTests%(((filteredPassedTests%%0).split(':')%%0)=bin)%%[1,3]; //testFile and time
      [bin,100*(average(each(pass,passedByBin,pass%1/((timePerTest%%[0,1])%(pass%0))))-1),bin=currentBin%0 ? " (current)":""];
    end).sort({$x%1<=$y%1});
    print('Average relative time of executables by flavour: ');
    printf("%s\t%s\t%%\t%s",relAvgTimePerBin%%0,round(relAvgTimePerBin%%1,2),relAvgTimePerBin%%2);
    print;
    
    
    relAvgTimePerBin:=each(bin,unique((filteredPassedTests%%0).split(':')%%1),begin
      local passedByBin:=filteredPassedTests%(((filteredPassedTests%%0).split(':')%%1)=bin)%%[1,3]; //testFile and time
      [bin,100*(average(each(pass,passedByBin,pass%1/((timePerTest%%[0,1])%(pass%0))))-1),bin=currentBin%1 ? " (current)":""];
    end).sort({$x%1<=$y%1});
    print('Average relative time of executables by code hash: ');  
    printf("%s\t%s\t%%\t%s",relAvgTimePerBin%%0,round(relAvgTimePerBin%%1,2),relAvgTimePerBin%%2);
  end;
end;
