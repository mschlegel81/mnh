USE hash;
private TEST_DIRECTORY    :=replace(splitFileName(myPath).get("relative"),splitFileName(myPath).get("filename"),"");
private ROOT_DIRECTORY    :=TEST_DIRECTORY&'../';
private persistent passedTests:=[['FOx86_64:7281313C','demos/100doors.mnh','7F7EEB25',0.0423851778944859],['FOx86_64:7281313C','demos/12_statements.mnh','381A590A',1.44153511368792],['FOx86_64:36B14C0C','demos/100doors.mnh','7F7EEB25',0.0270664349883545],['FOx86_64:36B14C0C','demos/12_statements.mnh','381A590A',0.186964397944471],['FOx86_64:36B14C0C','demos/24.mnh','2E95155C',0.05170949018448],['FOx86_64:36B14C0C','demos/99bottles.mnh','F59C9EE3',0.0245051573071093],['FOx86_64:36B14C0C','demos/ackermann.mnh','1648CC01',1.44239084624201],['FOx86_64:36B14C0C','demos/anagram.mnh','CA326D4B',0.76793264076306],['FOx86_64:36B14C0C','demos/barnsleyFern.mnh','21EA430D',2.13155458612148],['FOx86_64:36B14C0C','demos/benford.mnh','7A8AFDC3',0.343521017412844],['FOx86_64:36B14C0C','demos/countTheCoins.mnh','AF9CEAE4',0.119407371806721],['FOx86_64:36B14C0C','demos/dice7fromDice5.mnh','14692FD6',0.780214931321614],['FOx86_64:36B14C0C','demos/digitSquareSum.mnh','54AF05B9',1.16796356543977],['FOx86_64:36B14C0C','demos/forkbombFib.mnh','ADCDE15C',5.55188590251144],['FOx86_64:36B14C0C','demos/fractalPlant.mnh','06E41346',1.0132172876549],['FOx86_64:36B14C0C','demos/gol.mnh','1B0D5B8B',5.02487184729623],['FOx86_64:36B14C0C','demos/hailstone.mnh','10E20077',1.90422748062839],['FOx86_64:36B14C0C','demos/hofstadterConway.mnh','7F8D52DB',2.4731120276111],['FOx86_64:36B14C0C','demos/huffmann.mnh','DF73642D',0.115226976315344],['FOx86_64:70A880D4','demos/100doors.mnh','7F7EEB25',0.0270599837611179],['FOx86_64:70A880D4','demos/12_statements.mnh','381A590A',0.240768862870426],['FOx86_64:70A880D4','demos/24.mnh','2E95155C',0.0512425710821843],['FOx86_64:70A880D4','demos/99bottles.mnh','F59C9EE3',0.0238648539427487],['FOx86_64:70A880D4','demos/ackermann.mnh','1648CC01',1.45946211483633],['FOx86_64:70A880D4','demos/anagram.mnh','CA326D4B',0.754646433563323],['FOx86_64:70A880D4','demos/barnsleyFern.mnh','21EA430D',2.16625723427368],['FOx86_64:70A880D4','demos/benford.mnh','7A8AFDC3',0.343986608483518],['FOx86_64:70A880D4','demos/countTheCoins.mnh','AF9CEAE4',0.133051315608976],['FOx86_64:70A880D4','demos/dice7fromDice5.mnh','14692FD6',0.715182613273617],['FOx86_64:70A880D4','demos/digitSquareSum.mnh','54AF05B9',1.0406075863015],['FOx86_64:70A880D4','demos/forkbombFib.mnh','ADCDE15C',5.08824349425151],['FOx86_64:70A880D4','demos/fractalPlant.mnh','06E41346',0.910687631384791],['FOx86_64:70A880D4','demos/gol.mnh','1B0D5B8B',0.776778769330017],['FOx86_64:70A880D4','demos/hailstone.mnh','10E20077',1.86531663966366],['FOx86_64:70A880D4','demos/hofstadterConway.mnh','7F8D52DB',2.36710736570481],['FOx86_64:70A880D4','demos/huffmann.mnh','DF73642D',0.104965835319941],['FOx86_64:70A880D4','demos/importing.mnh','8147DAD0',0.186386761970038],['FOx86_64:70A880D4','demos/kochCurve.mnh','E6BF2B95',3.13231410946832],['FOx86_64:70A880D4','demos/ludic.mnh','9327EE26',0.821915128632539],['FOx86_64:70A880D4','demos/magicSquare.mnh','7F117BC3',0.167352797992785],['FOx86_64:70A880D4','demos/maze.mnh','B85D74F3',0.145052992320873],['FOx86_64:70A880D4','demos/monteCarloPi.mnh','B285215B',0.754338359921724],['FOx86_64:70A880D4','demos/pythagoras.mnh','E16C005D',0.700119751396102],['FOx86_64:70A880D4','demos/selfRefSeq.mnh','B9782DF7',1.49344127009078],['FOx86_64:70A880D4','demos/semordnilap.mnh','E143E26C',0.799162474991698],['FOx86_64:70A880D4','demos/sierpinskiCarpet.mnh','93DB1E41',0.280419817586473],['FOx86_64:70A880D4','demos/sierpinskiCurve.mnh','6F14F28F',0.767082898206805],['FOx86_64:70A880D4','demos/stringFib.mnh','BC31E798',0.400137583308717],['FOx86_64:70A880D4','demos/sudoku.mnh','2DE4E561',3.29642214268631],['FOx86_64:70A880D4','demos/travellingSalesmanProblem.mnh','352C375F',0.685069641242086],['FOx86_64:70A880D4','demos/ulam.mnh','AB9BD13C',0.0443495880811971],['FOx86_64:70A880D4','demos/unbiasedRandom.mnh','6E54791B',0.9782844229573],['FOx86_64:70A880D4','demos/vampire.mnh','502E0458',4.89008558515242],['FOx86_64:70A880D4','demos/weasel.mnh','B761590A',1.01977575954068],['FOx86_64:70A880D4','demos/wordCount.mnh','0888C9CA',3.5531383676321],['FOx86_64:70A880D4','demos/y.mnh','B05BC797',0.280773647774327],['FOx86_64:70A880D4','demos/zeckendorf.mnh','8E0DCDA3',1.18342820605442],['FOx86_64:70A880D4','packages/combinatorics.mnh','214F2728',0.073789107203301],['FOx86_64:70A880D4','packages/turtleGfx.mnh','64D95DF3',0.207113664655751],['FOx86_64:70A880D4','packages/shorten.mnh','1199480D',2.37839638760068],['FOx86_64:70A880D4','regTest/hash.mnh','8B0E2F82',0.0224944782969665],['FOx86_64:70A880D4','regTest/opTest.mnh','BAACFD98',0.0251452873635252],['FOi386:70A880D4','demos/100doors.mnh','7F7EEB25',0.058019000924201],['FOi386:70A880D4','demos/12_statements.mnh','381A590A',0.233700402575231],['FOi386:70A880D4','demos/24.mnh','2E95155C',0.0940130641144101],['FOi386:70A880D4','demos/99bottles.mnh','F59C9EE3',0.0540480740613099],['FOi386:70A880D4','demos/ackermann.mnh','1648CC01',1.28094581682044],['FOi386:70A880D4','demos/anagram.mnh','CA326D4B',0.742504581838688],['FOi386:70A880D4','demos/barnsleyFern.mnh','21EA430D',2.48209597581416],['FOi386:70A880D4','demos/benford.mnh','7A8AFDC3',0.37760029135795],['FOi386:70A880D4','demos/countTheCoins.mnh','AF9CEAE4',0.121672488604148],['FOi386:70A880D4','demos/dice7fromDice5.mnh','14692FD6',0.765788154576356],['FOi386:70A880D4','demos/digitSquareSum.mnh','54AF05B9',1.01250763639781],['FOi386:70A880D4','demos/forkbombFib.mnh','ADCDE15C',17.0655962656057],['FOi386:70A880D4','demos/fractalPlant.mnh','06E41346',0.976245320258777],['FOi386:70A880D4','demos/gol.mnh','1B0D5B8B',0.835090618587387],['FOi386:70A880D4','demos/hailstone.mnh','10E20077',1.79873901533546],['FOi386:70A880D4','demos/hofstadterConway.mnh','7F8D52DB',2.22804633531227],['FOi386:70A880D4','demos/huffmann.mnh','DF73642D',0.133184260405081],['FOi386:70A880D4','demos/kochCurve.mnh','E6BF2B95',3.03343802377857],['FOi386:70A880D4','demos/ludic.mnh','9327EE26',0.808436065727847],['FOi386:70A880D4','demos/magicSquare.mnh','7F117BC3',0.15315207005122],['FOi386:70A880D4','demos/maze.mnh','B85D74F3',0.124950657121829],['FOi386:70A880D4','demos/monteCarloPi.mnh','B285215B',0.912134040320183],['FOi386:70A880D4','demos/pythagoras.mnh','E16C005D',0.51151921239368],['FOi386:70A880D4','demos/selfRefSeq.mnh','B9782DF7',1.31049045254467],['FOi386:70A880D4','demos/semordnilap.mnh','E143E26C',0.69305166121022],['FOi386:70A880D4','demos/sierpinskiCarpet.mnh','93DB1E41',0.363693823524812],['FOi386:70A880D4','demos/sierpinskiCurve.mnh','6F14F28F',0.794896928210023],['FOi386:70A880D4','demos/stringFib.mnh','BC31E798',0.470598693588556],['FOi386:70A880D4','demos/sudoku.mnh','2DE4E561',3.22705908613857],['FOi386:70A880D4','demos/travellingSalesmanProblem.mnh','352C375F',0.647960102758504],['FOi386:70A880D4','demos/ulam.mnh','AB9BD13C',0.0451593070066849],['FOi386:70A880D4','demos/unbiasedRandom.mnh','6E54791B',0.941276492426255],['FOi386:70A880D4','demos/vampire.mnh','502E0458',4.86154584188348],['FOi386:70A880D4','demos/weasel.mnh','B761590A',0.905062735945109],['FOi386:70A880D4','demos/wordCount.mnh','0888C9CA',2.97199987468474],['FOi386:70A880D4','demos/y.mnh','B05BC797',0.253815066025481],['FOi386:70A880D4','demos/zeckendorf.mnh','8E0DCDA3',0.79749800278826],['FOi386:70A880D4','packages/combinatorics.mnh','214F2728',0.0615141214617978],['FOi386:70A880D4','packages/shorten.mnh','1199480D',1.85656534406867],['FOi386:70A880D4','packages/turtleGfx.mnh','64D95DF3',0.245079026927115],['FOi386:70A880D4','regTest/hash.mnh','8B0E2F82',0.0237229593195423],['FOi386:70A880D4','regTest/opTest.mnh','BAACFD98',0.0242473253027242],['LOx86_64:70A880D4','demos/100doors.mnh','7F7EEB25',0.0579543852503832],['LOx86_64:70A880D4','demos/12_statements.mnh','381A590A',0.232924231269266],['LOx86_64:70A880D4','demos/24.mnh','2E95155C',0.13388759222417],['LOx86_64:70A880D4','demos/99bottles.mnh','F59C9EE3',0.0246608656150613],['LOx86_64:70A880D4','demos/ackermann.mnh','1648CC01',1.49816256520307],['LOx86_64:70A880D4','demos/anagram.mnh','CA326D4B',0.698148858848043],['LOx86_64:70A880D4','demos/benford.mnh','7A8AFDC3',0.381082097150653],['LOx86_64:70A880D4','demos/countTheCoins.mnh','AF9CEAE4',0.111317141559255],['LOx86_64:70A880D4','demos/dice7fromDice5.mnh','14692FD6',0.668980952082592],['LOx86_64:70A880D4','demos/digitSquareSum.mnh','54AF05B9',0.997911151490456],['LOx86_64:70A880D4','demos/forkbombFib.mnh','ADCDE15C',21.1026300537289],['LOx86_64:70A880D4','demos/gol.mnh','1B0D5B8B',0.818038346465329],['LOx86_64:70A880D4','demos/hailstone.mnh','10E20077',1.81256559469915],['LOx86_64:70A880D4','demos/hofstadterConway.mnh','7F8D52DB',2.20005600025064],['LOx86_64:70A880D4','demos/huffmann.mnh','DF73642D',0.108650276476766],['LOx86_64:70A880D4','demos/ludic.mnh','9327EE26',0.826156816366165],['LOx86_64:70A880D4','demos/magicSquare.mnh','7F117BC3',0.167669449709365],['LOx86_64:70A880D4','demos/maze.mnh','B85D74F3',0.124492864862987],['LOx86_64:70A880D4','demos/monteCarloPi.mnh','B285215B',0.725897962060799],['LOx86_64:70A880D4','demos/pythagoras.mnh','E16C005D',0.511020692680177],['LOx86_64:70A880D4','demos/selfRefSeq.mnh','B9782DF7',1.32416195429141],['LOx86_64:70A880D4','demos/semordnilap.mnh','E143E26C',0.693150738576833],['LOx86_64:70A880D4','demos/sierpinskiCarpet.mnh','93DB1E41',0.292798681057093],['LOx86_64:70A880D4','demos/stringFib.mnh','BC31E798',0.368899105562377],['LOx86_64:70A880D4','demos/sudoku.mnh','2DE4E561',3.05531571609845],['LOx86_64:70A880D4','demos/ulam.mnh','AB9BD13C',0.0383570388007684],['LOx86_64:70A880D4','demos/unbiasedRandom.mnh','6E54791B',0.926362020081797],['LOx86_64:70A880D4','demos/vampire.mnh','502E0458',4.81813350773041],['LOx86_64:70A880D4','demos/weasel.mnh','B761590A',0.897250896787227],['LOx86_64:70A880D4','demos/wordCount.mnh','0888C9CA',3.37298438258745],['LOx86_64:70A880D4','demos/y.mnh','B05BC797',0.23782366578439],['LOx86_64:70A880D4','demos/zeckendorf.mnh','8E0DCDA3',0.853740268487855],['LOx86_64:70A880D4','packages/combinatorics.mnh','214F2728',0.0492050314071548],['LOx86_64:70A880D4','packages/shorten.mnh','1199480D',2.13884850953195],['LOx86_64:70A880D4','regTest/hash.mnh','8B0E2F82',0.0236093923776934],['LOx86_64:70A880D4','regTest/opTest.mnh','BAACFD98',0.0245124453704193],['LOi386:70A880D4','demos/100doors.mnh','7F7EEB25',0.0278395651562278],['LOi386:70A880D4','demos/12_statements.mnh','381A590A',0.167080468052518],['LOi386:70A880D4','demos/24.mnh','2E95155C',0.0915408292735265],['LOi386:70A880D4','demos/99bottles.mnh','F59C9EE3',0.0249357759364557],['LOi386:70A880D4','demos/ackermann.mnh','1648CC01',1.30380410094153],['LOi386:70A880D4','demos/anagram.mnh','CA326D4B',0.640659706449014],['LOi386:70A880D4','demos/benford.mnh','7A8AFDC3',0.352104904525277],['LOi386:70A880D4','demos/countTheCoins.mnh','AF9CEAE4',0.110699963971911],['LOi386:70A880D4','demos/dice7fromDice5.mnh','14692FD6',0.668378655680727],['LOi386:70A880D4','demos/digitSquareSum.mnh','54AF05B9',0.940114585128186],['LOi386:70A880D4','demos/forkbombFib.mnh','ADCDE15C',4.60283878193582],['LOi386:70A880D4','demos/gol.mnh','1B0D5B8B',0.943780839298825],['LOi386:70A880D4','demos/hailstone.mnh','10E20077',1.81180743745995],['LOi386:70A880D4','demos/hofstadterConway.mnh','7F8D52DB',2.2422848885476],['LOi386:70A880D4','demos/huffmann.mnh','DF73642D',0.0957596453579299],['LOi386:70A880D4','demos/ludic.mnh','9327EE26',0.811508638919804],['LOi386:70A880D4','demos/magicSquare.mnh','7F117BC3',0.153001300145661],['LOi386:70A880D4','demos/maze.mnh','B85D74F3',0.189992011152754],['LOi386:70A880D4','demos/monteCarloPi.mnh','B285215B',0.782893294068345],['LOi386:70A880D4','demos/pythagoras.mnh','E16C005D',0.496491173107643],['LOi386:70A880D4','demos/selfRefSeq.mnh','B9782DF7',1.14076700762871],['LOi386:70A880D4','demos/semordnilap.mnh','E143E26C',0.646866335625418],['LOi386:70A880D4','demos/sierpinskiCarpet.mnh','93DB1E41',0.318633202274214],['LOi386:70A880D4','demos/stringFib.mnh','BC31E798',0.354216858033396],['LOi386:70A880D4','demos/sudoku.mnh','2DE4E561',3.18373878036982],['LOi386:70A880D4','demos/ulam.mnh','AB9BD13C',0.10262613762734],['LOi386:70A880D4','demos/unbiasedRandom.mnh','6E54791B',0.924066009805756],['LOi386:70A880D4','demos/vampire.mnh','502E0458',4.96898995911579],['LOi386:70A880D4','demos/weasel.mnh','B761590A',0.994850326602318],['LOi386:70A880D4','demos/wordCount.mnh','0888C9CA',3.07232412788471],['LOi386:70A880D4','demos/y.mnh','B05BC797',0.252666081862117],['LOi386:70A880D4','demos/zeckendorf.mnh','8E0DCDA3',0.768337928225265],['LOi386:70A880D4','packages/combinatorics.mnh','214F2728',0.0585128213160715],['LOi386:70A880D4','packages/shorten.mnh','1199480D',1.84408590360181],['LOi386:70A880D4','regTest/hash.mnh','8B0E2F82',0.0242935352998757],['LOi386:70A880D4','regTest/opTest.mnh','BAACFD98',0.024613872397822]];'FDx86_64:40F7F96B','demos/12_statements.mnh','381A590A',0.256491833600317]];

synchronized markAsPassed(case,exeHash,runTime)->begin
  local contained:=false;
  passedTests:=passedTests.each(pt,
                    pt.get([0,1])==[exeHash,case] ? begin
                      contained:=true;
                      [exeHash,case,fileHash(ROOT_DIRECTORY&case),(runTime+pt.get(3))/2];
                    end : pt);
  contained ? void
            : passedTests|=[[exeHash,case,fileHash(ROOT_DIRECTORY&case),runTime]];
  void;
end;

private memoized memFileHash(case)->fileHash(ROOT_DIRECTORY&case);

synchronized isMarkedAsPassed(case,exeHash)->[exeHash,case,memFileHash(case)] in passedTests.getInner([0..2]);

//*Clear all passed tests
main('clear')->(passedTests:=[]);

//*Remove all passed tests related to versions with different code hashes
main('cleanup')->begin
  local currentExeHash:= executor.exec(["-codeHash"]).head.split(':').trailing;
  print('Cleaned up. ',size(passedTests:=passedTests.each(pt,split(pt.get(0),':').trailing = currentExeHash ? pt : void)),' passed tests remain.');
end;

//*Remove all passed tests related to versions with equal (!) code hashes
main('retest')->begin
  local currentExeHash:= executor.exec(["-codeHash"]).head.split(':').trailing;
  print('Cleaned up. ',size(passedTests:=passedTests.each(pt,split(pt.get(0),':').trailing = currentExeHash ? void : pt)),' passed tests remain.');
end;

//*Remove passed tests related to versions with equal (!) code hashes and containing one of the given test name parts
main('retest',...)->begin
  local currentExeHash:= executor.exec(["-codeHash"]).head.split(':').trailing;
  print('Cleaned up. ',size(passedTests:=passedTests.each(pt,split(pt.get(0),':').trailing = currentExeHash AND trueCount(pos(...,pt.get(1))>=0)>0 ? void : pt)),' passed tests remain.');
end;

//*Shows statistics on passed tests
main('compare')->main('compare','');

private printComparison(testFile)->begin
  local currentBin:=executor.exec(["-codeHash"]).head;
  local relAvgTimePerBin:=passedTests.get(passedTests.getInner(1)=testFile).getInner([0,3]).each(t,t.get(0)=currentBin ? t|'(current)' : t|'').sort({$x.get(1)<=$y.get(1)});
  printf("%s\t:\t%s\t%6.4f\t \t%g",
    split(relAvgTimePerBin.getInner(0),':').getInner(0),
    split(relAvgTimePerBin.getInner(0),':').getInner(1),
    relAvgTimePerBin.getInner(1),
    relAvgTimePerBin.getInner(2));
  print;
end;

private average(L:numericList)->L.agg(+)/size(L);
//*Shows statistics on passed tests containing infix
main('compare',infix,...)->
begin
  local filteredPassedTests:=(infix='')
                             ? passedTests
                             : passedTests.each(test,trueCount(pos(infix|...,test.get(1))>=0)>0 ? test : void);

  size(filteredPassedTests)<=0 ? print('No tests ',infix='' ? '' : 'matching "'&infix&'" ','have been passed.') : begin
    print('Calculating statistics over ',size(filteredPassedTests)," passed tests.\n");
  
    local timePerTest:=unique(filteredPassedTests.getInner(1)).each(testFile,begin
      local avg  :=average(filteredPassedTests.get(filteredPassedTests.getInner(1)=testFile).getInner(3));
      local sigma:=sqrt(average(sqr(avg-(filteredPassedTests.get(filteredPassedTests.getInner(1)=testFile).getInner(3)))));
      [testFile, avg,sigma];
    end).sort({$x.get(1)<=$y.get(1)});
  
    print('All tests ordered by time:');
    printf("%s\t%7.4f\t+/-\t%7.4f\ts",timePerTest.getInner(0),timePerTest.getInner(1),timePerTest.getInner(2));
    print;

    local currentBin:=executor.exec(["-codeHash"]).head;
    
    printf@('Fastest test: %s; average time: %6.4fs+/-%gs'| timePerTest.get(argMin(timePerTest.getInner(1))));
    printComparison(timePerTest.get(argMin(timePerTest.getInner(1))).get(0));
  
    printf@('Slowest test: %s; average time: %6.4fs+/-%gs'| timePerTest.get(argMax(timePerTest.getInner(1))));
    printComparison(timePerTest.get(argMax(timePerTest.getInner(1))).get(0));
    local testWithTime:=timePerTest.get(argMax(timePerTest.getInner(2)/timePerTest.getInner(1)));
    printf@('Test with the largest relative variance: %s; average time: %6.4fs+/-%gs'|(testWithTime));
    printComparison(testWithTime.get(0));
    
    currentBin:=currentBin.split(':');
    local relAvgTimePerBin:=unique((filteredPassedTests.getInner(0)).split(':').getInner(0)).each(bin,begin
      local passedByBin:=filteredPassedTests.get(((filteredPassedTests.getInner(0)).split(':').getInner(0))=bin).getInner([1,3]); //testFile and time
      [bin,100*(average(passedByBin.each(pass,pass.get(1)/((timePerTest.getInner([0,1])).get(pass.get(0)))))-1),bin=currentBin.get(0) ? " (current)":""];
    end).sort({$x.get(1)<=$y.get(1)});
    print('Average relative time of executables by flavour: ');
    printf("%s\t%s\t%%\t%s",relAvgTimePerBin.getInner(0),round(relAvgTimePerBin.getInner(1),2),relAvgTimePerBin.getInner(2));
    print;
    
    
    relAvgTimePerBin:=unique((filteredPassedTests.getInner(0)).split(':').getInner(1)).each(bin,begin
      local passedByBin:=filteredPassedTests.get(((filteredPassedTests.getInner(0)).split(':').getInner(1))=bin).getInner([1,3]); //testFile and time
      [bin,100*(average(passedByBin.each(pass,pass.get(1)/((timePerTest.getInner([0,1])).get(pass.get(0)))))-1),bin=currentBin.get(1) ? " (current)":""];
    end).sort({$x.get(1)<=$y.get(1)});
    print('Average relative time of executables by code hash: ');  
    printf("%s\t%s\t%%\t%s",relAvgTimePerBin.getInner(0),round(relAvgTimePerBin.getInner(1),2),relAvgTimePerBin.getInner(2));
  end;
end;
