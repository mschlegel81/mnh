USE hash;
private TEST_DIRECTORY    :=replace(splitFileName(myPath)%"relative",splitFileName(myPath)%"filename","");
private ROOT_DIRECTORY    :=TEST_DIRECTORY&'../';
persistent passedTests:=[];

synchronized markAsPassed(case,exeHash,runTime)->begin
  local contained:=false;
  passedTests:=each(pt,passedTests,
                    pt%0=exeHash AND pt%1=case ? begin
                      contained:=true;
                      [exeHash,case,fileHash(ROOT_DIRECTORY&case),(runTime+pt%3)/2];
                    end : pt);
  contained ? void
            : passedTests|=[[exeHash,case,fileHash(ROOT_DIRECTORY&case),runTime]];
  void;
end;

synchronized isMarkedAsPassed(case,exeHash)->[exeHash,case,fileHash(case)] in passedTests%%[0..2];

//*Clear all passed tests
main('clear')->(passedTests:=[]);

//*Remove all passed tests related to versions with different code hashes
main('cleanup')->begin
  local currentExeHash:= executor.exec(["-codeHash"]).head.split(':').trailing;
  print('Cleaned up. ',size(passedTests:=each(pt,passedTests,split(pt%0,':').trailing = currentExeHash ? pt : void)),' passed tests remain.');
end;

//*Remove all passed tests related to versions with equal (!) code hashes
main('retest')->begin
  local currentExeHash:= executor.exec(["-codeHash"]).head.split(':').trailing;
  print('Cleaned up. ',size(passedTests:=each(pt,passedTests,split(pt%0,':').trailing = currentExeHash ? void : pt)),' passed tests remain.');
end;

private average(L:numericList)->each(x,L,+)/size(L);
//*Shows statistics on passed tests
main('compare')->size(passedTests)<=0 ? print('No tests have been passed.') : begin
  print('Calculating statistics over ',size(passedTests)," passed tests.\n");

  local timePerTest:=each(testFile,unique(passedTests%%1),begin
    local avg  :=average(passedTests%(passedTests%%1=testFile)%%3);
    local sigma:=sqrt(average(sqr(avg-(passedTests%(passedTests%%1=testFile)%%3))));
    [testFile, avg,sigma];
  end).sort({$x%1<=$y%1});

  print('All tests ordered by time:');
  printf("%X%\t%I%s\t+/-\t%I%s",timePerTest%%0,round(timePerTest%%1,4),round(timePerTest%%2,4));
  print;

  printf@('Fastest test: %X%; average time: %0.0000%s+/-%0.0000%s'| timePerTest%(argMin(timePerTest%%1)));
  local testFile:=timePerTest%(argMin(timePerTest%%1))%0;
  local relAvgTimePerBin:=(passedTests%(passedTests%%1=testFile)%%[0,3]).sort({$x%1<=$y%1});
  printf("%X%\t:\t%X%\t%I%\ts",
    split(relAvgTimePerBin%%0,':')%%0,
    split(relAvgTimePerBin%%0,':')%%1,
    round(relAvgTimePerBin%%1,3));
  print;

  printf@('Slowest test: %X%; average time: %0.0000%s+/-%0.0000%s'| timePerTest%(argMax(timePerTest%%1)));
  local testFile:=timePerTest%(argMax(timePerTest%%1))%0;
  local relAvgTimePerBin:=(passedTests%(passedTests%%1=testFile)%%[0,3]).sort({$x%1<=$y%1});
  printf("%X%\t:\t%X%\t%I%\ts",
    split(relAvgTimePerBin%%0,':')%%0,
    split(relAvgTimePerBin%%0,':')%%1,
    round(relAvgTimePerBin%%1,3));
  print;

  local testWithTime:=timePerTest%(argMax(timePerTest%%2/timePerTest%%1));
  printf@('Test with the largest relative variance: %X%; average time: %0.0000%s+/-%0.0000%s'|(testWithTime));
  local relAvgTimePerBin:=(passedTests%(passedTests%%1=testWithTime%0)%%[0,3]).sort({$x%1<=$y%1});
  printf("%X%\t:\t%X%\t%I%\ts",
    split(relAvgTimePerBin%%0,':')%%0,
    split(relAvgTimePerBin%%0,':')%%1,
    round(relAvgTimePerBin%%1,3));
  print;

  local currentExeHash:= executor.exec(["-codeHash"]).head.split(':');
  local currentBin:=currentExeHash%0;
  local relAvgTimePerBin:=each(bin,unique((passedTests%%0).split(':')%%0),begin
    local passedByBin:=passedTests%(((passedTests%%0).split(':')%%0)=bin)%%[1,3]; //testFile and time
    [bin,100*(average(each(pass,passedByBin,pass%1/((timePerTest%%[0,1])%(pass%0))))-1),bin=currentBin ? " (current)":""];
  end).sort({$x%1<=$y%1});
  print('Average relative time of executables by flavour: ');
  printf("%I20%\t%I%\t%%\t%X%",relAvgTimePerBin%%0,round(relAvgTimePerBin%%1,2),relAvgTimePerBin%%2);
  print;
  
  currentBin:=currentExeHash%1;  
  relAvgTimePerBin:=each(bin,unique((passedTests%%0).split(':')%%1),begin
    local passedByBin:=passedTests%(((passedTests%%0).split(':')%%1)=bin)%%[1,3]; //testFile and time
    [bin,100*(average(each(pass,passedByBin,pass%1/((timePerTest%%[0,1])%(pass%0))))-1),bin=currentBin ? " (current)":""];
  end).sort({$x%1<=$y%1});
  print('Average relative time of executables by code hash: ');  
  printf("%I20%\t%I%\t%%\t%X%",relAvgTimePerBin%%0,round(relAvgTimePerBin%%1,2),relAvgTimePerBin%%2);
end;
