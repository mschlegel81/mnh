USE hash, passedTestsStore;

private TEST_DIRECTORY    :=replace(splitFileName(myPath).get("relative"),splitFileName(myPath).get("filename"),"");
private ROOT_DIRECTORY    :=TEST_DIRECTORY&'../';
private NEED_PLOT_IDX:=3;

private mutable previouslyPassedTests:=0;

private expectedResultName  (scriptname,is32Bit:boolean)->TEST_DIRECTORY&replace(splitFileName(scriptname).filename&"#",".mnh#",(is32Bit?".32bit":"")&".expected");
private lastResultName      (scriptname,is32Bit:boolean)->TEST_DIRECTORY&replace(splitFileName(scriptname).filename&"#",".mnh#",(is32Bit?".32bit":"")&".last");
private expectedResultExists(scriptname,is32Bit:boolean)->fileExists(expectedResultName(scriptname,is32Bit));
private expectedResult      (scriptname,is32Bit:boolean)->fileLines (expectedResultName(scriptname,is32Bit));
private storeResult(filename,data)-> writeFileLines(filename,data) ? void : void;

private TEST_CASE_DEFINITIONS:=
//script name                  output                     delete output? use plotting? spearate 32/64-bit results
[["demos/100doors.mnh",        "",                        false,         false,        false],
[ "demos/12_statements.mnh",   "",                        false,         false,        false],
[ "demos/24.mnh",              "",                        false,         false,        false],
[ "demos/99bottles.mnh",       "",                        false,         false,        false],
[ "demos/ackermann.mnh",       "",                        false,         false,        false],
[ "demos/anagram.mnh",         "",                        false,         false,        false],
[ "demos/asciiCalendar.mnh",   "",                        false,         false,        false],
[ "demos/barnsleyFern.mnh",    "demos/barnsleyFern.png",  true,          true,         false],
[ "demos/benford.mnh",         "",                        false,         false,        false],
[ "demos/stringFib.mnh",       "",                        false,         false,        false],
[ "demos/countTheCoins.mnh",   "",                        false,         false,        false],
[ "demos/dice7fromDice5.mnh",  "",                        false,         false,        false],
[ "demos/digitSquareSum.mnh",  "",                        false,         false,        false],
[ "demos/ethiopian.mnh",       "",                        false,         false,        false],
[ "demos/fractalPlant.mnh",    "demos/fractalPlant.png",  true,          true,         false],
[ "demos/gol.mnh",             "",                        false,         false,        false],
[ "demos/hailstone.mnh",       "",                        false,         false,        false],
[ "demos/hofstadterConway.mnh","",                        false,         false,        false],
[ "demos/huffmann.mnh",        "",                        false,         false,        false],
[ "demos/importing.mnh",       "",                        false,         false,        true],
[ "demos/kochCurve.mnh",       "demos/kochCurve.png",     true,          true,         false],
[ "demos/ludic.mnh",           "",                        false,         false,        false],
[ "demos/magicSquare.mnh",     "",                        false,         false,        false],
//script name                            output                                  delete output? use plotting? spearate 32/64-bit results
[ "demos/maze.mnh",                      "",                                     false,         false,        false],
[ "demos/monteCarloPi.mnh",              "",                                     false,         false,        false],
[ "demos/pythagoras.mnh",                "",                                     false,         false,        false],
[ "demos/selfRefSeq.mnh",                "",                                     false,         false,        false],
[ "demos/semordnilap.mnh",               "",                                     false,         false,        false],
[ "demos/sierpinskiCarpet.mnh",          "",                                     false,         false,        false],
[ "demos/sierpinskiCurve.mnh",           "demos/sierpinskiCurve.png",            true,          true,         false],  
[ "demos/travellingSalesmanProblem.mnh", "demos/travellingSalesmanProblem.png",  true,          true,         false],
[ "demos/sudoku.mnh",                    "",                                     false,         false,        false],
[ "demos/ulam.mnh",                      "",                                     false,         false,        false],
[ "demos/unbiasedRandom.mnh",            "",                                     false,         false,        false],
[ "demos/vampire.mnh",                   "",                                     false,         false,        false],
[ "demos/weasel.mnh",                    "",                                     false,         false,        false],
[ "demos/wordCount.mnh",                 "",                                     false,         false,        false],
[ "demos/y.mnh",                         "",                                     false,         false,        false],
[ "demos/zeckendorf.mnh",                "",                                     false,         false,        false],
//script name                    output                       delete output? use plotting? spearate 32/64-bit results?
[ "packages/combinatorics.mnh",  "",                          false,         false,        false],
[ "packages/turtleGfx.mnh",      "packages/turtleGfx.png",    true,          true,         false],
[ "regTest/hash.mnh",            "",                          false,         false,        false],
[ "regTest/opTest.mnh",          "",                          false,         false,        false],
[ "regTest/execExamples.mnh",    "",                          false,         true ,        true]];

//*Display uncovered scripts
main('uncovered')->begin
  local coveredTests:=(TEST_CASE_DEFINITIONS.getInner(0)).unique.splitFileName.getInner('expanded');
  local first:=true;
  (files(ROOT_DIRECTORY&'demos/*.mnh')|files(ROOT_DIRECTORY&'packages/*.mnh')).unique.splitFileName.getInner('expanded')
  .each(script,
       script in coveredTests ? void : begin
         first ? begin
           first:=false;
           print('The following scripts are not covered by tests:');
         end : void;
         print('  ',script);
       end);
  first ? print('There are no scrips uncovered by tests') : void;
end;

//*Executes all tests with current interpreter
main->main(executor);

private memoized is64Bit(exe)->'x86_64'==(exec(exe,['-version']).split(' ').trailing.trailing);

private runTest(executor,exeHash, scriptName,outputFileName,delOutputBefore,separate32BitOutput,FMT_STRING)->
  begin
    local SRF:=separate32BitOutput AND not(executor.is64Bit);
    delOutputBefore and outputFileName<>''
    ? deleteFile(ROOT_DIRECTORY&outputFileName)
    : void;
    local startTime:=time;
    local scriptOutput:=exec(executor,["-det",ROOT_DIRECTORY&scriptName]) | (outputFileName="" ? [] : fileHash(ROOT_DIRECTORY&outputFileName));
    local scriptTime:=time-startTime;
    when(
      not(expectedResultExists(scriptName,SRF)),
        begin
          printf(FMT_STRING,scriptName,scriptTime,"No reference result found. Storing "&storeResult(expectedResultName(scriptName,SRF),scriptOutput));
          []; //Test did not fail, so it is interpreted as passed
        end,
      expectedResult(scriptName,SRF)==scriptOutput,
        begin
          printf(FMT_STRING,scriptName,scriptTime,'o.k.');
          markAsPassed(scriptName,exeHash,scriptTime);
          [];
        end,
        begin
          printf(FMT_STRING,scriptName,scriptTime,"Results differ!");
          storeResult(lastResultName(scriptName,SRF),scriptOutput);
          [expectedResultName(scriptName,SRF),
           lastResultName    (scriptName,SRF)];
        end);
  end;


//*Executes tests; 
//*Optionals can be: "randomSample" or (parts of) test case names
main(exe,...)->begin
  previouslyPassedTests:=0;
  local testFilter       := ...;
  local currentExeInfo   := exe.exec(["-version"] ).head;
  local currentExeHash   := exe.exec(["-codeHash"]).head;
  local currentExeCanPlot:= copy(currentExeInfo,5,4)="full";
  local randomSample     := testFilter==['randomSample'];
  local specific_tests   := not((testFilter==[]) or randomSample);
  randomSample ? testFilter:=[] : void;
  local testCases:=TEST_CASE_DEFINITIONS.each(case,
                   (currentExeCanPlot OR not(case.get(NEED_PLOT_IDX))) AND
                   (testFilter==[] OR testFilter.each(f,pos(f,case.get(0))>=0,OR)) ? case.get([0..2,4]) : void).sort;

  //count already passed tests and remove them from the list
  testCases:=testCases.each(test,
    isMarkedAsPassed(test.get(0),currentExeHash) and not(specific_tests)
    ? begin previouslyPassedTests+=1; void; end
    : test);
  local stopAtTime:=systime+1;
  randomSample AND size(testCases)>0 ? begin
    testCases:=testCases.get(sortPerm(size(testCases).random));
    stopAtTime:=systime+5/(24*60*60);
  end : void;
  local FMT_STRING:="%{$0}-"&(size(testCases)=0 ? 0 : max(length(testCases.getInner(0))))&"s %{$1:numeric ? format('%7.2fsec',$1) : ''}s %{$2}s";
  local first:=true;
  local failedTestOut:=[];
  local allPassed:=true;
  size(testCases)<=0 ? void :
  testCases.each(test,systime>stopAtTime ? false : begin
    first ? begin
      local msg1:="| Starting test runs with executable "&exe;
      local msg2:="| "&currentExeInfo;
      msg1&=repeat(' ',length(msg2)-length(msg1));
      msg2&=repeat(' ',length(msg1)-length(msg2))&' |';
      msg1&=' |';
      local msg3:='+'&repeat('-',length(msg1)-2)&'+';
      printf('%s',[msg3,msg1,msg2,msg3]);
    end : void;
    first:=false;
    local testOutput:=runTest@(exe|currentExeHash|test|FMT_STRING);
    testOutput==[] OR begin
      allPassed:=false;
      fileExists('kdiff.bat')
      ? ask("Expected output is : "&testOutput.get(0)&
          "\n    Last output is : "&testOutput.get(1)&
          "\nDo you want to view the diff?",['No','Yes'])='Yes'
        ? begin 
            execPipeless('cmd',['/c','kdiff.bat']|testOutput);
            ask('Shall the last result be the new expected result?',['No','Yes'])='Yes' 
            ? begin
                deleteFile(testOutput.get(0));
                moveFile(testOutput.get(1),testOutput.get(0));
                allPassed:=true;
              end
            : void;
          end
        : void
      : printf@('Compare files %s and %s'|testOutput);      
      allPassed;
    end;
    allPassed;
  end,AND);
  first ? print('All tests have been passed by ',exe) : void;
  
  size(testCases)>0 ? print(previouslyPassedTests,' Tests were already marked as passed.') : void;
  allPassed;
end;
