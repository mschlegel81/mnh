USE '../demos/inputs/inputs.mnh',
    testLog;

private demosRoot:=myPath.extractFileDirectory&'/../demos/';
private memoized allDemos:=files(demosRoot&'*.mnh').sort;
datastore runTimes;

plotters:=demosRoot&[
'barnsleyFern.mnh',
'fractalPlant.mnh',
'kochCurve.mnh',
'rotatingCube.mnh',
'sierpinskiCurve.mnh',
'travellingSalesmanProblem.mnh',
'turtleGfx.mnh',
'heart.mnh'];

private testParameters((demosRoot&'24.mnh'            ))->['demo'];
private testParameters((demosRoot&'diff.mnh'          ))->[dict,editedDict];
private testParameters((demosRoot&'emptyFolders.mnh'  ))->['.'];
private testParameters((demosRoot&'findDuplicates.mnh'))->['.'];
private testParameters(scriptFileName:string)->[];

private skipFile((demosRoot&'3body.mnh'              ))->true;
private skipFile((demosRoot&'htmlFunctionPlotter.mnh'))->true;
private skipFile((demosRoot&'simpleServer.mnh'       ))->true;
private skipFile((demosRoot&'timer.mnh'              ))->true;
private skipFile(file in plotters)->not(mnhInfo['isFullVersion']);
private skipFile(scriptFileName:string)->false;

private isSmokeTest((demosRoot&'task.mnh'          ))->true;
private isSmokeTest((demosRoot&'findDuplicates.mnh'))->true;
private isSmokeTest((demosRoot&'emptyFolders.mnh'  ))->true;
private isSmokeTest((demosRoot&'timedExamples.mnh' ))->true;
private isSmokeTest(scriptFileName:string)->false;

private checkAfterTest(file in plotters)->printf('png hash: %x',file.changeFileExt('.png').fileStats[3]);
private checkAfterTest(file)->void;

testFile(scriptFileName:string,doLog:boolean)->
scriptFileName.skipFile
? note('Not testing ',scriptFileName)
: begin
    resetRandom;
    doCollect(not(scriptFileName.isSmokeTest));
    local logName:=extractFileNameOnly(scriptFileName);
    print('***** ',logName,' *****');
    local scriptMain:=import(scriptFileName)['rules','main','rule'];
    isVoid(scriptMain) ? fail(scriptFileName,' does not have a main rule') : void;
    local startTime:=time;
    scriptMain@testParameters(scriptFileName);
    local scriptTime:=time-startTime;
    checkAfterTest(scriptFileName);
    doLog ? runTimes|=[[logName,mnhInfo['flavour'],scriptTime]] : void;
    note('Time for ',logName,': ',scriptTime);
  end;

private printExecute([])->void;
private printExecute(code:stringList)->begin
  local out:=sandBoxExecute(code).each(message,message.get(0)=="timing_info" ? void : message);
  out.each(output,output[0]='printline' ? output[2] : format("%s %s",output[0],output[2]))
     .join("\n")
     .print;
end;

private executeExamples->begin
  resetRandom;
  doCollect(true);
  print('***** examples from file *****');
  local codeToExecute:=[];
  local inputLines:=fileLines(myPath.extractFileDirectory&'/../resources/examples.txt');
  print('Examples file has ',inputLines.size,' lines');
  inputLines.each(line,
    line==''
    ? begin
        printExecute(codeToExecute);
        codeToExecute:=[];
      end
    : line.matches('==END REG TEST==')
      ? doCollect(false)
      : codeToExecute|=line);
  printExecute(codeToExecute);
end;

testAll(logging:boolean)->
  begin
   allDemos.map({testFile($0,logging)});
   executeExamples;
   validateCollectedOutput(logging);
  end;

main->testAlreadyPassed
      ? print('Tests skipped. They have already been passed.')
      : testAll(true) orElse ;

//*Test again, even if all tests have been passed
main('retest')->testAll(true);

//*Test again, without logging passed tests
main('noLog')->testAll(false);

//*Export datastore
main('export',filename:string)->writeFile(filename,runTimes.serialize);
