USE testLog,mnhInfo,
    '../demos/24.mnh',
    '../demos/diff.mnh',
    '../demos/100doors.mnh',
    '../demos/12_statements.mnh',
    '../demos/99bottles.mnh',
    '../demos/ackermann.mnh',
    '../demos/aks.mnh',
    '../demos/aliquotSequence.mnh',
    '../demos/anagram.mnh',
    '../demos/asciiCalendar.mnh',
    '../demos/balancedBrackets.mnh',
    '../demos/benford.mnh',
    '../demos/bestShuffle.mnh',
    '../demos/clock.mnh',
    '../demos/concatInts.mnh',
    '../demos/conventions.mnh',
    '../demos/countTheCoins.mnh',
    '../demos/dice7fromDice5.mnh',
    '../demos/digitSquareSum.mnh',
    '../demos/ethiopian.mnh',
    '../demos/fibonacci.mnh',
    '../demos/fibonacciWord.mnh',
    '../demos/fractran.mnh',
    '../demos/gcd.mnh',
    '../demos/gol.mnh',
    '../demos/hailstone.mnh',
    '../demos/hamming.mnh',
    '../demos/harshad.mnh',
    '../demos/hash.mnh',
    '../demos/helloWorld.mnh',
    '../demos/hereDoc.mnh',
    '../demos/hofstadterConway.mnh',
    '../demos/hofstadter_sequences.mnh',
    '../demos/huffmann.mnh',
    '../demos/josephus.mnh',
    '../demos/lastSundays.mnh',
    '../demos/levenshtein.mnh',
    '../demos/lindenmayer.mnh',
    '../demos/ludic.mnh',
    '../demos/magicSquare.mnh',
    '../demos/maze.mnh',
    '../demos/memoization.mnh',
    '../demos/monteCarloPi.mnh',
    '../demos/opTest.mnh',
    '../demos/pascal.mnh',
    '../demos/pernicousNumbers.mnh',
    '../demos/pythagoras.mnh',
    '../demos/quine.mnh',
    '../demos/quine2.mnh',
    '../demos/range_extract_expand.mnh',
    '../demos/roman.mnh',
    '../demos/selfRefSeq.mnh',
    '../demos/semordnilap.mnh',
    '../demos/setConsolidation.mnh',
    '../demos/shannonEntropy.mnh',
    '../demos/sierpinskiCarpet.mnh',
    '../demos/sierpinskiTriangle.mnh',
    '../demos/stringFib.mnh',
    '../demos/subGen.mnh',
    '../demos/sudoku.mnh',
    '../demos/ulam.mnh',
    '../demos/unbiasedRandom.mnh',
    '../demos/vampire.mnh',
    '../demos/variadic.mnh',
    '../demos/weasel.mnh',
    '../demos/wordCount.mnh',
    '../demos/y.mnh',
    //The following tests are flavor dependent
    '../demos/zeckendorf.mnh',
    '../demos/continuedFractions.mnh',
    '../demos/piPlots.mnh',
    '../demos/rk4.mnh',
    '../demos/root.mnh',
    //The last 8 imports are plotting
    '../demos/barnsleyFern.mnh',
    '../demos/fractalPlant.mnh',
    '../demos/kochCurve.mnh',
    '../demos/rotatingCube.mnh',
    '../demos/sierpinskiCurve.mnh',
    '../demos/travellingSalesmanProblem.mnh',
    '../demos/turtleGfx.mnh',
    '../demos/heart.mnh';
private plotDemoCount:=8;

private testPlotting(import:string, file:string)->begin
  local filePath:=(myPath.splitFileName['directory'])&'/'&file;
  deleteFile(filePath);
  resetOptions;
  executeMainCall(import);
  printf('Hash of %s is %x',filePath,filePath.fileContents.hash);
end;

private printExecute([])->void;
private printExecute(code:stringList)->begin
  local out:=sandBoxExecute(code).each(message,message.get(0)=="timing_info" ? void : message);
  out.each(output,output[0]='printline' ? output[2] : format("%s %s",output[0],output[2]))
     .join("\n")
     .print;
end;

private executeExamples(examplesFile:string)->begin
  print('***** examples from file *****');
  local codeToExecute:=[];
  print('Examples file has ',fileLines(examplesFile).size,' lines');
  fileLines(examplesFile).each(line,
    line=='' ? begin
      printExecute(codeToExecute);
      codeToExecute:=[];
    end : codeToExecute|=line);
  printExecute(codeToExecute);
end;

private doAnalysis(rt:list)->begin
  {isGuiActive ? showTable($L,'Test times') : $L.each(line,line.join("\t")).join("\n").print}(
  [['Test','o.s.','25%ile','opt.median','75%ile','d.s.','25%ile','deb.median','75%ile','ratio']]|
  rt.getInner(0).unique.each(testCase,
    begin
      local debugSamples:=rt[rt.getInner(0)=testCase];
      local optSamples  :=debugSamples.each(sample,sample[1].matches('^[F|L]D') ? void : sample[2]).sort;
            debugSamples:=debugSamples.each(sample,sample[1].matches('^[F|L]D') ? sample[2] : void).sort;
      [testCase,
       optSamples.size,
       optSamples[[1,2,3]*(optSamples.size div 4)].round(4),
       debugSamples.size,
       debugSamples[[1,2,3]*(debugSamples.size div 4)].round(4),
       round(debugSamples[debugSamples.size div 2]/optSamples[optSamples.size div 2],2)].flatten;
    end)
  );

  [true,false].each(debugVersions,begin
    local filteredTests:=rt.each(t,t[1].matches('^[F|L]D')=debugVersions ? t : void);
    print("=====================================================================\n",
          " Analysis for ",debugVersions ? '' : 'non-',"debug flavours\n",
          "=====================================================================\n");
    local tests  :=filteredTests.getInner(0).unique;
    local flavors:=filteredTests.getInner(1).unique;
    local average:={$X.agg(+)/$X.size};
    local relativeSigma:={begin
      local avg:=average($X);
      local variance:=average(($X-avg)^2);
      sqrt(variance)/avg;
    end};
    local testsWithTime:=tests.each(t,[t,filteredTests.get(filteredTests.getInner(0)=t).getInner(2).average,filteredTests.get(filteredTests.getInner(0)=t).getInner(2).relativeSigma]).sort(1);
    local totalTime:=testsWithTime.getInner(1).agg(+);
    print("Fast tests: ");
    print(testsWithTime.head(5)    .each(t,"  \v"&t[0]&"\t"&t[1]&"\vs\t"&round(100*t[1]/totalTime,3)&"\v%\n",&));
    print("Slow tests: ");
    print(testsWithTime.trailing(5).each(t,"  \v"&t[0]&"\t"&t[1]&"\vs\t"&round(100*t[1]/totalTime,3)&"\v%\n",&));
    local testsWithTime:=testsWithTime.sort(2);
    print("Tests with big relative variance: ");
    print(testsWithTime.trailing(5).each(t,"  \v"&t[0]&"\t"&t[1]&"\v+/-\v"&t[1]*t[2]&"s\n",&));
    local testsWithTime:=testsWithTime[sortPerm(testsWithTime.getInner(1)*testsWithTime.getInner(2))];
    print("Tests with big absolute variance: ");
    print(testsWithTime.trailing(5).each(t,"  \v"&t[0]&"\t"&t[1]&"\v+/-\v"&t[1]*t[2]&"s\n",&));
    totalTime:=filteredTests.getInner(2).agg(+);

    local medianTimes:=filteredTests
                       .group(filteredTests.getInner([0,1]),{[$x[0],$x[1],$x[2]|$y[2]]}) //group by flavour + case
                       .each(entry,entry[[0,1]]|(entry[2]:list ? entry[2].sort[entry[2].size div 2] : entry[2])) //median time per test case
                       .group(1,{[$x[0],$x[1],$x[2]+$y[2]]}) //group by flavour
                       .getInner([1,2]); //drop case
    totalTime:=medianTimes.getInner(1).agg(+);
    print('Median test time by flavour: ');
    print(flavors.each(f,"  \v"&f&"\t"&round(medianTimes[f],3)&"\vs\t"&round(100*medianTimes[f]/totalTime,3)&"\v%\n",&));
  end);
end;

//*Analyze stored run times
main('analyze')->doAnalysis(runTimes);
//*Analyze stored run times
main('analyze',inputFile)->doAnalysis(fileContents(inputFile).deserialize);

//*Export datastore
main('export',filename:string)->writeFile(filename,runTimes.serialize(2));

//*Test without examples file
main->main('',false);
//*Retest without examples file
main('retest')->main('',true);
//*Test with examples file
main(examplesFile:string)->main(examplesFile,false);
//*Retest with examples file
main(examplesFile:string,'retest')->main(examplesFile,true);


datastore runTimes;

private executeMainCall(import:string,...)->begin
  print('***** ',import,' *****');
  local t0:=time;
  toId(import&'.main')@...;
  local dt:=time-t0;
  runTimes|=[[import,flavour(executor),dt]];
  void;
end;

main(examplesFile:string,forceTest:boolean)->not(forceTest) AND testAlreadyPassed ? print('Tests skipped. They have already been passed.') :
begin
  resetRandom;
  collectOutput;
  executeMainCall('24','demo');
  executeMainCall('diff','test');
  inspect['uses'].getInner(0).leading(plotDemoCount).tail(4).each(import,executeMainCall(import));
  canPlot
  ? inspect['uses'].getInner(0).trailing(plotDemoCount).each(import,testPlotting(import,'../demos/'&import&'.png'))
  : void;
  examplesFile==''
  ? void
  : executeExamples(examplesFile);
  validateCollectedOutput;
end;
