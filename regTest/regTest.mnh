USE '../demos/inputs/inputs.mnh',
    testLog, mnhInfo;

private demosRoot:=expandedFileName(myPath.extractFileDirectory&'/../demos/');
private memoized allDemos:=files(demosRoot&'*.mnh').sort;
datastore runTimes;

plotters:=demosRoot&[
'barnsleyFern.mnh',
'fractalPlant.mnh',
'kochCurve.mnh',
'rotatingCube.mnh',
'sierpinskiCurve.mnh',
'travellingSalesmanProblem.mnh',
'turtleGfx.mnh',
'heart.mnh'];

private testParameters((demosRoot&'24.mnh'            ))->['demo'];
private testParameters((demosRoot&'clock.mnh'         ))->['once'];
private testParameters((demosRoot&'diff.mnh'          ))->[dict,editedDict];
private testParameters((demosRoot&'emptyFolders.mnh'  ))->['.'];
private testParameters((demosRoot&'fannkuch.mnh'      ))->['7'];
private testParameters((demosRoot&'findDuplicates.mnh'))->['.'];
private testParameters((demosRoot&'gol.mnh'           ))->['40','40','9'];
private testParameters((demosRoot&'pascal.mnh'        ))->['12'];
private testParameters((demosRoot&'oeis.mnh'          ))->['A000002','50'];
private testParameters(scriptFileName:string)->[];

private skipFile((demosRoot&'3body.mnh'              ))->true;
private skipFile((demosRoot&'htmlFunctionPlotter.mnh'))->true;
private skipFile((demosRoot&'simpleServer.mnh'       ))->true;
private skipFile((demosRoot&'helloWorldHttp.mnh'     ))->true;
private skipFile((demosRoot&'ipcDatastore.mnh'       ))->true;
private skipFile(file in plotters)->not(mnhInfo['isFullVersion']);
private skipFile(scriptFileName:string)->false;

private isSmokeTest((demosRoot&'task.mnh'          ))->true;
private isSmokeTest((demosRoot&'findDuplicates.mnh'))->true;
private isSmokeTest((demosRoot&'clock.mnh'         ))->true;
private isSmokeTest((demosRoot&'emptyFolders.mnh'  ))->true;
private isSmokeTest((demosRoot&'timedExamples.mnh' ))->true;
private isSmokeTest(scriptFileName:string)->false;

private printAndReturn(...)->printDirect@("\rExecuting: "|...| repeat(' ',20)) orElse join('***** '|...|' *****');
private checkAfterTest(file in plotters)->format('png hash: %x',file.changeFileExt('.png').fileStats[3]);
private checkAfterTest(file)->void;

testFile(scriptFileName:string,doLog:boolean)->
scriptFileName.skipFile
? note('Not testing ',scriptFileName)
: begin
    mnhInfo['isFullVersion']
    ? "plot.resetOptions".toExpression()()
    : void;

    local logName:=extractFileNameOnly(scriptFileName);
    local output:=printAndReturn(logName);
    local startTime:=time;
    output|=runScript(scriptFileName,testParameters(scriptFileName),true)
            .filter({$e.head=='printline'})
            .getInner(2)
            .split("\n")
            .flatten;
    local scriptTime:=time-startTime;
    output|=checkAfterTest(scriptFileName);
    doLog ? runTimes|=[[logName,mnhInfo['flavour'],scriptTime]] : void;
    note('Time for ',logName,': ',scriptTime);
    scriptFileName.isSmokeTest
    ? void
    : output;
  end;

private printExecute([])->void;
private printExecute(code:stringList)->begin
  local out:=sandBoxExecute(code).each(message,message.get(0)=="timing_info" ? void : message);
  out.each(output,output[0]='printline' ? output[2] : format("%s %s",output[0],output[2])).split("\n").flatten;
end;

private executeExamples(doLog:boolean)->begin
  resetRandom;
  local output:=printAndReturn('examples from file');
  local collectOut:=true;
  local codeToExecute:=[];
  local inputLines:=fileLines(myPath.extractFileDirectory&'/../resources/examples.txt');
  local startTime:=time;
  inputLines.each(line,
    line==''
    ? begin
        collectOut
        ? output|=printExecute(codeToExecute)
        :         printExecute(codeToExecute);
        codeToExecute:=[];
      end
    : line.matches('==END REG TEST==')
      ? collectOut:=false
      : codeToExecute|=line);
  printExecute(codeToExecute);
  local scriptTime:=time-startTime;
  doLog ? runTimes|=[["examples/onlineHelp",mnhInfo['flavour'],scriptTime]] : void;
  note('Time for examples/onlineHelp: ',scriptTime);
  output;
end;

testAll(logging:boolean)->
  validateCollectedOutput(logging,
                          allDemos.map({testFile($0,logging)}).flatten |
                          executeExamples(logging));

main->testAlreadyPassed
      ? print('Tests skipped. They have already been passed.')
      : testAll(true) orElse ;

//*Test again, even if all tests have been passed
main('retest')->testAll(true);

//*Test again, without logging passed tests
main('noLog')->testAll(false);

//*Export datastore
main('export',filename:string)->writeFile(filename,runTimes.serialize);

//*Display info on test cases
main('info')->allDemos.map({[$0,$0.isSmokeTest ? 'SMOKE' : '',$0.skipFile ? 'SKIP' : '',$0.testParameters.join(" ")].join("\t")}).join("\n").print;

//*Limit number of samples to count per flavour/testcase retaining the newest samples
main('limit',count:string)->begin
  local limit:=count.softCast;
  limit.isInt AND limit>1
  ? begin
      print('Samples @pre : ',runTimes.size);
      print('Filtering samples to be retained (per flavour and testcase)');
      local indexLists:=runTimes.pEach(sample,sample.leading|index).group(runTimes.getInner([0,1]),{[$x[0],$x[1],$x[2]|$y[2]]}).getInner(2).each(i,i.isList ? i : [i]);
      indexLists.each(list,list.size>limit,OR) //update only if at least one list is too long
      ? begin
          local indexesToRetain:=indexLists.each(l,l.trailing(limit)).flatten;
          printf('Dropping %{$1-$0}s of %{$1}s entries',indexesToRetain.size,runTimes.size);
          runTimes:=runTimes.get(indexesToRetain);
        end
      : print('Nothing to be done. Longest sample row has ',indexLists.each(list,list.size,max),' elements');
      print('Samples @post: ',runTimes.size);
    end
  : fail("count must be an integer >=1");
end;
