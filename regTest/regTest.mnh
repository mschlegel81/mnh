USE hash, passedTestsStore;

private TEST_DIRECTORY    :=replace(splitFileName(myPath)%"relative",splitFileName(myPath)%"filename","");
private ROOT_DIRECTORY    :=TEST_DIRECTORY&'../';
private TESTS_STORE       :=TEST_DIRECTORY&'regTestCases.dat';
private NEED_PLOT_IDX:=3;

mutable previouslyPassedTests:=0;

private expectedResultName  (scriptname,is32Bit:boolean)->TEST_DIRECTORY&replace(splitFileName(scriptname)%"filename"&"#",".mnh#",(is32Bit?".32bit":"")&".expected");
private lastResultName      (scriptname,is32Bit:boolean)->TEST_DIRECTORY&replace(splitFileName(scriptname)%"filename"&"#",".mnh#",(is32Bit?".32bit":"")&".last");
private expectedResultExists(scriptname,is32Bit:boolean)->fileExists(expectedResultName(scriptname,is32Bit));
private expectedResult      (scriptname,is32Bit:boolean)->fileLines (expectedResultName(scriptname,is32Bit));
private storeResult(filename,data)-> writeFileLines(filename,data) ? void : void;

//*Executes all tests with current interpreter
main->main(executor);

private is64Bit(exe)->'x86_64'==(exec(exe,['-version']).split(' ').trailing.trailing);

private runTest(executor,exeHash, scriptName,outputFileName,delOutputBefore,separate32BitOutput,FMT_STRING)->
  begin
    local SRF:=separate32BitOutput AND not(is64Bit(executor));
    delOutputBefore and outputFileName<>''
    ? deleteFile(ROOT_DIRECTORY&outputFileName)
    : void;
    local startTime:=systime;
    local scriptOutput:=exec(executor,["-det",ROOT_DIRECTORY&scriptName]) | (outputFileName="" ? [] : fileHash(ROOT_DIRECTORY&outputFileName));
    local scriptTime:=(systime-startTime)*24*60*60;
    when(
      not(expectedResultExists(scriptName,SRF)),
        begin
          printf(FMT_STRING,scriptName,scriptTime,"No reference result found. Storing "&storeResult(expectedResultName(scriptName,SRF),scriptOutput));
          []; //Test did not fail, so it is interpreted as passed
        end,
      expectedResult(scriptName,SRF)==scriptOutput,
        begin
          printf(FMT_STRING,scriptName,scriptTime,'o.k.');
          markAsPassed(scriptName,exeHash,scriptTime);
          [];
        end,
        begin
          printf(FMT_STRING,scriptName,scriptTime,"Results differ!");
          storeResult(lastResultName(scriptName,SRF),scriptOutput);
          [expectedResultName(scriptName,SRF),
           lastResultName    (scriptName,SRF)];
        end);
  end;


//*Executes tests; 
//*Optionals can be: "randomSample" or (parts of) test case names
main(exe,...)->begin
  previouslyPassedTests:=0;
  local testFilter       := ...;
  local currentExeInfo   := exe.exec(["-version"] ).head;
  local currentExeHash   := exe.exec(["-codeHash"]).head;
  local currentExeCanPlot:= copy(currentExeInfo,5,4)="full";
  local randomSample     := testFilter==['randomSample'];
  local specific_tests   := not((testFilter==[]) or randomSample);
  randomSample ? testFilter:=[] : void;
  local testCases:=sort(each(case,
                   expression(fileContents(TESTS_STORE))(),
                   (currentExeCanPlot OR not(case%NEED_PLOT_IDX)) and
                   (testFilter==[] OR each(f,testFilter,OR,pos(f,case%0)>=0)) ? case%[0..2,4] : void));

  //count already passed tests and remove them from the list
  testCases:=each(test,testCases,
    isMarkedAsPassed(test%0,currentExeHash) and not(specific_tests)
    ? begin previouslyPassedTests+=1; void; end
    : test);
  local stopAtTime:=systime+1;
  randomSample AND size(testCases)>0 ? begin
    testCases:=testCases%sortPerm(size(testCases).random);
    stopAtTime:=systime+5/(24*60*60);
  end : void;
  local FMT_STRING:="%-"&(size(testCases)=0 ? 0 : max(length(testCases%%0)))&"s %7.2fsec %s";
  local first:=true;
  local failedTestOut:=[];
  local allPassed:=true;
  size(testCases)<=0 ? void :
  each(test,testCases,AND,systime>stopAtTime ? false : begin
    first ? begin
      local msg1:="| Starting test runs with executable "&exe;
      local msg2:="| "&currentExeInfo;
      msg1&=repeat(' ',length(msg2)-length(msg1));
      msg2&=repeat(' ',length(msg1)-length(msg2))&' |';
      msg1&=' |';
      local msg3:='+'&repeat('-',length(msg1)-2)&'+';
      printf('%s',[msg3,msg1,msg2,msg3]);
    end : void;
    first:=false;
    local testOutput:=runTest@(exe|currentExeHash|test|FMT_STRING);
    testOutput==[] OR begin
      allPassed:=false;
      fileExists('kdiff.bat')
      ? ask("Expected output is : "&testOutput%0&
          "\n    Last output is : "&testOutput%1&
          "\nDo you want to view the diff?",['No','Yes'])='Yes'
        ? begin 
            execPipeless('cmd',['/c','kdiff.bat']|testOutput);
            ask('Shall the last result be the new expected result?',['No','Yes'])='Yes' 
            ? begin
                deleteFile(testOutput%0);
                moveFile(testOutput%1,testOutput%0);
                allPassed:=true;
              end
            : void;
          end
        : void
      : printf@('Compare files %s and %s'|testOutput);      
      allPassed;
    end;
  end);
  first ? print('All tests have been passed by ',exe) : void;
  
  size(testCases)>0 ? begin
    print(previouslyPassedTests,' Tests were already marked as passed.');
    //displayUncoveredTests:--------------
    local coveredTests:=(expression(fileContents(TESTS_STORE))()%%0).unique.splitFileName%%'expanded';
    first:=true;
    each(script,
         (files(ROOT_DIRECTORY&'demos/*.mnh')|files(ROOT_DIRECTORY&'packages/*.mnh')).unique.splitFileName%%'expanded',
         script in coveredTests ? void : begin
           first ? begin
             first:=false;
             print('The following scripts are not covered by tests:');
           end : void;
           print('  ',script);
         end);
    //--------------:displayUncoveredTests
    first ? print('There are no scrips uncovered by tests') : void;
  end : void;
  allPassed;
end;
