USE testLog,
    '../demos/24.mnh',
    '../demos/diff.mnh',
    '../demos/100doors.mnh',
    '../demos/12_statements.mnh',
    '../demos/99bottles.mnh',
    '../demos/ackermann.mnh',
    '../demos/aks.mnh',
    '../demos/aliquotSequence.mnh',
    '../demos/anagram.mnh',
    '../demos/asciiCalendar.mnh',
    '../demos/balancedBrackets.mnh',
    '../demos/benford.mnh',
    '../demos/bestShuffle.mnh',
    '../demos/concatInts.mnh',
    '../demos/conventions.mnh',
    '../demos/countTheCoins.mnh',
    '../demos/dice7fromDice5.mnh',
    '../demos/digitSquareSum.mnh',
    '../demos/ethiopian.mnh',
    '../demos/fibonacci.mnh',
    '../demos/fibonacciWord.mnh',
    '../demos/fractran.mnh',
    '../demos/gol.mnh',
    '../demos/hailstone.mnh',
    '../demos/hamming.mnh',
    '../demos/harshad.mnh',
    '../demos/hash.mnh',
    '../demos/helloWorld.mnh',
    '../demos/hereDoc.mnh',
    '../demos/hofstadterConway.mnh',
    '../demos/hofstadter_sequences.mnh',
    '../demos/huffmann.mnh',
    '../demos/josephus.mnh',
    '../demos/lastSundays.mnh',
    '../demos/lindenmayer.mnh',
    '../demos/ludic.mnh',
    '../demos/magicSquare.mnh',
    '../demos/maze.mnh',
    '../demos/memoization.mnh',
    '../demos/monteCarloPi.mnh',
    '../demos/opTest.mnh',
    '../demos/pascal.mnh',
    '../demos/pernicousNumbers.mnh',
    '../demos/pythagoras.mnh',
    '../demos/quine.mnh',
    '../demos/range_extract_expand.mnh',
    '../demos/roman.mnh',
    '../demos/selfRefSeq.mnh',
    '../demos/semordnilap.mnh',
    '../demos/setConsolidation.mnh',
    '../demos/shannonEntropy.mnh',
    '../demos/sierpinskiCarpet.mnh',
    '../demos/sierpinskiTriangle.mnh',
    '../demos/stringFib.mnh',
    '../demos/subGen.mnh',
    '../demos/sudoku.mnh',
    '../demos/ulam.mnh',
    '../demos/unbiasedRandom.mnh',
    '../demos/vampire.mnh',
    '../demos/variadic.mnh',
    '../demos/weasel.mnh',
    '../demos/wordCount.mnh',
    '../demos/y.mnh',
    //The following tests are flavor dependent
    '../demos/zeckendorf.mnh',
    '../demos/continuedFractions.mnh',
    '../demos/piPlots.mnh',
    '../demos/rk4.mnh',
    '../demos/root.mnh',
    //The last 7 imports are plotting
    '../demos/barnsleyFern.mnh',
    '../demos/fractalPlant.mnh',
    '../demos/kochCurve.mnh',
    '../demos/sierpinskiCurve.mnh',
    '../demos/travellingSalesmanProblem.mnh',
    '../demos/turtleGfx.mnh',
    '../demos/heart.mnh';

private testPlotting(call:expression(0), file:string)->begin
  local filePath:=(myPath.splitFileName['directory'])&'/'&file;
  deleteFile(filePath);
  call();
  printf('Hash of %s is %x',filePath,filePath.fileContents.hash);
end;

private printExecute([])->void;
private printExecute(code:stringList)->begin
  local out:=sandBoxExecute(code).each(message,message.get(0)=="timing_info" ? void : message);
  printf("%s\t%s",out.getInner(0),out.getInner(2));
end;

private executeExamples(examplesFile:string)->begin
  local codeToExecute:=[];
  print('Examples file has ',fileLines(examplesFile).size,' lines');
  fileLines(examplesFile).each(line,
    line=='' ? begin
      printExecute(codeToExecute);
      codeToExecute:=[];
    end : codeToExecute|=line);
  printExecute(codeToExecute);
end;;

main(examplesFile:string)->testAlreadyPassed ? void :
begin
  resetRandom;
  collectOutput;
  toId('24.main')('demo');
  diff.main('test');
  inspect['uses'].getInner(0).leading(7).tail(3).each(import,toId(import&'.main'));
  canPlot
  ? inspect['uses'].getInner(0).trailing(7).each(import,testPlotting({toId(import&'.main')},'../demos/'&import&'.png'))
  : void;
  examplesFile==''
  ? void
  : executeExamples(examplesFile);
  validateCollectedOutput;
end;

main->main('');
