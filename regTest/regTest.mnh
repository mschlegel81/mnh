USE testExpectation,test_config,'../demos/oeis_server.mnh';

private mutable longestCaseText:=0;
private printCase(s:String)->begin
  longestCaseText:=max(longestCaseText,s.length);
  printDirect("\r",s,repeat(' ',longestCaseText-length(s)));
end;

//@SuppressUnusedWarning
startedMyOwnServer:=begin
  isIpcServerRunning(oeis_server.ipcId) OR $1=='stopServer'
  ? false
  : begin
      executor.execAsync([inspect['uses'].each(i,i[0].matches('(?i)oeis_server') ? i[1] : void,head)]);
      sleep(1);
      true;
    end;
end;

testFile(scriptFileName:String,doLog:Boolean)->
 begin
    printCase(scriptFileName);
    local logName:=extractFileNameOnly(scriptFileName);
    local startTime:=time;
    local output:=runScript(scriptFileName,testParameters(scriptFileName),true)
          .filter({$e.head=='printline' OR $e.head.matches('[E|e]rror')})
          .getInner(2)
          .split("\n")
          .flatten|checkAfterTest(scriptFileName);

    scriptFileName.isSmokeTest
    ? logSmokeTestRunTime(logName,
                          time-startTime,
                          doLog)
    : checkExpectation(
        logName,
        output,
        time-startTime,
        doLog);
  end;

private sbExecute([])->void;
private sbExecute(code:StringList)->begin
  local out:=sandBoxExecute(code).each(message,message.get(0)=="timing_info" ? void : message);
  out.each(output,output[0]='printline' ? output[2] : format("%s %s",output[0],output[2])).split("\n").flatten;
end;

private executeExamples(doLog:Boolean)->begin
  printCase(EXAMPLES_LOG_NAME);
  resetRandom;
  local output:=[];
  local collectOut:=true;
  local codeToExecute:=[];
  local inputLines:=fileLines(myPath.extractFileDirectory&'/../resources/examples.txt');
  local startTime:=time;
  inputLines.each(line,
    line==''
    ? begin
        collectOut
        ? output|=sbExecute(codeToExecute)
        : void;
        codeToExecute:=[];
      end
    : line.matches('==END REG TEST==')
      ? collectOut:=false
      : codeToExecute|=line);
  checkExpectation(
        EXAMPLES_LOG_NAME,
        output,
        time-startTime,
        doLog);
end;

//*Runs tests and returns true if no test failed
testAll(logging:Boolean, forceRun:Boolean)->begin
  assertUniqueInstance;
  sandBoxExecute('1');
  local toRun:=allDemos
           .filter({not(skipFile($f))})
           .filter({forceRun OR not(isTestAlreadyPassed(extractFileNameOnly($script)))});
  local allPassed:=
  (toRun.map({testFile($script,logging)})|((local runExamples:=forceRun OR not(isTestAlreadyPassed(EXAMPLES_LOG_NAME))) ? executeExamples(logging) : void)).agg(AND);
  printCase("");
  printDirect("\r");
  printf("Tests total:\t%s\nSkipped:\t%s\nExecuted:\t%s\nFailed:\t%s",
    allDemos.size+1,
    allDemos.size+1-toRun.size-ord(runExamples),
                    toRun.size+ord(runExamples),
    getFailedTests.size);
  allPassed ? print("All tests ok     ",repeat(' ',50))
            : print("Some tests failed:",repeat(' ',50),"\n",join("    "&getFailedTests,"\n")) orElse setExitCode(99);
  showTestTimeInfo;
end;

main->testAll(true,false);

//*Test again, even if all tests have been passed
main('retest')->testAll(true,true);

//*Test again, without logging passed tests
main('noLog')->testAll(false,true);

//*Display info on test cases
main('info')->allDemos.map({[$0,$0.isSmokeTest ? 'SMOKE' : '',$0.skipFile ? 'SKIP' : '',$0.testParameters.join(" ")].join("\t")}).join("\n").print;
