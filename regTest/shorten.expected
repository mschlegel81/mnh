Input length  : 2593
Result length : 2506
Ratio         : 96.64%
replace("shortenSilently(s:string)->begin\r\nlocal result:=shorten(s,2);\r\nlocal tryOn:=length(format@(SHORTEN_FORMAT|result))<length(escape(s));\r\neach(subLen,[3..32],tryOn ? begin\r\nlocal newResult:=shorten(s,subLen);\r\nlength(format@(SHORTEN_FORMAT|newResult))<length(format@(SHORTEN_FORMAT|result))\r\n? result:=newResult\r\n: tryOn:=false;\r\nvoid;\r\nend : void);\r\nformat@(SHORTEN_FORMAT|result);\r\nend;\r\n\r\nprivate bestSubString(s:string,len:int)->\r\npEach(ef,\r\ncopy(s,[0..length(s)-len],len).elementFrequency,\r\naggregator({$x%0<$y%0 ? $y : $x}),\r\n[(length(escape(ef%1))-2)*(ef%0-1)-1,ef%1]);\r\n\r\nSHORTEN_FORMAT:=\"replace(%{escape($0)}%,chars(%{escape(join($1))}%),copy(%{escape(join($2))}%,[0..%{size($2)-1}%]*%{$3}%,%{$3}%))\";\r\n\r\nfallbackResult(s:string)->[s,[' '],[' '],1];\r\n\r\nshorten(s:string)->begin\r\nlocal result:=shortenSilently(s);\r\nprint ('Input length: ',length(escape(s)));\r\nprint ('Result length : ',length(result));\r\nprintf('Ratio :%##0.00%%%',length(result)/length(escape(s))*100);\r\nprint (result);\r\nresult;\r\nend;\r\n\r\nprivate shorten(s:string,subLength)->begin\r\nlocal alphabetOut:=[];\r\nlocal workString:=s;\r\nlocal replacements:=[];\r\nlocal proceed:=true;\r\nlocal result:=fallbackResult(s);\r\nlocal prevResult:=result;\r\neach(run,[0..9],begin\r\neach(alphabetChar,chars.minus(workString.chars).minus(chars%[0,26]),\r\nproceed\r\n? begin\r\nlocal sub:=bestSubString(workString,subLength);\r\nsub%0<=0\r\n? proceed:=false\r\n: begin\r\nreplacements:=sub%1|replacements;\r\nalphabetOut:=alphabetChar|alphabetOut;\r\nworkString:=replace(workString,sub%1,alphabetChar);\r\nresult:=[workString,alphabetOut,replacements,subLength];\r\nlength(format@(SHORTEN_FORMAT|result))>=length(format@(SHORTEN_FORMAT|prevResult))\r\n? proceed:=false \r\n: prevResult:=result;\r\nend;\r\nvoid;\r\nend\r\n: void);\r\nend);\r\nprevResult;\r\nend;\r\n\r\n//*For regression test\r\nmain->begin\r\nlocal input:=fileContents(myPath);\r\nlocal shortCmd:=shorten(input);\r\nprint('Can reconstruct correctly : ',expression(shortCmd)()=input);\r\nend;\r\n//*Shorten the given input file\r\nmain(filename)->shorten(fileContents(filename));\r\n//*Shorten multiple input files:\r\nmain(filename,...)->printf(\"writeFile('%X%',%X%);\",$params, pEach(p,$params,shortenSilently(fileContents(p))));\r\n",chars(''),copy('  ',[0..0]*2,2))
Can reconstruct correctly : true
