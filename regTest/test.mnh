USE hash;

//!BATCH ON
currentExe:=head(mainParams | executor);
testFilter:=tail(mainParams);

testDirectory:=replace(splitFileName(myPath)%"relative",
                       splitFileName(myPath)%"filename","");

currentExeInfo:=head(exec(currentExe,["-version"]));
currentExeCanPlot:=copy(currentExeInfo,5,4)="full";
quickTestsOnly   :=testFilter==['quick'];

matchesAny(input)->(testFilter==[]) or (quickTestsOnly) ? true : each(f,testFilter,or,pos(f,input)>=0);

allTestCases:=each(case,
                   expression(fileContents('regTest/regTestCases.dat'))(),
                   (currentExeCanPlot   or not(case%3)) and
                   (not(quickTestsOnly) or not(case%4)) and
                   matchesAny(case%0) ? case%[0..2] : void);

print('---------------------------------------------------------\n',
      'Starting test runs with executable '& currentExe,'\n',
      currentExeInfo,
      '\n---------------------------------------------------------');

mutable passedTests:=fileExists('regTest/passedTests.dat') ? fileLines('regTest/passedTests.dat') : [];
storePassedTests->writeFileLines('regTest/passedTests.dat',unique(passedTests));
voidify(...)->void;
synchronized markAsPassed(case)->voidify(passedTests:=passedTests | (currentExeInfo & ":" & case));
isMarkedAsPassed(case)->(currentExeInfo & ":" & case) in passedTests;

mutable testsFailed:="";
mutable previouslyPassedTests:=0;
synchronized addFailedTest(scriptName)->copy(testsFailed:=testsFailed&format("\nkdiff %X% %X%",expectedResultName(scriptName),lastResultName(scriptName)),1,0);

FMT_STRING:="%X"&max(length(allTestCases%%0))&"% %####0.00%sec %X%";

expectedResultName  (scriptname)->testDirectory&replace(splitFileName(scriptname)%"filename"&"#",".mnh#",".expected");
lastResultName      (scriptname)->testDirectory&replace(splitFileName(scriptname)%"filename"&"#",".mnh#",".last");
expectedResultExists(scriptname)->fileExists(expectedResultName(scriptname));
expectedResult      (scriptname)->fileLines (expectedResultName(scriptname));

storeResult(filename,data)-> writeFileLines(filename,data) ? void : void;

runTest(executor,scriptName,outputFileName,delOutputBefore)->
  isMarkedAsPassed(scriptName)
  ? previouslyPassedTests:=previouslyPassedTests+1
  : begin
      delOutputBefore and outputFileName<>''
      ? deleteFile(outputFileName)
      : void;
      local startTime:=systime;
      local scriptOutput:=exec(executor,["-det",scriptName]) | (outputFileName="" ? [] : fileHash(outputFileName));
      local scriptTime:=(systime-startTime)*24*60*60;
      expectedResultExists(scriptName)
      ? begin
          expectedResult(scriptName)==scriptOutput
          ? printf(FMT_STRING,scriptName,scriptTime,'o.k.' | markAsPassed(scriptName))
          : printf(FMT_STRING,scriptName,scriptTime,"Results differ!" &
                                                     addFailedTest(scriptName) &
                                                     storeResult(lastResultName(scriptName),scriptOutput));
        end
      : printf(FMT_STRING,scriptName,scriptTime,"No reference result found. Storing "&storeResult(expectedResultName(scriptName),scriptOutput));
    end;

each(test,allTestCases,runTest@(executor|test));
print(previouslyPassedTests,' Tests were already marked as passed.');
print(testsFailed);
storePassedTests;

//displayUncoveredTests
begin
  local coveredTests:= replace(unique(expression(fileContents('regTest/regTestCases.dat'))()%%0),'\\','/');
  local first:=true;
  each(script,
       replace(unique(files('demos/*.mnh')|files('packages/*.mnh')),'\\','/'),
       script in coveredTests ? void : begin
         first ? begin
           first:=false;
           print('The following scripts are not covered by tests:');
         end : void;
         print('  ',script);
       end);
end;
