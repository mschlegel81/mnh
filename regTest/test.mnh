USE hash;

testDirectory:=replace(splitFileName(myPath)%"relative",
                       splitFileName(myPath)%"filename","");

mutable passedTests:=fileExists('regTest/passedTests.dat') ? fileLines('regTest/passedTests.dat') : [];
storePassedTests->writeFileLines('regTest/passedTests.dat',unique(flatten(
  fileExists('regTest/passedTests.dat') ? fileLines('regTest/passedTests.dat') : [],
   passedTests)));

synchronized markAsPassed(case,exeInfo)->begin passedTests:=passedTests | (exeInfo & ":" & case); void; end;
synchronized isMarkedAsPassed(case,exeInfo)->(exeInfo & ":" & case) in passedTests;

mutable testsFailed:="";
mutable previouslyPassedTests:=0;
synchronized addFailedTest(scriptName)->copy(testsFailed:=testsFailed&format("\nkdiff %X% %X%",expectedResultName(scriptName),lastResultName(scriptName)),1,0);

expectedResultName  (scriptname)->testDirectory&replace(splitFileName(scriptname)%"filename"&"#",".mnh#",".expected");
lastResultName      (scriptname)->testDirectory&replace(splitFileName(scriptname)%"filename"&"#",".mnh#",".last");
expectedResultExists(scriptname)->fileExists(expectedResultName(scriptname));
expectedResult      (scriptname)->fileLines (expectedResultName(scriptname));
storeResult(filename,data)-> writeFileLines(filename,data) ? void : void;

runTest(executor,exeInfo, scriptName,outputFileName,delOutputBefore,FMT_STRING)->
    begin
      delOutputBefore and outputFileName<>''
      ? deleteFile(outputFileName)
      : void;
      local startTime:=systime;
      local scriptOutput:=exec(executor,["-det",scriptName]) | (outputFileName="" ? [] : fileHash(outputFileName));
      local scriptTime:=(systime-startTime)*24*60*60;
      expectedResultExists(scriptName)
      ? begin
          expectedResult(scriptName)==scriptOutput
          ? printf(FMT_STRING,scriptName,scriptTime,'o.k.' | markAsPassed(scriptName,exeInfo))
          : printf(FMT_STRING,scriptName,scriptTime,"Results differ!" &
                                                     addFailedTest(scriptName) &
                                                     storeResult(lastResultName(scriptName),scriptOutput));
        end
      : printf(FMT_STRING,scriptName,scriptTime,"No reference result found. Storing "&storeResult(expectedResultName(scriptName),scriptOutput));
    end;

main->main(executor);

main(exe,...)->begin
  local testFilter       := tail($params);
  local currentExeInfo   := head(exec(exe,["-version"]));
  print('---------------------------------------------------------\n',
        'Starting test runs with executable ',exe,'\n',currentExeInfo,
        '\n---------------------------------------------------------');
  local currentExeCanPlot:= copy(currentExeInfo,5,4)="full";
  local quickTestsOnly   := testFilter==['quick'];
  local specific_tests   := not((testFilter==[]) or (quickTestsOnly));
  local testCases:=sort(each(case,
                   expression(fileContents('regTest/regTestCases.dat'))(),
                   (currentExeCanPlot   or not(case%3)) and
                   (not(quickTestsOnly) or not(case%4)) and
                   ((testFilter==[]) or (quickTestsOnly) ? true : each(f,testFilter,or,pos(f,case%0)>=0)) ? case%[0..2] : void));
  local FMT_STRING:="%X"&max(length(testCases%%0))&"% %####0.00%sec %X%";

  each(test,testCases, begin
    isMarkedAsPassed(test%0,currentExeInfo) and not(specific_tests)
    ? previouslyPassedTests:=previouslyPassedTests+1
    : runTest@(exe|currentExeInfo|test|FMT_STRING);
  end);
  print(previouslyPassedTests,' Tests were already marked as passed.');
  print(testsFailed);
  storePassedTests;

  //displayUncoveredTests
  begin
    local coveredTests:= replace(unique(expression(fileContents('regTest/regTestCases.dat'))()%%0),'\\','/');
    local first:=true;
    each(script,
         replace(unique(files('demos/*.mnh')|files('packages/*.mnh')),'\\','/'),
         script in coveredTests ? void : begin
           first ? begin
             first:=false;
             print('The following scripts are not covered by tests:');
           end : void;
           print('  ',script);
         end);
  end;
end;
