USE hash;

//!BATCH ON
currentExe:=head(mainParams | executor);
testFilter:=tail(mainParams);

testDirectory:=replace(splitFileName(myPath)%"relative",
                       splitFileName(myPath)%"filename","");

currentExeInfo:=head(exec(currentExe,["-version"]));
currentExeCanPlot:=copy(currentExeInfo,5,4)="full";
quickTestsOnly   :=testFilter==['quick'];

matchesAny(input)->(testFilter==[]) or (quickTestsOnly) ? true : each(f,testFilter,or,pos(f,input)>=0);

allTestCases:=each(case,
                   expression(each(l,
                                   fileLines('regTest/regTestCases.dat'),
                                   aggregator({$x&"\n"&$y})))(),
                                   (currentExeCanPlot   or not(case%3)) and
                                   (not(quickTestsOnly) or not(case%4)) and
                                   matchesAny(case%0) ? case%[0..2] : void);

print('---------------------------------------------------------\n',
      'Starting test runs with executable '& currentExe,'\n',
      currentExeInfo,
      '\n---------------------------------------------------------');

mutable passedTests:=fileExists('regTest/passedTests.dat') ? fileLines('regTest/passedTests.dat') : [];
storePassedTests->writeFileLines('regTest/passedTests.dat',unique(passedTests));
voidify(...)->void;
synchronized markAsPassed(case)->voidify(passedTests:=passedTests | (currentExeInfo & ":" & case));
isMarkedAsPassed(case)->(currentExeInfo & ":" & case) in passedTests;

mutable testsFailed:="";
synchronized addFailedTest(scriptName)->copy(testsFailed:=testsFailed&format("\nkdiff %X% %X%",expectedResultName(scriptName),lastResultName(scriptName)),1,0);

FMT_STRING:="%X"&max(length(allTestCases%%0))&"% %####0.00%sec ";

expectedResultName  (scriptname)->testDirectory&replace(splitFileName(scriptname)%"filename"&"#",".mnh#",".expected");
lastResultName      (scriptname)->testDirectory&replace(splitFileName(scriptname)%"filename"&"#",".mnh#",".last");
expectedResultExists(scriptname)->fileExists(expectedResultName(scriptname));
expectedResult      (scriptname)->fileLines (expectedResultName(scriptname));

storeResult(filename,data)-> writeFileLines(filename,data) ? void : void;

runScript(executor,scriptName,outputFileName,delOutputBefore)->
  isMarkedAsPassed(scriptName) ? print(format(FMT_STRING,scriptName,0)&"(already marked as passed)")
                               : (delOutputBefore and outputFileName<>'' ? deleteFile(outputFileName) : void) |
                                 print(checkResult(scriptName,
                                                   systime,
                                                   exec(executor,["-det",scriptName]) | (outputFileName="" ? [] : fileHash(outputFileName)),
                                                   systime));

checkResult(scriptName,t0,result,t1)->format(FMT_STRING,scriptName,(t1-t0)*24*60*60)& (
  expectedResultExists(scriptName) ? (expectedResult(scriptName)==result ? "o.k." | markAsPassed(scriptName)
                                                                         :  "Results differ!" &
                                                                            addFailedTest(scriptName) &
                                                                            storeResult(lastResultName(scriptName),result))
                                   : "No reference result found. Storing "&storeResult(expectedResultName(scriptName),result));

each(test,allTestCases,runScript@(executor|test));
print(testsFailed);
storePassedTests;
