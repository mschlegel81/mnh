expectations:=
['100doors'=>
 ['1,4,9,16,25,36,49,64,81,100'],
 '12_statements'=>
 [' 1. "This is a numbered list of twelve statements."                  is true',
  ' 2. "Exactly 3 of the last 6 statements are true."                   is false',
  ' 3. "Exactly 2 of the even-numbered statements are true."            is true',
  ' 4. "If statement 5 is true, then statements 6 and 7 are both true." is true',
  ' 5. "The 3 preceding statements are all false."                      is false',
  ' 6. "Exactly 4 of the odd-numbered statements are true."             is true',
  ' 7. "Either statement 2 or 3 is true, but not both."                 is true',
  ' 8. "If statement 7 is true, then 5 and 6 are both true."            is false',
  ' 9. "Exactly 3 of the first 6 statements are true."                  is false',
  '10. "The next two statements are both true."                         is false',
  '11. "Exactly 1 of statements 7, 8 and 9 are true."                   is true',
  '12. "Exactly 4 of the preceding statements are true."                is false'],
 '24'=>
 ['This is a demo - start without argument to play.',' ?> Find an expression to calculate 24 from the numbers [1,5,6,7].',
  ' !> ((5*6)+1)-7','The solution is valid.',' ?> Another round?',' !> no'],
 '99bottles'=>
 ['99 bottles of beer on the wall','99 bottles of beer.','Take one down, pass it around','98 bottles of beer on the wall.','',
  '98 bottles of beer on the wall','98 bottles of beer.','Take one down, pass it around','97 bottles of beer on the wall.','',
  '97 bottles of beer on the wall','97 bottles of beer.','Take one down, pass it around','96 bottles of beer on the wall.','',
  '96 bottles of beer on the wall','96 bottles of beer.','Take one down, pass it around','95 bottles of beer on the wall.','',
  '95 bottles of beer on the wall','95 bottles of beer.','Take one down, pass it around','94 bottles of beer on the wall.','',
  '94 bottles of beer on the wall','94 bottles of beer.','Take one down, pass it around','93 bottles of beer on the wall.','',
  '93 bottles of beer on the wall','93 bottles of beer.','Take one down, pass it around','92 bottles of beer on the wall.','',
  '92 bottles of beer on the wall','92 bottles of beer.','Take one down, pass it around','91 bottles of beer on the wall.','',
  '91 bottles of beer on the wall','91 bottles of beer.','Take one down, pass it around','90 bottles of beer on the wall.','',
  '90 bottles of beer on the wall','90 bottles of beer.','Take one down, pass it around','89 bottles of beer on the wall.','',
  '89 bottles of beer on the wall','89 bottles of beer.','Take one down, pass it around','88 bottles of beer on the wall.','',
  '88 bottles of beer on the wall','88 bottles of beer.','Take one down, pass it around','87 bottles of beer on the wall.','',
  '87 bottles of beer on the wall','87 bottles of beer.','Take one down, pass it around','86 bottles of beer on the wall.','',
  '86 bottles of beer on the wall','86 bottles of beer.','Take one down, pass it around','85 bottles of beer on the wall.','',
  '85 bottles of beer on the wall','85 bottles of beer.','Take one down, pass it around','84 bottles of beer on the wall.','',
  '84 bottles of beer on the wall','84 bottles of beer.','Take one down, pass it around','83 bottles of beer on the wall.','',
  '83 bottles of beer on the wall','83 bottles of beer.','Take one down, pass it around','82 bottles of beer on the wall.','',
  '82 bottles of beer on the wall','82 bottles of beer.','Take one down, pass it around','81 bottles of beer on the wall.','',
  '81 bottles of beer on the wall','81 bottles of beer.','Take one down, pass it around','80 bottles of beer on the wall.','',
  '80 bottles of beer on the wall','80 bottles of beer.','Take one down, pass it around','79 bottles of beer on the wall.','',
  '79 bottles of beer on the wall','79 bottles of beer.','Take one down, pass it around','78 bottles of beer on the wall.','',
  '78 bottles of beer on the wall','78 bottles of beer.','Take one down, pass it around','77 bottles of beer on the wall.','',
  '77 bottles of beer on the wall','77 bottles of beer.','Take one down, pass it around','76 bottles of beer on the wall.','',
  '76 bottles of beer on the wall','76 bottles of beer.','Take one down, pass it around','75 bottles of beer on the wall.','',
  '75 bottles of beer on the wall','75 bottles of beer.','Take one down, pass it around','74 bottles of beer on the wall.','',
  '74 bottles of beer on the wall','74 bottles of beer.','Take one down, pass it around','73 bottles of beer on the wall.','',
  '73 bottles of beer on the wall','73 bottles of beer.','Take one down, pass it around','72 bottles of beer on the wall.','',
  '72 bottles of beer on the wall','72 bottles of beer.','Take one down, pass it around','71 bottles of beer on the wall.','',
  '71 bottles of beer on the wall','71 bottles of beer.','Take one down, pass it around','70 bottles of beer on the wall.','',
  '70 bottles of beer on the wall','70 bottles of beer.','Take one down, pass it around','69 bottles of beer on the wall.','',
  '69 bottles of beer on the wall','69 bottles of beer.','Take one down, pass it around','68 bottles of beer on the wall.','',
  '68 bottles of beer on the wall','68 bottles of beer.','Take one down, pass it around','67 bottles of beer on the wall.','',
  '67 bottles of beer on the wall','67 bottles of beer.','Take one down, pass it around','66 bottles of beer on the wall.','',
  '66 bottles of beer on the wall','66 bottles of beer.','Take one down, pass it around','65 bottles of beer on the wall.','',
  '65 bottles of beer on the wall','65 bottles of beer.','Take one down, pass it around','64 bottles of beer on the wall.','',
  '64 bottles of beer on the wall','64 bottles of beer.','Take one down, pass it around','63 bottles of beer on the wall.','',
  '63 bottles of beer on the wall','63 bottles of beer.','Take one down, pass it around','62 bottles of beer on the wall.','',
  '62 bottles of beer on the wall','62 bottles of beer.','Take one down, pass it around','61 bottles of beer on the wall.','',
  '61 bottles of beer on the wall','61 bottles of beer.','Take one down, pass it around','60 bottles of beer on the wall.','',
  '60 bottles of beer on the wall','60 bottles of beer.','Take one down, pass it around','59 bottles of beer on the wall.','',
  '59 bottles of beer on the wall','59 bottles of beer.','Take one down, pass it around','58 bottles of beer on the wall.','',
  '58 bottles of beer on the wall','58 bottles of beer.','Take one down, pass it around','57 bottles of beer on the wall.','',
  '57 bottles of beer on the wall','57 bottles of beer.','Take one down, pass it around','56 bottles of beer on the wall.','',
  '56 bottles of beer on the wall','56 bottles of beer.','Take one down, pass it around','55 bottles of beer on the wall.','',
  '55 bottles of beer on the wall','55 bottles of beer.','Take one down, pass it around','54 bottles of beer on the wall.','',
  '54 bottles of beer on the wall','54 bottles of beer.','Take one down, pass it around','53 bottles of beer on the wall.','',
  '53 bottles of beer on the wall','53 bottles of beer.','Take one down, pass it around','52 bottles of beer on the wall.','',
  '52 bottles of beer on the wall','52 bottles of beer.','Take one down, pass it around','51 bottles of beer on the wall.','',
  '51 bottles of beer on the wall','51 bottles of beer.','Take one down, pass it around','50 bottles of beer on the wall.','',
  '50 bottles of beer on the wall','50 bottles of beer.','Take one down, pass it around','49 bottles of beer on the wall.','',
  '49 bottles of beer on the wall','49 bottles of beer.','Take one down, pass it around','48 bottles of beer on the wall.','',
  '48 bottles of beer on the wall','48 bottles of beer.','Take one down, pass it around','47 bottles of beer on the wall.','',
  '47 bottles of beer on the wall','47 bottles of beer.','Take one down, pass it around','46 bottles of beer on the wall.','',
  '46 bottles of beer on the wall','46 bottles of beer.','Take one down, pass it around','45 bottles of beer on the wall.','',
  '45 bottles of beer on the wall','45 bottles of beer.','Take one down, pass it around','44 bottles of beer on the wall.','',
  '44 bottles of beer on the wall','44 bottles of beer.','Take one down, pass it around','43 bottles of beer on the wall.','',
  '43 bottles of beer on the wall','43 bottles of beer.','Take one down, pass it around','42 bottles of beer on the wall.','',
  '42 bottles of beer on the wall','42 bottles of beer.','Take one down, pass it around','41 bottles of beer on the wall.','',
  '41 bottles of beer on the wall','41 bottles of beer.','Take one down, pass it around','40 bottles of beer on the wall.','',
  '40 bottles of beer on the wall','40 bottles of beer.','Take one down, pass it around','39 bottles of beer on the wall.','',
  '39 bottles of beer on the wall','39 bottles of beer.','Take one down, pass it around','38 bottles of beer on the wall.','',
  '38 bottles of beer on the wall','38 bottles of beer.','Take one down, pass it around','37 bottles of beer on the wall.','',
  '37 bottles of beer on the wall','37 bottles of beer.','Take one down, pass it around','36 bottles of beer on the wall.','',
  '36 bottles of beer on the wall','36 bottles of beer.','Take one down, pass it around','35 bottles of beer on the wall.','',
  '35 bottles of beer on the wall','35 bottles of beer.','Take one down, pass it around','34 bottles of beer on the wall.','',
  '34 bottles of beer on the wall','34 bottles of beer.','Take one down, pass it around','33 bottles of beer on the wall.','',
  '33 bottles of beer on the wall','33 bottles of beer.','Take one down, pass it around','32 bottles of beer on the wall.','',
  '32 bottles of beer on the wall','32 bottles of beer.','Take one down, pass it around','31 bottles of beer on the wall.','',
  '31 bottles of beer on the wall','31 bottles of beer.','Take one down, pass it around','30 bottles of beer on the wall.','',
  '30 bottles of beer on the wall','30 bottles of beer.','Take one down, pass it around','29 bottles of beer on the wall.','',
  '29 bottles of beer on the wall','29 bottles of beer.','Take one down, pass it around','28 bottles of beer on the wall.','',
  '28 bottles of beer on the wall','28 bottles of beer.','Take one down, pass it around','27 bottles of beer on the wall.','',
  '27 bottles of beer on the wall','27 bottles of beer.','Take one down, pass it around','26 bottles of beer on the wall.','',
  '26 bottles of beer on the wall','26 bottles of beer.','Take one down, pass it around','25 bottles of beer on the wall.','',
  '25 bottles of beer on the wall','25 bottles of beer.','Take one down, pass it around','24 bottles of beer on the wall.','',
  '24 bottles of beer on the wall','24 bottles of beer.','Take one down, pass it around','23 bottles of beer on the wall.','',
  '23 bottles of beer on the wall','23 bottles of beer.','Take one down, pass it around','22 bottles of beer on the wall.','',
  '22 bottles of beer on the wall','22 bottles of beer.','Take one down, pass it around','21 bottles of beer on the wall.','',
  '21 bottles of beer on the wall','21 bottles of beer.','Take one down, pass it around','20 bottles of beer on the wall.','',
  '20 bottles of beer on the wall','20 bottles of beer.','Take one down, pass it around','19 bottles of beer on the wall.','',
  '19 bottles of beer on the wall','19 bottles of beer.','Take one down, pass it around','18 bottles of beer on the wall.','',
  '18 bottles of beer on the wall','18 bottles of beer.','Take one down, pass it around','17 bottles of beer on the wall.','',
  '17 bottles of beer on the wall','17 bottles of beer.','Take one down, pass it around','16 bottles of beer on the wall.','',
  '16 bottles of beer on the wall','16 bottles of beer.','Take one down, pass it around','15 bottles of beer on the wall.','',
  '15 bottles of beer on the wall','15 bottles of beer.','Take one down, pass it around','14 bottles of beer on the wall.','',
  '14 bottles of beer on the wall','14 bottles of beer.','Take one down, pass it around','13 bottles of beer on the wall.','',
  '13 bottles of beer on the wall','13 bottles of beer.','Take one down, pass it around','12 bottles of beer on the wall.','',
  '12 bottles of beer on the wall','12 bottles of beer.','Take one down, pass it around','11 bottles of beer on the wall.','',
  '11 bottles of beer on the wall','11 bottles of beer.','Take one down, pass it around','10 bottles of beer on the wall.','',
  '10 bottles of beer on the wall','10 bottles of beer.','Take one down, pass it around','9 bottles of beer on the wall.','',
  '9 bottles of beer on the wall','9 bottles of beer.','Take one down, pass it around','8 bottles of beer on the wall.','',
  '8 bottles of beer on the wall','8 bottles of beer.','Take one down, pass it around','7 bottles of beer on the wall.','',
  '7 bottles of beer on the wall','7 bottles of beer.','Take one down, pass it around','6 bottles of beer on the wall.','',
  '6 bottles of beer on the wall','6 bottles of beer.','Take one down, pass it around','5 bottles of beer on the wall.','',
  '5 bottles of beer on the wall','5 bottles of beer.','Take one down, pass it around','4 bottles of beer on the wall.','',
  '4 bottles of beer on the wall','4 bottles of beer.','Take one down, pass it around','3 bottles of beer on the wall.','',
  '3 bottles of beer on the wall','3 bottles of beer.','Take one down, pass it around','2 bottles of beer on the wall.','',
  '2 bottles of beer on the wall','2 bottles of beer.','Take one down, pass it around','1 bottle of beer on the wall.','',
  '1 bottle of beer on the wall','1 bottle of beer.','Take one down, pass it around','no more bottles of beer on the wall.','',
  'Go to the store, buy some more.'],
 'accumulatorFactory'=>
 ['8.3'],
 'ackermann'=>
 ['See http://rosettacode.org/wiki/Ackermann_function','ackermann(3,0)=5','ackermann(3,1)=13','ackermann(3,2)=29',
  'ackermann(3,3)=61','ackermann(3,4)=125','ackermann(3,5)=253','ackermann(3,6)=509','ackermann(3,7)=1021','ackermann(3,8)=2045',
  'ackermann(3,9)=4093','ackermann(3,10)=8189','ackermann(3,11)=16381','ackermann(3,12)=32765','ackermann(3,13)=65533',
  'ackermann(3,14)=131069'],
 'aks'=>
 ['Polynomial expansions:','(x-1)^0 = 1','(x-1)^1 = x-1','(x-1)^2 = x^2-2x+1','(x-1)^3 = x^3-3x^2+3x-1',
  '(x-1)^4 = x^4-4x^3+6x^2-4x+1','(x-1)^5 = x^5-5x^4+10x^3-10x^2+5x-1','(x-1)^6 = x^6-6x^5+15x^4-20x^3+15x^2-6x+1',
  '(x-1)^7 = x^7-7x^6+21x^5-35x^4+35x^3-21x^2+7x-1','','Primes <= 66 are : [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61]'],
 'aliquotSequence'=>
 ['start @ | classification  | sequence',
  '--------+-----------------+--------------------------------------------------------------------------------------------------------',
  '     11 | terminating     | [11,1,0]','     12 | terminating     | [12,16,15,9,4,3,1,0]','     28 | perfect         | [28]',
  '    496 | perfect         | [496]','    220 | amicable        | [220,284]','   1184 | amicable        | [1184,1210]',
  '  12496 | social          | [12496,14288,15472,14536,14264]','1264460 | social          | [1264460,1547860,1727636,1305184]',
  '    790 | aspiring        | [790,650,652,496]','    909 | aspiring        | [909,417,143,25,6]',
  '    562 | cyclic          | [562,284,220]','   1064 | cyclic          | [1064,1336,1184,1210]',
  '   1488 | non-terminating | [1488,2480,3472,4464,8432,9424,10416,21328,22320,55056,95728,96720,236592,459792,881392,882384,1474608]'
 ],
 'anagram'=>
 ['aster, rates, stare, tares, taser, tears','caret, cater, crate, react, recta, trace',
  'drapes, padres, parsed, rasped, spared, spread','keats, skate, stake, steak, takes, teaks',
  'lapse, leaps, pales, peals, pleas, sepal','opts, post, pots, spot, stop, tops',
  'palest, pastel, petals, plates, pleats, staple','carets, caster, caters, crates, reacts, recast, traces',
  'pares, parse, pears, rapes, reaps, spare, spear','least, slate, stael, stale, steal, tales, teals, tesla'],
 'asciiCalendar'=>
 ['+-------------------------------------------------------------------------------------------+',
  '|                                    #   ###   ###   ###                                    |',
  '|                                   ##  #   # #     #                                       |',
  '|                                  # #   #### ####  ####                                    |',
  '|                                    #      # #   # #   #                                   |',
  '|                                   ###  ###   ###   ###                                    |',
  '+----------------------+----------------------+----------------------+----------------------+',
  '| Januar               | Februar              | Maerz                | April                |',
  '| Mo Di Mi Do Fr Sa So | Mo Di Mi Do Fr Sa So | Mo Di Mi Do Fr Sa So | Mo Di Mi Do Fr Sa So |',
  '|                 1  2 |     1  2  3  4  5  6 |     1  2  3  4  5  6 |              1  2  3 |',
  '|  3  4  5  6  7  8  9 |  7  8  9 10 11 12 13 |  7  8  9 10 11 12 13 |  4  5  6  7  8  9 10 |',
  '| 10 11 12 13 14 15 16 | 14 15 16 17 18 19 20 | 14 15 16 17 18 19 20 | 11 12 13 14 15 16 17 |',
  '| 17 18 19 20 21 22 23 | 21 22 23 24 25 26 27 | 21 22 23 24 25 26 27 | 18 19 20 21 22 23 24 |',
  '| 24 25 26 27 28 29 30 | 28                   | 28 29 30 31          | 25 26 27 28 29 30    |',
  '| 31                   |                      |                      |                      |',
  '+----------------------+----------------------+----------------------+----------------------+',
  '| Mai                  | Juni                 | Juli                 | August               |',
  '| Mo Di Mi Do Fr Sa So | Mo Di Mi Do Fr Sa So | Mo Di Mi Do Fr Sa So | Mo Di Mi Do Fr Sa So |',
  '|                    1 |        1  2  3  4  5 |              1  2  3 |  1  2  3  4  5  6  7 |',
  '|  2  3  4  5  6  7  8 |  6  7  8  9 10 11 12 |  4  5  6  7  8  9 10 |  8  9 10 11 12 13 14 |',
  '|  9 10 11 12 13 14 15 | 13 14 15 16 17 18 19 | 11 12 13 14 15 16 17 | 15 16 17 18 19 20 21 |',
  '| 16 17 18 19 20 21 22 | 20 21 22 23 24 25 26 | 18 19 20 21 22 23 24 | 22 23 24 25 26 27 28 |',
  '| 23 24 25 26 27 28 29 | 27 28 29 30          | 25 26 27 28 29 30 31 | 29 30 31             |',
  '| 30 31                |                      |                      |                      |',
  '+----------------------+----------------------+----------------------+----------------------+',
  '| September            | Oktober              | November             | Dezember             |',
  '| Mo Di Mi Do Fr Sa So | Mo Di Mi Do Fr Sa So | Mo Di Mi Do Fr Sa So | Mo Di Mi Do Fr Sa So |',
  '|           1  2  3  4 |                 1  2 |     1  2  3  4  5  6 |           1  2  3  4 |',
  '|  5  6  7  8  9 10 11 |  3  4  5  6  7  8  9 |  7  8  9 10 11 12 13 |  5  6  7  8  9 10 11 |',
  '| 12 13 14 15 16 17 18 | 10 11 12 13 14 15 16 | 14 15 16 17 18 19 20 | 12 13 14 15 16 17 18 |',
  '| 19 20 21 22 23 24 25 | 17 18 19 20 21 22 23 | 21 22 23 24 25 26 27 | 19 20 21 22 23 24 25 |',
  '| 26 27 28 29 30       | 24 25 26 27 28 29 30 | 28 29 30             | 26 27 28 29 30 31    |',
  '|                      | 31                   |                      |                      |',
  '+----------------------+----------------------+----------------------+----------------------+'],
 'babbage'=>
 ['25264'],
 'balancedBrackets'=>
 ['[]               o.k.','][][             NOT o.k.','][][][           NOT o.k.',']][][][[         NOT o.k.',
  '][[[]]][][       NOT o.k.','[][][][]]][[     NOT o.k.','][]][][[][[[]]   NOT o.k.','[[]]]][[][]][[][ NOT o.k.'],
 'barnsleyFern'=>
 ['png hash: 589386DB0CCC9288FBCE580182A8F4BCBF5E9241F6B21D6C3C0E9A67D05BFA1D'],
 'benford'=>
 ['actual expected','   300   301.03','   177   176.09','   125   124.94','    96    96.91','    80    79.18','    67    66.95',
  '    57    57.99','    53    51.15','    45    45.76'],
 'bestShuffle'=>
 ['abracadabra, baabacadrar, (0)','seesaw     , assewe     , (0)','elk        , kel        , (0)',
  'grrrrrr    , rgrrrrr    , (5)','up         , pu         , (0)','a          , a          , (1)'],
 'boxTheCompass'=>
 ['  0.0   1 North              Tramontana',' 16.87  2 North by east      Quarto di Tramontana verso Greco',
  ' 16.88  3 North-northeast    Greco-Tramontana',' 33.75  4 Northeast by north Quarto di Greco verso Tramontana',
  ' 50.62  5 Northeast          Greco',' 50.63  6 Northeast by east  Quarto di Greco verso Levante',
  ' 67.5   7 East-northeast     Greco-Levante',' 84.37  8 East by north      Quarto di Levante verso Greco',
  ' 84.38  9 East               Levante','101.25 10 East by south      Quarto di Levante verso Scirocco',
  '118.12 11 East-southeast     Levante-Scirocco','118.13 12 Southeast by east  Quarto di Scirocco verso Levante',
  '135.0  13 Southeast          Scirocco','151.87 14 Southeast by south Quarto di Scirocco verso Ostro',
  '151.88 15 South-southeast    Ostro-Scirocco','168.75 16 South by east      Quarto di Ostro verso Scirocco',
  '185.62 17 South              Ostro','185.63 18 South by west      Quarto di Ostro verso Libeccio',
  '202.5  19 South-southwest    Ostro-Libeccio','219.37 20 Southwest by south Quarto di Libeccio verso Ostro',
  '219.38 21 Southwest          Libeccio','236.25 22 Southwest by west  Quarto di Libeccio verso Ponente',
  '253.12 23 West-southwest     Ponente-Libeccio','253.13 24 West by south      Quarto di Ponente verso Libeccio',
  '270.0  25 West               Ponente','286.87 26 West by north      Quarto di Ponente verso Maestro',
  '286.88 27 West-northwest     Maestro-Ponente','303.75 28 Northwest by west  Quarto di Maestro verso Ponente',
  '320.62 29 Northwest          Maestro','320.63 30 Northwest by north Quarto di Maestro verso Tramontana',
  '337.5  31 North-northwest    Maestro-Tramontana','354.37 32 North by west      Quarto di Tramontana verso Maestro',
  '354.38  1 North              Tramontana'],
 'cauchy'=>
 ['FDLinux'=>
  ['(1+1/n)^n','...seems to converge against 2.7181459132335902967',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε",
   "N=   0 ε=1","N=  11 ε=0.1","N= 132 ε=0.01","N=1194 ε=0.001","N=5759 ε=0.0001",'','1 + 1/2 + 1/3 + 1/4 + ...',
   '...seems to diverge',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=3677 ε=1",'',
   '1 + 1/2^2 + 1/3^2 + 1/4^2 + ...','...seems to converge against 1.64483406184705953899',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   8 ε=0.1","N=  97 ε=0.01","N= 907 ε=0.001",
   "N=4998 ε=0.0001",'','1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 ...','...seems to converge against 0.78540316239748583597',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   3 ε=0.1","N=  48 ε=0.01","N= 498 ε=0.001",
   "N=4998 ε=0.0001"],
  'FDWin32'=>
  ['(1+1/n)^n','...seems to converge against 2.7181459132335902967',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε",
   "N=   0 ε=1","N=  11 ε=0.1","N= 132 ε=0.01","N=1194 ε=0.001","N=5759 ε=0.0001",'','1 + 1/2 + 1/3 + 1/4 + ...',
   '...seems to diverge',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=3677 ε=1",'',
   '1 + 1/2^2 + 1/3^2 + 1/4^2 + ...','...seems to converge against 1.6448340618470595545',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   8 ε=0.1","N=  97 ε=0.01","N= 907 ε=0.001",
   "N=4998 ε=0.0001",'','1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 ...','...seems to converge against 0.7854031623974857926',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   3 ε=0.1","N=  48 ε=0.01","N= 498 ε=0.001",
   "N=4998 ε=0.0001"],
  'FDWin64'=>
  ['(1+1/n)^n','...seems to converge against 2.718145913232938',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε",
   "N=   0 ε=1","N=  11 ε=0.1","N= 132 ε=0.01","N=1194 ε=0.001","N=5759 ε=0.0001",'','1 + 1/2 + 1/3 + 1/4 + ...',
   '...seems to diverge',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=3677 ε=1",'',
   '1 + 1/2^2 + 1/3^2 + 1/4^2 + ...','...seems to converge against 1.6448340618470652',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   8 ε=0.1","N=  97 ε=0.01","N= 907 ε=0.001",
   "N=4998 ε=0.0001",'','1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 ...','...seems to converge against 0.7854031623974836',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   3 ε=0.1","N=  48 ε=0.01","N= 498 ε=0.001",
   "N=4998 ε=0.0001"],
  'FOLinux'=>
  ['(1+1/n)^n','...seems to converge against 2.7181459132335902967',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε",
   "N=   0 ε=1","N=  11 ε=0.1","N= 132 ε=0.01","N=1194 ε=0.001","N=5759 ε=0.0001",'','1 + 1/2 + 1/3 + 1/4 + ...',
   '...seems to diverge',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=3677 ε=1",'',
   '1 + 1/2^2 + 1/3^2 + 1/4^2 + ...','...seems to converge against 1.64483406184705953899',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   8 ε=0.1","N=  97 ε=0.01","N= 907 ε=0.001",
   "N=4998 ε=0.0001",'','1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 ...','...seems to converge against 0.78540316239748583597',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   3 ε=0.1","N=  48 ε=0.01","N= 498 ε=0.001",
   "N=4998 ε=0.0001"],
  'FOWin32'=>
  ['(1+1/n)^n','...seems to converge against 2.7181459132335902967',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε",
   "N=   0 ε=1","N=  11 ε=0.1","N= 132 ε=0.01","N=1194 ε=0.001","N=5759 ε=0.0001",'','1 + 1/2 + 1/3 + 1/4 + ...',
   '...seems to diverge',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=3677 ε=1",'',
   '1 + 1/2^2 + 1/3^2 + 1/4^2 + ...','...seems to converge against 1.6448340618470595545',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   8 ε=0.1","N=  97 ε=0.01","N= 907 ε=0.001",
   "N=4998 ε=0.0001",'','1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 ...','...seems to converge against 0.7854031623974857926',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   3 ε=0.1","N=  48 ε=0.01","N= 498 ε=0.001",
   "N=4998 ε=0.0001"],
  'FOWin64'=>
  ['(1+1/n)^n','...seems to converge against 2.718145913232938',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε",
   "N=   0 ε=1","N=  11 ε=0.1","N= 132 ε=0.01","N=1194 ε=0.001","N=5759 ε=0.0001",'','1 + 1/2 + 1/3 + 1/4 + ...',
   '...seems to diverge',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=3677 ε=1",'',
   '1 + 1/2^2 + 1/3^2 + 1/4^2 + ...','...seems to converge against 1.6448340618470652',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   8 ε=0.1","N=  97 ε=0.01","N= 907 ε=0.001",
   "N=4998 ε=0.0001",'','1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 ...','...seems to converge against 0.7854031623974836',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   3 ε=0.1","N=  48 ε=0.01","N= 498 ε=0.001",
   "N=4998 ε=0.0001"],
  'LDLinux'=>
  ['(1+1/n)^n','...seems to converge against 2.7181459132335902967',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε",
   "N=   0 ε=1","N=  11 ε=0.1","N= 132 ε=0.01","N=1194 ε=0.001","N=5759 ε=0.0001",'','1 + 1/2 + 1/3 + 1/4 + ...',
   '...seems to diverge',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=3677 ε=1",'',
   '1 + 1/2^2 + 1/3^2 + 1/4^2 + ...','...seems to converge against 1.64483406184705953899',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   8 ε=0.1","N=  97 ε=0.01","N= 907 ε=0.001",
   "N=4998 ε=0.0001",'','1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 ...','...seems to converge against 0.78540316239748583597',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   3 ε=0.1","N=  48 ε=0.01","N= 498 ε=0.001",
   "N=4998 ε=0.0001"],
  'LDWin32'=>
  ['(1+1/n)^n','...seems to converge against 2.7181459132335902967',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε",
   "N=   0 ε=1","N=  11 ε=0.1","N= 132 ε=0.01","N=1194 ε=0.001","N=5759 ε=0.0001",'','1 + 1/2 + 1/3 + 1/4 + ...',
   '...seems to diverge',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=3677 ε=1",'',
   '1 + 1/2^2 + 1/3^2 + 1/4^2 + ...','...seems to converge against 1.6448340618470595545',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   8 ε=0.1","N=  97 ε=0.01","N= 907 ε=0.001",
   "N=4998 ε=0.0001",'','1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 ...','...seems to converge against 0.7854031623974857926',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   3 ε=0.1","N=  48 ε=0.01","N= 498 ε=0.001",
   "N=4998 ε=0.0001"],
  'LDWin64'=>
  ['(1+1/n)^n','...seems to converge against 2.718145913232938',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε",
   "N=   0 ε=1","N=  11 ε=0.1","N= 132 ε=0.01","N=1194 ε=0.001","N=5759 ε=0.0001",'','1 + 1/2 + 1/3 + 1/4 + ...',
   '...seems to diverge',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=3677 ε=1",'',
   '1 + 1/2^2 + 1/3^2 + 1/4^2 + ...','...seems to converge against 1.6448340618470652',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   8 ε=0.1","N=  97 ε=0.01","N= 907 ε=0.001",
   "N=4998 ε=0.0001",'','1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 ...','...seems to converge against 0.7854031623974836',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   3 ε=0.1","N=  48 ε=0.01","N= 498 ε=0.001",
   "N=4998 ε=0.0001"],
  'LOLinux'=>
  ['(1+1/n)^n','...seems to converge against 2.7181459132335902967',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε",
   "N=   0 ε=1","N=  11 ε=0.1","N= 132 ε=0.01","N=1194 ε=0.001","N=5759 ε=0.0001",'','1 + 1/2 + 1/3 + 1/4 + ...',
   '...seems to diverge',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=3677 ε=1",'',
   '1 + 1/2^2 + 1/3^2 + 1/4^2 + ...','...seems to converge against 1.64483406184705953899',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   8 ε=0.1","N=  97 ε=0.01","N= 907 ε=0.001",
   "N=4998 ε=0.0001",'','1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 ...','...seems to converge against 0.78540316239748583597',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   3 ε=0.1","N=  48 ε=0.01","N= 498 ε=0.001",
   "N=4998 ε=0.0001"],
  'LOWin32'=>
  ['(1+1/n)^n','...seems to converge against 2.7181459132335902967',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε",
   "N=   0 ε=1","N=  11 ε=0.1","N= 132 ε=0.01","N=1194 ε=0.001","N=5759 ε=0.0001",'','1 + 1/2 + 1/3 + 1/4 + ...',
   '...seems to diverge',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=3677 ε=1",'',
   '1 + 1/2^2 + 1/3^2 + 1/4^2 + ...','...seems to converge against 1.6448340618470595545',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   8 ε=0.1","N=  97 ε=0.01","N= 907 ε=0.001",
   "N=4998 ε=0.0001",'','1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 ...','...seems to converge against 0.7854031623974857926',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   3 ε=0.1","N=  48 ε=0.01","N= 498 ε=0.001",
   "N=4998 ε=0.0001"],
  'LOWin64'=>
  ['(1+1/n)^n','...seems to converge against 2.718145913232938',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε",
   "N=   0 ε=1","N=  11 ε=0.1","N= 132 ε=0.01","N=1194 ε=0.001","N=5759 ε=0.0001",'','1 + 1/2 + 1/3 + 1/4 + ...',
   '...seems to diverge',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=3677 ε=1",'',
   '1 + 1/2^2 + 1/3^2 + 1/4^2 + ...','...seems to converge against 1.6448340618470652',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   8 ε=0.1","N=  97 ε=0.01","N= 907 ε=0.001",
   "N=4998 ε=0.0001",'','1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 ...','...seems to converge against 0.7854031623974836',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   3 ε=0.1","N=  48 ε=0.01","N= 498 ε=0.001",
   "N=4998 ε=0.0001"]].toMap,
 'combinations'=>
 ['[1,2,3]','[1,2,4]','[1,2,5]','[1,3,4]','[1,3,5]','[1,4,5]','[2,3,4]','[2,3,5]','[2,4,5]','[3,4,5]'],
 'commaQuibble'=>
 ['{}','{ABC}','{ABC and DEF}','{ABC, DEF, G and H}'],
 'concatInts'=>
 ['998764543431','6054854654'],
 'continuedFractions'=>
 ['FDLinux'=>
  ['1+1/(1+1/(1+1/(1+1/(1+1/(1+...)))))    = 1.6180339887498948483',
   '1+1/(2+1/(2+1/(2+1/(2+1/(2+...)))))    = 1.41421356237309504876',
   '2+1/(1+1/(2+2/(3+3/(4+4/(5+...)))))    = 2.7182818284590452354',
   '3+1/(6+9/(6+25/(6+49/(6+81/(6+...))))) = 3.141592653558605674'],
  'FDWin32'=>
  ['1+1/(1+1/(1+1/(1+1/(1+1/(1+...)))))    = 1.6180339887498948483',
   '1+1/(2+1/(2+1/(2+1/(2+1/(2+...)))))    = 1.41421356237309504876',
   '2+1/(1+1/(2+2/(3+3/(4+4/(5+...)))))    = 2.7182818284590452354',
   '3+1/(6+9/(6+25/(6+49/(6+81/(6+...))))) = 3.141592653558605674'],
  'FDWin64'=>
  ['1+1/(1+1/(1+1/(1+1/(1+1/(1+...)))))    = 1.6180339887498949','1+1/(2+1/(2+1/(2+1/(2+1/(2+...)))))    = 1.4142135623730951',
   '2+1/(1+1/(2+2/(3+3/(4+4/(5+...)))))    = 2.7182818284590455','3+1/(6+9/(6+25/(6+49/(6+81/(6+...))))) = 3.1415926535586056'],
  'FOLinux'=>
  ['1+1/(1+1/(1+1/(1+1/(1+1/(1+...)))))    = 1.6180339887498948483',
   '1+1/(2+1/(2+1/(2+1/(2+1/(2+...)))))    = 1.41421356237309504876',
   '2+1/(1+1/(2+2/(3+3/(4+4/(5+...)))))    = 2.7182818284590452354',
   '3+1/(6+9/(6+25/(6+49/(6+81/(6+...))))) = 3.141592653558605674'],
  'FOWin32'=>
  ['1+1/(1+1/(1+1/(1+1/(1+1/(1+...)))))    = 1.6180339887498948483',
   '1+1/(2+1/(2+1/(2+1/(2+1/(2+...)))))    = 1.41421356237309504876',
   '2+1/(1+1/(2+2/(3+3/(4+4/(5+...)))))    = 2.7182818284590452354',
   '3+1/(6+9/(6+25/(6+49/(6+81/(6+...))))) = 3.141592653558605674'],
  'FOWin64'=>
  ['1+1/(1+1/(1+1/(1+1/(1+1/(1+...)))))    = 1.6180339887498949','1+1/(2+1/(2+1/(2+1/(2+1/(2+...)))))    = 1.4142135623730951',
   '2+1/(1+1/(2+2/(3+3/(4+4/(5+...)))))    = 2.7182818284590455','3+1/(6+9/(6+25/(6+49/(6+81/(6+...))))) = 3.1415926535586056'],
  'LDLinux'=>
  ['1+1/(1+1/(1+1/(1+1/(1+1/(1+...)))))    = 1.6180339887498948483',
   '1+1/(2+1/(2+1/(2+1/(2+1/(2+...)))))    = 1.41421356237309504876',
   '2+1/(1+1/(2+2/(3+3/(4+4/(5+...)))))    = 2.7182818284590452354',
   '3+1/(6+9/(6+25/(6+49/(6+81/(6+...))))) = 3.141592653558605674'],
  'LDWin32'=>
  ['1+1/(1+1/(1+1/(1+1/(1+1/(1+...)))))    = 1.6180339887498948483',
   '1+1/(2+1/(2+1/(2+1/(2+1/(2+...)))))    = 1.41421356237309504876',
   '2+1/(1+1/(2+2/(3+3/(4+4/(5+...)))))    = 2.7182818284590452354',
   '3+1/(6+9/(6+25/(6+49/(6+81/(6+...))))) = 3.141592653558605674'],
  'LDWin64'=>
  ['1+1/(1+1/(1+1/(1+1/(1+1/(1+...)))))    = 1.6180339887498949','1+1/(2+1/(2+1/(2+1/(2+1/(2+...)))))    = 1.4142135623730951',
   '2+1/(1+1/(2+2/(3+3/(4+4/(5+...)))))    = 2.7182818284590455','3+1/(6+9/(6+25/(6+49/(6+81/(6+...))))) = 3.1415926535586056'],
  'LOLinux'=>
  ['1+1/(1+1/(1+1/(1+1/(1+1/(1+...)))))    = 1.6180339887498948483',
   '1+1/(2+1/(2+1/(2+1/(2+1/(2+...)))))    = 1.41421356237309504876',
   '2+1/(1+1/(2+2/(3+3/(4+4/(5+...)))))    = 2.7182818284590452354',
   '3+1/(6+9/(6+25/(6+49/(6+81/(6+...))))) = 3.141592653558605674'],
  'LOWin32'=>
  ['1+1/(1+1/(1+1/(1+1/(1+1/(1+...)))))    = 1.6180339887498948483',
   '1+1/(2+1/(2+1/(2+1/(2+1/(2+...)))))    = 1.41421356237309504876',
   '2+1/(1+1/(2+2/(3+3/(4+4/(5+...)))))    = 2.7182818284590452354',
   '3+1/(6+9/(6+25/(6+49/(6+81/(6+...))))) = 3.141592653558605674'],
  'LOWin64'=>
  ['1+1/(1+1/(1+1/(1+1/(1+1/(1+...)))))    = 1.6180339887498949','1+1/(2+1/(2+1/(2+1/(2+1/(2+...)))))    = 1.4142135623730951',
   '2+1/(1+1/(2+2/(3+3/(4+4/(5+...)))))    = 2.7182818284590455','3+1/(6+9/(6+25/(6+49/(6+81/(6+...))))) = 3.1415926535586056']
 ].toMap,
 'copyOnWriteDemo'=>
 ['initial list: [0,1,2,3]',"after adding element X the list is: [0,1,2,3,'X']",'after removing element #0 the list is: [1,2,3]',
  'list still is: [0,1,2,3]',"after adding element X the list is: [0,1,2,3,'X']",
  "after removing element #0 the list is: [1,2,3,'X']","Now my list is: [1,2,3,'X']"],
 'countInFactors'=>
 ['1','2','3','2*2','5','2*3','7','2*2*2','3*3','2*5','11','2*2*3','13','2*7','3*5','2*2*2*2','17','2*3*3','19','2*2*5','3*7',
  '2*11','23','2*2*2*3','5*5'],
 'countTheCoins'=>
 ['There are 293 ways to make a dollar from coins','  and 4563 ways to make a euro from coins.'],
 'deBruijn'=>
 ['01','0011','00010111','0000100110101111','00000100011001010011101011011111',
  '0000001000011000101000111001001011001101001111010101110110111111',
  '00000001000001100001010000111000100100010110001101000111100100110010101001011100110110011101001111101010110101111011011101111111'
 ],
 'departmentNumbers'=>
 ['[2,3,7]','[2,4,6]','[2,6,4]','[2,7,3]','[4,1,7]','[4,3,5]','[4,5,3]','[4,7,1]','[6,1,5]','[6,5,1]'],
 'dice7fromDice5'=>
 ['Distribution of seven sided dice (100000 samples): ','  0.14168','  0.14199','  0.14217','  0.14234','  0.14370','  0.14402',
  '  0.14410'],
 'diff'=>
 ['--- <#>/demos/inputs/unixdict.txt','+++ <#>/demos/inputs/unixdict2.txt','@@ -20,13 +20,4 @@',"  Abby's",'  Abdul',"- Abdul's",
  '- Abe',"- Abe's",'- Abel',"- Abel's",'- Abelard',"- Abelard's",'- Abelson',"- Abelson's",'  Aberdeen',"  Aberdeen's",
  '@@ -101,5 +92,5 @@',"  Adan's",'  Adana',"- Adana's",'+ insertion','  Adar',"  Adar's"],
 'digitSquareSum'=>
 ['85623'],
 'eratosthenes'=>
 ['   2,   3,   5,   7,  11,  13,  17,  19,  23,  29,  31,  37,  41,  43,  47,  53,  59,  61,  67,  71',
  '  73,  79,  83,  89,  97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173',
  ' 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281',
  ' 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409',
  ' 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541',
  ' 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659',
  ' 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809',
  ' 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941',
  ' 947, 953, 967, 971, 977, 983, 991, 997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069',
  '1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223',
  '1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373',
  '1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511',
  '1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657',
  '1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811',
  '1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987',
  '1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129',
  '2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287',
  '2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423',
  '2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617',
  '2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741',
  '2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897'],
 'ethiopian'=>
 ['   17      34','    8  [   68]','    4  [  136]','    2  [  272]','    1     544','       =======','          578'],
 'eulersSumOfPowers'=>
 ['27^5 + 84^5 + 110^5 + 133^5 = 144^5'],
 'examples_from_file'=>
 ['FDLinux'=>
  ['in> arity({3});','out> 0','in> arity({sin($x)/$x});','out> 1',
   "in> runScript(['name'=>'hello.mnh','source'=>[\"main->print('Hello world');\"],'side effects'=>['alter package state','output']].toMap).filter({$message.head=='printline'}).map(:: trailing);",
   "out> ['Hello world']",'in> arity({sin($x)/$y});','out> 2',"in> arity({printf('%s%s', $a,...)});",'out> 1',
   "in> toExpression('$x-$x^2+$x^3');",'out> {$x-$x^2+$x^3}',"in> toExpression('');",
   'Error The parsed expression appears to be empty','in> parameterNames({3});','out> []','in> parameterNames({sin($x)/$x});',
   "out> ['$x']","in> parameterNames({printf('%s%s', $a,...)});","out> ['$a']",'in> ord(3);','out> 3','in> ord(true);','out> 1',
   'in> ord(false);','out> 0',"in> ord('A');",'out> 65',"in> ord('abc');",'out> -1','in> ord(2.1);',
   'Error ord can only be applied to booleans, ints and strings',"in> softCast('A');","out> 'A'",'in> softCast(''"B"'');',
   "out> 'B'",'in> softCast(3);','out> 3',"in> softCast([1,'2','true',\"'TEXT'\",'1.5','2,6']);",
   "out> [1,2,true,'TEXT',1.5,'2,6']","in> toString('a');","out> 'a'",'in> toString(234);',"out> '234'",
   "in> toString([1, 2.6,'a', true,{$x}]);",'out> "[1,2.6,''a'',true,{$x}]"','in> abs(-0.92);','out> 0.92','in> abs(3);',
   'out> 3','in> abs({1+$x});','out> {abs(1+$x)}','in> arccos(-0.92);','out> 2.7388768120091316555','in> arccos(3);','out> Nan',
   'in> arccos({1+$x});','out> {arccos(1+$x)}','in> arcsin(-0.92);','out> -1.16808048521423503635','in> arcsin(3);','out> Nan',
   'in> arcsin({1+$x});','out> {arcsin(1+$x)}','in> tan(-0.92);','out> -1.31326369932024783656','in> tan(3);',
   'out> -0.14254654307427780529','in> tan({1+$x});','out> {tan(1+$x)}','in> tan(pi/2);','out> -3.6893488147419103232E19',
   'in> arctan(-0.92);','out> -0.74375558429885988575','in> arctan({$x});','out> {arctan($x)}','in> argMax(sin([0..10]));',
   'out> 8','in> argMax([1, 3, 3, 0, 2]);','out> 1','in> argMin(sin([0..10]));','out> 5','in> argMin([1, 3, 3, 0, 2]);','out> 3',
   'in> ceil(20/3);','out> 7','in> ceil([0..3]/3);','out> [0,1,1,1]','in> ceil([0..3]/3, 2);','out> [0,0.34,0.67,1]',
   'in> floor(20/3);','out> 6','in> floor([0..3]/3);','out> [0,0,0,1]','in> floor([0..3]/3, 2);','out> [0,0.33,0.66,1]',
   'in> round(20/3);','out> 7','in> round([0.5, 1.5, 2.5, 3.5]);','out> [0,2,2,4]','in> round([0..3]/3, 2);',
   'out> [0,0.33,0.67,1]','in> isInfinite(Nan);','out> false','in> isInfinite(+Inf);','out> true','in> isInfinite(-Inf);',
   'out> true','in> isInfinite([-3.4344, Nan,+Inf]);','out> [false,false,true]','in> isNan(Nan);','out> true','in> isNan(+Inf);',
   'out> false','in> isNan(-Inf);','out> false','in> isNan([-3.4344, Nan,+Inf]);','out> [false,true,false]','in> cos(-0.92);',
   'out> 0.60582015664346284178','in> cos(3);','out> -0.98999249660044545727','in> cos({1+$x});','out> {cos(1+$x)}',
   'in> exp(-0.92);','out> 0.39851904108451413621','in> exp(3);','out> 20.085536923187667923','in> exp({1+$x});',
   'out> {exp(1+$x)}','in> ln(-0.92);','out> Nan','in> ln(3);','out> 1.09861228866810969136','in> ln({1+$x});','out> {ln(1+$x)}',
   'in> ln(-0.92);','out> Nan','in> sin(3);','out> 0.1411200080598672221','in> sin({1+$x});','out> {sin(1+$x)}',
   'in> sqr(-0.92);','out> 0.8464','in> sqr(3);','out> 9','in> sqr({1+$x});','out> {sqr(1+$x)}','in> sqrt(-0.92);','out> Nan',
   'in> sqrt(3);','out> 1.73205080756887729357','in> sqrt({1+$x});','out> {sqrt(1+$x)}','in> isqrt(121);','out> [11,true]',
   'in> isqrt(255);','out> [15,false]','in> sign(-0.92);','out> -1','in> sign(3);','out> 1','in> sign({1+$x});',
   'out> {sign(1+$x)}',"in> max(['a'..'z']);","out> 'z'",'in> max([0..9]/2);','out> 4.5','in> max(true, false);','out> true',
   "in> min(['a'..'z']);","out> 'a'",'in> min([0..9]/2);','out> 0','in> min(true, false);','out> false',
   "in> copy('abcde', 1, 3);","out> 'bcd'","in> copy('abcde', 2);","out> 'cde'","in> escape('a');",'out> "''a''"',
   'in> escape(#9);',"out> '#9'",'in> group([1..10],[1..10] mod 3=0);','out> [false => [1,2,4,5,7,8,10],true=>[3,6,9]].toMap',
   'in> fail;','Error Fail','in> fail("Told you this wouldn''t work!");',"Error Told you this wouldn't work!",'in> hash(1);',
   'out> 2','in> hash([1..3]);','out> 299863',"in> hash('a');",'out> 283',
   "in> listBuiltin.filter({$s.matches('^mnh\\.')}).sort.trailing(10);",
   "out> ['mnh.listBuiltin','mnh.listSideEffects','mnh.mnhInfo','mnh.myPath','mnh.ord','mnh.parameterNames','mnh.runScript','mnh.sandBoxExecute','mnh.sleep','mnh.sleepUntil']",
   "in> group([[1,'a'],[2,'a'],[1,'b'],[4,'c'],[2,'a'],[2,'b']], 1, aggregator({[$x[0]+$y[0], $x[1]]}));",
   "out> ['b' => [3,'b'],'c'=>[4,'c'],'a'=>[5,'a']].toMap",'in> abs(3);','out> 3','in> abs(-3);','out> 3','in> abs([-2..2]/2);',
   'out> [1,0.5,0,0.5,1]',"in> chars('This is a test.');","out> ['T','h','i','s',' ','i','s',' ','a',' ','t','e','s','t','.']",
   'in> chars.get(100);',"out> 'd'","in> clean('+21/232/2116-11',['0'..'9'],' ');","out> ' 21 232 2116 11'",
   "in> join(['a','b','c']);","out> 'abc'","in> join([1..5],' ');","out> '1 2 3 4 5'","in> length(\"Test öäü\");",'out> 8',
   "in> byteLength(\"Test öäü\");",'out> 11',"in> length(['Text','AbC']);",'out> [4,3]',"in> lower('Test');","out> 'test'",
   "in> lower(['Text','AbC']);","out> ['text','abc']","in> upper('Test');","out> 'TEST'","in> upper(['Text','AbC']);",
   "out> ['TEXT','ABC']",'in> t :=[0..1000]*2*pi/1000;','in> plot(t, sin(t));','out> void',
   "in> plot.renderToFile('plotDemo1.png', 600, 300);",'out> void','in> abs({$x});','out> {abs($x)}','in> abs(3);','out> 3',
   'in> abs(-5/7);','out> 0.71428571428571430157','in> abs([-2..2]);','out> [2,1,0,1,2]',"in> chars('Test');",
   "out> ['T','e','s','t']","in> pos('o','Hello World');",'out> 4',"in> pos(',',['Hello','Test','1,2,3']);",'out> [Inf,Inf,1]',
   "in> pos(['a','b'],'cdb');",'out> [Inf,2]',"in> repeat('-', 10);","out> '----------'","in> replace('[[][]][]][][','[]','');",
   "out> ']['","in> replace('aba','b','bb');","out> 'abba'","in> replaceOne('[[][]][]][][','[]','');","out> '[[]][]][]['",
   "in> replaceOne('1:.-.; 2:.-.; 3:.-.','.',['a'..'e']);","out> '1:a-b; 2:c-d; 3:e-.'","in> split('1,2,3;4,5,6',',');",
   "out> ['1','2','3;4','5','6']","in> split('1,2,3;4,5,6',';');","out> ['1,2,3','4,5,6']","in> split('1,2,3;4,5,6',[';',',']);",
   "out> ['1','2','3','4','5','6']","in> tokenSplit('f(x)->x+1; //Stupid, but just an example...','mnh');",
   "out> ['f','(','x',')','->','x','+','1',';',' ','//Stupid, but just an example...']",'in> trim(" \tA B C\t ");',
   "out> 'A B C'",'in> trimLeft(" \tA B C\t ");','out> "A B C\t "','in> trimRight(" \tA B C\t ");','out> " \tA B C"',
   "in> unbrace('3');","out> '3'","in> unbrace('(3)');","out> '3'","in> unbrace('(3]');","out> '(3]'",'in> unbrace(''"3"'');',
   'out> ''"3"''',"in> chars('Testtext').elementFrequency;","out> ['T' => 1,'e'=>2,'s'=>1,'t'=>3,'x'=>1].toMap",
   'in> flatten([1,[2,[3, 4],[5]], 6]);','out> [1,2,3,4,5,6]',"in> head(['A'..'Z']);","out> 'A'","in> head(['A'..'Z'], 3);",
   "out> ['A','B','C']","in> ['A'..'Z'].toSet.head(3);","out> ['F','V','G']","in> tail(['A'..'Z']);",
   "out> ['B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']",
   "in> tail(['A'..'Z'], 3);",
   "out> ['D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']",
   'in> rangeGenerator(1, 10).tail(3);','out> [4,5,6,7,8,9,10]',"in> leading(['A'..'Z']);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y']",
   "in> leading(['A'..'Z'], 3);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W']",
   'in> rangeGenerator(1, 10).leading(3);','out> [1,2,3,4,5,6,7]',"in> trailing(['A'..'Z']);","out> 'Z'",
   "in> trailing(['A'..'Z'], 3);","out> ['X','Y','Z']","in> ['A'..'Z'].toSet.trailing(3);","out> ['T','E','U']",
   'in> rangeGenerator(1, 10).trailing(3);','out> [8,9,10]','in> minus([1..10]^2, 2*[0..50]);','out> [1,9,25,49,81].toSet',
   'in> sort(intRandom(10, 5));','out> [0,1,2,3,8]',"in> sort(['01','10','100','1','010'],{softCast($x)<=softCast($y)});",
   "out> ['01','1','10','010','100']",'in> sortPerm(random(10));','out> [8,3,2,1,5,6,9,0,7,4]',"in> sortPerm(['a'..'c'..'a']);",
   'out> [0,4,1,3,2]','in> intersect([0..1000]^2,[0..1000]^3);',
   'out> [1,0,4096,262144,64,46656,1000000,729,15625,117649,531441].toSet','in> union(1/[1..5], 2/[2..6]);',
   'out> [1,0.5,0.33333333333333331483,0.25,0.2000000000000000111,0.66666666666666662965,0.4000000000000000222].toSet',
   "in> deleteFile('plotDemo1.png');",'out> true',"in> get(['a'..'f'], 3);","out> 'd'","in> get(['a'..'f'],[3, 1, 2]);",
   "out> ['d','b','c']",'in> get([0..4],[2..6] mod 3=0);','out> [1,4]',"in> get([['A', 1],['B', 2],['C', 0]],'B');",'out> 2',
   'in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]], 1);','out> [2,5,8]','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[1, 0]);',
   'out> [[2,1],[5,4],[8,7]]','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[true, false, true]);','out> [[1,3],[4,6],[7,9]]',
   'in> indexOf([1..6]^2 mod 3=0);','out> [2,5]','in> reverseList([1..5]);','out> [5,4,3,2,1]','in> size([0.5, 0.1, 0.2]);',
   'out> 3',"in> toMap([['A', 1],['B', 2],['C', 0],['B', 4]]);","out> ['B' => 4,'C'=>0,'A'=>1].toMap",
   'in> trueCount(10<[0..10]^2<50);','out> 4','in> unique([3, 1, 2, 1, 4, 1, 5]);','out> [1,2,3,4,5]',"in> compress('Test');",
   "out> 'Test'","in> compress('Test').decompress;","out> 'Test'","in> compress('Testtext');","out> #2#248'e'#240'9N'",
   "in> compress('Testtext').decompress;","out> 'Testtext'","in> relativeFileName('~/folder/','~/other/example.txt');",
   "out> '../other/example.txt'",'in> primes(20);','out> [2,3,5,7,11,13,17,19]','in> subSets([1, 2, 1]);',
   'out> [[],[1],[1,1],[2],[2,1],[2,1,1]]',"in> diff('encode','decode');",
   "out> ['deletes' => 1,'modifies'=>0,'adds'=>1,'matches'=>5,'edit'=>[['+',-1,0],[' ',0,1],['-',1,1],[' ',2,2],[' ',3,3],[' ',4,4],[' ',5,5]]].toMap",
   "in> diffStats('encode','decode');","out> ['deletes' => 1,'modifies'=>0,'adds'=>1,'matches'=>5].toMap",
   "in> format('%s is a string, %3.3d is a number','X', 7);","out> 'X is a string, 007 is a number'","in> format('%6.3f', 3);",
   "out> ' 3.000'","in> format('%6.3e', 3);","out> '3.00E+000'","in> format('%6.3g', 3);","out> '     3'",
   "in> format('%6.6x', 1234);","out> '0004D2'","in> formatTime('mm.dd.yyyy', 43210);","out> '04.20.2018'",
   'in> formatTime(12424.245);',"out> '5-1-34 05:52:48'","in> isAscii('xyz');",'out> true',"in> isAscii('xyz'&chars[180]);",
   'out> false',"in> isAscii(\"Läuft\");",'out> false',"in> isUtf8('xyz');",'out> true',"in> isUtf8('xyz'&chars[180]);",
   'out> false',"in> isUtf8(\"Schräg\");",'out> true',"in> parseTime('yyyy-mm-dd hh:nn','2000-01-01 03:43');",
   'out> 36526.154861111113859',"in> reverseString('Test');","out> 'tseT'","in> regex.matches('This is a test','[T|t]est');",
   'out> true',"in> regex.matchComposite('This is a test','[T|t]est');","out> [['test',11,4]]",
   "in> regex.replace('A Test is a test','[T|t]est','rose');","out> 'A rose is a rose'",
   "in> regex.split('A Test is a test','[e| ]');","out> ['A','T','st','is','a','t','st']",'in> toBoolean(0);','out> false',
   'in> toBoolean(1.0);','out> true',"in> toBoolean('true');",'out> true','in> toBoolean(3);',
   'Error 3 cannot be cast to boolean',"in> toInt('32');",'out> 32','in> toInt(3.0);','out> 3','in> toInt(3.1);',
   'Error 3.1 cannot be cast to int','in> toInt(false);','out> 0',"in> toReal('3.212');",'out> 3.212','in> toReal(true);',
   'out> 1','in> toReal(3);','out> 3.0','in> getOptions;',
   "out> ['x1' => 1.0,'axisStyleY'=>7,'strictInput'=>false,'autoscaleX'=>true,'logscaleX'=>false,'fontsize'=>10.0,'autoscaleY'=>true,'logscaleY'=>false,'y0'=>-1.0,'autoscaleFactor'=>1.0,'x0'=>-1.0,'y1'=>1.0,'preserveAspect'=>true,'axisStyleX'=>7].toMap",
   'in> executor;',"out> '<#>/target/Linux/mnh_debug'",'in> print("1\n2.0\n03.45");','1','2.0','03.45','out> void',
   'in> print("1\n2.0\n03,45\t");',' 1',' 2.0','03,45','out> void','in> print("1\tone\t|\n2.0\ttwo\t|\n03.45\tthree\t|");',
   ' 1    one   |',' 2.0  two   |','03.45 three |','out> void','in> print("1\vone\v|\n2.0\vtwo\v|\n03.45\vthree\v|");',
   ' 1   one  |',' 2.0 two  |','03.45three|','out> void',"in> printf('%x is %d in hexadecimal form', 123, 123);",
   '7B is 123 in hexadecimal form','out> void',"in> printf('%{$0}x is %{$0}d in hexadecimal form', 123);",
   '7B is 123 in hexadecimal form','out> void',"in> printf('sin(%{$0}s)=%{sin($0)}4.4g', 1);",'sin(1)=0.8415','out> void',
   'in> permutations([1, 1, 2]);','out> [[1,2,1],[1,1,2],[2,1,1]].toSet','in> permutations([1..3]);',
   'out> [[1,3,2],[2,1,3],[2,3,1],[3,1,2],[1,2,3],[3,2,1]].toSet',"in> input :=[[1..10], random,'test', random(9)];",
   'in> serialized :=input.serialize;',"in> print(input.toString.byteLength,' > ', serialized.byteLength);",'258 > 104',
   'out> void','in> input==serialized.deserialize;','out> true','in> factorize(18447422338071909869);',
   'out> [2642257,2642287,2642291]','in> formatTabs("\v-2\n3\t4.3");',"out> ['  -2','3  4.3']",'in> typeOf(3);',"out> 'Int'",
   'in> typeOf([1..5, 7.5]);',"out> 'NumericList(6)'",'in> typeOf({$x^2+$y});',"out> 'Expression(2)'",
   'in> x :=transpose([1,[1, 2, 3],[1, 2]], 0);','in> x;','out> [[1,1,1],[0,2,2],[0,3,0]]','in> x.transpose(0);',
   'out> [[1,0,0],[1,2,3],[1,2,0]]','in> resetRandom(12157);','out> void','in> resetRandom;','out> void','in> intRandom(7);',
   'out> 1','in> intRandom(7, 10);','out> [2,2,3,0,0,3,2,2,6,5]','in> random;','out> 0.70794778806157410144','in> random(3);',
   'out> [0.20965369325131177902,0.45114781009033322334,0.19202205142937600612]',"in> note('Note that this is a note');",
   'Note Note that this is a note','out> void',"in> warn('Warning: I intend to say something important here');",
   'Warning Warning: I intend to say something important here','out> void','in> isScalar(1);','out> true',
   'in> isBoolean(false);','out> true','in> isBoolean(1);','out> false','in> isInt(false);','out> false','in> isInt(1);',
   'out> true','in> isInt(1.0);','out> false','in> isReal(false);','out> false','in> isReal(1);','out> false','in> isReal(1.0);',
   'out> true','in> isNumeric(false);','out> false','in> isNumeric(1);','out> true','in> isNumeric(1.0);','out> true',
   'in> isList([]);','out> true','in> isList([], 0);','out> true','in> isList([], 1);','out> false',"in> isList(['x'], 1);",
   'out> true',"in> isString('Test');",'out> true','in> isString(true);','out> false','in> isExpression(:: sin);','out> true',
   'in> isExpression(:: sin, 1);','out> true','in> isExpression(:: sin, 2);','out> false','in> digits(123);','out> [1,2,3]',
   'in> digits(123, 3);','out> [1,1,1,2,0]','in> arctan2(1, 1);','out> 0.78539816339744830962',"in> charSet('abcba');",
   "out> ['a','b','c'].toSet","in> bytes(\"ö\").ord;",'out> [195,182]',"in> base64encode('Test');","out> 'VGVzdA=='",
   "in> base64decode('VGVzdA==');","out> 'Test'","in> base92encode('bla bla bla ');","out> ']En_)]En_)]En_)'",
   "in> base92decode('PgsC.?d@t^');","out> '12345'",'in> listSideEffects;',
   "out> ['input','output','sound','sleep','detaching','server','read package state','alter package state','alter context state','alter plot state','read file','write file','http','ipc','executing external']",
   "in> changeFileExt('file.extension','.newExtension');","out> 'file.newExtension'",
   "in> changeFileExt('file.2.extension','.newExtension');","out> 'file.2.newExtension'",'in> httpError;',
   'out> "HTTP/1.0 404\r\n"','in> isBooleanList([true, false]);','out> true','in> isBooleanList(true);','out> false',
   'in> isIntList([1..3]);','out> true','in> isIntList([1, 2.0]);','out> false','in> isRealList([1, 2, 3]);','out> false',
   'in> isRealList([1.0, 2.0, 3.0, Nan]);','out> true',"in> isStringList(['a'..'z']);",'out> true',
   'in> isNumericList([1, 2, 3]);','out> true','in> isNumericList([1.0, 2, 3, Inf]);','out> true','in> isVoid();','out> true',
   'in> isVoid(void);','out> true','in> isVoid(3);','out> false',"in> escapePascal('Test');",'out> "''Test''"',
   "in> escapeJava('Test');",'out> ''"Test"''',"in> extractFileNameOnly('/home/user/file.ext');","out> 'file'",
   "in> extractFileDirectory('/home/user/file.ext');","out> '/home/user'","in> extractFileName('/home/user/file.ext');",
   "out> 'file.ext'","in> extractFileExt('/home/user/file.ext');","out> '.ext'","in> extractPath('/index.html?x=0&y=3%2Ax');",
   "out> '/index.html'","in> extractParameters('/index.html?x=0&y=3%2Ax');","out> ['x' => 0,'y'=>'3*x'].toMap",
   "in> extractRawParameters('/index.html?x=0&y=3%2Ax');","out> 'x=0&y=3%2Ax'",
   "in> encodeRequest('127.0.0.1:3126','rest',[['user','anonymous'],['request','3*&7']].toMap);",
   "out> '127.0.0.1:3126/rest?user=anonymous&request=3%2A%267'","in> cross(['1'..'3'],['A'..'C']);",
   "out> [['1','A'],['1','B'],['1','C'],['2','A'],['2','B'],['2','C'],['3','A'],['3','B'],['3','C']]",'in> [1, 2, 1].toSet;',
   'out> [2,1].toSet','in> [1.2, 3.0].isRealCollection;','out> true','in> [1.2, 3.0].toSet.isRealCollection;','out> true',
   'in> [1.2, 3].isRealCollection;','out> false','in> [1.2, 3.0].isRealCollection(2);','out> true',
   'in> [1.2, 3.0].isRealCollection(3);','out> false','in> [true].isBooleanCollection;','out> true',
   'in> [true, false, true].toSet.isBooleanCollection(2);','out> true','in> [true, false, true].toSet.isBooleanSet;','out> true',
   'in> [1, 2, 3].isIntCollection;','out> true','in> [].isIntCollection;','out> true','in> [1.2, 3].isNumericCollection;',
   'out> true',"in> ['a','b'].toSet.isStringSet;",'out> true',"in> ['a','b'].isStringCollection;",'out> true',
   'in> [1, 2, 3].isIntSet;','out> false','in> [1, 2, 3].toSet.isIntSet;','out> true',
   "in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap;",'out> true',"in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(2);",'out> true',
   "in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(3);",'out> false',"in> [1,'a', false].isSet;",'out> false',
   "in> [1,'a', false].isCollection;",'out> true',"in> utf8ToAnsi(\"öµ\").bytes.ord;",'out> [246,181]',
   'in> chars[214].ansiToUtf8;',"out> \"Ö\"",'in> [1.2, 3.4].toSet.isRealSet;','out> true','in> toList(3);','out> [3]',
   'in> toList([2, 3, 6].toSet);','out> [3,2,6]','in> [1.2, 3.4].toSet.isNumericSet;','out> true',
   "in> [[1,'one'],[3,'three'],[5,'five']].toMap.getAll([1, 5, 6],['-','-','-']);","out> ['one','five','-']",
   'in> [1, 3, 5].getAll([0, 2])==[1, 3, 5].get([0, 2]);','out> true','in> [1..20].filter({$x mod 2<>0<>$x mod 3});',
   'out> [1,5,7,11,13,17,19]','in> rangeGenerator(1, 20).filter({$x mod 2<>0<>$x mod 3});',
   'out> rangeGenerator(1,20).filter({$x mod 2<>0<>$x mod 3})',"in> ['a'..'f'].map(:: upper);","out> ['A','B','C','D','E','F']",
   "in> ['a'..'f'].pMap(:: upper);","out> ['A','B','C','D','E','F']",'in> primeGenerator.head(10);',
   'out> [2,3,5,7,11,13,17,19,23,29]','in> [-1, 1,-1, 1,-2, 2].agg(head);','out> -1','in> [-1, 1,-1, 1,-2, 2].agg(trailing);',
   'out> 2','in> [-1, 1,-1, 1,-2, 2].agg(toSet);','out> [-1,-2,2,1].toSet','in> [-1, 1,-1, 1,-2, 2].agg(max);','out> 2',
   'in> [-1, 1,-1, 1,-2, 2].agg(min);','out> -2','in> [-1, 1,-1, 1,-2, 2].agg(&);',"out> '-11-11-22'",
   'in> [-1, 1,-1, 1,-2, 2].agg(*);','out> -4','in> [-1, 1,-1, 1,-2, 2].agg(+);','out> 0',
   'in> permutationIterator([3, 1, 2]).map(:: print).toList;','[1,2,3]','[1,3,2]','[2,1,3]','[2,3,1]','[3,1,2]','[3,2,1]',
   'out> []','in> rangeGenerator(1, 100).map({$x^2});','out> rangeGenerator(1,100).map({$x^2})',
   "in> mergeMaps([['A', 1],['B', 2]].toMap,[['A', 7],['C', 3]].toMap, ::+);","out> ['B' => 2,'C'=>3,'A'=>8].toMap",
   "in> try({deserialize('x')});",'out> void',"in> try({deserialize('x')}, :: print);",
   "[['el3_evalError','@?:3,6','Invalid literal encoding type 120']]",'out> void',"in> try({deserialize('x')}, 0);",'out> 0',
   "in> try({deserialize('x')},{warn($x.head.trailing)});",'Warning Invalid literal encoding type 120','out> void',
   "in> interpret('3+4');",'out> 7','in> shiftRight(7, 1);','out> 3','in> shiftRight(5,-2);','out> 20',
   'in> type FiniteRealList(L :List)->L.each(x,!x.isNan,!x.isInfinite, AND);','in> x :=[1, 5, 0.4, 1/7].toFiniteRealList;',
   'in> x;','out> [1,5,0.4,0.14285714285714284921].toFiniteRealList','in> x.typeOf;',"out> 'FiniteRealList'",'in> x.toBuiltin;',
   'out> [1,5,0.4,0.14285714285714284921]','in> x.toBuiltin.typeOf;',"out> 'NumericList(4)'",
   "in> interpret({print('Hello world')},[]);",'Error Cannot apply print because of side effect(s): [output]',
   'in> composeDigits([1, 0, 1], 2);','out> 5','in> composeDigits([1, 0, 2]);','out> 102','in> composeDigits([1, 0, 2], 10, 2);',
   'out> 1.02',"in> sandBoxExecute('f(x)->3*x+1; f(f(f(1)))',['alter package state']);",
   "out> [['echo_declaration','','f(x)->3*x+1;'],['echo_input','','f(f(f(1)));'],['echo_output','','40'],['exitCode','',0]]",
   "in> begin local x:=async({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   '1: true','start','2: end','out> void',
   "in> begin local x:=future({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   'start','1: false','2: end','out> void',"in> validateRegex('(3+.*');",'out> false',"in> validateRegex('\\(3+.*');",
   'out> true','in> [1..100].pFilter({$x mod 2=$x mod 3=$x mod 5});','out> [1,30,31,60,61,90,91]','in> pi;',
   'out> 3.1415926535897932385','in> isStatefulExpression(:: sin);','out> false','in> isStatefulExpression(future(:: sin,[3]));',
   'out> true','in> isStatelessExpression(:: sin);','out> true','in> isStatelessExpression(future(:: sin,[3]));','out> false',
   'in> isIteratable(future(:: sin,[3]));','out> false','in> isIteratable(primeGenerator);','out> true',
   'in> isIteratable([1..10]);','out> true','in> isIteratableExpression(primeGenerator);','out> true',
   'in> isIteratableExpression([1..10]);','out> false',
   "in> begin resetRandom; local gen:={begin local last:=0; save; last+=random; end}; print('gen.isIteratable= ', gen.isIteratable,'; ', gen.head(3)); gen:=gen.toIteratableExpression; print('gen.isIteratable= ', gen.isIteratable,'; ', gen.head(3)); end;",
   'gen.isIteratable= false; {begin local last:=0; save; last+=random; end}',
   'gen.isIteratable= true; [0.69890124513767659664,1.5846346444450318813,2.5055105253122746944]','out> void',
   'in> toIteratableExpression(:: sqr);','Error Only nullary stateful expressions may be iteratable.',
   'in> toIteratableExpression({begin local i:=1; save; i+=i-1; end});','out> {begin local i:=1; save; i+=i-1; end}',
   'in> euklideanNorm([1, 2]);','out> 2.236067977499789805','in> assert(1=1.0);','out> void',
   "in> assert('bla'.isInt,'Invalid integer given');",'Error Invalid integer given',
   "in> md5('Test input. Could be anything really.');",'out> 337964223705814058127798532806512273013',
   "in> sha256('Test input. Could be anything really.');",
   'out> 60429211283715320795241587111266756812669288936868807314606704811653259384943','in> hammingWeight(17213);','out> 8',
   'in> gcd(1231512, 143543);','out> 23',
   'in> powMod(2988348162058574136915891421498819466320163312926952423791023078876139, 2351399303373464486466122544523690094744975233415544072992656881240319, 10^40);',
   'out> 1527229998585248450016808958343740453059','in> randomGenerator(123).head(10);',
   'out> [0.8880804681684821844,0.033595459535717964172,0.073756912024691700935,0.073728758376091718673,0.40903412224724888801,0.7116715747397392988,0.46069467556662857532,0.5966716259717941284,0.81161490315571427345,0.4983937116339802742]',
   'in> intRandomGenerator(123, 5).head(10);','out> [2,0,0,1,3,4,0,0,1,2]','in> isaacRandomGenerator(123, 5).head(10);',
   'out> [3,3,1,4,4,2,2,0,4,3]','in> modularInverse(3, 32);','out> 11','in> byteToChar(100);',"out> 'd'",
   'in> byteToChar([10, 12, 97, 45]);',"out> [#10,#12,'a','-']","in> systemSpecificFilename('..\\test/filename.txt');",
   "out> '../test/filename.txt'","in> stringIterator(['a','b','c'], 1, 3).head(10);",
   "out> ['a','b','c','aa','ab','ac','ba','bb','bc','ca']",'in> vanDerCorputGenerator(2).head(10);',
   'out> [0.0,0.5,0.25,0.75,0.125,0.625,0.375,0.875,0.0625,0.5625]','in> primeGenerator.head(1000).trailing(5);',
   'out> [7879,7883,7901,7907,7919]','in> rangeGenerator(0, 5).head(10);','out> [0,1,2,3,4,5]',
   'in> rangeGenerator(100,-100).head(10);','out> [100,99,98,97,96,95,94,93,92,91]','in> divMod(10, 7);','out> [1,3]',
   "in> 'abba'.hasPrefix('ab');",'out> true',
   'in> isPrime(47531677974672740279381824573269878221106369761801704860769848227327108403647);','out> true','in> 3==3.0;',
   'out> false','in> [1, 2, 3]==[3, 1, 3];','out> false','in> 3=3.0;','out> true','in> {$x}=3;','out> {$x=3}',
   'in> [1, 2, 3]=[3, 1, 3];','out> [false,false,true]','in> 3<=3.0;','out> true','in> [1, 2, 3]<=[3, 1, 3];',
   'out> [true,false,true]','in> 3>=3.0;','out> true','in> [1, 2, 3]>=[3, 1, 3];','out> [false,true,true]','in> 3<3.0;',
   'out> false','in> [1, 2, 3]<[3, 1, 3];','out> [true,false,false]','in> 3>3.0;','out> false','in> [1, 2, 3]>[3, 1, 3];',
   'out> [false,true,false]','in> 3<>3.0;','out> false','in> [1, 2, 3]<>[3, 1, 3];','out> [true,true,false]',
   'in> true AND false;','out> false','in> true AND 3;','out> 3','in> false AND 3;','out> false','in> true and false;',
   'out> false','in> [true, false, true, false] and[true, true, false, false];','out> [true,false,false,false]','in> 7 and 252;',
   'out> 4','in> true OR false;','out> true','in> true OR 3;','out> true','in> false OR 3;','out> 3','in> true or false;',
   'out> true','in> [true, false, true, false] or[true, true, false, false];','out> [true,true,true,false]','in> 7 or 252;',
   'out> 255','in> true xor false;','out> true','in> [true, false, true, false] xor[true, true, false, false];',
   'out> [false,true,true,false]','in> 7 xor 252;','out> 251',"in> +'a';","out> 'a'",'in> -3;','out> -3',
   'in> -[1, 2.0, Inf, Nan];','out> [-1,-2.0,-Inf,Nan]','in> !true;','out> false','in> 3 in[1..5];','out> true',
   'in> 3.0 in[1..5];','out> false','in> 1|2;','out> [1,2]','in> [1]|[2];','out> [1,2]','in> [1]|2;','out> [1,2]',
   'in> [1]|[[2]];','out> [1,[2]]','in> [1]||2;','out> [1,2]','in> [1]||[2];','out> [1,[2]]','in> 10 div 3;','out> 3',
   'in> 10/3;','out> 3.3333333333333334813','in> 10/5;','out> 2','in> 10.0/5;','out> 2.0','in> void orElse 42;','out> 42',
   'in> 3 orElse fail;','out> 3','in> 3-pi;','out> -0.14159265358979323851','in> 32459378562983 mod 2342832;','out> 1139831',
   'in> 2*3;','out> 6','in> 2.0*3;','out> 6.0','in> 4+5;','out> 9',"in> 'a'+'b';","out> 'ab'",'in> 5^7;','out> 78125',
   'in> -3.5^3;','out> -42.875','in> 3&4;',"out> '34'",'in> isSubsetOf([1, 2, 3],[1, 2, 3]);','out> true',
   'in> isSubsetOf(1,[1, 2, 3]);','out> false','in> isSubsetOf([1],[1, 2, 3]);','out> true','in> isSubsetOf([1, 4],[1, 2, 3]);',
   'out> false'],
  'FDWin32'=>
  ['in> arity({3});','out> 0','in> arity({sin($x)/$x});','out> 1',
   "in> runScript(['name'=>'hello.mnh','source'=>[\"main->print('Hello world');\"],'side effects'=>['alter package state','output']].toMap).filter({$message.head=='printline'}).map(:: trailing);",
   "out> ['Hello world']",'in> arity({sin($x)/$y});','out> 2',"in> arity({printf('%s%s', $a,...)});",'out> 1',
   "in> toExpression('$x-$x^2+$x^3');",'out> {$x-$x^2+$x^3}',"in> toExpression('');",
   'Error The parsed expression appears to be empty','in> parameterNames({3});','out> []','in> parameterNames({sin($x)/$x});',
   "out> ['$x']","in> parameterNames({printf('%s%s', $a,...)});","out> ['$a']",'in> ord(3);','out> 3','in> ord(true);','out> 1',
   'in> ord(false);','out> 0',"in> ord('A');",'out> 65',"in> ord('abc');",'out> -1','in> ord(2.1);',
   'Error ord can only be applied to booleans, ints and strings',"in> softCast('A');","out> 'A'",'in> softCast(''"B"'');',
   "out> 'B'",'in> softCast(3);','out> 3',"in> softCast([1,'2','true',\"'TEXT'\",'1.5','2,6']);",
   "out> [1,2,true,'TEXT',1.5,'2,6']","in> toString('a');","out> 'a'",'in> toString(234);',"out> '234'",
   "in> toString([1, 2.6,'a', true,{$x}]);",'out> "[1,2.6,''a'',true,{$x}]"','in> abs(-0.92);','out> 0.92','in> abs(3);',
   'out> 3','in> abs({1+$x});','out> {abs(1+$x)}','in> arccos(-0.92);','out> 2.7388768120091316555','in> arccos(3);','out> Nan',
   'in> arccos({1+$x});','out> {arccos(1+$x)}','in> arcsin(-0.92);','out> -1.16808048521423503635','in> arcsin(3);','out> Nan',
   'in> arcsin({1+$x});','out> {arcsin(1+$x)}','in> tan(-0.92);','out> -1.31326369932024783656','in> tan(3);',
   'out> -0.14254654307427780529','in> tan({1+$x});','out> {tan(1+$x)}','in> tan(pi/2);','out> -3.6893488147419103232E19',
   'in> arctan(-0.92);','out> -0.74375558429885988575','in> arctan({$x});','out> {arctan($x)}','in> argMax(sin([0..10]));',
   'out> 8','in> argMax([1, 3, 3, 0, 2]);','out> 1','in> argMin(sin([0..10]));','out> 5','in> argMin([1, 3, 3, 0, 2]);','out> 3',
   'in> ceil(20/3);','out> 7','in> ceil([0..3]/3);','out> [0,1,1,1]','in> ceil([0..3]/3, 2);','out> [0,0.34,0.67,1]',
   'in> floor(20/3);','out> 6','in> floor([0..3]/3);','out> [0,0,0,1]','in> floor([0..3]/3, 2);','out> [0,0.33,0.66,1]',
   'in> round(20/3);','out> 7','in> round([0.5, 1.5, 2.5, 3.5]);','out> [0,2,2,4]','in> round([0..3]/3, 2);',
   'out> [0,0.33,0.67,1]','in> isInfinite(Nan);','out> false','in> isInfinite(+Inf);','out> true','in> isInfinite(-Inf);',
   'out> true','in> isInfinite([-3.4344, Nan,+Inf]);','out> [false,false,true]','in> isNan(Nan);','out> true','in> isNan(+Inf);',
   'out> false','in> isNan(-Inf);','out> false','in> isNan([-3.4344, Nan,+Inf]);','out> [false,true,false]','in> cos(-0.92);',
   'out> 0.60582015664346284178','in> cos(3);','out> -0.98999249660044545727','in> cos({1+$x});','out> {cos(1+$x)}',
   'in> exp(-0.92);','out> 0.39851904108451413621','in> exp(3);','out> 20.085536923187667923','in> exp({1+$x});',
   'out> {exp(1+$x)}','in> ln(-0.92);','out> Nan','in> ln(3);','out> 1.09861228866810969136','in> ln({1+$x});','out> {ln(1+$x)}',
   'in> ln(-0.92);','out> Nan','in> sin(3);','out> 0.1411200080598672221','in> sin({1+$x});','out> {sin(1+$x)}',
   'in> sqr(-0.92);','out> 0.8464','in> sqr(3);','out> 9','in> sqr({1+$x});','out> {sqr(1+$x)}','in> sqrt(-0.92);','out> Nan',
   'in> sqrt(3);','out> 1.73205080756887729357','in> sqrt({1+$x});','out> {sqrt(1+$x)}','in> isqrt(121);','out> [11,true]',
   'in> isqrt(255);','out> [15,false]','in> sign(-0.92);','out> -1','in> sign(3);','out> 1','in> sign({1+$x});',
   'out> {sign(1+$x)}',"in> max(['a'..'z']);","out> 'z'",'in> max([0..9]/2);','out> 4.5','in> max(true, false);','out> true',
   "in> min(['a'..'z']);","out> 'a'",'in> min([0..9]/2);','out> 0','in> min(true, false);','out> false',
   "in> copy('abcde', 1, 3);","out> 'bcd'","in> copy('abcde', 2);","out> 'cde'","in> escape('a');",'out> "''a''"',
   'in> escape(#9);',"out> '#9'",'in> group([1..10],[1..10] mod 3=0);','out> [false => [1,2,4,5,7,8,10],true=>[3,6,9]].toMap',
   'in> fail;','Error Fail','in> fail("Told you this wouldn''t work!");',"Error Told you this wouldn't work!",'in> hash(1);',
   'out> 2','in> hash([1..3]);','out> 299863',"in> hash('a');",'out> 283',
   "in> listBuiltin.filter({$s.matches('^mnh\\.')}).sort.trailing(10);",
   "out> ['mnh.listBuiltin','mnh.listSideEffects','mnh.mnhInfo','mnh.myPath','mnh.ord','mnh.parameterNames','mnh.runScript','mnh.sandBoxExecute','mnh.sleep','mnh.sleepUntil']",
   "in> group([[1,'a'],[2,'a'],[1,'b'],[4,'c'],[2,'a'],[2,'b']], 1, aggregator({[$x[0]+$y[0], $x[1]]}));",
   "out> ['b' => [3,'b'],'c'=>[4,'c'],'a'=>[5,'a']].toMap",'in> abs(3);','out> 3','in> abs(-3);','out> 3','in> abs([-2..2]/2);',
   'out> [1,0.5,0,0.5,1]',"in> chars('This is a test.');","out> ['T','h','i','s',' ','i','s',' ','a',' ','t','e','s','t','.']",
   'in> chars.get(100);',"out> 'd'","in> clean('+21/232/2116-11',['0'..'9'],' ');","out> ' 21 232 2116 11'",
   "in> join(['a','b','c']);","out> 'abc'","in> join([1..5],' ');","out> '1 2 3 4 5'","in> length(\"Test öäü\");",'out> 8',
   "in> byteLength(\"Test öäü\");",'out> 11',"in> length(['Text','AbC']);",'out> [4,3]',"in> lower('Test');","out> 'test'",
   "in> lower(['Text','AbC']);","out> ['text','abc']","in> upper('Test');","out> 'TEST'","in> upper(['Text','AbC']);",
   "out> ['TEXT','ABC']",'in> t :=[0..1000]*2*pi/1000;','in> plot(t, sin(t));','out> void',
   "in> plot.renderToFile('plotDemo1.png', 600, 300);",'out> void','in> abs({$x});','out> {abs($x)}','in> abs(3);','out> 3',
   'in> abs(-5/7);','out> 0.71428571428571428569','in> abs([-2..2]);','out> [2,1,0,1,2]',"in> chars('Test');",
   "out> ['T','e','s','t']","in> pos('o','Hello World');",'out> 4',"in> pos(',',['Hello','Test','1,2,3']);",'out> [Inf,Inf,1]',
   "in> pos(['a','b'],'cdb');",'out> [Inf,2]',"in> repeat('-', 10);","out> '----------'","in> replace('[[][]][]][][','[]','');",
   "out> ']['","in> replace('aba','b','bb');","out> 'abba'","in> replaceOne('[[][]][]][][','[]','');","out> '[[]][]][]['",
   "in> replaceOne('1:.-.; 2:.-.; 3:.-.','.',['a'..'e']);","out> '1:a-b; 2:c-d; 3:e-.'","in> split('1,2,3;4,5,6',',');",
   "out> ['1','2','3;4','5','6']","in> split('1,2,3;4,5,6',';');","out> ['1,2,3','4,5,6']","in> split('1,2,3;4,5,6',[';',',']);",
   "out> ['1','2','3','4','5','6']","in> tokenSplit('f(x)->x+1; //Stupid, but just an example...','mnh');",
   "out> ['f','(','x',')','->','x','+','1',';',' ','//Stupid, but just an example...']",'in> trim(" \tA B C\t ");',
   "out> 'A B C'",'in> trimLeft(" \tA B C\t ");','out> "A B C\t "','in> trimRight(" \tA B C\t ");','out> " \tA B C"',
   "in> unbrace('3');","out> '3'","in> unbrace('(3)');","out> '3'","in> unbrace('(3]');","out> '(3]'",'in> unbrace(''"3"'');',
   'out> ''"3"''',"in> chars('Testtext').elementFrequency;","out> ['T' => 1,'e'=>2,'s'=>1,'t'=>3,'x'=>1].toMap",
   'in> flatten([1,[2,[3, 4],[5]], 6]);','out> [1,2,3,4,5,6]',"in> head(['A'..'Z']);","out> 'A'","in> head(['A'..'Z'], 3);",
   "out> ['A','B','C']","in> ['A'..'Z'].toSet.head(3);","out> ['F','V','G']","in> tail(['A'..'Z']);",
   "out> ['B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']",
   "in> tail(['A'..'Z'], 3);",
   "out> ['D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']",
   'in> rangeGenerator(1, 10).tail(3);','out> [4,5,6,7,8,9,10]',"in> leading(['A'..'Z']);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y']",
   "in> leading(['A'..'Z'], 3);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W']",
   'in> rangeGenerator(1, 10).leading(3);','out> [1,2,3,4,5,6,7]',"in> trailing(['A'..'Z']);","out> 'Z'",
   "in> trailing(['A'..'Z'], 3);","out> ['X','Y','Z']","in> ['A'..'Z'].toSet.trailing(3);","out> ['T','E','U']",
   'in> rangeGenerator(1, 10).trailing(3);','out> [8,9,10]','in> minus([1..10]^2, 2*[0..50]);','out> [1,9,25,49,81].toSet',
   'in> sort(intRandom(10, 5));','out> [0,1,2,3,8]',"in> sort(['01','10','100','1','010'],{softCast($x)<=softCast($y)});",
   "out> ['01','1','10','010','100']",'in> sortPerm(random(10));','out> [8,3,2,1,5,6,9,0,7,4]',"in> sortPerm(['a'..'c'..'a']);",
   'out> [0,4,1,3,2]','in> intersect([0..1000]^2,[0..1000]^3);',
   'out> [1,0,4096,262144,64,46656,1000000,729,15625,117649,531441].toSet','in> union(1/[1..5], 2/[2..6]);',
   'out> [0.2,0.4,1,0.5,0.25,0.33333333333333333334,0.66666666666666666668].toSet',"in> deleteFile('plotDemo1.png');",
   'out> true',"in> get(['a'..'f'], 3);","out> 'd'","in> get(['a'..'f'],[3, 1, 2]);","out> ['d','b','c']",
   'in> get([0..4],[2..6] mod 3=0);','out> [1,4]',"in> get([['A', 1],['B', 2],['C', 0]],'B');",'out> 2',
   'in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]], 1);','out> [2,5,8]','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[1, 0]);',
   'out> [[2,1],[5,4],[8,7]]','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[true, false, true]);','out> [[1,3],[4,6],[7,9]]',
   'in> indexOf([1..6]^2 mod 3=0);','out> [2,5]','in> reverseList([1..5]);','out> [5,4,3,2,1]','in> size([0.5, 0.1, 0.2]);',
   'out> 3',"in> toMap([['A', 1],['B', 2],['C', 0],['B', 4]]);","out> ['B' => 4,'C'=>0,'A'=>1].toMap",
   'in> trueCount(10<[0..10]^2<50);','out> 4','in> unique([3, 1, 2, 1, 4, 1, 5]);','out> [1,2,3,4,5]',"in> compress('Test');",
   "out> 'Test'","in> compress('Test').decompress;","out> 'Test'","in> compress('Testtext');","out> #2#248'e'#240'9N'",
   "in> compress('Testtext').decompress;","out> 'Testtext'","in> relativeFileName('~/folder/','~/other/example.txt');",
   "out> '../other/example.txt'",'in> primes(20);','out> [2,3,5,7,11,13,17,19]','in> subSets([1, 2, 1]);',
   'out> [[],[1],[1,1],[2],[2,1],[2,1,1]]',"in> diff('encode','decode');",
   "out> ['deletes' => 1,'modifies'=>0,'adds'=>1,'matches'=>5,'edit'=>[['+',-1,0],[' ',0,1],['-',1,1],[' ',2,2],[' ',3,3],[' ',4,4],[' ',5,5]]].toMap",
   "in> diffStats('encode','decode');","out> ['deletes' => 1,'modifies'=>0,'adds'=>1,'matches'=>5].toMap",
   "in> format('%s is a string, %3.3d is a number','X', 7);","out> 'X is a string, 007 is a number'","in> format('%6.3f', 3);",
   "out> ' 3.000'","in> format('%6.3e', 3);","out> '3.00E+000'","in> format('%6.3g', 3);","out> '     3'",
   "in> format('%6.6x', 1234);","out> '0004D2'","in> formatTime('mm.dd.yyyy', 43210);","out> '04.20.2018'",
   'in> formatTime(12424.245);',"out> '05.01.1934 05:52:48'","in> isAscii('xyz');",'out> true',"in> isAscii('xyz'&chars[180]);",
   'out> false',"in> isAscii(\"Läuft\");",'out> false',"in> isUtf8('xyz');",'out> true',"in> isUtf8('xyz'&chars[180]);",
   'out> false',"in> isUtf8(\"Schräg\");",'out> true',"in> parseTime('yyyy-mm-dd hh:nn','2000-01-01 03:43');",
   'out> 36526.154861111113859',"in> reverseString('Test');","out> 'tseT'","in> regex.matches('This is a test','[T|t]est');",
   'out> true',"in> regex.matchComposite('This is a test','[T|t]est');","out> [['test',11,4]]",
   "in> regex.replace('A Test is a test','[T|t]est','rose');","out> 'A rose is a rose'",
   "in> regex.split('A Test is a test','[e| ]');","out> ['A','T','st','is','a','t','st']",'in> toBoolean(0);','out> false',
   'in> toBoolean(1.0);','out> true',"in> toBoolean('true');",'out> true','in> toBoolean(3);',
   'Error 3 cannot be cast to boolean',"in> toInt('32');",'out> 32','in> toInt(3.0);','out> 3','in> toInt(3.1);',
   'Error 3.1 cannot be cast to int','in> toInt(false);','out> 0',"in> toReal('3.212');",'out> 3.212','in> toReal(true);',
   'out> 1','in> toReal(3);','out> 3.0','in> getOptions;',
   "out> ['x1' => 1.0,'axisStyleY'=>7,'strictInput'=>false,'autoscaleX'=>true,'logscaleX'=>false,'fontsize'=>10.0,'autoscaleY'=>true,'logscaleY'=>false,'y0'=>-1.0,'autoscaleFactor'=>1.0,'x0'=>-1.0,'y1'=>1.0,'preserveAspect'=>true,'axisStyleX'=>7].toMap",
   'in> executor;','out> ''<#>\target\Win32\mnh_debug.exe''','in> print("1\n2.0\n03.45");','1','2.0','03.45','out> void',
   'in> print("1\n2.0\n03,45\t");',' 1',' 2.0','03,45','out> void','in> print("1\tone\t|\n2.0\ttwo\t|\n03.45\tthree\t|");',
   ' 1    one   |',' 2.0  two   |','03.45 three |','out> void','in> print("1\vone\v|\n2.0\vtwo\v|\n03.45\vthree\v|");',
   ' 1   one  |',' 2.0 two  |','03.45three|','out> void',"in> printf('%x is %d in hexadecimal form', 123, 123);",
   '7B is 123 in hexadecimal form','out> void',"in> printf('%{$0}x is %{$0}d in hexadecimal form', 123);",
   '7B is 123 in hexadecimal form','out> void',"in> printf('sin(%{$0}s)=%{sin($0)}4.4g', 1);",'sin(1)=0.8415','out> void',
   'in> permutations([1, 1, 2]);','out> [[1,2,1],[1,1,2],[2,1,1]].toSet','in> permutations([1..3]);',
   'out> [[1,3,2],[2,1,3],[2,3,1],[3,1,2],[1,2,3],[3,2,1]].toSet',"in> input :=[[1..10], random,'test', random(9)];",
   'in> serialized :=input.serialize;',"in> print(input.toString.byteLength,' > ', serialized.byteLength);",'258 > 104',
   'out> void','in> input==serialized.deserialize;','out> true','in> factorize(18447422338071909869);',
   'out> [2642257,2642287,2642291]','in> formatTabs("\v-2\n3\t4.3");',"out> ['  -2','3  4.3']",'in> typeOf(3);',"out> 'Int'",
   'in> typeOf([1..5, 7.5]);',"out> 'NumericList(6)'",'in> typeOf({$x^2+$y});',"out> 'Expression(2)'",
   'in> x :=transpose([1,[1, 2, 3],[1, 2]], 0);','in> x;','out> [[1,1,1],[0,2,2],[0,3,0]]','in> x.transpose(0);',
   'out> [[1,0,0],[1,2,3],[1,2,0]]','in> resetRandom(12157);','out> void','in> resetRandom;','out> void','in> intRandom(7);',
   'out> 1','in> intRandom(7, 10);','out> [2,2,3,0,0,3,2,2,6,5]','in> random;','out> 0.70794778806157410144','in> random(3);',
   'out> [0.20965369325131177902,0.45114781009033322334,0.19202205142937600612]',"in> note('Note that this is a note');",
   'Note Note that this is a note','out> void',"in> warn('Warning: I intend to say something important here');",
   'Warning Warning: I intend to say something important here','out> void','in> isScalar(1);','out> true',
   'in> isBoolean(false);','out> true','in> isBoolean(1);','out> false','in> isInt(false);','out> false','in> isInt(1);',
   'out> true','in> isInt(1.0);','out> false','in> isReal(false);','out> false','in> isReal(1);','out> false','in> isReal(1.0);',
   'out> true','in> isNumeric(false);','out> false','in> isNumeric(1);','out> true','in> isNumeric(1.0);','out> true',
   'in> isList([]);','out> true','in> isList([], 0);','out> true','in> isList([], 1);','out> false',"in> isList(['x'], 1);",
   'out> true',"in> isString('Test');",'out> true','in> isString(true);','out> false','in> isExpression(:: sin);','out> true',
   'in> isExpression(:: sin, 1);','out> true','in> isExpression(:: sin, 2);','out> false','in> digits(123);','out> [1,2,3]',
   'in> digits(123, 3);','out> [1,1,1,2,0]','in> arctan2(1, 1);','out> 0.78539816339744830962',"in> charSet('abcba');",
   "out> ['a','b','c'].toSet","in> bytes(\"ö\").ord;",'out> [195,182]',"in> base64encode('Test');","out> 'VGVzdA=='",
   "in> base64decode('VGVzdA==');","out> 'Test'","in> base92encode('bla bla bla ');","out> ']En_)]En_)]En_)'",
   "in> base92decode('PgsC.?d@t^');","out> '12345'",'in> listSideEffects;',
   "out> ['input','output','sound','sleep','detaching','server','read package state','alter package state','alter context state','alter plot state','read file','write file','http','ipc','executing external']",
   "in> changeFileExt('file.extension','.newExtension');","out> 'file.newExtension'",
   "in> changeFileExt('file.2.extension','.newExtension');","out> 'file.2.newExtension'",'in> httpError;',
   'out> "HTTP/1.0 404\r\n"','in> isBooleanList([true, false]);','out> true','in> isBooleanList(true);','out> false',
   'in> isIntList([1..3]);','out> true','in> isIntList([1, 2.0]);','out> false','in> isRealList([1, 2, 3]);','out> false',
   'in> isRealList([1.0, 2.0, 3.0, Nan]);','out> true',"in> isStringList(['a'..'z']);",'out> true',
   'in> isNumericList([1, 2, 3]);','out> true','in> isNumericList([1.0, 2, 3, Inf]);','out> true','in> isVoid();','out> true',
   'in> isVoid(void);','out> true','in> isVoid(3);','out> false',"in> escapePascal('Test');",'out> "''Test''"',
   "in> escapeJava('Test');",'out> ''"Test"''',"in> extractFileNameOnly('/home/user/file.ext');","out> 'file'",
   "in> extractFileDirectory('/home/user/file.ext');","out> '/home/user'","in> extractFileName('/home/user/file.ext');",
   "out> 'file.ext'","in> extractFileExt('/home/user/file.ext');","out> '.ext'","in> extractPath('/index.html?x=0&y=3%2Ax');",
   "out> '/index.html'","in> extractParameters('/index.html?x=0&y=3%2Ax');","out> ['x' => 0,'y'=>'3*x'].toMap",
   "in> extractRawParameters('/index.html?x=0&y=3%2Ax');","out> 'x=0&y=3%2Ax'",
   "in> encodeRequest('127.0.0.1:3126','rest',[['user','anonymous'],['request','3*&7']].toMap);",
   "out> '127.0.0.1:3126/rest?user=anonymous&request=3%2A%267'","in> cross(['1'..'3'],['A'..'C']);",
   "out> [['1','A'],['1','B'],['1','C'],['2','A'],['2','B'],['2','C'],['3','A'],['3','B'],['3','C']]",'in> [1, 2, 1].toSet;',
   'out> [2,1].toSet','in> [1.2, 3.0].isRealCollection;','out> true','in> [1.2, 3.0].toSet.isRealCollection;','out> true',
   'in> [1.2, 3].isRealCollection;','out> false','in> [1.2, 3.0].isRealCollection(2);','out> true',
   'in> [1.2, 3.0].isRealCollection(3);','out> false','in> [true].isBooleanCollection;','out> true',
   'in> [true, false, true].toSet.isBooleanCollection(2);','out> true','in> [true, false, true].toSet.isBooleanSet;','out> true',
   'in> [1, 2, 3].isIntCollection;','out> true','in> [].isIntCollection;','out> true','in> [1.2, 3].isNumericCollection;',
   'out> true',"in> ['a','b'].toSet.isStringSet;",'out> true',"in> ['a','b'].isStringCollection;",'out> true',
   'in> [1, 2, 3].isIntSet;','out> false','in> [1, 2, 3].toSet.isIntSet;','out> true',
   "in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap;",'out> true',"in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(2);",'out> true',
   "in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(3);",'out> false',"in> [1,'a', false].isSet;",'out> false',
   "in> [1,'a', false].isCollection;",'out> true',"in> utf8ToAnsi(\"öµ\").bytes.ord;",'out> [246,181]',
   'in> chars[214].ansiToUtf8;',"out> \"Ö\"",'in> [1.2, 3.4].toSet.isRealSet;','out> true','in> toList(3);','out> [3]',
   'in> toList([2, 3, 6].toSet);','out> [3,2,6]','in> [1.2, 3.4].toSet.isNumericSet;','out> true',
   "in> [[1,'one'],[3,'three'],[5,'five']].toMap.getAll([1, 5, 6],['-','-','-']);","out> ['one','five','-']",
   'in> [1, 3, 5].getAll([0, 2])==[1, 3, 5].get([0, 2]);','out> true','in> [1..20].filter({$x mod 2<>0<>$x mod 3});',
   'out> [1,5,7,11,13,17,19]','in> rangeGenerator(1, 20).filter({$x mod 2<>0<>$x mod 3});',
   'out> rangeGenerator(1,20).filter({$x mod 2<>0<>$x mod 3})',"in> ['a'..'f'].map(:: upper);","out> ['A','B','C','D','E','F']",
   "in> ['a'..'f'].pMap(:: upper);","out> ['A','B','C','D','E','F']",'in> primeGenerator.head(10);',
   'out> [2,3,5,7,11,13,17,19,23,29]','in> [-1, 1,-1, 1,-2, 2].agg(head);','out> -1','in> [-1, 1,-1, 1,-2, 2].agg(trailing);',
   'out> 2','in> [-1, 1,-1, 1,-2, 2].agg(toSet);','out> [-1,-2,2,1].toSet','in> [-1, 1,-1, 1,-2, 2].agg(max);','out> 2',
   'in> [-1, 1,-1, 1,-2, 2].agg(min);','out> -2','in> [-1, 1,-1, 1,-2, 2].agg(&);',"out> '-11-11-22'",
   'in> [-1, 1,-1, 1,-2, 2].agg(*);','out> -4','in> [-1, 1,-1, 1,-2, 2].agg(+);','out> 0',
   'in> permutationIterator([3, 1, 2]).map(:: print).toList;','[1,2,3]','[1,3,2]','[2,1,3]','[2,3,1]','[3,1,2]','[3,2,1]',
   'out> []','in> rangeGenerator(1, 100).map({$x^2});','out> rangeGenerator(1,100).map({$x^2})',
   "in> mergeMaps([['A', 1],['B', 2]].toMap,[['A', 7],['C', 3]].toMap, ::+);","out> ['B' => 2,'C'=>3,'A'=>8].toMap",
   "in> try({deserialize('x')});",'out> void',"in> try({deserialize('x')}, :: print);",
   "[['el3_evalError','@?:3,6','Invalid literal encoding type 120']]",'out> void',"in> try({deserialize('x')}, 0);",'out> 0',
   "in> try({deserialize('x')},{warn($x.head.trailing)});",'Warning Invalid literal encoding type 120','out> void',
   "in> interpret('3+4');",'out> 7','in> shiftRight(7, 1);','out> 3','in> shiftRight(5,-2);','out> 20',
   'in> type FiniteRealList(L :List)->L.each(x,!x.isNan,!x.isInfinite, AND);','in> x :=[1, 5, 0.4, 1/7].toFiniteRealList;',
   'in> x;','out> [1,5,0.4,0.14285714285714285714].toFiniteRealList','in> x.typeOf;',"out> 'FiniteRealList'",'in> x.toBuiltin;',
   'out> [1,5,0.4,0.14285714285714285714]','in> x.toBuiltin.typeOf;',"out> 'NumericList(4)'",
   "in> interpret({print('Hello world')},[]);",'Error Cannot apply print because of side effect(s): [output]',
   'in> composeDigits([1, 0, 1], 2);','out> 5','in> composeDigits([1, 0, 2]);','out> 102','in> composeDigits([1, 0, 2], 10, 2);',
   'out> 1.02',"in> sandBoxExecute('f(x)->3*x+1; f(f(f(1)))',['alter package state']);",
   "out> [['echo_declaration','','f(x)->3*x+1;'],['echo_input','','f(f(f(1)));'],['echo_output','','40'],['exitCode','',0]]",
   "in> begin local x:=async({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   '1: true','start','2: end','out> void',
   "in> begin local x:=future({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   'start','1: false','2: end','out> void',"in> validateRegex('(3+.*');",'out> false',"in> validateRegex('\\(3+.*');",
   'out> true','in> [1..100].pFilter({$x mod 2=$x mod 3=$x mod 5});','out> [1,30,31,60,61,90,91]','in> pi;',
   'out> 3.1415926535897932385','in> isStatefulExpression(:: sin);','out> false','in> isStatefulExpression(future(:: sin,[3]));',
   'out> true','in> isStatelessExpression(:: sin);','out> true','in> isStatelessExpression(future(:: sin,[3]));','out> false',
   'in> isIteratable(future(:: sin,[3]));','out> false','in> isIteratable(primeGenerator);','out> true',
   'in> isIteratable([1..10]);','out> true','in> isIteratableExpression(primeGenerator);','out> true',
   'in> isIteratableExpression([1..10]);','out> false',
   "in> begin resetRandom; local gen:={begin local last:=0; save; last+=random; end}; print('gen.isIteratable= ', gen.isIteratable,'; ', gen.head(3)); gen:=gen.toIteratableExpression; print('gen.isIteratable= ', gen.isIteratable,'; ', gen.head(3)); end;",
   'gen.isIteratable= false; {begin local last:=0; save; last+=random; end}',
   'gen.isIteratable= true; [0.69890124513767659664,1.5846346444450318813,2.5055105253122746944]','out> void',
   'in> toIteratableExpression(:: sqr);','Error Only nullary stateful expressions may be iteratable.',
   'in> toIteratableExpression({begin local i:=1; save; i+=i-1; end});','out> {begin local i:=1; save; i+=i-1; end}',
   'in> euklideanNorm([1, 2]);','out> 2.2360679774997896964','in> assert(1=1.0);','out> void',
   "in> assert('bla'.isInt,'Invalid integer given');",'Error Invalid integer given',
   "in> md5('Test input. Could be anything really.');",'out> 337964223705814058127798532806512273013',
   "in> sha256('Test input. Could be anything really.');",
   'out> 60429211283715320795241587111266756812669288936868807314606704811653259384943','in> hammingWeight(17213);','out> 8',
   'in> gcd(1231512, 143543);','out> 23',
   'in> powMod(2988348162058574136915891421498819466320163312926952423791023078876139, 2351399303373464486466122544523690094744975233415544072992656881240319, 10^40);',
   'out> 1527229998585248450016808958343740453059','in> randomGenerator(123).head(10);',
   'out> [0.8880804681684821844,0.033595459535717964172,0.073756912024691700935,0.073728758376091718673,0.40903412224724888801,0.7116715747397392988,0.46069467556662857532,0.5966716259717941284,0.81161490315571427345,0.4983937116339802742]',
   'in> intRandomGenerator(123, 5).head(10);','out> [2,0,0,1,3,4,0,0,1,2]','in> isaacRandomGenerator(123, 5).head(10);',
   'out> [3,3,1,4,4,2,2,0,4,3]','in> modularInverse(3, 32);','out> 11','in> byteToChar(100);',"out> 'd'",
   'in> byteToChar([10, 12, 97, 45]);',"out> [#10,#12,'a','-']","in> systemSpecificFilename('..\\test/filename.txt');",
   'out> ''..\test\filename.txt''',"in> stringIterator(['a','b','c'], 1, 3).head(10);",
   "out> ['a','b','c','aa','ab','ac','ba','bb','bc','ca']",'in> vanDerCorputGenerator(2).head(10);',
   'out> [0.0,0.5,0.25,0.75,0.125,0.625,0.375,0.875,0.0625,0.5625]','in> primeGenerator.head(1000).trailing(5);',
   'out> [7879,7883,7901,7907,7919]','in> rangeGenerator(0, 5).head(10);','out> [0,1,2,3,4,5]',
   'in> rangeGenerator(100,-100).head(10);','out> [100,99,98,97,96,95,94,93,92,91]','in> divMod(10, 7);','out> [1,3]',
   "in> 'abba'.hasPrefix('ab');",'out> true',
   'in> isPrime(47531677974672740279381824573269878221106369761801704860769848227327108403647);','out> true','in> 3==3.0;',
   'out> false','in> [1, 2, 3]==[3, 1, 3];','out> false','in> 3=3.0;','out> true','in> {$x}=3;','out> {$x=3}',
   'in> [1, 2, 3]=[3, 1, 3];','out> [false,false,true]','in> 3<=3.0;','out> true','in> [1, 2, 3]<=[3, 1, 3];',
   'out> [true,false,true]','in> 3>=3.0;','out> true','in> [1, 2, 3]>=[3, 1, 3];','out> [false,true,true]','in> 3<3.0;',
   'out> false','in> [1, 2, 3]<[3, 1, 3];','out> [true,false,false]','in> 3>3.0;','out> false','in> [1, 2, 3]>[3, 1, 3];',
   'out> [false,true,false]','in> 3<>3.0;','out> false','in> [1, 2, 3]<>[3, 1, 3];','out> [true,true,false]',
   'in> true AND false;','out> false','in> true AND 3;','out> 3','in> false AND 3;','out> false','in> true and false;',
   'out> false','in> [true, false, true, false] and[true, true, false, false];','out> [true,false,false,false]','in> 7 and 252;',
   'out> 4','in> true OR false;','out> true','in> true OR 3;','out> true','in> false OR 3;','out> 3','in> true or false;',
   'out> true','in> [true, false, true, false] or[true, true, false, false];','out> [true,true,true,false]','in> 7 or 252;',
   'out> 255','in> true xor false;','out> true','in> [true, false, true, false] xor[true, true, false, false];',
   'out> [false,true,true,false]','in> 7 xor 252;','out> 251',"in> +'a';","out> 'a'",'in> -3;','out> -3',
   'in> -[1, 2.0, Inf, Nan];','out> [-1,-2.0,-Inf,Nan]','in> !true;','out> false','in> 3 in[1..5];','out> true',
   'in> 3.0 in[1..5];','out> false','in> 1|2;','out> [1,2]','in> [1]|[2];','out> [1,2]','in> [1]|2;','out> [1,2]',
   'in> [1]|[[2]];','out> [1,[2]]','in> [1]||2;','out> [1,2]','in> [1]||[2];','out> [1,[2]]','in> 10 div 3;','out> 3',
   'in> 10/3;','out> 3.3333333333333333332','in> 10/5;','out> 2','in> 10.0/5;','out> 2.0','in> void orElse 42;','out> 42',
   'in> 3 orElse fail;','out> 3','in> 3-pi;','out> -0.14159265358979323851','in> 32459378562983 mod 2342832;','out> 1139831',
   'in> 2*3;','out> 6','in> 2.0*3;','out> 6.0','in> 4+5;','out> 9',"in> 'a'+'b';","out> 'ab'",'in> 5^7;','out> 78125',
   'in> -3.5^3;','out> -42.875','in> 3&4;',"out> '34'",'in> isSubsetOf([1, 2, 3],[1, 2, 3]);','out> true',
   'in> isSubsetOf(1,[1, 2, 3]);','out> false','in> isSubsetOf([1],[1, 2, 3]);','out> true','in> isSubsetOf([1, 4],[1, 2, 3]);',
   'out> false'],
  'FDWin64'=>
  ['in> arity({3});','out> 0','in> arity({sin($x)/$x});','out> 1',
   "in> runScript(['name'=>'hello.mnh','source'=>[\"main->print('Hello world');\"],'side effects'=>['alter package state','output']].toMap).filter({$message.head=='printline'}).map(:: trailing);",
   "out> ['Hello world']",'in> arity({sin($x)/$y});','out> 2',"in> arity({printf('%s%s', $a,...)});",'out> 1',
   "in> toExpression('$x-$x^2+$x^3');",'out> {$x-$x^2+$x^3}',"in> toExpression('');",
   'Error The parsed expression appears to be empty','in> parameterNames({3});','out> []','in> parameterNames({sin($x)/$x});',
   "out> ['$x']","in> parameterNames({printf('%s%s', $a,...)});","out> ['$a']",'in> ord(3);','out> 3','in> ord(true);','out> 1',
   'in> ord(false);','out> 0',"in> ord('A');",'out> 65',"in> ord('abc');",'out> -1','in> ord(2.1);',
   'Error ord can only be applied to booleans, ints and strings',"in> softCast('A');","out> 'A'",'in> softCast(''"B"'');',
   "out> 'B'",'in> softCast(3);','out> 3',"in> softCast([1,'2','true',\"'TEXT'\",'1.5','2,6']);",
   "out> [1,2,true,'TEXT',1.5,'2,6']","in> toString('a');","out> 'a'",'in> toString(234);',"out> '234'",
   "in> toString([1, 2.6,'a', true,{$x}]);",'out> "[1,2.6,''a'',true,{$x}]"','in> abs(-0.92);','out> 0.92','in> abs(3);',
   'out> 3','in> abs({1+$x});','out> {abs(1+$x)}','in> arccos(-0.92);','out> 2.7388768120091318','in> arccos(3);','out> Nan',
   'in> arccos({1+$x});','out> {arccos(1+$x)}','in> arcsin(-0.92);','out> -1.1680804852142352','in> arcsin(3);','out> Nan',
   'in> arcsin({1+$x});','out> {arcsin(1+$x)}','in> tan(-0.92);','out> -1.313263699320248','in> tan(3);',
   'out> -0.1425465430742778','in> tan({1+$x});','out> {tan(1+$x)}','in> tan(pi/2);','out> 1.6331778728383844E16',
   'in> arctan(-0.92);','out> -0.7437555842988599','in> arctan({$x});','out> {arctan($x)}','in> argMax(sin([0..10]));','out> 8',
   'in> argMax([1, 3, 3, 0, 2]);','out> 1','in> argMin(sin([0..10]));','out> 5','in> argMin([1, 3, 3, 0, 2]);','out> 3',
   'in> ceil(20/3);','out> 7','in> ceil([0..3]/3);','out> [0,1,1,1]','in> ceil([0..3]/3, 2);','out> [0,0.34,0.67,1]',
   'in> floor(20/3);','out> 6','in> floor([0..3]/3);','out> [0,0,0,1]','in> floor([0..3]/3, 2);','out> [0,0.33,0.66,1]',
   'in> round(20/3);','out> 7','in> round([0.5, 1.5, 2.5, 3.5]);','out> [0,2,2,4]','in> round([0..3]/3, 2);',
   'out> [0,0.33,0.67,1]','in> isInfinite(Nan);','out> false','in> isInfinite(+Inf);','out> true','in> isInfinite(-Inf);',
   'out> true','in> isInfinite([-3.4344, Nan,+Inf]);','out> [false,false,true]','in> isNan(Nan);','out> true','in> isNan(+Inf);',
   'out> false','in> isNan(-Inf);','out> false','in> isNan([-3.4344, Nan,+Inf]);','out> [false,true,false]','in> cos(-0.92);',
   'out> 0.60582015664346289','in> cos(3);','out> -0.9899924966004454','in> cos({1+$x});','out> {cos(1+$x)}','in> exp(-0.92);',
   'out> 0.39851904108451419','in> exp(3);','out> 20.085536923187668','in> exp({1+$x});','out> {exp(1+$x)}','in> ln(-0.92);',
   'out> Nan','in> ln(3);','out> 1.0986122886681096','in> ln({1+$x});','out> {ln(1+$x)}','in> ln(-0.92);','out> Nan',
   'in> sin(3);','out> 0.1411200080598672','in> sin({1+$x});','out> {sin(1+$x)}','in> sqr(-0.92);','out> 0.8464','in> sqr(3);',
   'out> 9','in> sqr({1+$x});','out> {sqr(1+$x)}','in> sqrt(-0.92);','out> Nan','in> sqrt(3);','out> 1.7320508075688772',
   'in> sqrt({1+$x});','out> {sqrt(1+$x)}','in> isqrt(121);','out> [11,true]','in> isqrt(255);','out> [15,false]',
   'in> sign(-0.92);','out> -1','in> sign(3);','out> 1','in> sign({1+$x});','out> {sign(1+$x)}',"in> max(['a'..'z']);",
   "out> 'z'",'in> max([0..9]/2);','out> 4.5','in> max(true, false);','out> true',"in> min(['a'..'z']);","out> 'a'",
   'in> min([0..9]/2);','out> 0','in> min(true, false);','out> false',"in> copy('abcde', 1, 3);","out> 'bcd'",
   "in> copy('abcde', 2);","out> 'cde'","in> escape('a');",'out> "''a''"','in> escape(#9);',"out> '#9'",
   'in> group([1..10],[1..10] mod 3=0);','out> [false => [1,2,4,5,7,8,10],true=>[3,6,9]].toMap','in> fail;','Error Fail',
   'in> fail("Told you this wouldn''t work!");',"Error Told you this wouldn't work!",'in> hash(1);','out> 2','in> hash([1..3]);',
   'out> 299863',"in> hash('a');",'out> 283',"in> listBuiltin.filter({$s.matches('^mnh\\.')}).sort.trailing(10);",
   "out> ['mnh.listBuiltin','mnh.listSideEffects','mnh.mnhInfo','mnh.myPath','mnh.ord','mnh.parameterNames','mnh.runScript','mnh.sandBoxExecute','mnh.sleep','mnh.sleepUntil']",
   "in> group([[1,'a'],[2,'a'],[1,'b'],[4,'c'],[2,'a'],[2,'b']], 1, aggregator({[$x[0]+$y[0], $x[1]]}));",
   "out> ['b' => [3,'b'],'c'=>[4,'c'],'a'=>[5,'a']].toMap",'in> abs(3);','out> 3','in> abs(-3);','out> 3','in> abs([-2..2]/2);',
   'out> [1,0.5,0,0.5,1]',"in> chars('This is a test.');","out> ['T','h','i','s',' ','i','s',' ','a',' ','t','e','s','t','.']",
   'in> chars.get(100);',"out> 'd'","in> clean('+21/232/2116-11',['0'..'9'],' ');","out> ' 21 232 2116 11'",
   "in> join(['a','b','c']);","out> 'abc'","in> join([1..5],' ');","out> '1 2 3 4 5'","in> length(\"Test öäü\");",'out> 8',
   "in> byteLength(\"Test öäü\");",'out> 11',"in> length(['Text','AbC']);",'out> [4,3]',"in> lower('Test');","out> 'test'",
   "in> lower(['Text','AbC']);","out> ['text','abc']","in> upper('Test');","out> 'TEST'","in> upper(['Text','AbC']);",
   "out> ['TEXT','ABC']",'in> t :=[0..1000]*2*pi/1000;','in> plot(t, sin(t));','out> void',
   "in> plot.renderToFile('plotDemo1.png', 600, 300);",'out> void','in> abs({$x});','out> {abs($x)}','in> abs(3);','out> 3',
   'in> abs(-5/7);','out> 0.7142857142857143','in> abs([-2..2]);','out> [2,1,0,1,2]',"in> chars('Test');",
   "out> ['T','e','s','t']","in> pos('o','Hello World');",'out> 4',"in> pos(',',['Hello','Test','1,2,3']);",'out> [Inf,Inf,1]',
   "in> pos(['a','b'],'cdb');",'out> [Inf,2]',"in> repeat('-', 10);","out> '----------'","in> replace('[[][]][]][][','[]','');",
   "out> ']['","in> replace('aba','b','bb');","out> 'abba'","in> replaceOne('[[][]][]][][','[]','');","out> '[[]][]][]['",
   "in> replaceOne('1:.-.; 2:.-.; 3:.-.','.',['a'..'e']);","out> '1:a-b; 2:c-d; 3:e-.'","in> split('1,2,3;4,5,6',',');",
   "out> ['1','2','3;4','5','6']","in> split('1,2,3;4,5,6',';');","out> ['1,2,3','4,5,6']","in> split('1,2,3;4,5,6',[';',',']);",
   "out> ['1','2','3','4','5','6']","in> tokenSplit('f(x)->x+1; //Stupid, but just an example...','mnh');",
   "out> ['f','(','x',')','->','x','+','1',';',' ','//Stupid, but just an example...']",'in> trim(" \tA B C\t ");',
   "out> 'A B C'",'in> trimLeft(" \tA B C\t ");','out> "A B C\t "','in> trimRight(" \tA B C\t ");','out> " \tA B C"',
   "in> unbrace('3');","out> '3'","in> unbrace('(3)');","out> '3'","in> unbrace('(3]');","out> '(3]'",'in> unbrace(''"3"'');',
   'out> ''"3"''',"in> chars('Testtext').elementFrequency;","out> ['T' => 1,'e'=>2,'s'=>1,'t'=>3,'x'=>1].toMap",
   'in> flatten([1,[2,[3, 4],[5]], 6]);','out> [1,2,3,4,5,6]',"in> head(['A'..'Z']);","out> 'A'","in> head(['A'..'Z'], 3);",
   "out> ['A','B','C']","in> ['A'..'Z'].toSet.head(3);","out> ['F','V','G']","in> tail(['A'..'Z']);",
   "out> ['B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']",
   "in> tail(['A'..'Z'], 3);",
   "out> ['D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']",
   'in> rangeGenerator(1, 10).tail(3);','out> [4,5,6,7,8,9,10]',"in> leading(['A'..'Z']);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y']",
   "in> leading(['A'..'Z'], 3);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W']",
   'in> rangeGenerator(1, 10).leading(3);','out> [1,2,3,4,5,6,7]',"in> trailing(['A'..'Z']);","out> 'Z'",
   "in> trailing(['A'..'Z'], 3);","out> ['X','Y','Z']","in> ['A'..'Z'].toSet.trailing(3);","out> ['T','E','U']",
   'in> rangeGenerator(1, 10).trailing(3);','out> [8,9,10]','in> minus([1..10]^2, 2*[0..50]);','out> [1,9,25,49,81].toSet',
   'in> sort(intRandom(10, 5));','out> [0,1,2,3,8]',"in> sort(['01','10','100','1','010'],{softCast($x)<=softCast($y)});",
   "out> ['01','1','10','010','100']",'in> sortPerm(random(10));','out> [8,3,2,1,5,6,9,0,7,4]',"in> sortPerm(['a'..'c'..'a']);",
   'out> [0,4,1,3,2]','in> intersect([0..1000]^2,[0..1000]^3);',
   'out> [1,0,4096,262144,64,46656,1000000,729,15625,117649,531441].toSet','in> union(1/[1..5], 2/[2..6]);',
   'out> [0.3333333333333333,0.6666666666666666,1,0.5,0.25,0.2,0.4].toSet',"in> deleteFile('plotDemo1.png');",'out> true',
   "in> get(['a'..'f'], 3);","out> 'd'","in> get(['a'..'f'],[3, 1, 2]);","out> ['d','b','c']",'in> get([0..4],[2..6] mod 3=0);',
   'out> [1,4]',"in> get([['A', 1],['B', 2],['C', 0]],'B');",'out> 2','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]], 1);',
   'out> [2,5,8]','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[1, 0]);','out> [[2,1],[5,4],[8,7]]',
   'in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[true, false, true]);','out> [[1,3],[4,6],[7,9]]',
   'in> indexOf([1..6]^2 mod 3=0);','out> [2,5]','in> reverseList([1..5]);','out> [5,4,3,2,1]','in> size([0.5, 0.1, 0.2]);',
   'out> 3',"in> toMap([['A', 1],['B', 2],['C', 0],['B', 4]]);","out> ['B' => 4,'C'=>0,'A'=>1].toMap",
   'in> trueCount(10<[0..10]^2<50);','out> 4','in> unique([3, 1, 2, 1, 4, 1, 5]);','out> [1,2,3,4,5]',"in> compress('Test');",
   "out> 'Test'","in> compress('Test').decompress;","out> 'Test'","in> compress('Testtext');","out> #2#248'e'#240'9N'",
   "in> compress('Testtext').decompress;","out> 'Testtext'","in> relativeFileName('~/folder/','~/other/example.txt');",
   "out> '../other/example.txt'",'in> primes(20);','out> [2,3,5,7,11,13,17,19]','in> subSets([1, 2, 1]);',
   'out> [[],[1],[1,1],[2],[2,1],[2,1,1]]',"in> diff('encode','decode');",
   "out> ['deletes' => 1,'modifies'=>0,'adds'=>1,'matches'=>5,'edit'=>[['+',-1,0],[' ',0,1],['-',1,1],[' ',2,2],[' ',3,3],[' ',4,4],[' ',5,5]]].toMap",
   "in> diffStats('encode','decode');","out> ['deletes' => 1,'modifies'=>0,'adds'=>1,'matches'=>5].toMap",
   "in> format('%s is a string, %3.3d is a number','X', 7);","out> 'X is a string, 007 is a number'","in> format('%6.3f', 3);",
   "out> ' 3.000'","in> format('%6.3e', 3);","out> '3.00E+000'","in> format('%6.3g', 3);","out> '     3'",
   "in> format('%6.6x', 1234);","out> '0004D2'","in> formatTime('mm.dd.yyyy', 43210);","out> '04.20.2018'",
   'in> formatTime(12424.245);',"out> '05.01.1934 05:52:48'","in> isAscii('xyz');",'out> true',"in> isAscii('xyz'&chars[180]);",
   'out> false',"in> isAscii(\"Läuft\");",'out> false',"in> isUtf8('xyz');",'out> true',"in> isUtf8('xyz'&chars[180]);",
   'out> false',"in> isUtf8(\"Schräg\");",'out> true',"in> parseTime('yyyy-mm-dd hh:nn','2000-01-01 03:43');",
   'out> 36526.154861111114',"in> reverseString('Test');","out> 'tseT'","in> regex.matches('This is a test','[T|t]est');",
   'out> true',"in> regex.matchComposite('This is a test','[T|t]est');","out> [['test',11,4]]",
   "in> regex.replace('A Test is a test','[T|t]est','rose');","out> 'A rose is a rose'",
   "in> regex.split('A Test is a test','[e| ]');","out> ['A','T','st','is','a','t','st']",'in> toBoolean(0);','out> false',
   'in> toBoolean(1.0);','out> true',"in> toBoolean('true');",'out> true','in> toBoolean(3);',
   'Error 3 cannot be cast to boolean',"in> toInt('32');",'out> 32','in> toInt(3.0);','out> 3','in> toInt(3.1);',
   'Error 3.1 cannot be cast to int','in> toInt(false);','out> 0',"in> toReal('3.212');",'out> 3.212','in> toReal(true);',
   'out> 1','in> toReal(3);','out> 3.0','in> getOptions;',
   "out> ['x1' => 1.0,'axisStyleY'=>7,'strictInput'=>false,'autoscaleX'=>true,'logscaleX'=>false,'fontsize'=>10.0,'autoscaleY'=>true,'logscaleY'=>false,'y0'=>-1.0,'autoscaleFactor'=>1.0,'x0'=>-1.0,'y1'=>1.0,'preserveAspect'=>true,'axisStyleX'=>7].toMap",
   'in> executor;','out> ''<#>\target\Win64\mnh_debug.exe''','in> print("1\n2.0\n03.45");','1','2.0','03.45','out> void',
   'in> print("1\n2.0\n03,45\t");',' 1',' 2.0','03,45','out> void','in> print("1\tone\t|\n2.0\ttwo\t|\n03.45\tthree\t|");',
   ' 1    one   |',' 2.0  two   |','03.45 three |','out> void','in> print("1\vone\v|\n2.0\vtwo\v|\n03.45\vthree\v|");',
   ' 1   one  |',' 2.0 two  |','03.45three|','out> void',"in> printf('%x is %d in hexadecimal form', 123, 123);",
   '7B is 123 in hexadecimal form','out> void',"in> printf('%{$0}x is %{$0}d in hexadecimal form', 123);",
   '7B is 123 in hexadecimal form','out> void',"in> printf('sin(%{$0}s)=%{sin($0)}4.4g', 1);",'sin(1)=0.8415','out> void',
   'in> permutations([1, 1, 2]);','out> [[1,2,1],[1,1,2],[2,1,1]].toSet','in> permutations([1..3]);',
   'out> [[1,3,2],[2,1,3],[2,3,1],[3,1,2],[1,2,3],[3,2,1]].toSet',"in> input :=[[1..10], random,'test', random(9)];",
   'in> serialized :=input.serialize;',"in> print(input.toString.byteLength,' > ', serialized.byteLength);",'227 > 104',
   'out> void','in> input==serialized.deserialize;','out> true','in> factorize(18447422338071909869);',
   'out> [2642257,2642287,2642291]','in> formatTabs("\v-2\n3\t4.3");',"out> ['  -2','3  4.3']",'in> typeOf(3);',"out> 'Int'",
   'in> typeOf([1..5, 7.5]);',"out> 'NumericList(6)'",'in> typeOf({$x^2+$y});',"out> 'Expression(2)'",
   'in> x :=transpose([1,[1, 2, 3],[1, 2]], 0);','in> x;','out> [[1,1,1],[0,2,2],[0,3,0]]','in> x.transpose(0);',
   'out> [[1,0,0],[1,2,3],[1,2,0]]','in> resetRandom(12157);','out> void','in> resetRandom;','out> void','in> intRandom(7);',
   'out> 1','in> intRandom(7, 10);','out> [2,2,3,0,0,3,2,2,6,5]','in> random;','out> 0.70794779062271118','in> random(3);',
   'out> [0.20965369045734406,0.45114782452583313,0.19202205538749695]',"in> note('Note that this is a note');",
   'Note Note that this is a note','out> void',"in> warn('Warning: I intend to say something important here');",
   'Warning Warning: I intend to say something important here','out> void','in> isScalar(1);','out> true',
   'in> isBoolean(false);','out> true','in> isBoolean(1);','out> false','in> isInt(false);','out> false','in> isInt(1);',
   'out> true','in> isInt(1.0);','out> false','in> isReal(false);','out> false','in> isReal(1);','out> false','in> isReal(1.0);',
   'out> true','in> isNumeric(false);','out> false','in> isNumeric(1);','out> true','in> isNumeric(1.0);','out> true',
   'in> isList([]);','out> true','in> isList([], 0);','out> true','in> isList([], 1);','out> false',"in> isList(['x'], 1);",
   'out> true',"in> isString('Test');",'out> true','in> isString(true);','out> false','in> isExpression(:: sin);','out> true',
   'in> isExpression(:: sin, 1);','out> true','in> isExpression(:: sin, 2);','out> false','in> digits(123);','out> [1,2,3]',
   'in> digits(123, 3);','out> [1,1,1,2,0]','in> arctan2(1, 1);','out> 0.78539816339744828',"in> charSet('abcba');",
   "out> ['a','b','c'].toSet","in> bytes(\"ö\").ord;",'out> [195,182]',"in> base64encode('Test');","out> 'VGVzdA=='",
   "in> base64decode('VGVzdA==');","out> 'Test'","in> base92encode('bla bla bla ');","out> ']En_)]En_)]En_)'",
   "in> base92decode('PgsC.?d@t^');","out> '12345'",'in> listSideEffects;',
   "out> ['input','output','sound','sleep','detaching','server','read package state','alter package state','alter context state','alter plot state','read file','write file','http','ipc','executing external']",
   "in> changeFileExt('file.extension','.newExtension');","out> 'file.newExtension'",
   "in> changeFileExt('file.2.extension','.newExtension');","out> 'file.2.newExtension'",'in> httpError;',
   'out> "HTTP/1.0 404\r\n"','in> isBooleanList([true, false]);','out> true','in> isBooleanList(true);','out> false',
   'in> isIntList([1..3]);','out> true','in> isIntList([1, 2.0]);','out> false','in> isRealList([1, 2, 3]);','out> false',
   'in> isRealList([1.0, 2.0, 3.0, Nan]);','out> true',"in> isStringList(['a'..'z']);",'out> true',
   'in> isNumericList([1, 2, 3]);','out> true','in> isNumericList([1.0, 2, 3, Inf]);','out> true','in> isVoid();','out> true',
   'in> isVoid(void);','out> true','in> isVoid(3);','out> false',"in> escapePascal('Test');",'out> "''Test''"',
   "in> escapeJava('Test');",'out> ''"Test"''',"in> extractFileNameOnly('/home/user/file.ext');","out> 'file'",
   "in> extractFileDirectory('/home/user/file.ext');","out> '/home/user'","in> extractFileName('/home/user/file.ext');",
   "out> 'file.ext'","in> extractFileExt('/home/user/file.ext');","out> '.ext'","in> extractPath('/index.html?x=0&y=3%2Ax');",
   "out> '/index.html'","in> extractParameters('/index.html?x=0&y=3%2Ax');","out> ['x' => 0,'y'=>'3*x'].toMap",
   "in> extractRawParameters('/index.html?x=0&y=3%2Ax');","out> 'x=0&y=3%2Ax'",
   "in> encodeRequest('127.0.0.1:3126','rest',[['user','anonymous'],['request','3*&7']].toMap);",
   "out> '127.0.0.1:3126/rest?user=anonymous&request=3%2A%267'","in> cross(['1'..'3'],['A'..'C']);",
   "out> [['1','A'],['1','B'],['1','C'],['2','A'],['2','B'],['2','C'],['3','A'],['3','B'],['3','C']]",'in> [1, 2, 1].toSet;',
   'out> [2,1].toSet','in> [1.2, 3.0].isRealCollection;','out> true','in> [1.2, 3.0].toSet.isRealCollection;','out> true',
   'in> [1.2, 3].isRealCollection;','out> false','in> [1.2, 3.0].isRealCollection(2);','out> true',
   'in> [1.2, 3.0].isRealCollection(3);','out> false','in> [true].isBooleanCollection;','out> true',
   'in> [true, false, true].toSet.isBooleanCollection(2);','out> true','in> [true, false, true].toSet.isBooleanSet;','out> true',
   'in> [1, 2, 3].isIntCollection;','out> true','in> [].isIntCollection;','out> true','in> [1.2, 3].isNumericCollection;',
   'out> true',"in> ['a','b'].toSet.isStringSet;",'out> true',"in> ['a','b'].isStringCollection;",'out> true',
   'in> [1, 2, 3].isIntSet;','out> false','in> [1, 2, 3].toSet.isIntSet;','out> true',
   "in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap;",'out> true',"in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(2);",'out> true',
   "in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(3);",'out> false',"in> [1,'a', false].isSet;",'out> false',
   "in> [1,'a', false].isCollection;",'out> true',"in> utf8ToAnsi(\"öµ\").bytes.ord;",'out> [246,181]',
   'in> chars[214].ansiToUtf8;',"out> \"Ö\"",'in> [1.2, 3.4].toSet.isRealSet;','out> true','in> toList(3);','out> [3]',
   'in> toList([2, 3, 6].toSet);','out> [3,2,6]','in> [1.2, 3.4].toSet.isNumericSet;','out> true',
   "in> [[1,'one'],[3,'three'],[5,'five']].toMap.getAll([1, 5, 6],['-','-','-']);","out> ['one','five','-']",
   'in> [1, 3, 5].getAll([0, 2])==[1, 3, 5].get([0, 2]);','out> true','in> [1..20].filter({$x mod 2<>0<>$x mod 3});',
   'out> [1,5,7,11,13,17,19]','in> rangeGenerator(1, 20).filter({$x mod 2<>0<>$x mod 3});',
   'out> rangeGenerator(1,20).filter({$x mod 2<>0<>$x mod 3})',"in> ['a'..'f'].map(:: upper);","out> ['A','B','C','D','E','F']",
   "in> ['a'..'f'].pMap(:: upper);","out> ['A','B','C','D','E','F']",'in> primeGenerator.head(10);',
   'out> [2,3,5,7,11,13,17,19,23,29]','in> [-1, 1,-1, 1,-2, 2].agg(head);','out> -1','in> [-1, 1,-1, 1,-2, 2].agg(trailing);',
   'out> 2','in> [-1, 1,-1, 1,-2, 2].agg(toSet);','out> [-1,-2,2,1].toSet','in> [-1, 1,-1, 1,-2, 2].agg(max);','out> 2',
   'in> [-1, 1,-1, 1,-2, 2].agg(min);','out> -2','in> [-1, 1,-1, 1,-2, 2].agg(&);',"out> '-11-11-22'",
   'in> [-1, 1,-1, 1,-2, 2].agg(*);','out> -4','in> [-1, 1,-1, 1,-2, 2].agg(+);','out> 0',
   'in> permutationIterator([3, 1, 2]).map(:: print).toList;','[1,2,3]','[1,3,2]','[2,1,3]','[2,3,1]','[3,1,2]','[3,2,1]',
   'out> []','in> rangeGenerator(1, 100).map({$x^2});','out> rangeGenerator(1,100).map({$x^2})',
   "in> mergeMaps([['A', 1],['B', 2]].toMap,[['A', 7],['C', 3]].toMap, ::+);","out> ['B' => 2,'C'=>3,'A'=>8].toMap",
   "in> try({deserialize('x')});",'out> void',"in> try({deserialize('x')}, :: print);",
   "[['el3_evalError','@?:3,6','Invalid literal encoding type 120']]",'out> void',"in> try({deserialize('x')}, 0);",'out> 0',
   "in> try({deserialize('x')},{warn($x.head.trailing)});",'Warning Invalid literal encoding type 120','out> void',
   "in> interpret('3+4');",'out> 7','in> shiftRight(7, 1);','out> 3','in> shiftRight(5,-2);','out> 20',
   'in> type FiniteRealList(L :List)->L.each(x,!x.isNan,!x.isInfinite, AND);','in> x :=[1, 5, 0.4, 1/7].toFiniteRealList;',
   'in> x;','out> [1,5,0.4,0.14285714285714285].toFiniteRealList','in> x.typeOf;',"out> 'FiniteRealList'",'in> x.toBuiltin;',
   'out> [1,5,0.4,0.14285714285714285]','in> x.toBuiltin.typeOf;',"out> 'NumericList(4)'",
   "in> interpret({print('Hello world')},[]);",'Error Cannot apply print because of side effect(s): [output]',
   'in> composeDigits([1, 0, 1], 2);','out> 5','in> composeDigits([1, 0, 2]);','out> 102','in> composeDigits([1, 0, 2], 10, 2);',
   'out> 1.02',"in> sandBoxExecute('f(x)->3*x+1; f(f(f(1)))',['alter package state']);",
   "out> [['echo_declaration','','f(x)->3*x+1;'],['echo_input','','f(f(f(1)));'],['echo_output','','40'],['exitCode','',0]]",
   "in> begin local x:=async({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   '1: true','start','2: end','out> void',
   "in> begin local x:=future({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   'start','1: false','2: end','out> void',"in> validateRegex('(3+.*');",'out> false',"in> validateRegex('\\(3+.*');",
   'out> true','in> [1..100].pFilter({$x mod 2=$x mod 3=$x mod 5});','out> [1,30,31,60,61,90,91]','in> pi;',
   'out> 3.141592653589793','in> isStatefulExpression(:: sin);','out> false','in> isStatefulExpression(future(:: sin,[3]));',
   'out> true','in> isStatelessExpression(:: sin);','out> true','in> isStatelessExpression(future(:: sin,[3]));','out> false',
   'in> isIteratable(future(:: sin,[3]));','out> false','in> isIteratable(primeGenerator);','out> true',
   'in> isIteratable([1..10]);','out> true','in> isIteratableExpression(primeGenerator);','out> true',
   'in> isIteratableExpression([1..10]);','out> false',
   "in> begin resetRandom; local gen:={begin local last:=0; save; last+=random; end}; print('gen.isIteratable= ', gen.isIteratable,'; ', gen.head(3)); gen:=gen.toIteratableExpression; print('gen.isIteratable= ', gen.isIteratable,'; ', gen.head(3)); end;",
   'gen.isIteratable= false; {begin local last:=0; save; last+=random; end}',
   'gen.isIteratable= true; [0.69890123605728149,1.5846346616744995,2.5055105686187744]','out> void',
   'in> toIteratableExpression(:: sqr);','Error Only nullary stateful expressions may be iteratable.',
   'in> toIteratableExpression({begin local i:=1; save; i+=i-1; end});','out> {begin local i:=1; save; i+=i-1; end}',
   'in> euklideanNorm([1, 2]);','out> 2.23606797749979','in> assert(1=1.0);','out> void',
   "in> assert('bla'.isInt,'Invalid integer given');",'Error Invalid integer given',
   "in> md5('Test input. Could be anything really.');",'out> 337964223705814058127798532806512273013',
   "in> sha256('Test input. Could be anything really.');",
   'out> 60429211283715320795241587111266756812669288936868807314606704811653259384943','in> hammingWeight(17213);','out> 8',
   'in> gcd(1231512, 143543);','out> 23',
   'in> powMod(2988348162058574136915891421498819466320163312926952423791023078876139, 2351399303373464486466122544523690094744975233415544072992656881240319, 10^40);',
   'out> 1527229998585248450016808958343740453059','in> randomGenerator(123).head(10);',
   'out> [0.88808047771453857,0.033595457673072815,0.07375691086053848,0.073728755116462708,0.4090341329574585,0.7116715908050537,0.46069467067718506,0.5966716408729553,0.8116149306297302,0.498393714427948]',
   'in> intRandomGenerator(123, 5).head(10);','out> [2,0,0,1,3,4,0,0,1,2]','in> isaacRandomGenerator(123, 5).head(10);',
   'out> [3,3,1,4,4,2,2,0,4,3]','in> modularInverse(3, 32);','out> 11','in> byteToChar(100);',"out> 'd'",
   'in> byteToChar([10, 12, 97, 45]);',"out> [#10,#12,'a','-']","in> systemSpecificFilename('..\\test/filename.txt');",
   'out> ''..\test\filename.txt''',"in> stringIterator(['a','b','c'], 1, 3).head(10);",
   "out> ['a','b','c','aa','ab','ac','ba','bb','bc','ca']",'in> vanDerCorputGenerator(2).head(10);',
   'out> [0.0,0.5,0.25,0.75,0.125,0.625,0.375,0.875,0.0625,0.5625]','in> primeGenerator.head(1000).trailing(5);',
   'out> [7879,7883,7901,7907,7919]','in> rangeGenerator(0, 5).head(10);','out> [0,1,2,3,4,5]',
   'in> rangeGenerator(100,-100).head(10);','out> [100,99,98,97,96,95,94,93,92,91]','in> divMod(10, 7);','out> [1,3]',
   "in> 'abba'.hasPrefix('ab');",'out> true',
   'in> isPrime(47531677974672740279381824573269878221106369761801704860769848227327108403647);','out> true','in> 3==3.0;',
   'out> false','in> [1, 2, 3]==[3, 1, 3];','out> false','in> 3=3.0;','out> true','in> {$x}=3;','out> {$x=3}',
   'in> [1, 2, 3]=[3, 1, 3];','out> [false,false,true]','in> 3<=3.0;','out> true','in> [1, 2, 3]<=[3, 1, 3];',
   'out> [true,false,true]','in> 3>=3.0;','out> true','in> [1, 2, 3]>=[3, 1, 3];','out> [false,true,true]','in> 3<3.0;',
   'out> false','in> [1, 2, 3]<[3, 1, 3];','out> [true,false,false]','in> 3>3.0;','out> false','in> [1, 2, 3]>[3, 1, 3];',
   'out> [false,true,false]','in> 3<>3.0;','out> false','in> [1, 2, 3]<>[3, 1, 3];','out> [true,true,false]',
   'in> true AND false;','out> false','in> true AND 3;','out> 3','in> false AND 3;','out> false','in> true and false;',
   'out> false','in> [true, false, true, false] and[true, true, false, false];','out> [true,false,false,false]','in> 7 and 252;',
   'out> 4','in> true OR false;','out> true','in> true OR 3;','out> true','in> false OR 3;','out> 3','in> true or false;',
   'out> true','in> [true, false, true, false] or[true, true, false, false];','out> [true,true,true,false]','in> 7 or 252;',
   'out> 255','in> true xor false;','out> true','in> [true, false, true, false] xor[true, true, false, false];',
   'out> [false,true,true,false]','in> 7 xor 252;','out> 251',"in> +'a';","out> 'a'",'in> -3;','out> -3',
   'in> -[1, 2.0, Inf, Nan];','out> [-1,-2.0,-Inf,Nan]','in> !true;','out> false','in> 3 in[1..5];','out> true',
   'in> 3.0 in[1..5];','out> false','in> 1|2;','out> [1,2]','in> [1]|[2];','out> [1,2]','in> [1]|2;','out> [1,2]',
   'in> [1]|[[2]];','out> [1,[2]]','in> [1]||2;','out> [1,2]','in> [1]||[2];','out> [1,[2]]','in> 10 div 3;','out> 3',
   'in> 10/3;','out> 3.3333333333333335','in> 10/5;','out> 2','in> 10.0/5;','out> 2.0','in> void orElse 42;','out> 42',
   'in> 3 orElse fail;','out> 3','in> 3-pi;','out> -0.14159265358979312','in> 32459378562983 mod 2342832;','out> 1139831',
   'in> 2*3;','out> 6','in> 2.0*3;','out> 6.0','in> 4+5;','out> 9',"in> 'a'+'b';","out> 'ab'",'in> 5^7;','out> 78125',
   'in> -3.5^3;','out> -42.875','in> 3&4;',"out> '34'",'in> isSubsetOf([1, 2, 3],[1, 2, 3]);','out> true',
   'in> isSubsetOf(1,[1, 2, 3]);','out> false','in> isSubsetOf([1],[1, 2, 3]);','out> true','in> isSubsetOf([1, 4],[1, 2, 3]);',
   'out> false'],
  'FOLinux'=>
  ['in> arity({3});','out> 0','in> arity({sin($x)/$x});','out> 1',
   "in> runScript(['name'=>'hello.mnh','source'=>[\"main->print('Hello world');\"],'side effects'=>['alter package state','output']].toMap).filter({$message.head=='printline'}).map(:: trailing);",
   "out> ['Hello world']",'in> arity({sin($x)/$y});','out> 2',"in> arity({printf('%s%s', $a,...)});",'out> 1',
   "in> toExpression('$x-$x^2+$x^3');",'out> {$x-$x^2+$x^3}',"in> toExpression('');",
   'Error The parsed expression appears to be empty','in> parameterNames({3});','out> []','in> parameterNames({sin($x)/$x});',
   "out> ['$x']","in> parameterNames({printf('%s%s', $a,...)});","out> ['$a']",'in> ord(3);','out> 3','in> ord(true);','out> 1',
   'in> ord(false);','out> 0',"in> ord('A');",'out> 65',"in> ord('abc');",'out> -1','in> ord(2.1);',
   'Error ord can only be applied to booleans, ints and strings',"in> softCast('A');","out> 'A'",'in> softCast(''"B"'');',
   "out> 'B'",'in> softCast(3);','out> 3',"in> softCast([1,'2','true',\"'TEXT'\",'1.5','2,6']);",
   "out> [1,2,true,'TEXT',1.5,'2,6']","in> toString('a');","out> 'a'",'in> toString(234);',"out> '234'",
   "in> toString([1, 2.6,'a', true,{$x}]);",'out> "[1,2.6,''a'',true,{$x}]"','in> abs(-0.92);','out> 0.92','in> abs(3);',
   'out> 3','in> abs({1+$x});','out> {abs(1+$x)}','in> arccos(-0.92);','out> 2.7388768120091316555','in> arccos(3);','out> Nan',
   'in> arccos({1+$x});','out> {arccos(1+$x)}','in> arcsin(-0.92);','out> -1.16808048521423503635','in> arcsin(3);','out> Nan',
   'in> arcsin({1+$x});','out> {arcsin(1+$x)}','in> tan(-0.92);','out> -1.31326369932024783656','in> tan(3);',
   'out> -0.14254654307427780529','in> tan({1+$x});','out> {tan(1+$x)}','in> tan(pi/2);','out> -3.6893488147419103232E19',
   'in> arctan(-0.92);','out> -0.74375558429885988575','in> arctan({$x});','out> {arctan($x)}','in> argMax(sin([0..10]));',
   'out> 8','in> argMax([1, 3, 3, 0, 2]);','out> 1','in> argMin(sin([0..10]));','out> 5','in> argMin([1, 3, 3, 0, 2]);','out> 3',
   'in> ceil(20/3);','out> 7','in> ceil([0..3]/3);','out> [0,1,1,1]','in> ceil([0..3]/3, 2);','out> [0,0.34,0.67,1]',
   'in> floor(20/3);','out> 6','in> floor([0..3]/3);','out> [0,0,0,1]','in> floor([0..3]/3, 2);','out> [0,0.33,0.66,1]',
   'in> round(20/3);','out> 7','in> round([0.5, 1.5, 2.5, 3.5]);','out> [0,2,2,4]','in> round([0..3]/3, 2);',
   'out> [0,0.33,0.67,1]','in> isInfinite(Nan);','out> false','in> isInfinite(+Inf);','out> true','in> isInfinite(-Inf);',
   'out> true','in> isInfinite([-3.4344, Nan,+Inf]);','out> [false,false,true]','in> isNan(Nan);','out> true','in> isNan(+Inf);',
   'out> false','in> isNan(-Inf);','out> false','in> isNan([-3.4344, Nan,+Inf]);','out> [false,true,false]','in> cos(-0.92);',
   'out> 0.60582015664346284178','in> cos(3);','out> -0.98999249660044545727','in> cos({1+$x});','out> {cos(1+$x)}',
   'in> exp(-0.92);','out> 0.39851904108451413621','in> exp(3);','out> 20.085536923187667923','in> exp({1+$x});',
   'out> {exp(1+$x)}','in> ln(-0.92);','out> Nan','in> ln(3);','out> 1.09861228866810969136','in> ln({1+$x});','out> {ln(1+$x)}',
   'in> ln(-0.92);','out> Nan','in> sin(3);','out> 0.1411200080598672221','in> sin({1+$x});','out> {sin(1+$x)}',
   'in> sqr(-0.92);','out> 0.8464','in> sqr(3);','out> 9','in> sqr({1+$x});','out> {sqr(1+$x)}','in> sqrt(-0.92);','out> Nan',
   'in> sqrt(3);','out> 1.73205080756887729357','in> sqrt({1+$x});','out> {sqrt(1+$x)}','in> isqrt(121);','out> [11,true]',
   'in> isqrt(255);','out> [15,false]','in> sign(-0.92);','out> -1','in> sign(3);','out> 1','in> sign({1+$x});',
   'out> {sign(1+$x)}',"in> max(['a'..'z']);","out> 'z'",'in> max([0..9]/2);','out> 4.5','in> max(true, false);','out> true',
   "in> min(['a'..'z']);","out> 'a'",'in> min([0..9]/2);','out> 0','in> min(true, false);','out> false',
   "in> copy('abcde', 1, 3);","out> 'bcd'","in> copy('abcde', 2);","out> 'cde'","in> escape('a');",'out> "''a''"',
   'in> escape(#9);',"out> '#9'",'in> group([1..10],[1..10] mod 3=0);','out> [false => [1,2,4,5,7,8,10],true=>[3,6,9]].toMap',
   'in> fail;','Error Fail','in> fail("Told you this wouldn''t work!");',"Error Told you this wouldn't work!",'in> hash(1);',
   'out> 2','in> hash([1..3]);','out> 299863',"in> hash('a');",'out> 283',
   "in> listBuiltin.filter({$s.matches('^mnh\\.')}).sort.trailing(10);",
   "out> ['mnh.listBuiltin','mnh.listSideEffects','mnh.mnhInfo','mnh.myPath','mnh.ord','mnh.parameterNames','mnh.runScript','mnh.sandBoxExecute','mnh.sleep','mnh.sleepUntil']",
   "in> group([[1,'a'],[2,'a'],[1,'b'],[4,'c'],[2,'a'],[2,'b']], 1, aggregator({[$x[0]+$y[0], $x[1]]}));",
   "out> ['b' => [3,'b'],'c'=>[4,'c'],'a'=>[5,'a']].toMap",'in> abs(3);','out> 3','in> abs(-3);','out> 3','in> abs([-2..2]/2);',
   'out> [1,0.5,0,0.5,1]',"in> chars('This is a test.');","out> ['T','h','i','s',' ','i','s',' ','a',' ','t','e','s','t','.']",
   'in> chars.get(100);',"out> 'd'","in> clean('+21/232/2116-11',['0'..'9'],' ');","out> ' 21 232 2116 11'",
   "in> join(['a','b','c']);","out> 'abc'","in> join([1..5],' ');","out> '1 2 3 4 5'","in> length(\"Test öäü\");",'out> 8',
   "in> byteLength(\"Test öäü\");",'out> 11',"in> length(['Text','AbC']);",'out> [4,3]',"in> lower('Test');","out> 'test'",
   "in> lower(['Text','AbC']);","out> ['text','abc']","in> upper('Test');","out> 'TEST'","in> upper(['Text','AbC']);",
   "out> ['TEXT','ABC']",'in> t :=[0..1000]*2*pi/1000;','in> plot(t, sin(t));','out> void',
   "in> plot.renderToFile('plotDemo1.png', 600, 300);",'out> void','in> abs({$x});','out> {abs($x)}','in> abs(3);','out> 3',
   'in> abs(-5/7);','out> 0.71428571428571430157','in> abs([-2..2]);','out> [2,1,0,1,2]',"in> chars('Test');",
   "out> ['T','e','s','t']","in> pos('o','Hello World');",'out> 4',"in> pos(',',['Hello','Test','1,2,3']);",'out> [Inf,Inf,1]',
   "in> pos(['a','b'],'cdb');",'out> [Inf,2]',"in> repeat('-', 10);","out> '----------'","in> replace('[[][]][]][][','[]','');",
   "out> ']['","in> replace('aba','b','bb');","out> 'abba'","in> replaceOne('[[][]][]][][','[]','');","out> '[[]][]][]['",
   "in> replaceOne('1:.-.; 2:.-.; 3:.-.','.',['a'..'e']);","out> '1:a-b; 2:c-d; 3:e-.'","in> split('1,2,3;4,5,6',',');",
   "out> ['1','2','3;4','5','6']","in> split('1,2,3;4,5,6',';');","out> ['1,2,3','4,5,6']","in> split('1,2,3;4,5,6',[';',',']);",
   "out> ['1','2','3','4','5','6']","in> tokenSplit('f(x)->x+1; //Stupid, but just an example...','mnh');",
   "out> ['f','(','x',')','->','x','+','1',';',' ','//Stupid, but just an example...']",'in> trim(" \tA B C\t ");',
   "out> 'A B C'",'in> trimLeft(" \tA B C\t ");','out> "A B C\t "','in> trimRight(" \tA B C\t ");','out> " \tA B C"',
   "in> unbrace('3');","out> '3'","in> unbrace('(3)');","out> '3'","in> unbrace('(3]');","out> '(3]'",'in> unbrace(''"3"'');',
   'out> ''"3"''',"in> chars('Testtext').elementFrequency;","out> ['T' => 1,'e'=>2,'s'=>1,'t'=>3,'x'=>1].toMap",
   'in> flatten([1,[2,[3, 4],[5]], 6]);','out> [1,2,3,4,5,6]',"in> head(['A'..'Z']);","out> 'A'","in> head(['A'..'Z'], 3);",
   "out> ['A','B','C']","in> ['A'..'Z'].toSet.head(3);","out> ['F','V','G']","in> tail(['A'..'Z']);",
   "out> ['B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']",
   "in> tail(['A'..'Z'], 3);",
   "out> ['D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']",
   'in> rangeGenerator(1, 10).tail(3);','out> [4,5,6,7,8,9,10]',"in> leading(['A'..'Z']);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y']",
   "in> leading(['A'..'Z'], 3);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W']",
   'in> rangeGenerator(1, 10).leading(3);','out> [1,2,3,4,5,6,7]',"in> trailing(['A'..'Z']);","out> 'Z'",
   "in> trailing(['A'..'Z'], 3);","out> ['X','Y','Z']","in> ['A'..'Z'].toSet.trailing(3);","out> ['T','E','U']",
   'in> rangeGenerator(1, 10).trailing(3);','out> [8,9,10]','in> minus([1..10]^2, 2*[0..50]);','out> [1,9,25,49,81].toSet',
   'in> sort(intRandom(10, 5));','out> [0,1,2,3,8]',"in> sort(['01','10','100','1','010'],{softCast($x)<=softCast($y)});",
   "out> ['01','1','10','010','100']",'in> sortPerm(random(10));','out> [8,3,2,1,5,6,9,0,7,4]',"in> sortPerm(['a'..'c'..'a']);",
   'out> [0,4,1,3,2]','in> intersect([0..1000]^2,[0..1000]^3);',
   'out> [1,0,4096,262144,64,46656,1000000,729,15625,117649,531441].toSet','in> union(1/[1..5], 2/[2..6]);',
   'out> [1,0.5,0.33333333333333331483,0.25,0.2000000000000000111,0.66666666666666662965,0.4000000000000000222].toSet',
   "in> deleteFile('plotDemo1.png');",'out> true',"in> get(['a'..'f'], 3);","out> 'd'","in> get(['a'..'f'],[3, 1, 2]);",
   "out> ['d','b','c']",'in> get([0..4],[2..6] mod 3=0);','out> [1,4]',"in> get([['A', 1],['B', 2],['C', 0]],'B');",'out> 2',
   'in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]], 1);','out> [2,5,8]','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[1, 0]);',
   'out> [[2,1],[5,4],[8,7]]','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[true, false, true]);','out> [[1,3],[4,6],[7,9]]',
   'in> indexOf([1..6]^2 mod 3=0);','out> [2,5]','in> reverseList([1..5]);','out> [5,4,3,2,1]','in> size([0.5, 0.1, 0.2]);',
   'out> 3',"in> toMap([['A', 1],['B', 2],['C', 0],['B', 4]]);","out> ['B' => 4,'C'=>0,'A'=>1].toMap",
   'in> trueCount(10<[0..10]^2<50);','out> 4','in> unique([3, 1, 2, 1, 4, 1, 5]);','out> [1,2,3,4,5]',"in> compress('Test');",
   "out> 'Test'","in> compress('Test').decompress;","out> 'Test'","in> compress('Testtext');","out> #2#248'e'#240'9N'",
   "in> compress('Testtext').decompress;","out> 'Testtext'","in> relativeFileName('~/folder/','~/other/example.txt');",
   "out> '../other/example.txt'",'in> primes(20);','out> [2,3,5,7,11,13,17,19]','in> subSets([1, 2, 1]);',
   'out> [[],[1],[1,1],[2],[2,1],[2,1,1]]',"in> diff('encode','decode');",
   "out> ['deletes' => 1,'modifies'=>0,'adds'=>1,'matches'=>5,'edit'=>[['+',-1,0],[' ',0,1],['-',1,1],[' ',2,2],[' ',3,3],[' ',4,4],[' ',5,5]]].toMap",
   "in> diffStats('encode','decode');","out> ['deletes' => 1,'modifies'=>0,'adds'=>1,'matches'=>5].toMap",
   "in> format('%s is a string, %3.3d is a number','X', 7);","out> 'X is a string, 007 is a number'","in> format('%6.3f', 3);",
   "out> ' 3.000'","in> format('%6.3e', 3);","out> '3.00E+000'","in> format('%6.3g', 3);","out> '     3'",
   "in> format('%6.6x', 1234);","out> '0004D2'","in> formatTime('mm.dd.yyyy', 43210);","out> '04.20.2018'",
   'in> formatTime(12424.245);',"out> '5-1-34 05:52:48'","in> isAscii('xyz');",'out> true',"in> isAscii('xyz'&chars[180]);",
   'out> false',"in> isAscii(\"Läuft\");",'out> false',"in> isUtf8('xyz');",'out> true',"in> isUtf8('xyz'&chars[180]);",
   'out> false',"in> isUtf8(\"Schräg\");",'out> true',"in> parseTime('yyyy-mm-dd hh:nn','2000-01-01 03:43');",
   'out> 36526.154861111113859',"in> reverseString('Test');","out> 'tseT'","in> regex.matches('This is a test','[T|t]est');",
   'out> true',"in> regex.matchComposite('This is a test','[T|t]est');","out> [['test',11,4]]",
   "in> regex.replace('A Test is a test','[T|t]est','rose');","out> 'A rose is a rose'",
   "in> regex.split('A Test is a test','[e| ]');","out> ['A','T','st','is','a','t','st']",'in> toBoolean(0);','out> false',
   'in> toBoolean(1.0);','out> true',"in> toBoolean('true');",'out> true','in> toBoolean(3);',
   'Error 3 cannot be cast to boolean',"in> toInt('32');",'out> 32','in> toInt(3.0);','out> 3','in> toInt(3.1);',
   'Error 3.1 cannot be cast to int','in> toInt(false);','out> 0',"in> toReal('3.212');",'out> 3.212','in> toReal(true);',
   'out> 1','in> toReal(3);','out> 3.0','in> getOptions;',
   "out> ['x1' => 1.0,'axisStyleY'=>7,'strictInput'=>false,'autoscaleX'=>true,'logscaleX'=>false,'fontsize'=>10.0,'autoscaleY'=>true,'logscaleY'=>false,'y0'=>-1.0,'autoscaleFactor'=>1.0,'x0'=>-1.0,'y1'=>1.0,'preserveAspect'=>true,'axisStyleX'=>7].toMap",
   'in> executor;',"out> '<#>/target/Linux/mnh'",'in> print("1\n2.0\n03.45");','1','2.0','03.45','out> void',
   'in> print("1\n2.0\n03,45\t");',' 1',' 2.0','03,45','out> void','in> print("1\tone\t|\n2.0\ttwo\t|\n03.45\tthree\t|");',
   ' 1    one   |',' 2.0  two   |','03.45 three |','out> void','in> print("1\vone\v|\n2.0\vtwo\v|\n03.45\vthree\v|");',
   ' 1   one  |',' 2.0 two  |','03.45three|','out> void',"in> printf('%x is %d in hexadecimal form', 123, 123);",
   '7B is 123 in hexadecimal form','out> void',"in> printf('%{$0}x is %{$0}d in hexadecimal form', 123);",
   '7B is 123 in hexadecimal form','out> void',"in> printf('sin(%{$0}s)=%{sin($0)}4.4g', 1);",'sin(1)=0.8415','out> void',
   'in> permutations([1, 1, 2]);','out> [[1,2,1],[1,1,2],[2,1,1]].toSet','in> permutations([1..3]);',
   'out> [[1,3,2],[2,1,3],[2,3,1],[3,1,2],[1,2,3],[3,2,1]].toSet',"in> input :=[[1..10], random,'test', random(9)];",
   'in> serialized :=input.serialize;',"in> print(input.toString.byteLength,' > ', serialized.byteLength);",'258 > 104',
   'out> void','in> input==serialized.deserialize;','out> true','in> factorize(18447422338071909869);',
   'out> [2642257,2642287,2642291]','in> formatTabs("\v-2\n3\t4.3");',"out> ['  -2','3  4.3']",'in> typeOf(3);',"out> 'Int'",
   'in> typeOf([1..5, 7.5]);',"out> 'NumericList(6)'",'in> typeOf({$x^2+$y});',"out> 'Expression(2)'",
   'in> x :=transpose([1,[1, 2, 3],[1, 2]], 0);','in> x;','out> [[1,1,1],[0,2,2],[0,3,0]]','in> x.transpose(0);',
   'out> [[1,0,0],[1,2,3],[1,2,0]]','in> resetRandom(12157);','out> void','in> resetRandom;','out> void','in> intRandom(7);',
   'out> 1','in> intRandom(7, 10);','out> [2,2,3,0,0,3,2,2,6,5]','in> random;','out> 0.70794778806157410144','in> random(3);',
   'out> [0.20965369325131177902,0.45114781009033322334,0.19202205142937600612]',"in> note('Note that this is a note');",
   'Note Note that this is a note','out> void',"in> warn('Warning: I intend to say something important here');",
   'Warning Warning: I intend to say something important here','out> void','in> isScalar(1);','out> true',
   'in> isBoolean(false);','out> true','in> isBoolean(1);','out> false','in> isInt(false);','out> false','in> isInt(1);',
   'out> true','in> isInt(1.0);','out> false','in> isReal(false);','out> false','in> isReal(1);','out> false','in> isReal(1.0);',
   'out> true','in> isNumeric(false);','out> false','in> isNumeric(1);','out> true','in> isNumeric(1.0);','out> true',
   'in> isList([]);','out> true','in> isList([], 0);','out> true','in> isList([], 1);','out> false',"in> isList(['x'], 1);",
   'out> true',"in> isString('Test');",'out> true','in> isString(true);','out> false','in> isExpression(:: sin);','out> true',
   'in> isExpression(:: sin, 1);','out> true','in> isExpression(:: sin, 2);','out> false','in> digits(123);','out> [1,2,3]',
   'in> digits(123, 3);','out> [1,1,1,2,0]','in> arctan2(1, 1);','out> 0.78539816339744830962',"in> charSet('abcba');",
   "out> ['a','b','c'].toSet","in> bytes(\"ö\").ord;",'out> [195,182]',"in> base64encode('Test');","out> 'VGVzdA=='",
   "in> base64decode('VGVzdA==');","out> 'Test'","in> base92encode('bla bla bla ');","out> ']En_)]En_)]En_)'",
   "in> base92decode('PgsC.?d@t^');","out> '12345'",'in> listSideEffects;',
   "out> ['input','output','sound','sleep','detaching','server','read package state','alter package state','alter context state','alter plot state','read file','write file','http','ipc','executing external']",
   "in> changeFileExt('file.extension','.newExtension');","out> 'file.newExtension'",
   "in> changeFileExt('file.2.extension','.newExtension');","out> 'file.2.newExtension'",'in> httpError;',
   'out> "HTTP/1.0 404\r\n"','in> isBooleanList([true, false]);','out> true','in> isBooleanList(true);','out> false',
   'in> isIntList([1..3]);','out> true','in> isIntList([1, 2.0]);','out> false','in> isRealList([1, 2, 3]);','out> false',
   'in> isRealList([1.0, 2.0, 3.0, Nan]);','out> true',"in> isStringList(['a'..'z']);",'out> true',
   'in> isNumericList([1, 2, 3]);','out> true','in> isNumericList([1.0, 2, 3, Inf]);','out> true','in> isVoid();','out> true',
   'in> isVoid(void);','out> true','in> isVoid(3);','out> false',"in> escapePascal('Test');",'out> "''Test''"',
   "in> escapeJava('Test');",'out> ''"Test"''',"in> extractFileNameOnly('/home/user/file.ext');","out> 'file'",
   "in> extractFileDirectory('/home/user/file.ext');","out> '/home/user'","in> extractFileName('/home/user/file.ext');",
   "out> 'file.ext'","in> extractFileExt('/home/user/file.ext');","out> '.ext'","in> extractPath('/index.html?x=0&y=3%2Ax');",
   "out> '/index.html'","in> extractParameters('/index.html?x=0&y=3%2Ax');","out> ['x' => 0,'y'=>'3*x'].toMap",
   "in> extractRawParameters('/index.html?x=0&y=3%2Ax');","out> 'x=0&y=3%2Ax'",
   "in> encodeRequest('127.0.0.1:3126','rest',[['user','anonymous'],['request','3*&7']].toMap);",
   "out> '127.0.0.1:3126/rest?user=anonymous&request=3%2A%267'","in> cross(['1'..'3'],['A'..'C']);",
   "out> [['1','A'],['1','B'],['1','C'],['2','A'],['2','B'],['2','C'],['3','A'],['3','B'],['3','C']]",'in> [1, 2, 1].toSet;',
   'out> [2,1].toSet','in> [1.2, 3.0].isRealCollection;','out> true','in> [1.2, 3.0].toSet.isRealCollection;','out> true',
   'in> [1.2, 3].isRealCollection;','out> false','in> [1.2, 3.0].isRealCollection(2);','out> true',
   'in> [1.2, 3.0].isRealCollection(3);','out> false','in> [true].isBooleanCollection;','out> true',
   'in> [true, false, true].toSet.isBooleanCollection(2);','out> true','in> [true, false, true].toSet.isBooleanSet;','out> true',
   'in> [1, 2, 3].isIntCollection;','out> true','in> [].isIntCollection;','out> true','in> [1.2, 3].isNumericCollection;',
   'out> true',"in> ['a','b'].toSet.isStringSet;",'out> true',"in> ['a','b'].isStringCollection;",'out> true',
   'in> [1, 2, 3].isIntSet;','out> false','in> [1, 2, 3].toSet.isIntSet;','out> true',
   "in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap;",'out> true',"in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(2);",'out> true',
   "in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(3);",'out> false',"in> [1,'a', false].isSet;",'out> false',
   "in> [1,'a', false].isCollection;",'out> true',"in> utf8ToAnsi(\"öµ\").bytes.ord;",'out> [246,181]',
   'in> chars[214].ansiToUtf8;',"out> \"Ö\"",'in> [1.2, 3.4].toSet.isRealSet;','out> true','in> toList(3);','out> [3]',
   'in> toList([2, 3, 6].toSet);','out> [3,2,6]','in> [1.2, 3.4].toSet.isNumericSet;','out> true',
   "in> [[1,'one'],[3,'three'],[5,'five']].toMap.getAll([1, 5, 6],['-','-','-']);","out> ['one','five','-']",
   'in> [1, 3, 5].getAll([0, 2])==[1, 3, 5].get([0, 2]);','out> true','in> [1..20].filter({$x mod 2<>0<>$x mod 3});',
   'out> [1,5,7,11,13,17,19]','in> rangeGenerator(1, 20).filter({$x mod 2<>0<>$x mod 3});',
   'out> rangeGenerator(1,20).filter({$x mod 2<>0<>$x mod 3})',"in> ['a'..'f'].map(:: upper);","out> ['A','B','C','D','E','F']",
   "in> ['a'..'f'].pMap(:: upper);","out> ['A','B','C','D','E','F']",'in> primeGenerator.head(10);',
   'out> [2,3,5,7,11,13,17,19,23,29]','in> [-1, 1,-1, 1,-2, 2].agg(head);','out> -1','in> [-1, 1,-1, 1,-2, 2].agg(trailing);',
   'out> 2','in> [-1, 1,-1, 1,-2, 2].agg(toSet);','out> [-1,-2,2,1].toSet','in> [-1, 1,-1, 1,-2, 2].agg(max);','out> 2',
   'in> [-1, 1,-1, 1,-2, 2].agg(min);','out> -2','in> [-1, 1,-1, 1,-2, 2].agg(&);',"out> '-11-11-22'",
   'in> [-1, 1,-1, 1,-2, 2].agg(*);','out> -4','in> [-1, 1,-1, 1,-2, 2].agg(+);','out> 0',
   'in> permutationIterator([3, 1, 2]).map(:: print).toList;','[1,2,3]','[1,3,2]','[2,1,3]','[2,3,1]','[3,1,2]','[3,2,1]',
   'out> []','in> rangeGenerator(1, 100).map({$x^2});','out> rangeGenerator(1,100).map({$x^2})',
   "in> mergeMaps([['A', 1],['B', 2]].toMap,[['A', 7],['C', 3]].toMap, ::+);","out> ['B' => 2,'C'=>3,'A'=>8].toMap",
   "in> try({deserialize('x')});",'out> void',"in> try({deserialize('x')}, :: print);",
   "[['el3_evalError','@?:3,6','Invalid literal encoding type 120']]",'out> void',"in> try({deserialize('x')}, 0);",'out> 0',
   "in> try({deserialize('x')},{warn($x.head.trailing)});",'Warning Invalid literal encoding type 120','out> void',
   "in> interpret('3+4');",'out> 7','in> shiftRight(7, 1);','out> 3','in> shiftRight(5,-2);','out> 20',
   'in> type FiniteRealList(L :List)->L.each(x,!x.isNan,!x.isInfinite, AND);','in> x :=[1, 5, 0.4, 1/7].toFiniteRealList;',
   'in> x;','out> [1,5,0.4,0.14285714285714284921].toFiniteRealList','in> x.typeOf;',"out> 'FiniteRealList'",'in> x.toBuiltin;',
   'out> [1,5,0.4,0.14285714285714284921]','in> x.toBuiltin.typeOf;',"out> 'NumericList(4)'",
   "in> interpret({print('Hello world')},[]);",'Error Cannot apply print because of side effect(s): [output]',
   'in> composeDigits([1, 0, 1], 2);','out> 5','in> composeDigits([1, 0, 2]);','out> 102','in> composeDigits([1, 0, 2], 10, 2);',
   'out> 1.02',"in> sandBoxExecute('f(x)->3*x+1; f(f(f(1)))',['alter package state']);",
   "out> [['echo_declaration','','f(x)->3*x+1;'],['echo_input','','f(f(f(1)));'],['echo_output','','40'],['exitCode','',0]]",
   "in> begin local x:=async({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   '1: true','start','2: end','out> void',
   "in> begin local x:=future({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   'start','1: false','2: end','out> void',"in> validateRegex('(3+.*');",'out> false',"in> validateRegex('\\(3+.*');",
   'out> true','in> [1..100].pFilter({$x mod 2=$x mod 3=$x mod 5});','out> [1,30,31,60,61,90,91]','in> pi;',
   'out> 3.1415926535897932385','in> isStatefulExpression(:: sin);','out> false','in> isStatefulExpression(future(:: sin,[3]));',
   'out> true','in> isStatelessExpression(:: sin);','out> true','in> isStatelessExpression(future(:: sin,[3]));','out> false',
   'in> isIteratable(future(:: sin,[3]));','out> false','in> isIteratable(primeGenerator);','out> true',
   'in> isIteratable([1..10]);','out> true','in> isIteratableExpression(primeGenerator);','out> true',
   'in> isIteratableExpression([1..10]);','out> false',
   "in> begin resetRandom; local gen:={begin local last:=0; save; last+=random; end}; print('gen.isIteratable= ', gen.isIteratable,'; ', gen.head(3)); gen:=gen.toIteratableExpression; print('gen.isIteratable= ', gen.isIteratable,'; ', gen.head(3)); end;",
   'gen.isIteratable= false; {begin local last:=0; save; last+=random; end}',
   'gen.isIteratable= true; [0.69890124513767659664,1.5846346444450318813,2.5055105253122746944]','out> void',
   'in> toIteratableExpression(:: sqr);','Error Only nullary stateful expressions may be iteratable.',
   'in> toIteratableExpression({begin local i:=1; save; i+=i-1; end});','out> {begin local i:=1; save; i+=i-1; end}',
   'in> euklideanNorm([1, 2]);','out> 2.236067977499789805','in> assert(1=1.0);','out> void',
   "in> assert('bla'.isInt,'Invalid integer given');",'Error Invalid integer given',
   "in> md5('Test input. Could be anything really.');",'out> 337964223705814058127798532806512273013',
   "in> sha256('Test input. Could be anything really.');",
   'out> 60429211283715320795241587111266756812669288936868807314606704811653259384943','in> hammingWeight(17213);','out> 8',
   'in> gcd(1231512, 143543);','out> 23',
   'in> powMod(2988348162058574136915891421498819466320163312926952423791023078876139, 2351399303373464486466122544523690094744975233415544072992656881240319, 10^40);',
   'out> 1527229998585248450016808958343740453059','in> randomGenerator(123).head(10);',
   'out> [0.8880804681684821844,0.033595459535717964172,0.073756912024691700935,0.073728758376091718673,0.40903412224724888801,0.7116715747397392988,0.46069467556662857532,0.5966716259717941284,0.81161490315571427345,0.4983937116339802742]',
   'in> intRandomGenerator(123, 5).head(10);','out> [2,0,0,1,3,4,0,0,1,2]','in> isaacRandomGenerator(123, 5).head(10);',
   'out> [3,3,1,4,4,2,2,0,4,3]','in> modularInverse(3, 32);','out> 11','in> byteToChar(100);',"out> 'd'",
   'in> byteToChar([10, 12, 97, 45]);',"out> [#10,#12,'a','-']","in> systemSpecificFilename('..\\test/filename.txt');",
   "out> '../test/filename.txt'","in> stringIterator(['a','b','c'], 1, 3).head(10);",
   "out> ['a','b','c','aa','ab','ac','ba','bb','bc','ca']",'in> vanDerCorputGenerator(2).head(10);',
   'out> [0.0,0.5,0.25,0.75,0.125,0.625,0.375,0.875,0.0625,0.5625]','in> primeGenerator.head(1000).trailing(5);',
   'out> [7879,7883,7901,7907,7919]','in> rangeGenerator(0, 5).head(10);','out> [0,1,2,3,4,5]',
   'in> rangeGenerator(100,-100).head(10);','out> [100,99,98,97,96,95,94,93,92,91]','in> divMod(10, 7);','out> [1,3]',
   "in> 'abba'.hasPrefix('ab');",'out> true',
   'in> isPrime(47531677974672740279381824573269878221106369761801704860769848227327108403647);','out> true','in> 3==3.0;',
   'out> false','in> [1, 2, 3]==[3, 1, 3];','out> false','in> 3=3.0;','out> true','in> {$x}=3;','out> {$x=3}',
   'in> [1, 2, 3]=[3, 1, 3];','out> [false,false,true]','in> 3<=3.0;','out> true','in> [1, 2, 3]<=[3, 1, 3];',
   'out> [true,false,true]','in> 3>=3.0;','out> true','in> [1, 2, 3]>=[3, 1, 3];','out> [false,true,true]','in> 3<3.0;',
   'out> false','in> [1, 2, 3]<[3, 1, 3];','out> [true,false,false]','in> 3>3.0;','out> false','in> [1, 2, 3]>[3, 1, 3];',
   'out> [false,true,false]','in> 3<>3.0;','out> false','in> [1, 2, 3]<>[3, 1, 3];','out> [true,true,false]',
   'in> true AND false;','out> false','in> true AND 3;','out> 3','in> false AND 3;','out> false','in> true and false;',
   'out> false','in> [true, false, true, false] and[true, true, false, false];','out> [true,false,false,false]','in> 7 and 252;',
   'out> 4','in> true OR false;','out> true','in> true OR 3;','out> true','in> false OR 3;','out> 3','in> true or false;',
   'out> true','in> [true, false, true, false] or[true, true, false, false];','out> [true,true,true,false]','in> 7 or 252;',
   'out> 255','in> true xor false;','out> true','in> [true, false, true, false] xor[true, true, false, false];',
   'out> [false,true,true,false]','in> 7 xor 252;','out> 251',"in> +'a';","out> 'a'",'in> -3;','out> -3',
   'in> -[1, 2.0, Inf, Nan];','out> [-1,-2.0,-Inf,Nan]','in> !true;','out> false','in> 3 in[1..5];','out> true',
   'in> 3.0 in[1..5];','out> false','in> 1|2;','out> [1,2]','in> [1]|[2];','out> [1,2]','in> [1]|2;','out> [1,2]',
   'in> [1]|[[2]];','out> [1,[2]]','in> [1]||2;','out> [1,2]','in> [1]||[2];','out> [1,[2]]','in> 10 div 3;','out> 3',
   'in> 10/3;','out> 3.3333333333333334813','in> 10/5;','out> 2','in> 10.0/5;','out> 2.0','in> void orElse 42;','out> 42',
   'in> 3 orElse fail;','out> 3','in> 3-pi;','out> -0.14159265358979323851','in> 32459378562983 mod 2342832;','out> 1139831',
   'in> 2*3;','out> 6','in> 2.0*3;','out> 6.0','in> 4+5;','out> 9',"in> 'a'+'b';","out> 'ab'",'in> 5^7;','out> 78125',
   'in> -3.5^3;','out> -42.875','in> 3&4;',"out> '34'",'in> isSubsetOf([1, 2, 3],[1, 2, 3]);','out> true',
   'in> isSubsetOf(1,[1, 2, 3]);','out> false','in> isSubsetOf([1],[1, 2, 3]);','out> true','in> isSubsetOf([1, 4],[1, 2, 3]);',
   'out> false'],
  'FOWin32'=>
  ['in> arity({3});','out> 0','in> arity({sin($x)/$x});','out> 1',
   "in> runScript(['name'=>'hello.mnh','source'=>[\"main->print('Hello world');\"],'side effects'=>['alter package state','output']].toMap).filter({$message.head=='printline'}).map(:: trailing);",
   "out> ['Hello world']",'in> arity({sin($x)/$y});','out> 2',"in> arity({printf('%s%s', $a,...)});",'out> 1',
   "in> toExpression('$x-$x^2+$x^3');",'out> {$x-$x^2+$x^3}',"in> toExpression('');",
   'Error The parsed expression appears to be empty','in> parameterNames({3});','out> []','in> parameterNames({sin($x)/$x});',
   "out> ['$x']","in> parameterNames({printf('%s%s', $a,...)});","out> ['$a']",'in> ord(3);','out> 3','in> ord(true);','out> 1',
   'in> ord(false);','out> 0',"in> ord('A');",'out> 65',"in> ord('abc');",'out> -1','in> ord(2.1);',
   'Error ord can only be applied to booleans, ints and strings',"in> softCast('A');","out> 'A'",'in> softCast(''"B"'');',
   "out> 'B'",'in> softCast(3);','out> 3',"in> softCast([1,'2','true',\"'TEXT'\",'1.5','2,6']);",
   "out> [1,2,true,'TEXT',1.5,'2,6']","in> toString('a');","out> 'a'",'in> toString(234);',"out> '234'",
   "in> toString([1, 2.6,'a', true,{$x}]);",'out> "[1,2.6,''a'',true,{$x}]"','in> abs(-0.92);','out> 0.92','in> abs(3);',
   'out> 3','in> abs({1+$x});','out> {abs(1+$x)}','in> arccos(-0.92);','out> 2.7388768120091316555','in> arccos(3);','out> Nan',
   'in> arccos({1+$x});','out> {arccos(1+$x)}','in> arcsin(-0.92);','out> -1.16808048521423503635','in> arcsin(3);','out> Nan',
   'in> arcsin({1+$x});','out> {arcsin(1+$x)}','in> tan(-0.92);','out> -1.31326369932024783656','in> tan(3);',
   'out> -0.14254654307427780529','in> tan({1+$x});','out> {tan(1+$x)}','in> tan(pi/2);','out> -3.6893488147419103232E19',
   'in> arctan(-0.92);','out> -0.74375558429885988575','in> arctan({$x});','out> {arctan($x)}','in> argMax(sin([0..10]));',
   'out> 8','in> argMax([1, 3, 3, 0, 2]);','out> 1','in> argMin(sin([0..10]));','out> 5','in> argMin([1, 3, 3, 0, 2]);','out> 3',
   'in> ceil(20/3);','out> 7','in> ceil([0..3]/3);','out> [0,1,1,1]','in> ceil([0..3]/3, 2);','out> [0,0.34,0.67,1]',
   'in> floor(20/3);','out> 6','in> floor([0..3]/3);','out> [0,0,0,1]','in> floor([0..3]/3, 2);','out> [0,0.33,0.66,1]',
   'in> round(20/3);','out> 7','in> round([0.5, 1.5, 2.5, 3.5]);','out> [0,2,2,4]','in> round([0..3]/3, 2);',
   'out> [0,0.33,0.67,1]','in> isInfinite(Nan);','out> false','in> isInfinite(+Inf);','out> true','in> isInfinite(-Inf);',
   'out> true','in> isInfinite([-3.4344, Nan,+Inf]);','out> [false,false,true]','in> isNan(Nan);','out> true','in> isNan(+Inf);',
   'out> false','in> isNan(-Inf);','out> false','in> isNan([-3.4344, Nan,+Inf]);','out> [false,true,false]','in> cos(-0.92);',
   'out> 0.60582015664346284178','in> cos(3);','out> -0.98999249660044545727','in> cos({1+$x});','out> {cos(1+$x)}',
   'in> exp(-0.92);','out> 0.39851904108451413621','in> exp(3);','out> 20.085536923187667923','in> exp({1+$x});',
   'out> {exp(1+$x)}','in> ln(-0.92);','out> Nan','in> ln(3);','out> 1.09861228866810969136','in> ln({1+$x});','out> {ln(1+$x)}',
   'in> ln(-0.92);','out> Nan','in> sin(3);','out> 0.1411200080598672221','in> sin({1+$x});','out> {sin(1+$x)}',
   'in> sqr(-0.92);','out> 0.8464','in> sqr(3);','out> 9','in> sqr({1+$x});','out> {sqr(1+$x)}','in> sqrt(-0.92);','out> Nan',
   'in> sqrt(3);','out> 1.73205080756887729357','in> sqrt({1+$x});','out> {sqrt(1+$x)}','in> isqrt(121);','out> [11,true]',
   'in> isqrt(255);','out> [15,false]','in> sign(-0.92);','out> -1','in> sign(3);','out> 1','in> sign({1+$x});',
   'out> {sign(1+$x)}',"in> max(['a'..'z']);","out> 'z'",'in> max([0..9]/2);','out> 4.5','in> max(true, false);','out> true',
   "in> min(['a'..'z']);","out> 'a'",'in> min([0..9]/2);','out> 0','in> min(true, false);','out> false',
   "in> copy('abcde', 1, 3);","out> 'bcd'","in> copy('abcde', 2);","out> 'cde'","in> escape('a');",'out> "''a''"',
   'in> escape(#9);',"out> '#9'",'in> group([1..10],[1..10] mod 3=0);','out> [false => [1,2,4,5,7,8,10],true=>[3,6,9]].toMap',
   'in> fail;','Error Fail','in> fail("Told you this wouldn''t work!");',"Error Told you this wouldn't work!",'in> hash(1);',
   'out> 2','in> hash([1..3]);','out> 299863',"in> hash('a');",'out> 283',
   "in> listBuiltin.filter({$s.matches('^mnh\\.')}).sort.trailing(10);",
   "out> ['mnh.listBuiltin','mnh.listSideEffects','mnh.mnhInfo','mnh.myPath','mnh.ord','mnh.parameterNames','mnh.runScript','mnh.sandBoxExecute','mnh.sleep','mnh.sleepUntil']",
   "in> group([[1,'a'],[2,'a'],[1,'b'],[4,'c'],[2,'a'],[2,'b']], 1, aggregator({[$x[0]+$y[0], $x[1]]}));",
   "out> ['b' => [3,'b'],'c'=>[4,'c'],'a'=>[5,'a']].toMap",'in> abs(3);','out> 3','in> abs(-3);','out> 3','in> abs([-2..2]/2);',
   'out> [1,0.5,0,0.5,1]',"in> chars('This is a test.');","out> ['T','h','i','s',' ','i','s',' ','a',' ','t','e','s','t','.']",
   'in> chars.get(100);',"out> 'd'","in> clean('+21/232/2116-11',['0'..'9'],' ');","out> ' 21 232 2116 11'",
   "in> join(['a','b','c']);","out> 'abc'","in> join([1..5],' ');","out> '1 2 3 4 5'","in> length(\"Test öäü\");",'out> 8',
   "in> byteLength(\"Test öäü\");",'out> 11',"in> length(['Text','AbC']);",'out> [4,3]',"in> lower('Test');","out> 'test'",
   "in> lower(['Text','AbC']);","out> ['text','abc']","in> upper('Test');","out> 'TEST'","in> upper(['Text','AbC']);",
   "out> ['TEXT','ABC']",'in> t :=[0..1000]*2*pi/1000;','in> plot(t, sin(t));','out> void',
   "in> plot.renderToFile('plotDemo1.png', 600, 300);",'out> void','in> abs({$x});','out> {abs($x)}','in> abs(3);','out> 3',
   'in> abs(-5/7);','out> 0.71428571428571428569','in> abs([-2..2]);','out> [2,1,0,1,2]',"in> chars('Test');",
   "out> ['T','e','s','t']","in> pos('o','Hello World');",'out> 4',"in> pos(',',['Hello','Test','1,2,3']);",'out> [Inf,Inf,1]',
   "in> pos(['a','b'],'cdb');",'out> [Inf,2]',"in> repeat('-', 10);","out> '----------'","in> replace('[[][]][]][][','[]','');",
   "out> ']['","in> replace('aba','b','bb');","out> 'abba'","in> replaceOne('[[][]][]][][','[]','');","out> '[[]][]][]['",
   "in> replaceOne('1:.-.; 2:.-.; 3:.-.','.',['a'..'e']);","out> '1:a-b; 2:c-d; 3:e-.'","in> split('1,2,3;4,5,6',',');",
   "out> ['1','2','3;4','5','6']","in> split('1,2,3;4,5,6',';');","out> ['1,2,3','4,5,6']","in> split('1,2,3;4,5,6',[';',',']);",
   "out> ['1','2','3','4','5','6']","in> tokenSplit('f(x)->x+1; //Stupid, but just an example...','mnh');",
   "out> ['f','(','x',')','->','x','+','1',';',' ','//Stupid, but just an example...']",'in> trim(" \tA B C\t ");',
   "out> 'A B C'",'in> trimLeft(" \tA B C\t ");','out> "A B C\t "','in> trimRight(" \tA B C\t ");','out> " \tA B C"',
   "in> unbrace('3');","out> '3'","in> unbrace('(3)');","out> '3'","in> unbrace('(3]');","out> '(3]'",'in> unbrace(''"3"'');',
   'out> ''"3"''',"in> chars('Testtext').elementFrequency;","out> ['T' => 1,'e'=>2,'s'=>1,'t'=>3,'x'=>1].toMap",
   'in> flatten([1,[2,[3, 4],[5]], 6]);','out> [1,2,3,4,5,6]',"in> head(['A'..'Z']);","out> 'A'","in> head(['A'..'Z'], 3);",
   "out> ['A','B','C']","in> ['A'..'Z'].toSet.head(3);","out> ['F','V','G']","in> tail(['A'..'Z']);",
   "out> ['B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']",
   "in> tail(['A'..'Z'], 3);",
   "out> ['D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']",
   'in> rangeGenerator(1, 10).tail(3);','out> [4,5,6,7,8,9,10]',"in> leading(['A'..'Z']);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y']",
   "in> leading(['A'..'Z'], 3);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W']",
   'in> rangeGenerator(1, 10).leading(3);','out> [1,2,3,4,5,6,7]',"in> trailing(['A'..'Z']);","out> 'Z'",
   "in> trailing(['A'..'Z'], 3);","out> ['X','Y','Z']","in> ['A'..'Z'].toSet.trailing(3);","out> ['T','E','U']",
   'in> rangeGenerator(1, 10).trailing(3);','out> [8,9,10]','in> minus([1..10]^2, 2*[0..50]);','out> [1,9,25,49,81].toSet',
   'in> sort(intRandom(10, 5));','out> [0,1,2,3,8]',"in> sort(['01','10','100','1','010'],{softCast($x)<=softCast($y)});",
   "out> ['01','1','10','010','100']",'in> sortPerm(random(10));','out> [8,3,2,1,5,6,9,0,7,4]',"in> sortPerm(['a'..'c'..'a']);",
   'out> [0,4,1,3,2]','in> intersect([0..1000]^2,[0..1000]^3);',
   'out> [1,0,4096,262144,64,46656,1000000,729,15625,117649,531441].toSet','in> union(1/[1..5], 2/[2..6]);',
   'out> [0.2,0.4,1,0.5,0.25,0.33333333333333333334,0.66666666666666666668].toSet',"in> deleteFile('plotDemo1.png');",
   'out> true',"in> get(['a'..'f'], 3);","out> 'd'","in> get(['a'..'f'],[3, 1, 2]);","out> ['d','b','c']",
   'in> get([0..4],[2..6] mod 3=0);','out> [1,4]',"in> get([['A', 1],['B', 2],['C', 0]],'B');",'out> 2',
   'in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]], 1);','out> [2,5,8]','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[1, 0]);',
   'out> [[2,1],[5,4],[8,7]]','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[true, false, true]);','out> [[1,3],[4,6],[7,9]]',
   'in> indexOf([1..6]^2 mod 3=0);','out> [2,5]','in> reverseList([1..5]);','out> [5,4,3,2,1]','in> size([0.5, 0.1, 0.2]);',
   'out> 3',"in> toMap([['A', 1],['B', 2],['C', 0],['B', 4]]);","out> ['B' => 4,'C'=>0,'A'=>1].toMap",
   'in> trueCount(10<[0..10]^2<50);','out> 4','in> unique([3, 1, 2, 1, 4, 1, 5]);','out> [1,2,3,4,5]',"in> compress('Test');",
   "out> 'Test'","in> compress('Test').decompress;","out> 'Test'","in> compress('Testtext');","out> #2#248'e'#240'9N'",
   "in> compress('Testtext').decompress;","out> 'Testtext'","in> relativeFileName('~/folder/','~/other/example.txt');",
   "out> '../other/example.txt'",'in> primes(20);','out> [2,3,5,7,11,13,17,19]','in> subSets([1, 2, 1]);',
   'out> [[],[1],[1,1],[2],[2,1],[2,1,1]]',"in> diff('encode','decode');",
   "out> ['deletes' => 1,'modifies'=>0,'adds'=>1,'matches'=>5,'edit'=>[['+',-1,0],[' ',0,1],['-',1,1],[' ',2,2],[' ',3,3],[' ',4,4],[' ',5,5]]].toMap",
   "in> diffStats('encode','decode');","out> ['deletes' => 1,'modifies'=>0,'adds'=>1,'matches'=>5].toMap",
   "in> format('%s is a string, %3.3d is a number','X', 7);","out> 'X is a string, 007 is a number'","in> format('%6.3f', 3);",
   "out> ' 3.000'","in> format('%6.3e', 3);","out> '3.00E+000'","in> format('%6.3g', 3);","out> '     3'",
   "in> format('%6.6x', 1234);","out> '0004D2'","in> formatTime('mm.dd.yyyy', 43210);","out> '04.20.2018'",
   'in> formatTime(12424.245);',"out> '05.01.1934 05:52:48'","in> isAscii('xyz');",'out> true',"in> isAscii('xyz'&chars[180]);",
   'out> false',"in> isAscii(\"Läuft\");",'out> false',"in> isUtf8('xyz');",'out> true',"in> isUtf8('xyz'&chars[180]);",
   'out> false',"in> isUtf8(\"Schräg\");",'out> true',"in> parseTime('yyyy-mm-dd hh:nn','2000-01-01 03:43');",
   'out> 36526.154861111113859',"in> reverseString('Test');","out> 'tseT'","in> regex.matches('This is a test','[T|t]est');",
   'out> true',"in> regex.matchComposite('This is a test','[T|t]est');","out> [['test',11,4]]",
   "in> regex.replace('A Test is a test','[T|t]est','rose');","out> 'A rose is a rose'",
   "in> regex.split('A Test is a test','[e| ]');","out> ['A','T','st','is','a','t','st']",'in> toBoolean(0);','out> false',
   'in> toBoolean(1.0);','out> true',"in> toBoolean('true');",'out> true','in> toBoolean(3);',
   'Error 3 cannot be cast to boolean',"in> toInt('32');",'out> 32','in> toInt(3.0);','out> 3','in> toInt(3.1);',
   'Error 3.1 cannot be cast to int','in> toInt(false);','out> 0',"in> toReal('3.212');",'out> 3.212','in> toReal(true);',
   'out> 1','in> toReal(3);','out> 3.0','in> getOptions;',
   "out> ['x1' => 1.0,'axisStyleY'=>7,'strictInput'=>false,'autoscaleX'=>true,'logscaleX'=>false,'fontsize'=>10.0,'autoscaleY'=>true,'logscaleY'=>false,'y0'=>-1.0,'autoscaleFactor'=>1.0,'x0'=>-1.0,'y1'=>1.0,'preserveAspect'=>true,'axisStyleX'=>7].toMap",
   'in> executor;','out> ''<#>\target\Win32\mnh.exe''','in> print("1\n2.0\n03.45");','1','2.0','03.45','out> void',
   'in> print("1\n2.0\n03,45\t");',' 1',' 2.0','03,45','out> void','in> print("1\tone\t|\n2.0\ttwo\t|\n03.45\tthree\t|");',
   ' 1    one   |',' 2.0  two   |','03.45 three |','out> void','in> print("1\vone\v|\n2.0\vtwo\v|\n03.45\vthree\v|");',
   ' 1   one  |',' 2.0 two  |','03.45three|','out> void',"in> printf('%x is %d in hexadecimal form', 123, 123);",
   '7B is 123 in hexadecimal form','out> void',"in> printf('%{$0}x is %{$0}d in hexadecimal form', 123);",
   '7B is 123 in hexadecimal form','out> void',"in> printf('sin(%{$0}s)=%{sin($0)}4.4g', 1);",'sin(1)=0.8415','out> void',
   'in> permutations([1, 1, 2]);','out> [[1,2,1],[1,1,2],[2,1,1]].toSet','in> permutations([1..3]);',
   'out> [[1,3,2],[2,1,3],[2,3,1],[3,1,2],[1,2,3],[3,2,1]].toSet',"in> input :=[[1..10], random,'test', random(9)];",
   'in> serialized :=input.serialize;',"in> print(input.toString.byteLength,' > ', serialized.byteLength);",'258 > 104',
   'out> void','in> input==serialized.deserialize;','out> true','in> factorize(18447422338071909869);',
   'out> [2642257,2642287,2642291]','in> formatTabs("\v-2\n3\t4.3");',"out> ['  -2','3  4.3']",'in> typeOf(3);',"out> 'Int'",
   'in> typeOf([1..5, 7.5]);',"out> 'NumericList(6)'",'in> typeOf({$x^2+$y});',"out> 'Expression(2)'",
   'in> x :=transpose([1,[1, 2, 3],[1, 2]], 0);','in> x;','out> [[1,1,1],[0,2,2],[0,3,0]]','in> x.transpose(0);',
   'out> [[1,0,0],[1,2,3],[1,2,0]]','in> resetRandom(12157);','out> void','in> resetRandom;','out> void','in> intRandom(7);',
   'out> 1','in> intRandom(7, 10);','out> [2,2,3,0,0,3,2,2,6,5]','in> random;','out> 0.70794778806157410144','in> random(3);',
   'out> [0.20965369325131177902,0.45114781009033322334,0.19202205142937600612]',"in> note('Note that this is a note');",
   'Note Note that this is a note','out> void',"in> warn('Warning: I intend to say something important here');",
   'Warning Warning: I intend to say something important here','out> void','in> isScalar(1);','out> true',
   'in> isBoolean(false);','out> true','in> isBoolean(1);','out> false','in> isInt(false);','out> false','in> isInt(1);',
   'out> true','in> isInt(1.0);','out> false','in> isReal(false);','out> false','in> isReal(1);','out> false','in> isReal(1.0);',
   'out> true','in> isNumeric(false);','out> false','in> isNumeric(1);','out> true','in> isNumeric(1.0);','out> true',
   'in> isList([]);','out> true','in> isList([], 0);','out> true','in> isList([], 1);','out> false',"in> isList(['x'], 1);",
   'out> true',"in> isString('Test');",'out> true','in> isString(true);','out> false','in> isExpression(:: sin);','out> true',
   'in> isExpression(:: sin, 1);','out> true','in> isExpression(:: sin, 2);','out> false','in> digits(123);','out> [1,2,3]',
   'in> digits(123, 3);','out> [1,1,1,2,0]','in> arctan2(1, 1);','out> 0.78539816339744830962',"in> charSet('abcba');",
   "out> ['a','b','c'].toSet","in> bytes(\"ö\").ord;",'out> [195,182]',"in> base64encode('Test');","out> 'VGVzdA=='",
   "in> base64decode('VGVzdA==');","out> 'Test'","in> base92encode('bla bla bla ');","out> ']En_)]En_)]En_)'",
   "in> base92decode('PgsC.?d@t^');","out> '12345'",'in> listSideEffects;',
   "out> ['input','output','sound','sleep','detaching','server','read package state','alter package state','alter context state','alter plot state','read file','write file','http','ipc','executing external']",
   "in> changeFileExt('file.extension','.newExtension');","out> 'file.newExtension'",
   "in> changeFileExt('file.2.extension','.newExtension');","out> 'file.2.newExtension'",'in> httpError;',
   'out> "HTTP/1.0 404\r\n"','in> isBooleanList([true, false]);','out> true','in> isBooleanList(true);','out> false',
   'in> isIntList([1..3]);','out> true','in> isIntList([1, 2.0]);','out> false','in> isRealList([1, 2, 3]);','out> false',
   'in> isRealList([1.0, 2.0, 3.0, Nan]);','out> true',"in> isStringList(['a'..'z']);",'out> true',
   'in> isNumericList([1, 2, 3]);','out> true','in> isNumericList([1.0, 2, 3, Inf]);','out> true','in> isVoid();','out> true',
   'in> isVoid(void);','out> true','in> isVoid(3);','out> false',"in> escapePascal('Test');",'out> "''Test''"',
   "in> escapeJava('Test');",'out> ''"Test"''',"in> extractFileNameOnly('/home/user/file.ext');","out> 'file'",
   "in> extractFileDirectory('/home/user/file.ext');","out> '/home/user'","in> extractFileName('/home/user/file.ext');",
   "out> 'file.ext'","in> extractFileExt('/home/user/file.ext');","out> '.ext'","in> extractPath('/index.html?x=0&y=3%2Ax');",
   "out> '/index.html'","in> extractParameters('/index.html?x=0&y=3%2Ax');","out> ['x' => 0,'y'=>'3*x'].toMap",
   "in> extractRawParameters('/index.html?x=0&y=3%2Ax');","out> 'x=0&y=3%2Ax'",
   "in> encodeRequest('127.0.0.1:3126','rest',[['user','anonymous'],['request','3*&7']].toMap);",
   "out> '127.0.0.1:3126/rest?user=anonymous&request=3%2A%267'","in> cross(['1'..'3'],['A'..'C']);",
   "out> [['1','A'],['1','B'],['1','C'],['2','A'],['2','B'],['2','C'],['3','A'],['3','B'],['3','C']]",'in> [1, 2, 1].toSet;',
   'out> [2,1].toSet','in> [1.2, 3.0].isRealCollection;','out> true','in> [1.2, 3.0].toSet.isRealCollection;','out> true',
   'in> [1.2, 3].isRealCollection;','out> false','in> [1.2, 3.0].isRealCollection(2);','out> true',
   'in> [1.2, 3.0].isRealCollection(3);','out> false','in> [true].isBooleanCollection;','out> true',
   'in> [true, false, true].toSet.isBooleanCollection(2);','out> true','in> [true, false, true].toSet.isBooleanSet;','out> true',
   'in> [1, 2, 3].isIntCollection;','out> true','in> [].isIntCollection;','out> true','in> [1.2, 3].isNumericCollection;',
   'out> true',"in> ['a','b'].toSet.isStringSet;",'out> true',"in> ['a','b'].isStringCollection;",'out> true',
   'in> [1, 2, 3].isIntSet;','out> false','in> [1, 2, 3].toSet.isIntSet;','out> true',
   "in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap;",'out> true',"in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(2);",'out> true',
   "in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(3);",'out> false',"in> [1,'a', false].isSet;",'out> false',
   "in> [1,'a', false].isCollection;",'out> true',"in> utf8ToAnsi(\"öµ\").bytes.ord;",'out> [246,181]',
   'in> chars[214].ansiToUtf8;',"out> \"Ö\"",'in> [1.2, 3.4].toSet.isRealSet;','out> true','in> toList(3);','out> [3]',
   'in> toList([2, 3, 6].toSet);','out> [3,2,6]','in> [1.2, 3.4].toSet.isNumericSet;','out> true',
   "in> [[1,'one'],[3,'three'],[5,'five']].toMap.getAll([1, 5, 6],['-','-','-']);","out> ['one','five','-']",
   'in> [1, 3, 5].getAll([0, 2])==[1, 3, 5].get([0, 2]);','out> true','in> [1..20].filter({$x mod 2<>0<>$x mod 3});',
   'out> [1,5,7,11,13,17,19]','in> rangeGenerator(1, 20).filter({$x mod 2<>0<>$x mod 3});',
   'out> rangeGenerator(1,20).filter({$x mod 2<>0<>$x mod 3})',"in> ['a'..'f'].map(:: upper);","out> ['A','B','C','D','E','F']",
   "in> ['a'..'f'].pMap(:: upper);","out> ['A','B','C','D','E','F']",'in> primeGenerator.head(10);',
   'out> [2,3,5,7,11,13,17,19,23,29]','in> [-1, 1,-1, 1,-2, 2].agg(head);','out> -1','in> [-1, 1,-1, 1,-2, 2].agg(trailing);',
   'out> 2','in> [-1, 1,-1, 1,-2, 2].agg(toSet);','out> [-1,-2,2,1].toSet','in> [-1, 1,-1, 1,-2, 2].agg(max);','out> 2',
   'in> [-1, 1,-1, 1,-2, 2].agg(min);','out> -2','in> [-1, 1,-1, 1,-2, 2].agg(&);',"out> '-11-11-22'",
   'in> [-1, 1,-1, 1,-2, 2].agg(*);','out> -4','in> [-1, 1,-1, 1,-2, 2].agg(+);','out> 0',
   'in> permutationIterator([3, 1, 2]).map(:: print).toList;','[1,2,3]','[1,3,2]','[2,1,3]','[2,3,1]','[3,1,2]','[3,2,1]',
   'out> []','in> rangeGenerator(1, 100).map({$x^2});','out> rangeGenerator(1,100).map({$x^2})',
   "in> mergeMaps([['A', 1],['B', 2]].toMap,[['A', 7],['C', 3]].toMap, ::+);","out> ['B' => 2,'C'=>3,'A'=>8].toMap",
   "in> try({deserialize('x')});",'out> void',"in> try({deserialize('x')}, :: print);",
   "[['el3_evalError','@?:3,6','Invalid literal encoding type 120']]",'out> void',"in> try({deserialize('x')}, 0);",'out> 0',
   "in> try({deserialize('x')},{warn($x.head.trailing)});",'Warning Invalid literal encoding type 120','out> void',
   "in> interpret('3+4');",'out> 7','in> shiftRight(7, 1);','out> 3','in> shiftRight(5,-2);','out> 20',
   'in> type FiniteRealList(L :List)->L.each(x,!x.isNan,!x.isInfinite, AND);','in> x :=[1, 5, 0.4, 1/7].toFiniteRealList;',
   'in> x;','out> [1,5,0.4,0.14285714285714285714].toFiniteRealList','in> x.typeOf;',"out> 'FiniteRealList'",'in> x.toBuiltin;',
   'out> [1,5,0.4,0.14285714285714285714]','in> x.toBuiltin.typeOf;',"out> 'NumericList(4)'",
   "in> interpret({print('Hello world')},[]);",'Error Cannot apply print because of side effect(s): [output]',
   'in> composeDigits([1, 0, 1], 2);','out> 5','in> composeDigits([1, 0, 2]);','out> 102','in> composeDigits([1, 0, 2], 10, 2);',
   'out> 1.02',"in> sandBoxExecute('f(x)->3*x+1; f(f(f(1)))',['alter package state']);",
   "out> [['echo_declaration','','f(x)->3*x+1;'],['echo_input','','f(f(f(1)));'],['echo_output','','40'],['exitCode','',0]]",
   "in> begin local x:=async({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   '1: true','start','2: end','out> void',
   "in> begin local x:=future({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   'start','1: false','2: end','out> void',"in> validateRegex('(3+.*');",'out> false',"in> validateRegex('\\(3+.*');",
   'out> true','in> [1..100].pFilter({$x mod 2=$x mod 3=$x mod 5});','out> [1,30,31,60,61,90,91]','in> pi;',
   'out> 3.1415926535897932385','in> isStatefulExpression(:: sin);','out> false','in> isStatefulExpression(future(:: sin,[3]));',
   'out> true','in> isStatelessExpression(:: sin);','out> true','in> isStatelessExpression(future(:: sin,[3]));','out> false',
   'in> isIteratable(future(:: sin,[3]));','out> false','in> isIteratable(primeGenerator);','out> true',
   'in> isIteratable([1..10]);','out> true','in> isIteratableExpression(primeGenerator);','out> true',
   'in> isIteratableExpression([1..10]);','out> false',
   "in> begin resetRandom; local gen:={begin local last:=0; save; last+=random; end}; print('gen.isIteratable= ', gen.isIteratable,'; ', gen.head(3)); gen:=gen.toIteratableExpression; print('gen.isIteratable= ', gen.isIteratable,'; ', gen.head(3)); end;",
   'gen.isIteratable= false; {begin local last:=0; save; last+=random; end}',
   'gen.isIteratable= true; [0.69890124513767659664,1.5846346444450318813,2.5055105253122746944]','out> void',
   'in> toIteratableExpression(:: sqr);','Error Only nullary stateful expressions may be iteratable.',
   'in> toIteratableExpression({begin local i:=1; save; i+=i-1; end});','out> {begin local i:=1; save; i+=i-1; end}',
   'in> euklideanNorm([1, 2]);','out> 2.2360679774997896964','in> assert(1=1.0);','out> void',
   "in> assert('bla'.isInt,'Invalid integer given');",'Error Invalid integer given',
   "in> md5('Test input. Could be anything really.');",'out> 337964223705814058127798532806512273013',
   "in> sha256('Test input. Could be anything really.');",
   'out> 60429211283715320795241587111266756812669288936868807314606704811653259384943','in> hammingWeight(17213);','out> 8',
   'in> gcd(1231512, 143543);','out> 23',
   'in> powMod(2988348162058574136915891421498819466320163312926952423791023078876139, 2351399303373464486466122544523690094744975233415544072992656881240319, 10^40);',
   'out> 1527229998585248450016808958343740453059','in> randomGenerator(123).head(10);',
   'out> [0.8880804681684821844,0.033595459535717964172,0.073756912024691700935,0.073728758376091718673,0.40903412224724888801,0.7116715747397392988,0.46069467556662857532,0.5966716259717941284,0.81161490315571427345,0.4983937116339802742]',
   'in> intRandomGenerator(123, 5).head(10);','out> [2,0,0,1,3,4,0,0,1,2]','in> isaacRandomGenerator(123, 5).head(10);',
   'out> [3,3,1,4,4,2,2,0,4,3]','in> modularInverse(3, 32);','out> 11','in> byteToChar(100);',"out> 'd'",
   'in> byteToChar([10, 12, 97, 45]);',"out> [#10,#12,'a','-']","in> systemSpecificFilename('..\\test/filename.txt');",
   'out> ''..\test\filename.txt''',"in> stringIterator(['a','b','c'], 1, 3).head(10);",
   "out> ['a','b','c','aa','ab','ac','ba','bb','bc','ca']",'in> vanDerCorputGenerator(2).head(10);',
   'out> [0.0,0.5,0.25,0.75,0.125,0.625,0.375,0.875,0.0625,0.5625]','in> primeGenerator.head(1000).trailing(5);',
   'out> [7879,7883,7901,7907,7919]','in> rangeGenerator(0, 5).head(10);','out> [0,1,2,3,4,5]',
   'in> rangeGenerator(100,-100).head(10);','out> [100,99,98,97,96,95,94,93,92,91]','in> divMod(10, 7);','out> [1,3]',
   "in> 'abba'.hasPrefix('ab');",'out> true',
   'in> isPrime(47531677974672740279381824573269878221106369761801704860769848227327108403647);','out> true','in> 3==3.0;',
   'out> false','in> [1, 2, 3]==[3, 1, 3];','out> false','in> 3=3.0;','out> true','in> {$x}=3;','out> {$x=3}',
   'in> [1, 2, 3]=[3, 1, 3];','out> [false,false,true]','in> 3<=3.0;','out> true','in> [1, 2, 3]<=[3, 1, 3];',
   'out> [true,false,true]','in> 3>=3.0;','out> true','in> [1, 2, 3]>=[3, 1, 3];','out> [false,true,true]','in> 3<3.0;',
   'out> false','in> [1, 2, 3]<[3, 1, 3];','out> [true,false,false]','in> 3>3.0;','out> false','in> [1, 2, 3]>[3, 1, 3];',
   'out> [false,true,false]','in> 3<>3.0;','out> false','in> [1, 2, 3]<>[3, 1, 3];','out> [true,true,false]',
   'in> true AND false;','out> false','in> true AND 3;','out> 3','in> false AND 3;','out> false','in> true and false;',
   'out> false','in> [true, false, true, false] and[true, true, false, false];','out> [true,false,false,false]','in> 7 and 252;',
   'out> 4','in> true OR false;','out> true','in> true OR 3;','out> true','in> false OR 3;','out> 3','in> true or false;',
   'out> true','in> [true, false, true, false] or[true, true, false, false];','out> [true,true,true,false]','in> 7 or 252;',
   'out> 255','in> true xor false;','out> true','in> [true, false, true, false] xor[true, true, false, false];',
   'out> [false,true,true,false]','in> 7 xor 252;','out> 251',"in> +'a';","out> 'a'",'in> -3;','out> -3',
   'in> -[1, 2.0, Inf, Nan];','out> [-1,-2.0,-Inf,Nan]','in> !true;','out> false','in> 3 in[1..5];','out> true',
   'in> 3.0 in[1..5];','out> false','in> 1|2;','out> [1,2]','in> [1]|[2];','out> [1,2]','in> [1]|2;','out> [1,2]',
   'in> [1]|[[2]];','out> [1,[2]]','in> [1]||2;','out> [1,2]','in> [1]||[2];','out> [1,[2]]','in> 10 div 3;','out> 3',
   'in> 10/3;','out> 3.3333333333333333332','in> 10/5;','out> 2','in> 10.0/5;','out> 2.0','in> void orElse 42;','out> 42',
   'in> 3 orElse fail;','out> 3','in> 3-pi;','out> -0.14159265358979323851','in> 32459378562983 mod 2342832;','out> 1139831',
   'in> 2*3;','out> 6','in> 2.0*3;','out> 6.0','in> 4+5;','out> 9',"in> 'a'+'b';","out> 'ab'",'in> 5^7;','out> 78125',
   'in> -3.5^3;','out> -42.875','in> 3&4;',"out> '34'",'in> isSubsetOf([1, 2, 3],[1, 2, 3]);','out> true',
   'in> isSubsetOf(1,[1, 2, 3]);','out> false','in> isSubsetOf([1],[1, 2, 3]);','out> true','in> isSubsetOf([1, 4],[1, 2, 3]);',
   'out> false'],
  'FOWin64'=>
  ['in> arity({3});','out> 0','in> arity({sin($x)/$x});','out> 1',
   "in> runScript(['name'=>'hello.mnh','source'=>[\"main->print('Hello world');\"],'side effects'=>['alter package state','output']].toMap).filter({$message.head=='printline'}).map(:: trailing);",
   "out> ['Hello world']",'in> arity({sin($x)/$y});','out> 2',"in> arity({printf('%s%s', $a,...)});",'out> 1',
   "in> toExpression('$x-$x^2+$x^3');",'out> {$x-$x^2+$x^3}',"in> toExpression('');",
   'Error The parsed expression appears to be empty','in> parameterNames({3});','out> []','in> parameterNames({sin($x)/$x});',
   "out> ['$x']","in> parameterNames({printf('%s%s', $a,...)});","out> ['$a']",'in> ord(3);','out> 3','in> ord(true);','out> 1',
   'in> ord(false);','out> 0',"in> ord('A');",'out> 65',"in> ord('abc');",'out> -1','in> ord(2.1);',
   'Error ord can only be applied to booleans, ints and strings',"in> softCast('A');","out> 'A'",'in> softCast(''"B"'');',
   "out> 'B'",'in> softCast(3);','out> 3',"in> softCast([1,'2','true',\"'TEXT'\",'1.5','2,6']);",
   "out> [1,2,true,'TEXT',1.5,'2,6']","in> toString('a');","out> 'a'",'in> toString(234);',"out> '234'",
   "in> toString([1, 2.6,'a', true,{$x}]);",'out> "[1,2.6,''a'',true,{$x}]"','in> abs(-0.92);','out> 0.92','in> abs(3);',
   'out> 3','in> abs({1+$x});','out> {abs(1+$x)}','in> arccos(-0.92);','out> 2.7388768120091318','in> arccos(3);','out> Nan',
   'in> arccos({1+$x});','out> {arccos(1+$x)}','in> arcsin(-0.92);','out> -1.1680804852142352','in> arcsin(3);','out> Nan',
   'in> arcsin({1+$x});','out> {arcsin(1+$x)}','in> tan(-0.92);','out> -1.313263699320248','in> tan(3);',
   'out> -0.1425465430742778','in> tan({1+$x});','out> {tan(1+$x)}','in> tan(pi/2);','out> 1.6331778728383844E16',
   'in> arctan(-0.92);','out> -0.7437555842988599','in> arctan({$x});','out> {arctan($x)}','in> argMax(sin([0..10]));','out> 8',
   'in> argMax([1, 3, 3, 0, 2]);','out> 1','in> argMin(sin([0..10]));','out> 5','in> argMin([1, 3, 3, 0, 2]);','out> 3',
   'in> ceil(20/3);','out> 7','in> ceil([0..3]/3);','out> [0,1,1,1]','in> ceil([0..3]/3, 2);','out> [0,0.34,0.67,1]',
   'in> floor(20/3);','out> 6','in> floor([0..3]/3);','out> [0,0,0,1]','in> floor([0..3]/3, 2);','out> [0,0.33,0.66,1]',
   'in> round(20/3);','out> 7','in> round([0.5, 1.5, 2.5, 3.5]);','out> [0,2,2,4]','in> round([0..3]/3, 2);',
   'out> [0,0.33,0.67,1]','in> isInfinite(Nan);','out> false','in> isInfinite(+Inf);','out> true','in> isInfinite(-Inf);',
   'out> true','in> isInfinite([-3.4344, Nan,+Inf]);','out> [false,false,true]','in> isNan(Nan);','out> true','in> isNan(+Inf);',
   'out> false','in> isNan(-Inf);','out> false','in> isNan([-3.4344, Nan,+Inf]);','out> [false,true,false]','in> cos(-0.92);',
   'out> 0.60582015664346289','in> cos(3);','out> -0.9899924966004454','in> cos({1+$x});','out> {cos(1+$x)}','in> exp(-0.92);',
   'out> 0.39851904108451419','in> exp(3);','out> 20.085536923187668','in> exp({1+$x});','out> {exp(1+$x)}','in> ln(-0.92);',
   'out> Nan','in> ln(3);','out> 1.0986122886681096','in> ln({1+$x});','out> {ln(1+$x)}','in> ln(-0.92);','out> Nan',
   'in> sin(3);','out> 0.1411200080598672','in> sin({1+$x});','out> {sin(1+$x)}','in> sqr(-0.92);','out> 0.8464','in> sqr(3);',
   'out> 9','in> sqr({1+$x});','out> {sqr(1+$x)}','in> sqrt(-0.92);','out> Nan','in> sqrt(3);','out> 1.7320508075688772',
   'in> sqrt({1+$x});','out> {sqrt(1+$x)}','in> isqrt(121);','out> [11,true]','in> isqrt(255);','out> [15,false]',
   'in> sign(-0.92);','out> -1','in> sign(3);','out> 1','in> sign({1+$x});','out> {sign(1+$x)}',"in> max(['a'..'z']);",
   "out> 'z'",'in> max([0..9]/2);','out> 4.5','in> max(true, false);','out> true',"in> min(['a'..'z']);","out> 'a'",
   'in> min([0..9]/2);','out> 0','in> min(true, false);','out> false',"in> copy('abcde', 1, 3);","out> 'bcd'",
   "in> copy('abcde', 2);","out> 'cde'","in> escape('a');",'out> "''a''"','in> escape(#9);',"out> '#9'",
   'in> group([1..10],[1..10] mod 3=0);','out> [false => [1,2,4,5,7,8,10],true=>[3,6,9]].toMap','in> fail;','Error Fail',
   'in> fail("Told you this wouldn''t work!");',"Error Told you this wouldn't work!",'in> hash(1);','out> 2','in> hash([1..3]);',
   'out> 299863',"in> hash('a');",'out> 283',"in> listBuiltin.filter({$s.matches('^mnh\\.')}).sort.trailing(10);",
   "out> ['mnh.listBuiltin','mnh.listSideEffects','mnh.mnhInfo','mnh.myPath','mnh.ord','mnh.parameterNames','mnh.runScript','mnh.sandBoxExecute','mnh.sleep','mnh.sleepUntil']",
   "in> group([[1,'a'],[2,'a'],[1,'b'],[4,'c'],[2,'a'],[2,'b']], 1, aggregator({[$x[0]+$y[0], $x[1]]}));",
   "out> ['b' => [3,'b'],'c'=>[4,'c'],'a'=>[5,'a']].toMap",'in> abs(3);','out> 3','in> abs(-3);','out> 3','in> abs([-2..2]/2);',
   'out> [1,0.5,0,0.5,1]',"in> chars('This is a test.');","out> ['T','h','i','s',' ','i','s',' ','a',' ','t','e','s','t','.']",
   'in> chars.get(100);',"out> 'd'","in> clean('+21/232/2116-11',['0'..'9'],' ');","out> ' 21 232 2116 11'",
   "in> join(['a','b','c']);","out> 'abc'","in> join([1..5],' ');","out> '1 2 3 4 5'","in> length(\"Test öäü\");",'out> 8',
   "in> byteLength(\"Test öäü\");",'out> 11',"in> length(['Text','AbC']);",'out> [4,3]',"in> lower('Test');","out> 'test'",
   "in> lower(['Text','AbC']);","out> ['text','abc']","in> upper('Test');","out> 'TEST'","in> upper(['Text','AbC']);",
   "out> ['TEXT','ABC']",'in> t :=[0..1000]*2*pi/1000;','in> plot(t, sin(t));','out> void',
   "in> plot.renderToFile('plotDemo1.png', 600, 300);",'out> void','in> abs({$x});','out> {abs($x)}','in> abs(3);','out> 3',
   'in> abs(-5/7);','out> 0.7142857142857143','in> abs([-2..2]);','out> [2,1,0,1,2]',"in> chars('Test');",
   "out> ['T','e','s','t']","in> pos('o','Hello World');",'out> 4',"in> pos(',',['Hello','Test','1,2,3']);",'out> [Inf,Inf,1]',
   "in> pos(['a','b'],'cdb');",'out> [Inf,2]',"in> repeat('-', 10);","out> '----------'","in> replace('[[][]][]][][','[]','');",
   "out> ']['","in> replace('aba','b','bb');","out> 'abba'","in> replaceOne('[[][]][]][][','[]','');","out> '[[]][]][]['",
   "in> replaceOne('1:.-.; 2:.-.; 3:.-.','.',['a'..'e']);","out> '1:a-b; 2:c-d; 3:e-.'","in> split('1,2,3;4,5,6',',');",
   "out> ['1','2','3;4','5','6']","in> split('1,2,3;4,5,6',';');","out> ['1,2,3','4,5,6']","in> split('1,2,3;4,5,6',[';',',']);",
   "out> ['1','2','3','4','5','6']","in> tokenSplit('f(x)->x+1; //Stupid, but just an example...','mnh');",
   "out> ['f','(','x',')','->','x','+','1',';',' ','//Stupid, but just an example...']",'in> trim(" \tA B C\t ");',
   "out> 'A B C'",'in> trimLeft(" \tA B C\t ");','out> "A B C\t "','in> trimRight(" \tA B C\t ");','out> " \tA B C"',
   "in> unbrace('3');","out> '3'","in> unbrace('(3)');","out> '3'","in> unbrace('(3]');","out> '(3]'",'in> unbrace(''"3"'');',
   'out> ''"3"''',"in> chars('Testtext').elementFrequency;","out> ['T' => 1,'e'=>2,'s'=>1,'t'=>3,'x'=>1].toMap",
   'in> flatten([1,[2,[3, 4],[5]], 6]);','out> [1,2,3,4,5,6]',"in> head(['A'..'Z']);","out> 'A'","in> head(['A'..'Z'], 3);",
   "out> ['A','B','C']","in> ['A'..'Z'].toSet.head(3);","out> ['F','V','G']","in> tail(['A'..'Z']);",
   "out> ['B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']",
   "in> tail(['A'..'Z'], 3);",
   "out> ['D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']",
   'in> rangeGenerator(1, 10).tail(3);','out> [4,5,6,7,8,9,10]',"in> leading(['A'..'Z']);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y']",
   "in> leading(['A'..'Z'], 3);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W']",
   'in> rangeGenerator(1, 10).leading(3);','out> [1,2,3,4,5,6,7]',"in> trailing(['A'..'Z']);","out> 'Z'",
   "in> trailing(['A'..'Z'], 3);","out> ['X','Y','Z']","in> ['A'..'Z'].toSet.trailing(3);","out> ['T','E','U']",
   'in> rangeGenerator(1, 10).trailing(3);','out> [8,9,10]','in> minus([1..10]^2, 2*[0..50]);','out> [1,9,25,49,81].toSet',
   'in> sort(intRandom(10, 5));','out> [0,1,2,3,8]',"in> sort(['01','10','100','1','010'],{softCast($x)<=softCast($y)});",
   "out> ['01','1','10','010','100']",'in> sortPerm(random(10));','out> [8,3,2,1,5,6,9,0,7,4]',"in> sortPerm(['a'..'c'..'a']);",
   'out> [0,4,1,3,2]','in> intersect([0..1000]^2,[0..1000]^3);',
   'out> [1,0,4096,262144,64,46656,1000000,729,15625,117649,531441].toSet','in> union(1/[1..5], 2/[2..6]);',
   'out> [0.3333333333333333,0.6666666666666666,1,0.5,0.25,0.2,0.4].toSet',"in> deleteFile('plotDemo1.png');",'out> true',
   "in> get(['a'..'f'], 3);","out> 'd'","in> get(['a'..'f'],[3, 1, 2]);","out> ['d','b','c']",'in> get([0..4],[2..6] mod 3=0);',
   'out> [1,4]',"in> get([['A', 1],['B', 2],['C', 0]],'B');",'out> 2','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]], 1);',
   'out> [2,5,8]','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[1, 0]);','out> [[2,1],[5,4],[8,7]]',
   'in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[true, false, true]);','out> [[1,3],[4,6],[7,9]]',
   'in> indexOf([1..6]^2 mod 3=0);','out> [2,5]','in> reverseList([1..5]);','out> [5,4,3,2,1]','in> size([0.5, 0.1, 0.2]);',
   'out> 3',"in> toMap([['A', 1],['B', 2],['C', 0],['B', 4]]);","out> ['B' => 4,'C'=>0,'A'=>1].toMap",
   'in> trueCount(10<[0..10]^2<50);','out> 4','in> unique([3, 1, 2, 1, 4, 1, 5]);','out> [1,2,3,4,5]',"in> compress('Test');",
   "out> 'Test'","in> compress('Test').decompress;","out> 'Test'","in> compress('Testtext');","out> #2#248'e'#240'9N'",
   "in> compress('Testtext').decompress;","out> 'Testtext'","in> relativeFileName('~/folder/','~/other/example.txt');",
   "out> '../other/example.txt'",'in> primes(20);','out> [2,3,5,7,11,13,17,19]','in> subSets([1, 2, 1]);',
   'out> [[],[1],[1,1],[2],[2,1],[2,1,1]]',"in> diff('encode','decode');",
   "out> ['deletes' => 1,'modifies'=>0,'adds'=>1,'matches'=>5,'edit'=>[['+',-1,0],[' ',0,1],['-',1,1],[' ',2,2],[' ',3,3],[' ',4,4],[' ',5,5]]].toMap",
   "in> diffStats('encode','decode');","out> ['deletes' => 1,'modifies'=>0,'adds'=>1,'matches'=>5].toMap",
   "in> format('%s is a string, %3.3d is a number','X', 7);","out> 'X is a string, 007 is a number'","in> format('%6.3f', 3);",
   "out> ' 3.000'","in> format('%6.3e', 3);","out> '3.00E+000'","in> format('%6.3g', 3);","out> '     3'",
   "in> format('%6.6x', 1234);","out> '0004D2'","in> formatTime('mm.dd.yyyy', 43210);","out> '04.20.2018'",
   'in> formatTime(12424.245);',"out> '05.01.1934 05:52:48'","in> isAscii('xyz');",'out> true',"in> isAscii('xyz'&chars[180]);",
   'out> false',"in> isAscii(\"Läuft\");",'out> false',"in> isUtf8('xyz');",'out> true',"in> isUtf8('xyz'&chars[180]);",
   'out> false',"in> isUtf8(\"Schräg\");",'out> true',"in> parseTime('yyyy-mm-dd hh:nn','2000-01-01 03:43');",
   'out> 36526.154861111114',"in> reverseString('Test');","out> 'tseT'","in> regex.matches('This is a test','[T|t]est');",
   'out> true',"in> regex.matchComposite('This is a test','[T|t]est');","out> [['test',11,4]]",
   "in> regex.replace('A Test is a test','[T|t]est','rose');","out> 'A rose is a rose'",
   "in> regex.split('A Test is a test','[e| ]');","out> ['A','T','st','is','a','t','st']",'in> toBoolean(0);','out> false',
   'in> toBoolean(1.0);','out> true',"in> toBoolean('true');",'out> true','in> toBoolean(3);',
   'Error 3 cannot be cast to boolean',"in> toInt('32');",'out> 32','in> toInt(3.0);','out> 3','in> toInt(3.1);',
   'Error 3.1 cannot be cast to int','in> toInt(false);','out> 0',"in> toReal('3.212');",'out> 3.212','in> toReal(true);',
   'out> 1','in> toReal(3);','out> 3.0','in> getOptions;',
   "out> ['x1' => 1.0,'axisStyleY'=>7,'strictInput'=>false,'autoscaleX'=>true,'logscaleX'=>false,'fontsize'=>10.0,'autoscaleY'=>true,'logscaleY'=>false,'y0'=>-1.0,'autoscaleFactor'=>1.0,'x0'=>-1.0,'y1'=>1.0,'preserveAspect'=>true,'axisStyleX'=>7].toMap",
   'in> executor;','out> ''<#>\target\Win64\mnh.exe''','in> print("1\n2.0\n03.45");','1','2.0','03.45','out> void',
   'in> print("1\n2.0\n03,45\t");',' 1',' 2.0','03,45','out> void','in> print("1\tone\t|\n2.0\ttwo\t|\n03.45\tthree\t|");',
   ' 1    one   |',' 2.0  two   |','03.45 three |','out> void','in> print("1\vone\v|\n2.0\vtwo\v|\n03.45\vthree\v|");',
   ' 1   one  |',' 2.0 two  |','03.45three|','out> void',"in> printf('%x is %d in hexadecimal form', 123, 123);",
   '7B is 123 in hexadecimal form','out> void',"in> printf('%{$0}x is %{$0}d in hexadecimal form', 123);",
   '7B is 123 in hexadecimal form','out> void',"in> printf('sin(%{$0}s)=%{sin($0)}4.4g', 1);",'sin(1)=0.8415','out> void',
   'in> permutations([1, 1, 2]);','out> [[1,2,1],[1,1,2],[2,1,1]].toSet','in> permutations([1..3]);',
   'out> [[1,3,2],[2,1,3],[2,3,1],[3,1,2],[1,2,3],[3,2,1]].toSet',"in> input :=[[1..10], random,'test', random(9)];",
   'in> serialized :=input.serialize;',"in> print(input.toString.byteLength,' > ', serialized.byteLength);",'227 > 104',
   'out> void','in> input==serialized.deserialize;','out> true','in> factorize(18447422338071909869);',
   'out> [2642257,2642287,2642291]','in> formatTabs("\v-2\n3\t4.3");',"out> ['  -2','3  4.3']",'in> typeOf(3);',"out> 'Int'",
   'in> typeOf([1..5, 7.5]);',"out> 'NumericList(6)'",'in> typeOf({$x^2+$y});',"out> 'Expression(2)'",
   'in> x :=transpose([1,[1, 2, 3],[1, 2]], 0);','in> x;','out> [[1,1,1],[0,2,2],[0,3,0]]','in> x.transpose(0);',
   'out> [[1,0,0],[1,2,3],[1,2,0]]','in> resetRandom(12157);','out> void','in> resetRandom;','out> void','in> intRandom(7);',
   'out> 1','in> intRandom(7, 10);','out> [2,2,3,0,0,3,2,2,6,5]','in> random;','out> 0.70794779062271118','in> random(3);',
   'out> [0.20965369045734406,0.45114782452583313,0.19202205538749695]',"in> note('Note that this is a note');",
   'Note Note that this is a note','out> void',"in> warn('Warning: I intend to say something important here');",
   'Warning Warning: I intend to say something important here','out> void','in> isScalar(1);','out> true',
   'in> isBoolean(false);','out> true','in> isBoolean(1);','out> false','in> isInt(false);','out> false','in> isInt(1);',
   'out> true','in> isInt(1.0);','out> false','in> isReal(false);','out> false','in> isReal(1);','out> false','in> isReal(1.0);',
   'out> true','in> isNumeric(false);','out> false','in> isNumeric(1);','out> true','in> isNumeric(1.0);','out> true',
   'in> isList([]);','out> true','in> isList([], 0);','out> true','in> isList([], 1);','out> false',"in> isList(['x'], 1);",
   'out> true',"in> isString('Test');",'out> true','in> isString(true);','out> false','in> isExpression(:: sin);','out> true',
   'in> isExpression(:: sin, 1);','out> true','in> isExpression(:: sin, 2);','out> false','in> digits(123);','out> [1,2,3]',
   'in> digits(123, 3);','out> [1,1,1,2,0]','in> arctan2(1, 1);','out> 0.78539816339744828',"in> charSet('abcba');",
   "out> ['a','b','c'].toSet","in> bytes(\"ö\").ord;",'out> [195,182]',"in> base64encode('Test');","out> 'VGVzdA=='",
   "in> base64decode('VGVzdA==');","out> 'Test'","in> base92encode('bla bla bla ');","out> ']En_)]En_)]En_)'",
   "in> base92decode('PgsC.?d@t^');","out> '12345'",'in> listSideEffects;',
   "out> ['input','output','sound','sleep','detaching','server','read package state','alter package state','alter context state','alter plot state','read file','write file','http','ipc','executing external']",
   "in> changeFileExt('file.extension','.newExtension');","out> 'file.newExtension'",
   "in> changeFileExt('file.2.extension','.newExtension');","out> 'file.2.newExtension'",'in> httpError;',
   'out> "HTTP/1.0 404\r\n"','in> isBooleanList([true, false]);','out> true','in> isBooleanList(true);','out> false',
   'in> isIntList([1..3]);','out> true','in> isIntList([1, 2.0]);','out> false','in> isRealList([1, 2, 3]);','out> false',
   'in> isRealList([1.0, 2.0, 3.0, Nan]);','out> true',"in> isStringList(['a'..'z']);",'out> true',
   'in> isNumericList([1, 2, 3]);','out> true','in> isNumericList([1.0, 2, 3, Inf]);','out> true','in> isVoid();','out> true',
   'in> isVoid(void);','out> true','in> isVoid(3);','out> false',"in> escapePascal('Test');",'out> "''Test''"',
   "in> escapeJava('Test');",'out> ''"Test"''',"in> extractFileNameOnly('/home/user/file.ext');","out> 'file'",
   "in> extractFileDirectory('/home/user/file.ext');","out> '/home/user'","in> extractFileName('/home/user/file.ext');",
   "out> 'file.ext'","in> extractFileExt('/home/user/file.ext');","out> '.ext'","in> extractPath('/index.html?x=0&y=3%2Ax');",
   "out> '/index.html'","in> extractParameters('/index.html?x=0&y=3%2Ax');","out> ['x' => 0,'y'=>'3*x'].toMap",
   "in> extractRawParameters('/index.html?x=0&y=3%2Ax');","out> 'x=0&y=3%2Ax'",
   "in> encodeRequest('127.0.0.1:3126','rest',[['user','anonymous'],['request','3*&7']].toMap);",
   "out> '127.0.0.1:3126/rest?user=anonymous&request=3%2A%267'","in> cross(['1'..'3'],['A'..'C']);",
   "out> [['1','A'],['1','B'],['1','C'],['2','A'],['2','B'],['2','C'],['3','A'],['3','B'],['3','C']]",'in> [1, 2, 1].toSet;',
   'out> [2,1].toSet','in> [1.2, 3.0].isRealCollection;','out> true','in> [1.2, 3.0].toSet.isRealCollection;','out> true',
   'in> [1.2, 3].isRealCollection;','out> false','in> [1.2, 3.0].isRealCollection(2);','out> true',
   'in> [1.2, 3.0].isRealCollection(3);','out> false','in> [true].isBooleanCollection;','out> true',
   'in> [true, false, true].toSet.isBooleanCollection(2);','out> true','in> [true, false, true].toSet.isBooleanSet;','out> true',
   'in> [1, 2, 3].isIntCollection;','out> true','in> [].isIntCollection;','out> true','in> [1.2, 3].isNumericCollection;',
   'out> true',"in> ['a','b'].toSet.isStringSet;",'out> true',"in> ['a','b'].isStringCollection;",'out> true',
   'in> [1, 2, 3].isIntSet;','out> false','in> [1, 2, 3].toSet.isIntSet;','out> true',
   "in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap;",'out> true',"in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(2);",'out> true',
   "in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(3);",'out> false',"in> [1,'a', false].isSet;",'out> false',
   "in> [1,'a', false].isCollection;",'out> true',"in> utf8ToAnsi(\"öµ\").bytes.ord;",'out> [246,181]',
   'in> chars[214].ansiToUtf8;',"out> \"Ö\"",'in> [1.2, 3.4].toSet.isRealSet;','out> true','in> toList(3);','out> [3]',
   'in> toList([2, 3, 6].toSet);','out> [3,2,6]','in> [1.2, 3.4].toSet.isNumericSet;','out> true',
   "in> [[1,'one'],[3,'three'],[5,'five']].toMap.getAll([1, 5, 6],['-','-','-']);","out> ['one','five','-']",
   'in> [1, 3, 5].getAll([0, 2])==[1, 3, 5].get([0, 2]);','out> true','in> [1..20].filter({$x mod 2<>0<>$x mod 3});',
   'out> [1,5,7,11,13,17,19]','in> rangeGenerator(1, 20).filter({$x mod 2<>0<>$x mod 3});',
   'out> rangeGenerator(1,20).filter({$x mod 2<>0<>$x mod 3})',"in> ['a'..'f'].map(:: upper);","out> ['A','B','C','D','E','F']",
   "in> ['a'..'f'].pMap(:: upper);","out> ['A','B','C','D','E','F']",'in> primeGenerator.head(10);',
   'out> [2,3,5,7,11,13,17,19,23,29]','in> [-1, 1,-1, 1,-2, 2].agg(head);','out> -1','in> [-1, 1,-1, 1,-2, 2].agg(trailing);',
   'out> 2','in> [-1, 1,-1, 1,-2, 2].agg(toSet);','out> [-1,-2,2,1].toSet','in> [-1, 1,-1, 1,-2, 2].agg(max);','out> 2',
   'in> [-1, 1,-1, 1,-2, 2].agg(min);','out> -2','in> [-1, 1,-1, 1,-2, 2].agg(&);',"out> '-11-11-22'",
   'in> [-1, 1,-1, 1,-2, 2].agg(*);','out> -4','in> [-1, 1,-1, 1,-2, 2].agg(+);','out> 0',
   'in> permutationIterator([3, 1, 2]).map(:: print).toList;','[1,2,3]','[1,3,2]','[2,1,3]','[2,3,1]','[3,1,2]','[3,2,1]',
   'out> []','in> rangeGenerator(1, 100).map({$x^2});','out> rangeGenerator(1,100).map({$x^2})',
   "in> mergeMaps([['A', 1],['B', 2]].toMap,[['A', 7],['C', 3]].toMap, ::+);","out> ['B' => 2,'C'=>3,'A'=>8].toMap",
   "in> try({deserialize('x')});",'out> void',"in> try({deserialize('x')}, :: print);",
   "[['el3_evalError','@?:3,6','Invalid literal encoding type 120']]",'out> void',"in> try({deserialize('x')}, 0);",'out> 0',
   "in> try({deserialize('x')},{warn($x.head.trailing)});",'Warning Invalid literal encoding type 120','out> void',
   "in> interpret('3+4');",'out> 7','in> shiftRight(7, 1);','out> 3','in> shiftRight(5,-2);','out> 20',
   'in> type FiniteRealList(L :List)->L.each(x,!x.isNan,!x.isInfinite, AND);','in> x :=[1, 5, 0.4, 1/7].toFiniteRealList;',
   'in> x;','out> [1,5,0.4,0.14285714285714285].toFiniteRealList','in> x.typeOf;',"out> 'FiniteRealList'",'in> x.toBuiltin;',
   'out> [1,5,0.4,0.14285714285714285]','in> x.toBuiltin.typeOf;',"out> 'NumericList(4)'",
   "in> interpret({print('Hello world')},[]);",'Error Cannot apply print because of side effect(s): [output]',
   'in> composeDigits([1, 0, 1], 2);','out> 5','in> composeDigits([1, 0, 2]);','out> 102','in> composeDigits([1, 0, 2], 10, 2);',
   'out> 1.02',"in> sandBoxExecute('f(x)->3*x+1; f(f(f(1)))',['alter package state']);",
   "out> [['echo_declaration','','f(x)->3*x+1;'],['echo_input','','f(f(f(1)));'],['echo_output','','40'],['exitCode','',0]]",
   "in> begin local x:=async({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   '1: true','start','2: end','out> void',
   "in> begin local x:=future({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   'start','1: false','2: end','out> void',"in> validateRegex('(3+.*');",'out> false',"in> validateRegex('\\(3+.*');",
   'out> true','in> [1..100].pFilter({$x mod 2=$x mod 3=$x mod 5});','out> [1,30,31,60,61,90,91]','in> pi;',
   'out> 3.141592653589793','in> isStatefulExpression(:: sin);','out> false','in> isStatefulExpression(future(:: sin,[3]));',
   'out> true','in> isStatelessExpression(:: sin);','out> true','in> isStatelessExpression(future(:: sin,[3]));','out> false',
   'in> isIteratable(future(:: sin,[3]));','out> false','in> isIteratable(primeGenerator);','out> true',
   'in> isIteratable([1..10]);','out> true','in> isIteratableExpression(primeGenerator);','out> true',
   'in> isIteratableExpression([1..10]);','out> false',
   "in> begin resetRandom; local gen:={begin local last:=0; save; last+=random; end}; print('gen.isIteratable= ', gen.isIteratable,'; ', gen.head(3)); gen:=gen.toIteratableExpression; print('gen.isIteratable= ', gen.isIteratable,'; ', gen.head(3)); end;",
   'gen.isIteratable= false; {begin local last:=0; save; last+=random; end}',
   'gen.isIteratable= true; [0.69890123605728149,1.5846346616744995,2.5055105686187744]','out> void',
   'in> toIteratableExpression(:: sqr);','Error Only nullary stateful expressions may be iteratable.',
   'in> toIteratableExpression({begin local i:=1; save; i+=i-1; end});','out> {begin local i:=1; save; i+=i-1; end}',
   'in> euklideanNorm([1, 2]);','out> 2.23606797749979','in> assert(1=1.0);','out> void',
   "in> assert('bla'.isInt,'Invalid integer given');",'Error Invalid integer given',
   "in> md5('Test input. Could be anything really.');",'out> 337964223705814058127798532806512273013',
   "in> sha256('Test input. Could be anything really.');",
   'out> 60429211283715320795241587111266756812669288936868807314606704811653259384943','in> hammingWeight(17213);','out> 8',
   'in> gcd(1231512, 143543);','out> 23',
   'in> powMod(2988348162058574136915891421498819466320163312926952423791023078876139, 2351399303373464486466122544523690094744975233415544072992656881240319, 10^40);',
   'out> 1527229998585248450016808958343740453059','in> randomGenerator(123).head(10);',
   'out> [0.88808047771453857,0.033595457673072815,0.07375691086053848,0.073728755116462708,0.4090341329574585,0.7116715908050537,0.46069467067718506,0.5966716408729553,0.8116149306297302,0.498393714427948]',
   'in> intRandomGenerator(123, 5).head(10);','out> [2,0,0,1,3,4,0,0,1,2]','in> isaacRandomGenerator(123, 5).head(10);',
   'out> [3,3,1,4,4,2,2,0,4,3]','in> modularInverse(3, 32);','out> 11','in> byteToChar(100);',"out> 'd'",
   'in> byteToChar([10, 12, 97, 45]);',"out> [#10,#12,'a','-']","in> systemSpecificFilename('..\\test/filename.txt');",
   'out> ''..\test\filename.txt''',"in> stringIterator(['a','b','c'], 1, 3).head(10);",
   "out> ['a','b','c','aa','ab','ac','ba','bb','bc','ca']",'in> vanDerCorputGenerator(2).head(10);',
   'out> [0.0,0.5,0.25,0.75,0.125,0.625,0.375,0.875,0.0625,0.5625]','in> primeGenerator.head(1000).trailing(5);',
   'out> [7879,7883,7901,7907,7919]','in> rangeGenerator(0, 5).head(10);','out> [0,1,2,3,4,5]',
   'in> rangeGenerator(100,-100).head(10);','out> [100,99,98,97,96,95,94,93,92,91]','in> divMod(10, 7);','out> [1,3]',
   "in> 'abba'.hasPrefix('ab');",'out> true',
   'in> isPrime(47531677974672740279381824573269878221106369761801704860769848227327108403647);','out> true','in> 3==3.0;',
   'out> false','in> [1, 2, 3]==[3, 1, 3];','out> false','in> 3=3.0;','out> true','in> {$x}=3;','out> {$x=3}',
   'in> [1, 2, 3]=[3, 1, 3];','out> [false,false,true]','in> 3<=3.0;','out> true','in> [1, 2, 3]<=[3, 1, 3];',
   'out> [true,false,true]','in> 3>=3.0;','out> true','in> [1, 2, 3]>=[3, 1, 3];','out> [false,true,true]','in> 3<3.0;',
   'out> false','in> [1, 2, 3]<[3, 1, 3];','out> [true,false,false]','in> 3>3.0;','out> false','in> [1, 2, 3]>[3, 1, 3];',
   'out> [false,true,false]','in> 3<>3.0;','out> false','in> [1, 2, 3]<>[3, 1, 3];','out> [true,true,false]',
   'in> true AND false;','out> false','in> true AND 3;','out> 3','in> false AND 3;','out> false','in> true and false;',
   'out> false','in> [true, false, true, false] and[true, true, false, false];','out> [true,false,false,false]','in> 7 and 252;',
   'out> 4','in> true OR false;','out> true','in> true OR 3;','out> true','in> false OR 3;','out> 3','in> true or false;',
   'out> true','in> [true, false, true, false] or[true, true, false, false];','out> [true,true,true,false]','in> 7 or 252;',
   'out> 255','in> true xor false;','out> true','in> [true, false, true, false] xor[true, true, false, false];',
   'out> [false,true,true,false]','in> 7 xor 252;','out> 251',"in> +'a';","out> 'a'",'in> -3;','out> -3',
   'in> -[1, 2.0, Inf, Nan];','out> [-1,-2.0,-Inf,Nan]','in> !true;','out> false','in> 3 in[1..5];','out> true',
   'in> 3.0 in[1..5];','out> false','in> 1|2;','out> [1,2]','in> [1]|[2];','out> [1,2]','in> [1]|2;','out> [1,2]',
   'in> [1]|[[2]];','out> [1,[2]]','in> [1]||2;','out> [1,2]','in> [1]||[2];','out> [1,[2]]','in> 10 div 3;','out> 3',
   'in> 10/3;','out> 3.3333333333333335','in> 10/5;','out> 2','in> 10.0/5;','out> 2.0','in> void orElse 42;','out> 42',
   'in> 3 orElse fail;','out> 3','in> 3-pi;','out> -0.14159265358979312','in> 32459378562983 mod 2342832;','out> 1139831',
   'in> 2*3;','out> 6','in> 2.0*3;','out> 6.0','in> 4+5;','out> 9',"in> 'a'+'b';","out> 'ab'",'in> 5^7;','out> 78125',
   'in> -3.5^3;','out> -42.875','in> 3&4;',"out> '34'",'in> isSubsetOf([1, 2, 3],[1, 2, 3]);','out> true',
   'in> isSubsetOf(1,[1, 2, 3]);','out> false','in> isSubsetOf([1],[1, 2, 3]);','out> true','in> isSubsetOf([1, 4],[1, 2, 3]);',
   'out> false'],
  'LDLinux'=>
  ['in> arity({3});','out> 0','in> arity({sin($x)/$x});','out> 1',
   "in> runScript(['name'=>'hello.mnh','source'=>[\"main->print('Hello world');\"],'side effects'=>['alter package state','output']].toMap).filter({$message.head=='printline'}).map(:: trailing);",
   "out> ['Hello world']",'in> arity({sin($x)/$y});','out> 2',"in> arity({printf('%s%s', $a,...)});",'out> 1',
   "in> toExpression('$x-$x^2+$x^3');",'out> {$x-$x^2+$x^3}',"in> toExpression('');",
   'Error The parsed expression appears to be empty','in> parameterNames({3});','out> []','in> parameterNames({sin($x)/$x});',
   "out> ['$x']","in> parameterNames({printf('%s%s', $a,...)});","out> ['$a']",'in> ord(3);','out> 3','in> ord(true);','out> 1',
   'in> ord(false);','out> 0',"in> ord('A');",'out> 65',"in> ord('abc');",'out> -1','in> ord(2.1);',
   'Error ord can only be applied to booleans, ints and strings',"in> softCast('A');","out> 'A'",'in> softCast(''"B"'');',
   "out> 'B'",'in> softCast(3);','out> 3',"in> softCast([1,'2','true',\"'TEXT'\",'1.5','2,6']);",
   "out> [1,2,true,'TEXT',1.5,'2,6']","in> toString('a');","out> 'a'",'in> toString(234);',"out> '234'",
   "in> toString([1, 2.6,'a', true,{$x}]);",'out> "[1,2.6,''a'',true,{$x}]"','in> abs(-0.92);','out> 0.92','in> abs(3);',
   'out> 3','in> abs({1+$x});','out> {abs(1+$x)}','in> arccos(-0.92);','out> 2.7388768120091316555','in> arccos(3);','out> Nan',
   'in> arccos({1+$x});','out> {arccos(1+$x)}','in> arcsin(-0.92);','out> -1.16808048521423503635','in> arcsin(3);','out> Nan',
   'in> arcsin({1+$x});','out> {arcsin(1+$x)}','in> tan(-0.92);','out> -1.31326369932024783656','in> tan(3);',
   'out> -0.14254654307427780529','in> tan({1+$x});','out> {tan(1+$x)}','in> tan(pi/2);','out> -3.6893488147419103232E19',
   'in> arctan(-0.92);','out> -0.74375558429885988575','in> arctan({$x});','out> {arctan($x)}','in> argMax(sin([0..10]));',
   'out> 8','in> argMax([1, 3, 3, 0, 2]);','out> 1','in> argMin(sin([0..10]));','out> 5','in> argMin([1, 3, 3, 0, 2]);','out> 3',
   'in> ceil(20/3);','out> 7','in> ceil([0..3]/3);','out> [0,1,1,1]','in> ceil([0..3]/3, 2);','out> [0,0.34,0.67,1]',
   'in> floor(20/3);','out> 6','in> floor([0..3]/3);','out> [0,0,0,1]','in> floor([0..3]/3, 2);','out> [0,0.33,0.66,1]',
   'in> round(20/3);','out> 7','in> round([0.5, 1.5, 2.5, 3.5]);','out> [0,2,2,4]','in> round([0..3]/3, 2);',
   'out> [0,0.33,0.67,1]','in> isInfinite(Nan);','out> false','in> isInfinite(+Inf);','out> true','in> isInfinite(-Inf);',
   'out> true','in> isInfinite([-3.4344, Nan,+Inf]);','out> [false,false,true]','in> isNan(Nan);','out> true','in> isNan(+Inf);',
   'out> false','in> isNan(-Inf);','out> false','in> isNan([-3.4344, Nan,+Inf]);','out> [false,true,false]','in> cos(-0.92);',
   'out> 0.60582015664346284178','in> cos(3);','out> -0.98999249660044545727','in> cos({1+$x});','out> {cos(1+$x)}',
   'in> exp(-0.92);','out> 0.39851904108451413621','in> exp(3);','out> 20.085536923187667923','in> exp({1+$x});',
   'out> {exp(1+$x)}','in> ln(-0.92);','out> Nan','in> ln(3);','out> 1.09861228866810969136','in> ln({1+$x});','out> {ln(1+$x)}',
   'in> ln(-0.92);','out> Nan','in> sin(3);','out> 0.1411200080598672221','in> sin({1+$x});','out> {sin(1+$x)}',
   'in> sqr(-0.92);','out> 0.8464','in> sqr(3);','out> 9','in> sqr({1+$x});','out> {sqr(1+$x)}','in> sqrt(-0.92);','out> Nan',
   'in> sqrt(3);','out> 1.73205080756887729357','in> sqrt({1+$x});','out> {sqrt(1+$x)}','in> isqrt(121);','out> [11,true]',
   'in> isqrt(255);','out> [15,false]','in> sign(-0.92);','out> -1','in> sign(3);','out> 1','in> sign({1+$x});',
   'out> {sign(1+$x)}',"in> max(['a'..'z']);","out> 'z'",'in> max([0..9]/2);','out> 4.5','in> max(true, false);','out> true',
   "in> min(['a'..'z']);","out> 'a'",'in> min([0..9]/2);','out> 0','in> min(true, false);','out> false',
   "in> copy('abcde', 1, 3);","out> 'bcd'","in> copy('abcde', 2);","out> 'cde'","in> escape('a');",'out> "''a''"',
   'in> escape(#9);',"out> '#9'",'in> group([1..10],[1..10] mod 3=0);','out> [false => [1,2,4,5,7,8,10],true=>[3,6,9]].toMap',
   'in> fail;','Error Fail','in> fail("Told you this wouldn''t work!");',"Error Told you this wouldn't work!",'in> hash(1);',
   'out> 2','in> hash([1..3]);','out> 299863',"in> hash('a');",'out> 283',
   "in> listBuiltin.filter({$s.matches('^mnh\\.')}).sort.trailing(10);",
   "out> ['mnh.listBuiltin','mnh.listSideEffects','mnh.mnhInfo','mnh.myPath','mnh.ord','mnh.parameterNames','mnh.runScript','mnh.sandBoxExecute','mnh.sleep','mnh.sleepUntil']",
   "in> group([[1,'a'],[2,'a'],[1,'b'],[4,'c'],[2,'a'],[2,'b']], 1, aggregator({[$x[0]+$y[0], $x[1]]}));",
   "out> ['b' => [3,'b'],'c'=>[4,'c'],'a'=>[5,'a']].toMap",'in> abs(3);','out> 3','in> abs(-3);','out> 3','in> abs([-2..2]/2);',
   'out> [1,0.5,0,0.5,1]',"in> chars('This is a test.');","out> ['T','h','i','s',' ','i','s',' ','a',' ','t','e','s','t','.']",
   'in> chars.get(100);',"out> 'd'","in> clean('+21/232/2116-11',['0'..'9'],' ');","out> ' 21 232 2116 11'",
   "in> join(['a','b','c']);","out> 'abc'","in> join([1..5],' ');","out> '1 2 3 4 5'","in> length(\"Test öäü\");",'out> 8',
   "in> byteLength(\"Test öäü\");",'out> 11',"in> length(['Text','AbC']);",'out> [4,3]',"in> lower('Test');","out> 'test'",
   "in> lower(['Text','AbC']);","out> ['text','abc']","in> upper('Test');","out> 'TEST'","in> upper(['Text','AbC']);",
   "out> ['TEXT','ABC']",'in> t :=[0..1000]*2*pi/1000;','in> plot(t, sin(t));','in> abs(3);','out> 3','in> abs(-5/7);',
   'out> 0.71428571428571430157','in> abs([-2..2]);','out> [2,1,0,1,2]',"in> chars('Test');","out> ['T','e','s','t']",
   "in> pos('o','Hello World');",'out> 4',"in> pos(',',['Hello','Test','1,2,3']);",'out> [Inf,Inf,1]',
   "in> pos(['a','b'],'cdb');",'out> [Inf,2]',"in> repeat('-', 10);","out> '----------'","in> replace('[[][]][]][][','[]','');",
   "out> ']['","in> replace('aba','b','bb');","out> 'abba'","in> replaceOne('[[][]][]][][','[]','');","out> '[[]][]][]['",
   "in> replaceOne('1:.-.; 2:.-.; 3:.-.','.',['a'..'e']);","out> '1:a-b; 2:c-d; 3:e-.'","in> split('1,2,3;4,5,6',',');",
   "out> ['1','2','3;4','5','6']","in> split('1,2,3;4,5,6',';');","out> ['1,2,3','4,5,6']","in> split('1,2,3;4,5,6',[';',',']);",
   "out> ['1','2','3','4','5','6']","in> tokenSplit('f(x)->x+1; //Stupid, but just an example...','mnh');",
   "out> ['f','(','x',')','->','x','+','1',';',' ','//Stupid, but just an example...']",'in> trim(" \tA B C\t ");',
   "out> 'A B C'",'in> trimLeft(" \tA B C\t ");','out> "A B C\t "','in> trimRight(" \tA B C\t ");','out> " \tA B C"',
   "in> unbrace('3');","out> '3'","in> unbrace('(3)');","out> '3'","in> unbrace('(3]');","out> '(3]'",'in> unbrace(''"3"'');',
   'out> ''"3"''',"in> chars('Testtext').elementFrequency;","out> ['T' => 1,'e'=>2,'s'=>1,'t'=>3,'x'=>1].toMap",
   'in> flatten([1,[2,[3, 4],[5]], 6]);','out> [1,2,3,4,5,6]',"in> head(['A'..'Z']);","out> 'A'","in> head(['A'..'Z'], 3);",
   "out> ['A','B','C']","in> ['A'..'Z'].toSet.head(3);","out> ['F','V','G']","in> tail(['A'..'Z']);",
   "out> ['B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']",
   "in> tail(['A'..'Z'], 3);",
   "out> ['D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']",
   'in> rangeGenerator(1, 10).tail(3);','out> [4,5,6,7,8,9,10]',"in> leading(['A'..'Z']);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y']",
   "in> leading(['A'..'Z'], 3);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W']",
   'in> rangeGenerator(1, 10).leading(3);','out> [1,2,3,4,5,6,7]',"in> trailing(['A'..'Z']);","out> 'Z'",
   "in> trailing(['A'..'Z'], 3);","out> ['X','Y','Z']","in> ['A'..'Z'].toSet.trailing(3);","out> ['T','E','U']",
   'in> rangeGenerator(1, 10).trailing(3);','out> [8,9,10]','in> minus([1..10]^2, 2*[0..50]);','out> [1,9,25,49,81].toSet',
   'in> sort(intRandom(10, 5));','out> [0,1,2,3,8]',"in> sort(['01','10','100','1','010'],{softCast($x)<=softCast($y)});",
   "out> ['01','1','10','010','100']",'in> sortPerm(random(10));','out> [8,3,2,1,5,6,9,0,7,4]',"in> sortPerm(['a'..'c'..'a']);",
   'out> [0,4,1,3,2]','in> intersect([0..1000]^2,[0..1000]^3);',
   'out> [1,0,4096,262144,64,46656,1000000,729,15625,117649,531441].toSet','in> union(1/[1..5], 2/[2..6]);',
   'out> [1,0.5,0.33333333333333331483,0.25,0.2000000000000000111,0.66666666666666662965,0.4000000000000000222].toSet',
   "in> deleteFile('plotDemo1.png');",'out> false',"in> get(['a'..'f'], 3);","out> 'd'","in> get(['a'..'f'],[3, 1, 2]);",
   "out> ['d','b','c']",'in> get([0..4],[2..6] mod 3=0);','out> [1,4]',"in> get([['A', 1],['B', 2],['C', 0]],'B');",'out> 2',
   'in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]], 1);','out> [2,5,8]','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[1, 0]);',
   'out> [[2,1],[5,4],[8,7]]','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[true, false, true]);','out> [[1,3],[4,6],[7,9]]',
   'in> indexOf([1..6]^2 mod 3=0);','out> [2,5]','in> reverseList([1..5]);','out> [5,4,3,2,1]','in> size([0.5, 0.1, 0.2]);',
   'out> 3',"in> toMap([['A', 1],['B', 2],['C', 0],['B', 4]]);","out> ['B' => 4,'C'=>0,'A'=>1].toMap",
   'in> trueCount(10<[0..10]^2<50);','out> 4','in> unique([3, 1, 2, 1, 4, 1, 5]);','out> [1,2,3,4,5]',"in> compress('Test');",
   "out> 'Test'","in> compress('Test').decompress;","out> 'Test'","in> compress('Testtext');","out> #2#248'e'#240'9N'",
   "in> compress('Testtext').decompress;","out> 'Testtext'","in> relativeFileName('~/folder/','~/other/example.txt');",
   "out> '../other/example.txt'",'in> primes(20);','out> [2,3,5,7,11,13,17,19]','in> subSets([1, 2, 1]);',
   'out> [[],[1],[1,1],[2],[2,1],[2,1,1]]',"in> diff('encode','decode');",
   "out> ['deletes' => 1,'modifies'=>0,'adds'=>1,'matches'=>5,'edit'=>[['+',-1,0],[' ',0,1],['-',1,1],[' ',2,2],[' ',3,3],[' ',4,4],[' ',5,5]]].toMap",
   "in> diffStats('encode','decode');","out> ['deletes' => 1,'modifies'=>0,'adds'=>1,'matches'=>5].toMap",
   "in> format('%s is a string, %3.3d is a number','X', 7);","out> 'X is a string, 007 is a number'","in> format('%6.3f', 3);",
   "out> ' 3.000'","in> format('%6.3e', 3);","out> '3.00E+000'","in> format('%6.3g', 3);","out> '     3'",
   "in> format('%6.6x', 1234);","out> '0004D2'","in> formatTime('mm.dd.yyyy', 43210);","out> '04.20.2018'",
   'in> formatTime(12424.245);',"out> '5-1-34 05:52:48'","in> isAscii('xyz');",'out> true',"in> isAscii('xyz'&chars[180]);",
   'out> false',"in> isAscii(\"Läuft\");",'out> false',"in> isUtf8('xyz');",'out> true',"in> isUtf8('xyz'&chars[180]);",
   'out> false',"in> isUtf8(\"Schräg\");",'out> true',"in> parseTime('yyyy-mm-dd hh:nn','2000-01-01 03:43');",
   'out> 36526.154861111113859',"in> reverseString('Test');","out> 'tseT'","in> regex.matches('This is a test','[T|t]est');",
   'out> true',"in> regex.matchComposite('This is a test','[T|t]est');","out> [['test',11,4]]",
   "in> regex.replace('A Test is a test','[T|t]est','rose');","out> 'A rose is a rose'",
   "in> regex.split('A Test is a test','[e| ]');","out> ['A','T','st','is','a','t','st']",'in> toBoolean(0);','out> false',
   'in> toBoolean(1.0);','out> true',"in> toBoolean('true');",'out> true','in> toBoolean(3);',
   'Error 3 cannot be cast to boolean',"in> toInt('32');",'out> 32','in> toInt(3.0);','out> 3','in> toInt(3.1);',
   'Error 3.1 cannot be cast to int','in> toInt(false);','out> 0',"in> toReal('3.212');",'out> 3.212','in> toReal(true);',
   'out> 1','in> toReal(3);','out> 3.0','in> getOptions;','in> executor;',"out> '<#>/target/Linux/mnh_light_debug'",
   'in> print("1\n2.0\n03.45");','1','2.0','03.45','out> void','in> print("1\n2.0\n03,45\t");',' 1',' 2.0','03,45','out> void',
   'in> print("1\tone\t|\n2.0\ttwo\t|\n03.45\tthree\t|");',' 1    one   |',' 2.0  two   |','03.45 three |','out> void',
   'in> print("1\vone\v|\n2.0\vtwo\v|\n03.45\vthree\v|");',' 1   one  |',' 2.0 two  |','03.45three|','out> void',
   "in> printf('%x is %d in hexadecimal form', 123, 123);",'7B is 123 in hexadecimal form','out> void',
   "in> printf('%{$0}x is %{$0}d in hexadecimal form', 123);",'7B is 123 in hexadecimal form','out> void',
   "in> printf('sin(%{$0}s)=%{sin($0)}4.4g', 1);",'sin(1)=0.8415','out> void','in> permutations([1, 1, 2]);',
   'out> [[1,2,1],[1,1,2],[2,1,1]].toSet','in> permutations([1..3]);',
   'out> [[1,3,2],[2,1,3],[2,3,1],[3,1,2],[1,2,3],[3,2,1]].toSet',"in> input :=[[1..10], random,'test', random(9)];",
   'in> serialized :=input.serialize;',"in> print(input.toString.byteLength,' > ', serialized.byteLength);",'258 > 104',
   'out> void','in> input==serialized.deserialize;','out> true','in> factorize(18447422338071909869);',
   'out> [2642257,2642287,2642291]','in> formatTabs("\v-2\n3\t4.3");',"out> ['  -2','3  4.3']",'in> typeOf(3);',"out> 'Int'",
   'in> typeOf([1..5, 7.5]);',"out> 'NumericList(6)'",'in> typeOf({$x^2+$y});',"out> 'Expression(2)'",
   'in> x :=transpose([1,[1, 2, 3],[1, 2]], 0);','in> x;','out> [[1,1,1],[0,2,2],[0,3,0]]','in> x.transpose(0);',
   'out> [[1,0,0],[1,2,3],[1,2,0]]','in> resetRandom(12157);','out> void','in> resetRandom;','out> void','in> intRandom(7);',
   'out> 1','in> intRandom(7, 10);','out> [2,2,3,0,0,3,2,2,6,5]','in> random;','out> 0.70794778806157410144','in> random(3);',
   'out> [0.20965369325131177902,0.45114781009033322334,0.19202205142937600612]',"in> note('Note that this is a note');",
   'Note Note that this is a note','out> void',"in> warn('Warning: I intend to say something important here');",
   'Warning Warning: I intend to say something important here','out> void','in> isScalar(1);','out> true',
   'in> isBoolean(false);','out> true','in> isBoolean(1);','out> false','in> isInt(false);','out> false','in> isInt(1);',
   'out> true','in> isInt(1.0);','out> false','in> isReal(false);','out> false','in> isReal(1);','out> false','in> isReal(1.0);',
   'out> true','in> isNumeric(false);','out> false','in> isNumeric(1);','out> true','in> isNumeric(1.0);','out> true',
   'in> isList([]);','out> true','in> isList([], 0);','out> true','in> isList([], 1);','out> false',"in> isList(['x'], 1);",
   'out> true',"in> isString('Test');",'out> true','in> isString(true);','out> false','in> isExpression(:: sin);','out> true',
   'in> isExpression(:: sin, 1);','out> true','in> isExpression(:: sin, 2);','out> false','in> digits(123);','out> [1,2,3]',
   'in> digits(123, 3);','out> [1,1,1,2,0]','in> arctan2(1, 1);','out> 0.78539816339744830962',"in> charSet('abcba');",
   "out> ['a','b','c'].toSet","in> bytes(\"ö\").ord;",'out> [195,182]',"in> base64encode('Test');","out> 'VGVzdA=='",
   "in> base64decode('VGVzdA==');","out> 'Test'","in> base92encode('bla bla bla ');","out> ']En_)]En_)]En_)'",
   "in> base92decode('PgsC.?d@t^');","out> '12345'",'in> listSideEffects;',
   "out> ['input','output','sound','sleep','detaching','server','read package state','alter package state','alter context state','alter plot state','read file','write file','http','ipc','executing external']",
   "in> changeFileExt('file.extension','.newExtension');","out> 'file.newExtension'",
   "in> changeFileExt('file.2.extension','.newExtension');","out> 'file.2.newExtension'",'in> httpError;',
   'out> "HTTP/1.0 404\r\n"','in> isBooleanList([true, false]);','out> true','in> isBooleanList(true);','out> false',
   'in> isIntList([1..3]);','out> true','in> isIntList([1, 2.0]);','out> false','in> isRealList([1, 2, 3]);','out> false',
   'in> isRealList([1.0, 2.0, 3.0, Nan]);','out> true',"in> isStringList(['a'..'z']);",'out> true',
   'in> isNumericList([1, 2, 3]);','out> true','in> isNumericList([1.0, 2, 3, Inf]);','out> true','in> isVoid();','out> true',
   'in> isVoid(void);','out> true','in> isVoid(3);','out> false',"in> escapePascal('Test');",'out> "''Test''"',
   "in> escapeJava('Test');",'out> ''"Test"''',"in> extractFileNameOnly('/home/user/file.ext');","out> 'file'",
   "in> extractFileDirectory('/home/user/file.ext');","out> '/home/user'","in> extractFileName('/home/user/file.ext');",
   "out> 'file.ext'","in> extractFileExt('/home/user/file.ext');","out> '.ext'","in> extractPath('/index.html?x=0&y=3%2Ax');",
   "out> '/index.html'","in> extractParameters('/index.html?x=0&y=3%2Ax');","out> ['x' => 0,'y'=>'3*x'].toMap",
   "in> extractRawParameters('/index.html?x=0&y=3%2Ax');","out> 'x=0&y=3%2Ax'",
   "in> encodeRequest('127.0.0.1:3126','rest',[['user','anonymous'],['request','3*&7']].toMap);",
   "out> '127.0.0.1:3126/rest?user=anonymous&request=3%2A%267'","in> cross(['1'..'3'],['A'..'C']);",
   "out> [['1','A'],['1','B'],['1','C'],['2','A'],['2','B'],['2','C'],['3','A'],['3','B'],['3','C']]",'in> [1, 2, 1].toSet;',
   'out> [2,1].toSet','in> [1.2, 3.0].isRealCollection;','out> true','in> [1.2, 3.0].toSet.isRealCollection;','out> true',
   'in> [1.2, 3].isRealCollection;','out> false','in> [1.2, 3.0].isRealCollection(2);','out> true',
   'in> [1.2, 3.0].isRealCollection(3);','out> false','in> [true].isBooleanCollection;','out> true',
   'in> [true, false, true].toSet.isBooleanCollection(2);','out> true','in> [true, false, true].toSet.isBooleanSet;','out> true',
   'in> [1, 2, 3].isIntCollection;','out> true','in> [].isIntCollection;','out> true','in> [1.2, 3].isNumericCollection;',
   'out> true',"in> ['a','b'].toSet.isStringSet;",'out> true',"in> ['a','b'].isStringCollection;",'out> true',
   'in> [1, 2, 3].isIntSet;','out> false','in> [1, 2, 3].toSet.isIntSet;','out> true',
   "in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap;",'out> true',"in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(2);",'out> true',
   "in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(3);",'out> false',"in> [1,'a', false].isSet;",'out> false',
   "in> [1,'a', false].isCollection;",'out> true',"in> utf8ToAnsi(\"öµ\").bytes.ord;",'out> [246,181]',
   'in> chars[214].ansiToUtf8;',"out> \"Ö\"",'in> [1.2, 3.4].toSet.isRealSet;','out> true','in> toList(3);','out> [3]',
   'in> toList([2, 3, 6].toSet);','out> [3,2,6]','in> [1.2, 3.4].toSet.isNumericSet;','out> true',
   "in> [[1,'one'],[3,'three'],[5,'five']].toMap.getAll([1, 5, 6],['-','-','-']);","out> ['one','five','-']",
   'in> [1, 3, 5].getAll([0, 2])==[1, 3, 5].get([0, 2]);','out> true','in> [1..20].filter({$x mod 2<>0<>$x mod 3});',
   'out> [1,5,7,11,13,17,19]','in> rangeGenerator(1, 20).filter({$x mod 2<>0<>$x mod 3});',
   'out> rangeGenerator(1,20).filter({$x mod 2<>0<>$x mod 3})',"in> ['a'..'f'].map(:: upper);","out> ['A','B','C','D','E','F']",
   "in> ['a'..'f'].pMap(:: upper);","out> ['A','B','C','D','E','F']",'in> primeGenerator.head(10);',
   'out> [2,3,5,7,11,13,17,19,23,29]','in> [-1, 1,-1, 1,-2, 2].agg(head);','out> -1','in> [-1, 1,-1, 1,-2, 2].agg(trailing);',
   'out> 2','in> [-1, 1,-1, 1,-2, 2].agg(toSet);','out> [-1,-2,2,1].toSet','in> [-1, 1,-1, 1,-2, 2].agg(max);','out> 2',
   'in> [-1, 1,-1, 1,-2, 2].agg(min);','out> -2','in> [-1, 1,-1, 1,-2, 2].agg(&);',"out> '-11-11-22'",
   'in> [-1, 1,-1, 1,-2, 2].agg(*);','out> -4','in> [-1, 1,-1, 1,-2, 2].agg(+);','out> 0',
   'in> permutationIterator([3, 1, 2]).map(:: print).toList;','[1,2,3]','[1,3,2]','[2,1,3]','[2,3,1]','[3,1,2]','[3,2,1]',
   'out> []','in> rangeGenerator(1, 100).map({$x^2});','out> rangeGenerator(1,100).map({$x^2})',
   "in> mergeMaps([['A', 1],['B', 2]].toMap,[['A', 7],['C', 3]].toMap, ::+);","out> ['B' => 2,'C'=>3,'A'=>8].toMap",
   "in> try({deserialize('x')});",'out> void',"in> try({deserialize('x')}, :: print);",
   "[['el3_evalError','@?:3,6','Invalid literal encoding type 120']]",'out> void',"in> try({deserialize('x')}, 0);",'out> 0',
   "in> try({deserialize('x')},{warn($x.head.trailing)});",'Warning Invalid literal encoding type 120','out> void',
   "in> interpret('3+4');",'out> 7','in> shiftRight(7, 1);','out> 3','in> shiftRight(5,-2);','out> 20',
   'in> type FiniteRealList(L :List)->L.each(x,!x.isNan,!x.isInfinite, AND);','in> x :=[1, 5, 0.4, 1/7].toFiniteRealList;',
   'in> x;','out> [1,5,0.4,0.14285714285714284921].toFiniteRealList','in> x.typeOf;',"out> 'FiniteRealList'",'in> x.toBuiltin;',
   'out> [1,5,0.4,0.14285714285714284921]','in> x.toBuiltin.typeOf;',"out> 'NumericList(4)'",
   "in> interpret({print('Hello world')},[]);",'Error Cannot apply print because of side effect(s): [output]',
   'in> composeDigits([1, 0, 1], 2);','out> 5','in> composeDigits([1, 0, 2]);','out> 102','in> composeDigits([1, 0, 2], 10, 2);',
   'out> 1.02',"in> sandBoxExecute('f(x)->3*x+1; f(f(f(1)))',['alter package state']);",
   "out> [['echo_declaration','','f(x)->3*x+1;'],['echo_input','','f(f(f(1)));'],['echo_output','','40'],['exitCode','',0]]",
   "in> begin local x:=async({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   '1: true','start','2: end','out> void',
   "in> begin local x:=future({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   'start','1: false','2: end','out> void',"in> validateRegex('(3+.*');",'out> false',"in> validateRegex('\\(3+.*');",
   'out> true','in> [1..100].pFilter({$x mod 2=$x mod 3=$x mod 5});','out> [1,30,31,60,61,90,91]','in> pi;',
   'out> 3.1415926535897932385','in> isStatefulExpression(:: sin);','out> false','in> isStatefulExpression(future(:: sin,[3]));',
   'out> true','in> isStatelessExpression(:: sin);','out> true','in> isStatelessExpression(future(:: sin,[3]));','out> false',
   'in> isIteratable(future(:: sin,[3]));','out> false','in> isIteratable(primeGenerator);','out> true',
   'in> isIteratable([1..10]);','out> true','in> isIteratableExpression(primeGenerator);','out> true',
   'in> isIteratableExpression([1..10]);','out> false',
   "in> begin resetRandom; local gen:={begin local last:=0; save; last+=random; end}; print('gen.isIteratable= ', gen.isIteratable,'; ', gen.head(3)); gen:=gen.toIteratableExpression; print('gen.isIteratable= ', gen.isIteratable,'; ', gen.head(3)); end;",
   'gen.isIteratable= false; {begin local last:=0; save; last+=random; end}',
   'gen.isIteratable= true; [0.69890124513767659664,1.5846346444450318813,2.5055105253122746944]','out> void',
   'in> toIteratableExpression(:: sqr);','Error Only nullary stateful expressions may be iteratable.',
   'in> toIteratableExpression({begin local i:=1; save; i+=i-1; end});','out> {begin local i:=1; save; i+=i-1; end}',
   'in> euklideanNorm([1, 2]);','out> 2.236067977499789805','in> assert(1=1.0);','out> void',
   "in> assert('bla'.isInt,'Invalid integer given');",'Error Invalid integer given',
   "in> md5('Test input. Could be anything really.');",'out> 337964223705814058127798532806512273013',
   "in> sha256('Test input. Could be anything really.');",
   'out> 60429211283715320795241587111266756812669288936868807314606704811653259384943','in> hammingWeight(17213);','out> 8',
   'in> gcd(1231512, 143543);','out> 23',
   'in> powMod(2988348162058574136915891421498819466320163312926952423791023078876139, 2351399303373464486466122544523690094744975233415544072992656881240319, 10^40);',
   'out> 1527229998585248450016808958343740453059','in> randomGenerator(123).head(10);',
   'out> [0.8880804681684821844,0.033595459535717964172,0.073756912024691700935,0.073728758376091718673,0.40903412224724888801,0.7116715747397392988,0.46069467556662857532,0.5966716259717941284,0.81161490315571427345,0.4983937116339802742]',
   'in> intRandomGenerator(123, 5).head(10);','out> [2,0,0,1,3,4,0,0,1,2]','in> isaacRandomGenerator(123, 5).head(10);',
   'out> [3,3,1,4,4,2,2,0,4,3]','in> modularInverse(3, 32);','out> 11','in> byteToChar(100);',"out> 'd'",
   'in> byteToChar([10, 12, 97, 45]);',"out> [#10,#12,'a','-']","in> systemSpecificFilename('..\\test/filename.txt');",
   "out> '../test/filename.txt'","in> stringIterator(['a','b','c'], 1, 3).head(10);",
   "out> ['a','b','c','aa','ab','ac','ba','bb','bc','ca']",'in> vanDerCorputGenerator(2).head(10);',
   'out> [0.0,0.5,0.25,0.75,0.125,0.625,0.375,0.875,0.0625,0.5625]','in> primeGenerator.head(1000).trailing(5);',
   'out> [7879,7883,7901,7907,7919]','in> rangeGenerator(0, 5).head(10);','out> [0,1,2,3,4,5]',
   'in> rangeGenerator(100,-100).head(10);','out> [100,99,98,97,96,95,94,93,92,91]','in> divMod(10, 7);','out> [1,3]',
   "in> 'abba'.hasPrefix('ab');",'out> true',
   'in> isPrime(47531677974672740279381824573269878221106369761801704860769848227327108403647);','out> true','in> 3==3.0;',
   'out> false','in> [1, 2, 3]==[3, 1, 3];','out> false','in> 3=3.0;','out> true','in> {$x}=3;','out> {$x=3}',
   'in> [1, 2, 3]=[3, 1, 3];','out> [false,false,true]','in> 3<=3.0;','out> true','in> [1, 2, 3]<=[3, 1, 3];',
   'out> [true,false,true]','in> 3>=3.0;','out> true','in> [1, 2, 3]>=[3, 1, 3];','out> [false,true,true]','in> 3<3.0;',
   'out> false','in> [1, 2, 3]<[3, 1, 3];','out> [true,false,false]','in> 3>3.0;','out> false','in> [1, 2, 3]>[3, 1, 3];',
   'out> [false,true,false]','in> 3<>3.0;','out> false','in> [1, 2, 3]<>[3, 1, 3];','out> [true,true,false]',
   'in> true AND false;','out> false','in> true AND 3;','out> 3','in> false AND 3;','out> false','in> true and false;',
   'out> false','in> [true, false, true, false] and[true, true, false, false];','out> [true,false,false,false]','in> 7 and 252;',
   'out> 4','in> true OR false;','out> true','in> true OR 3;','out> true','in> false OR 3;','out> 3','in> true or false;',
   'out> true','in> [true, false, true, false] or[true, true, false, false];','out> [true,true,true,false]','in> 7 or 252;',
   'out> 255','in> true xor false;','out> true','in> [true, false, true, false] xor[true, true, false, false];',
   'out> [false,true,true,false]','in> 7 xor 252;','out> 251',"in> +'a';","out> 'a'",'in> -3;','out> -3',
   'in> -[1, 2.0, Inf, Nan];','out> [-1,-2.0,-Inf,Nan]','in> !true;','out> false','in> 3 in[1..5];','out> true',
   'in> 3.0 in[1..5];','out> false','in> 1|2;','out> [1,2]','in> [1]|[2];','out> [1,2]','in> [1]|2;','out> [1,2]',
   'in> [1]|[[2]];','out> [1,[2]]','in> [1]||2;','out> [1,2]','in> [1]||[2];','out> [1,[2]]','in> 10 div 3;','out> 3',
   'in> 10/3;','out> 3.3333333333333334813','in> 10/5;','out> 2','in> 10.0/5;','out> 2.0','in> void orElse 42;','out> 42',
   'in> 3 orElse fail;','out> 3','in> 3-pi;','out> -0.14159265358979323851','in> 32459378562983 mod 2342832;','out> 1139831',
   'in> 2*3;','out> 6','in> 2.0*3;','out> 6.0','in> 4+5;','out> 9',"in> 'a'+'b';","out> 'ab'",'in> 5^7;','out> 78125',
   'in> -3.5^3;','out> -42.875','in> 3&4;',"out> '34'",'in> isSubsetOf([1, 2, 3],[1, 2, 3]);','out> true',
   'in> isSubsetOf(1,[1, 2, 3]);','out> false','in> isSubsetOf([1],[1, 2, 3]);','out> true','in> isSubsetOf([1, 4],[1, 2, 3]);',
   'out> false'],
  'LDWin32'=>
  ['in> arity({3});','out> 0','in> arity({sin($x)/$x});','out> 1',
   "in> runScript(['name'=>'hello.mnh','source'=>[\"main->print('Hello world');\"],'side effects'=>['alter package state','output']].toMap).filter({$message.head=='printline'}).map(:: trailing);",
   "out> ['Hello world']",'in> arity({sin($x)/$y});','out> 2',"in> arity({printf('%s%s', $a,...)});",'out> 1',
   "in> toExpression('$x-$x^2+$x^3');",'out> {$x-$x^2+$x^3}',"in> toExpression('');",
   'Error The parsed expression appears to be empty','in> parameterNames({3});','out> []','in> parameterNames({sin($x)/$x});',
   "out> ['$x']","in> parameterNames({printf('%s%s', $a,...)});","out> ['$a']",'in> ord(3);','out> 3','in> ord(true);','out> 1',
   'in> ord(false);','out> 0',"in> ord('A');",'out> 65',"in> ord('abc');",'out> -1','in> ord(2.1);',
   'Error ord can only be applied to booleans, ints and strings',"in> softCast('A');","out> 'A'",'in> softCast(''"B"'');',
   "out> 'B'",'in> softCast(3);','out> 3',"in> softCast([1,'2','true',\"'TEXT'\",'1.5','2,6']);",
   "out> [1,2,true,'TEXT',1.5,'2,6']","in> toString('a');","out> 'a'",'in> toString(234);',"out> '234'",
   "in> toString([1, 2.6,'a', true,{$x}]);",'out> "[1,2.6,''a'',true,{$x}]"','in> abs(-0.92);','out> 0.92','in> abs(3);',
   'out> 3','in> abs({1+$x});','out> {abs(1+$x)}','in> arccos(-0.92);','out> 2.7388768120091316555','in> arccos(3);','out> Nan',
   'in> arccos({1+$x});','out> {arccos(1+$x)}','in> arcsin(-0.92);','out> -1.16808048521423503635','in> arcsin(3);','out> Nan',
   'in> arcsin({1+$x});','out> {arcsin(1+$x)}','in> tan(-0.92);','out> -1.31326369932024783656','in> tan(3);',
   'out> -0.14254654307427780529','in> tan({1+$x});','out> {tan(1+$x)}','in> tan(pi/2);','out> -3.6893488147419103232E19',
   'in> arctan(-0.92);','out> -0.74375558429885988575','in> arctan({$x});','out> {arctan($x)}','in> argMax(sin([0..10]));',
   'out> 8','in> argMax([1, 3, 3, 0, 2]);','out> 1','in> argMin(sin([0..10]));','out> 5','in> argMin([1, 3, 3, 0, 2]);','out> 3',
   'in> ceil(20/3);','out> 7','in> ceil([0..3]/3);','out> [0,1,1,1]','in> ceil([0..3]/3, 2);','out> [0,0.34,0.67,1]',
   'in> floor(20/3);','out> 6','in> floor([0..3]/3);','out> [0,0,0,1]','in> floor([0..3]/3, 2);','out> [0,0.33,0.66,1]',
   'in> round(20/3);','out> 7','in> round([0.5, 1.5, 2.5, 3.5]);','out> [0,2,2,4]','in> round([0..3]/3, 2);',
   'out> [0,0.33,0.67,1]','in> isInfinite(Nan);','out> false','in> isInfinite(+Inf);','out> true','in> isInfinite(-Inf);',
   'out> true','in> isInfinite([-3.4344, Nan,+Inf]);','out> [false,false,true]','in> isNan(Nan);','out> true','in> isNan(+Inf);',
   'out> false','in> isNan(-Inf);','out> false','in> isNan([-3.4344, Nan,+Inf]);','out> [false,true,false]','in> cos(-0.92);',
   'out> 0.60582015664346284178','in> cos(3);','out> -0.98999249660044545727','in> cos({1+$x});','out> {cos(1+$x)}',
   'in> exp(-0.92);','out> 0.39851904108451413621','in> exp(3);','out> 20.085536923187667923','in> exp({1+$x});',
   'out> {exp(1+$x)}','in> ln(-0.92);','out> Nan','in> ln(3);','out> 1.09861228866810969136','in> ln({1+$x});','out> {ln(1+$x)}',
   'in> ln(-0.92);','out> Nan','in> sin(3);','out> 0.1411200080598672221','in> sin({1+$x});','out> {sin(1+$x)}',
   'in> sqr(-0.92);','out> 0.8464','in> sqr(3);','out> 9','in> sqr({1+$x});','out> {sqr(1+$x)}','in> sqrt(-0.92);','out> Nan',
   'in> sqrt(3);','out> 1.73205080756887729357','in> sqrt({1+$x});','out> {sqrt(1+$x)}','in> isqrt(121);','out> [11,true]',
   'in> isqrt(255);','out> [15,false]','in> sign(-0.92);','out> -1','in> sign(3);','out> 1','in> sign({1+$x});',
   'out> {sign(1+$x)}',"in> max(['a'..'z']);","out> 'z'",'in> max([0..9]/2);','out> 4.5','in> max(true, false);','out> true',
   "in> min(['a'..'z']);","out> 'a'",'in> min([0..9]/2);','out> 0','in> min(true, false);','out> false',
   "in> copy('abcde', 1, 3);","out> 'bcd'","in> copy('abcde', 2);","out> 'cde'","in> escape('a');",'out> "''a''"',
   'in> escape(#9);',"out> '#9'",'in> group([1..10],[1..10] mod 3=0);','out> [false => [1,2,4,5,7,8,10],true=>[3,6,9]].toMap',
   'in> fail;','Error Fail','in> fail("Told you this wouldn''t work!");',"Error Told you this wouldn't work!",'in> hash(1);',
   'out> 2','in> hash([1..3]);','out> 299863',"in> hash('a');",'out> 283',
   "in> listBuiltin.filter({$s.matches('^mnh\\.')}).sort.trailing(10);",
   "out> ['mnh.listBuiltin','mnh.listSideEffects','mnh.mnhInfo','mnh.myPath','mnh.ord','mnh.parameterNames','mnh.runScript','mnh.sandBoxExecute','mnh.sleep','mnh.sleepUntil']",
   "in> group([[1,'a'],[2,'a'],[1,'b'],[4,'c'],[2,'a'],[2,'b']], 1, aggregator({[$x[0]+$y[0], $x[1]]}));",
   "out> ['b' => [3,'b'],'c'=>[4,'c'],'a'=>[5,'a']].toMap",'in> abs(3);','out> 3','in> abs(-3);','out> 3','in> abs([-2..2]/2);',
   'out> [1,0.5,0,0.5,1]',"in> chars('This is a test.');","out> ['T','h','i','s',' ','i','s',' ','a',' ','t','e','s','t','.']",
   'in> chars.get(100);',"out> 'd'","in> clean('+21/232/2116-11',['0'..'9'],' ');","out> ' 21 232 2116 11'",
   "in> join(['a','b','c']);","out> 'abc'","in> join([1..5],' ');","out> '1 2 3 4 5'","in> length(\"Test öäü\");",'out> 8',
   "in> byteLength(\"Test öäü\");",'out> 11',"in> length(['Text','AbC']);",'out> [4,3]',"in> lower('Test');","out> 'test'",
   "in> lower(['Text','AbC']);","out> ['text','abc']","in> upper('Test');","out> 'TEST'","in> upper(['Text','AbC']);",
   "out> ['TEXT','ABC']",'in> t :=[0..1000]*2*pi/1000;','in> plot(t, sin(t));','in> abs(3);','out> 3','in> abs(-5/7);',
   'out> 0.71428571428571428569','in> abs([-2..2]);','out> [2,1,0,1,2]',"in> chars('Test');","out> ['T','e','s','t']",
   "in> pos('o','Hello World');",'out> 4',"in> pos(',',['Hello','Test','1,2,3']);",'out> [Inf,Inf,1]',
   "in> pos(['a','b'],'cdb');",'out> [Inf,2]',"in> repeat('-', 10);","out> '----------'","in> replace('[[][]][]][][','[]','');",
   "out> ']['","in> replace('aba','b','bb');","out> 'abba'","in> replaceOne('[[][]][]][][','[]','');","out> '[[]][]][]['",
   "in> replaceOne('1:.-.; 2:.-.; 3:.-.','.',['a'..'e']);","out> '1:a-b; 2:c-d; 3:e-.'","in> split('1,2,3;4,5,6',',');",
   "out> ['1','2','3;4','5','6']","in> split('1,2,3;4,5,6',';');","out> ['1,2,3','4,5,6']","in> split('1,2,3;4,5,6',[';',',']);",
   "out> ['1','2','3','4','5','6']","in> tokenSplit('f(x)->x+1; //Stupid, but just an example...','mnh');",
   "out> ['f','(','x',')','->','x','+','1',';',' ','//Stupid, but just an example...']",'in> trim(" \tA B C\t ");',
   "out> 'A B C'",'in> trimLeft(" \tA B C\t ");','out> "A B C\t "','in> trimRight(" \tA B C\t ");','out> " \tA B C"',
   "in> unbrace('3');","out> '3'","in> unbrace('(3)');","out> '3'","in> unbrace('(3]');","out> '(3]'",'in> unbrace(''"3"'');',
   'out> ''"3"''',"in> chars('Testtext').elementFrequency;","out> ['T' => 1,'e'=>2,'s'=>1,'t'=>3,'x'=>1].toMap",
   'in> flatten([1,[2,[3, 4],[5]], 6]);','out> [1,2,3,4,5,6]',"in> head(['A'..'Z']);","out> 'A'","in> head(['A'..'Z'], 3);",
   "out> ['A','B','C']","in> ['A'..'Z'].toSet.head(3);","out> ['F','V','G']","in> tail(['A'..'Z']);",
   "out> ['B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']",
   "in> tail(['A'..'Z'], 3);",
   "out> ['D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']",
   'in> rangeGenerator(1, 10).tail(3);','out> [4,5,6,7,8,9,10]',"in> leading(['A'..'Z']);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y']",
   "in> leading(['A'..'Z'], 3);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W']",
   'in> rangeGenerator(1, 10).leading(3);','out> [1,2,3,4,5,6,7]',"in> trailing(['A'..'Z']);","out> 'Z'",
   "in> trailing(['A'..'Z'], 3);","out> ['X','Y','Z']","in> ['A'..'Z'].toSet.trailing(3);","out> ['T','E','U']",
   'in> rangeGenerator(1, 10).trailing(3);','out> [8,9,10]','in> minus([1..10]^2, 2*[0..50]);','out> [1,9,25,49,81].toSet',
   'in> sort(intRandom(10, 5));','out> [0,1,2,3,8]',"in> sort(['01','10','100','1','010'],{softCast($x)<=softCast($y)});",
   "out> ['01','1','10','010','100']",'in> sortPerm(random(10));','out> [8,3,2,1,5,6,9,0,7,4]',"in> sortPerm(['a'..'c'..'a']);",
   'out> [0,4,1,3,2]','in> intersect([0..1000]^2,[0..1000]^3);',
   'out> [1,0,4096,262144,64,46656,1000000,729,15625,117649,531441].toSet','in> union(1/[1..5], 2/[2..6]);',
   'out> [0.2,0.4,1,0.5,0.25,0.33333333333333333334,0.66666666666666666668].toSet',"in> deleteFile('plotDemo1.png');",
   'out> false',"in> get(['a'..'f'], 3);","out> 'd'","in> get(['a'..'f'],[3, 1, 2]);","out> ['d','b','c']",
   'in> get([0..4],[2..6] mod 3=0);','out> [1,4]',"in> get([['A', 1],['B', 2],['C', 0]],'B');",'out> 2',
   'in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]], 1);','out> [2,5,8]','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[1, 0]);',
   'out> [[2,1],[5,4],[8,7]]','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[true, false, true]);','out> [[1,3],[4,6],[7,9]]',
   'in> indexOf([1..6]^2 mod 3=0);','out> [2,5]','in> reverseList([1..5]);','out> [5,4,3,2,1]','in> size([0.5, 0.1, 0.2]);',
   'out> 3',"in> toMap([['A', 1],['B', 2],['C', 0],['B', 4]]);","out> ['B' => 4,'C'=>0,'A'=>1].toMap",
   'in> trueCount(10<[0..10]^2<50);','out> 4','in> unique([3, 1, 2, 1, 4, 1, 5]);','out> [1,2,3,4,5]',"in> compress('Test');",
   "out> 'Test'","in> compress('Test').decompress;","out> 'Test'","in> compress('Testtext');","out> #2#248'e'#240'9N'",
   "in> compress('Testtext').decompress;","out> 'Testtext'","in> relativeFileName('~/folder/','~/other/example.txt');",
   "out> '../other/example.txt'",'in> primes(20);','out> [2,3,5,7,11,13,17,19]','in> subSets([1, 2, 1]);',
   'out> [[],[1],[1,1],[2],[2,1],[2,1,1]]',"in> diff('encode','decode');",
   "out> ['deletes' => 1,'modifies'=>0,'adds'=>1,'matches'=>5,'edit'=>[['+',-1,0],[' ',0,1],['-',1,1],[' ',2,2],[' ',3,3],[' ',4,4],[' ',5,5]]].toMap",
   "in> diffStats('encode','decode');","out> ['deletes' => 1,'modifies'=>0,'adds'=>1,'matches'=>5].toMap",
   "in> format('%s is a string, %3.3d is a number','X', 7);","out> 'X is a string, 007 is a number'","in> format('%6.3f', 3);",
   "out> ' 3.000'","in> format('%6.3e', 3);","out> '3.00E+000'","in> format('%6.3g', 3);","out> '     3'",
   "in> format('%6.6x', 1234);","out> '0004D2'","in> formatTime('mm.dd.yyyy', 43210);","out> '04.20.2018'",
   'in> formatTime(12424.245);',"out> '05.01.1934 05:52:48'","in> isAscii('xyz');",'out> true',"in> isAscii('xyz'&chars[180]);",
   'out> false',"in> isAscii(\"Läuft\");",'out> false',"in> isUtf8('xyz');",'out> true',"in> isUtf8('xyz'&chars[180]);",
   'out> false',"in> isUtf8(\"Schräg\");",'out> true',"in> parseTime('yyyy-mm-dd hh:nn','2000-01-01 03:43');",
   'out> 36526.154861111113859',"in> reverseString('Test');","out> 'tseT'","in> regex.matches('This is a test','[T|t]est');",
   'out> true',"in> regex.matchComposite('This is a test','[T|t]est');","out> [['test',11,4]]",
   "in> regex.replace('A Test is a test','[T|t]est','rose');","out> 'A rose is a rose'",
   "in> regex.split('A Test is a test','[e| ]');","out> ['A','T','st','is','a','t','st']",'in> toBoolean(0);','out> false',
   'in> toBoolean(1.0);','out> true',"in> toBoolean('true');",'out> true','in> toBoolean(3);',
   'Error 3 cannot be cast to boolean',"in> toInt('32');",'out> 32','in> toInt(3.0);','out> 3','in> toInt(3.1);',
   'Error 3.1 cannot be cast to int','in> toInt(false);','out> 0',"in> toReal('3.212');",'out> 3.212','in> toReal(true);',
   'out> 1','in> toReal(3);','out> 3.0','in> getOptions;','in> executor;','out> ''<#>\target\Win32\mnh_light_debug.exe''',
   'in> print("1\n2.0\n03.45");','1','2.0','03.45','out> void','in> print("1\n2.0\n03,45\t");',' 1',' 2.0','03,45','out> void',
   'in> print("1\tone\t|\n2.0\ttwo\t|\n03.45\tthree\t|");',' 1    one   |',' 2.0  two   |','03.45 three |','out> void',
   'in> print("1\vone\v|\n2.0\vtwo\v|\n03.45\vthree\v|");',' 1   one  |',' 2.0 two  |','03.45three|','out> void',
   "in> printf('%x is %d in hexadecimal form', 123, 123);",'7B is 123 in hexadecimal form','out> void',
   "in> printf('%{$0}x is %{$0}d in hexadecimal form', 123);",'7B is 123 in hexadecimal form','out> void',
   "in> printf('sin(%{$0}s)=%{sin($0)}4.4g', 1);",'sin(1)=0.8415','out> void','in> permutations([1, 1, 2]);',
   'out> [[1,2,1],[1,1,2],[2,1,1]].toSet','in> permutations([1..3]);',
   'out> [[1,3,2],[2,1,3],[2,3,1],[3,1,2],[1,2,3],[3,2,1]].toSet',"in> input :=[[1..10], random,'test', random(9)];",
   'in> serialized :=input.serialize;',"in> print(input.toString.byteLength,' > ', serialized.byteLength);",'258 > 104',
   'out> void','in> input==serialized.deserialize;','out> true','in> factorize(18447422338071909869);',
   'out> [2642257,2642287,2642291]','in> formatTabs("\v-2\n3\t4.3");',"out> ['  -2','3  4.3']",'in> typeOf(3);',"out> 'Int'",
   'in> typeOf([1..5, 7.5]);',"out> 'NumericList(6)'",'in> typeOf({$x^2+$y});',"out> 'Expression(2)'",
   'in> x :=transpose([1,[1, 2, 3],[1, 2]], 0);','in> x;','out> [[1,1,1],[0,2,2],[0,3,0]]','in> x.transpose(0);',
   'out> [[1,0,0],[1,2,3],[1,2,0]]','in> resetRandom(12157);','out> void','in> resetRandom;','out> void','in> intRandom(7);',
   'out> 1','in> intRandom(7, 10);','out> [2,2,3,0,0,3,2,2,6,5]','in> random;','out> 0.70794778806157410144','in> random(3);',
   'out> [0.20965369325131177902,0.45114781009033322334,0.19202205142937600612]',"in> note('Note that this is a note');",
   'Note Note that this is a note','out> void',"in> warn('Warning: I intend to say something important here');",
   'Warning Warning: I intend to say something important here','out> void','in> isScalar(1);','out> true',
   'in> isBoolean(false);','out> true','in> isBoolean(1);','out> false','in> isInt(false);','out> false','in> isInt(1);',
   'out> true','in> isInt(1.0);','out> false','in> isReal(false);','out> false','in> isReal(1);','out> false','in> isReal(1.0);',
   'out> true','in> isNumeric(false);','out> false','in> isNumeric(1);','out> true','in> isNumeric(1.0);','out> true',
   'in> isList([]);','out> true','in> isList([], 0);','out> true','in> isList([], 1);','out> false',"in> isList(['x'], 1);",
   'out> true',"in> isString('Test');",'out> true','in> isString(true);','out> false','in> isExpression(:: sin);','out> true',
   'in> isExpression(:: sin, 1);','out> true','in> isExpression(:: sin, 2);','out> false','in> digits(123);','out> [1,2,3]',
   'in> digits(123, 3);','out> [1,1,1,2,0]','in> arctan2(1, 1);','out> 0.78539816339744830962',"in> charSet('abcba');",
   "out> ['a','b','c'].toSet","in> bytes(\"ö\").ord;",'out> [195,182]',"in> base64encode('Test');","out> 'VGVzdA=='",
   "in> base64decode('VGVzdA==');","out> 'Test'","in> base92encode('bla bla bla ');","out> ']En_)]En_)]En_)'",
   "in> base92decode('PgsC.?d@t^');","out> '12345'",'in> listSideEffects;',
   "out> ['input','output','sound','sleep','detaching','server','read package state','alter package state','alter context state','alter plot state','read file','write file','http','ipc','executing external']",
   "in> changeFileExt('file.extension','.newExtension');","out> 'file.newExtension'",
   "in> changeFileExt('file.2.extension','.newExtension');","out> 'file.2.newExtension'",'in> httpError;',
   'out> "HTTP/1.0 404\r\n"','in> isBooleanList([true, false]);','out> true','in> isBooleanList(true);','out> false',
   'in> isIntList([1..3]);','out> true','in> isIntList([1, 2.0]);','out> false','in> isRealList([1, 2, 3]);','out> false',
   'in> isRealList([1.0, 2.0, 3.0, Nan]);','out> true',"in> isStringList(['a'..'z']);",'out> true',
   'in> isNumericList([1, 2, 3]);','out> true','in> isNumericList([1.0, 2, 3, Inf]);','out> true','in> isVoid();','out> true',
   'in> isVoid(void);','out> true','in> isVoid(3);','out> false',"in> escapePascal('Test');",'out> "''Test''"',
   "in> escapeJava('Test');",'out> ''"Test"''',"in> extractFileNameOnly('/home/user/file.ext');","out> 'file'",
   "in> extractFileDirectory('/home/user/file.ext');","out> '/home/user'","in> extractFileName('/home/user/file.ext');",
   "out> 'file.ext'","in> extractFileExt('/home/user/file.ext');","out> '.ext'","in> extractPath('/index.html?x=0&y=3%2Ax');",
   "out> '/index.html'","in> extractParameters('/index.html?x=0&y=3%2Ax');","out> ['x' => 0,'y'=>'3*x'].toMap",
   "in> extractRawParameters('/index.html?x=0&y=3%2Ax');","out> 'x=0&y=3%2Ax'",
   "in> encodeRequest('127.0.0.1:3126','rest',[['user','anonymous'],['request','3*&7']].toMap);",
   "out> '127.0.0.1:3126/rest?user=anonymous&request=3%2A%267'","in> cross(['1'..'3'],['A'..'C']);",
   "out> [['1','A'],['1','B'],['1','C'],['2','A'],['2','B'],['2','C'],['3','A'],['3','B'],['3','C']]",'in> [1, 2, 1].toSet;',
   'out> [2,1].toSet','in> [1.2, 3.0].isRealCollection;','out> true','in> [1.2, 3.0].toSet.isRealCollection;','out> true',
   'in> [1.2, 3].isRealCollection;','out> false','in> [1.2, 3.0].isRealCollection(2);','out> true',
   'in> [1.2, 3.0].isRealCollection(3);','out> false','in> [true].isBooleanCollection;','out> true',
   'in> [true, false, true].toSet.isBooleanCollection(2);','out> true','in> [true, false, true].toSet.isBooleanSet;','out> true',
   'in> [1, 2, 3].isIntCollection;','out> true','in> [].isIntCollection;','out> true','in> [1.2, 3].isNumericCollection;',
   'out> true',"in> ['a','b'].toSet.isStringSet;",'out> true',"in> ['a','b'].isStringCollection;",'out> true',
   'in> [1, 2, 3].isIntSet;','out> false','in> [1, 2, 3].toSet.isIntSet;','out> true',
   "in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap;",'out> true',"in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(2);",'out> true',
   "in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(3);",'out> false',"in> [1,'a', false].isSet;",'out> false',
   "in> [1,'a', false].isCollection;",'out> true',"in> utf8ToAnsi(\"öµ\").bytes.ord;",'out> [246,181]',
   'in> chars[214].ansiToUtf8;',"out> \"Ö\"",'in> [1.2, 3.4].toSet.isRealSet;','out> true','in> toList(3);','out> [3]',
   'in> toList([2, 3, 6].toSet);','out> [3,2,6]','in> [1.2, 3.4].toSet.isNumericSet;','out> true',
   "in> [[1,'one'],[3,'three'],[5,'five']].toMap.getAll([1, 5, 6],['-','-','-']);","out> ['one','five','-']",
   'in> [1, 3, 5].getAll([0, 2])==[1, 3, 5].get([0, 2]);','out> true','in> [1..20].filter({$x mod 2<>0<>$x mod 3});',
   'out> [1,5,7,11,13,17,19]','in> rangeGenerator(1, 20).filter({$x mod 2<>0<>$x mod 3});',
   'out> rangeGenerator(1,20).filter({$x mod 2<>0<>$x mod 3})',"in> ['a'..'f'].map(:: upper);","out> ['A','B','C','D','E','F']",
   "in> ['a'..'f'].pMap(:: upper);","out> ['A','B','C','D','E','F']",'in> primeGenerator.head(10);',
   'out> [2,3,5,7,11,13,17,19,23,29]','in> [-1, 1,-1, 1,-2, 2].agg(head);','out> -1','in> [-1, 1,-1, 1,-2, 2].agg(trailing);',
   'out> 2','in> [-1, 1,-1, 1,-2, 2].agg(toSet);','out> [-1,-2,2,1].toSet','in> [-1, 1,-1, 1,-2, 2].agg(max);','out> 2',
   'in> [-1, 1,-1, 1,-2, 2].agg(min);','out> -2','in> [-1, 1,-1, 1,-2, 2].agg(&);',"out> '-11-11-22'",
   'in> [-1, 1,-1, 1,-2, 2].agg(*);','out> -4','in> [-1, 1,-1, 1,-2, 2].agg(+);','out> 0',
   'in> permutationIterator([3, 1, 2]).map(:: print).toList;','[1,2,3]','[1,3,2]','[2,1,3]','[2,3,1]','[3,1,2]','[3,2,1]',
   'out> []','in> rangeGenerator(1, 100).map({$x^2});','out> rangeGenerator(1,100).map({$x^2})',
   "in> mergeMaps([['A', 1],['B', 2]].toMap,[['A', 7],['C', 3]].toMap, ::+);","out> ['B' => 2,'C'=>3,'A'=>8].toMap",
   "in> try({deserialize('x')});",'out> void',"in> try({deserialize('x')}, :: print);",
   "[['el3_evalError','@?:3,6','Invalid literal encoding type 120']]",'out> void',"in> try({deserialize('x')}, 0);",'out> 0',
   "in> try({deserialize('x')},{warn($x.head.trailing)});",'Warning Invalid literal encoding type 120','out> void',
   "in> interpret('3+4');",'out> 7','in> shiftRight(7, 1);','out> 3','in> shiftRight(5,-2);','out> 20',
   'in> type FiniteRealList(L :List)->L.each(x,!x.isNan,!x.isInfinite, AND);','in> x :=[1, 5, 0.4, 1/7].toFiniteRealList;',
   'in> x;','out> [1,5,0.4,0.14285714285714285714].toFiniteRealList','in> x.typeOf;',"out> 'FiniteRealList'",'in> x.toBuiltin;',
   'out> [1,5,0.4,0.14285714285714285714]','in> x.toBuiltin.typeOf;',"out> 'NumericList(4)'",
   "in> interpret({print('Hello world')},[]);",'Error Cannot apply print because of side effect(s): [output]',
   'in> composeDigits([1, 0, 1], 2);','out> 5','in> composeDigits([1, 0, 2]);','out> 102','in> composeDigits([1, 0, 2], 10, 2);',
   'out> 1.02',"in> sandBoxExecute('f(x)->3*x+1; f(f(f(1)))',['alter package state']);",
   "out> [['echo_declaration','','f(x)->3*x+1;'],['echo_input','','f(f(f(1)));'],['echo_output','','40'],['exitCode','',0]]",
   "in> begin local x:=async({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   '1: true','start','2: end','out> void',
   "in> begin local x:=future({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   'start','1: false','2: end','out> void',"in> validateRegex('(3+.*');",'out> false',"in> validateRegex('\\(3+.*');",
   'out> true','in> [1..100].pFilter({$x mod 2=$x mod 3=$x mod 5});','out> [1,30,31,60,61,90,91]','in> pi;',
   'out> 3.1415926535897932385','in> isStatefulExpression(:: sin);','out> false','in> isStatefulExpression(future(:: sin,[3]));',
   'out> true','in> isStatelessExpression(:: sin);','out> true','in> isStatelessExpression(future(:: sin,[3]));','out> false',
   'in> isIteratable(future(:: sin,[3]));','out> false','in> isIteratable(primeGenerator);','out> true',
   'in> isIteratable([1..10]);','out> true','in> isIteratableExpression(primeGenerator);','out> true',
   'in> isIteratableExpression([1..10]);','out> false',
   "in> begin resetRandom; local gen:={begin local last:=0; save; last+=random; end}; print('gen.isIteratable= ', gen.isIteratable,'; ', gen.head(3)); gen:=gen.toIteratableExpression; print('gen.isIteratable= ', gen.isIteratable,'; ', gen.head(3)); end;",
   'gen.isIteratable= false; {begin local last:=0; save; last+=random; end}',
   'gen.isIteratable= true; [0.69890124513767659664,1.5846346444450318813,2.5055105253122746944]','out> void',
   'in> toIteratableExpression(:: sqr);','Error Only nullary stateful expressions may be iteratable.',
   'in> toIteratableExpression({begin local i:=1; save; i+=i-1; end});','out> {begin local i:=1; save; i+=i-1; end}',
   'in> euklideanNorm([1, 2]);','out> 2.2360679774997896964','in> assert(1=1.0);','out> void',
   "in> assert('bla'.isInt,'Invalid integer given');",'Error Invalid integer given',
   "in> md5('Test input. Could be anything really.');",'out> 337964223705814058127798532806512273013',
   "in> sha256('Test input. Could be anything really.');",
   'out> 60429211283715320795241587111266756812669288936868807314606704811653259384943','in> hammingWeight(17213);','out> 8',
   'in> gcd(1231512, 143543);','out> 23',
   'in> powMod(2988348162058574136915891421498819466320163312926952423791023078876139, 2351399303373464486466122544523690094744975233415544072992656881240319, 10^40);',
   'out> 1527229998585248450016808958343740453059','in> randomGenerator(123).head(10);',
   'out> [0.8880804681684821844,0.033595459535717964172,0.073756912024691700935,0.073728758376091718673,0.40903412224724888801,0.7116715747397392988,0.46069467556662857532,0.5966716259717941284,0.81161490315571427345,0.4983937116339802742]',
   'in> intRandomGenerator(123, 5).head(10);','out> [2,0,0,1,3,4,0,0,1,2]','in> isaacRandomGenerator(123, 5).head(10);',
   'out> [3,3,1,4,4,2,2,0,4,3]','in> modularInverse(3, 32);','out> 11','in> byteToChar(100);',"out> 'd'",
   'in> byteToChar([10, 12, 97, 45]);',"out> [#10,#12,'a','-']","in> systemSpecificFilename('..\\test/filename.txt');",
   'out> ''..\test\filename.txt''',"in> stringIterator(['a','b','c'], 1, 3).head(10);",
   "out> ['a','b','c','aa','ab','ac','ba','bb','bc','ca']",'in> vanDerCorputGenerator(2).head(10);',
   'out> [0.0,0.5,0.25,0.75,0.125,0.625,0.375,0.875,0.0625,0.5625]','in> primeGenerator.head(1000).trailing(5);',
   'out> [7879,7883,7901,7907,7919]','in> rangeGenerator(0, 5).head(10);','out> [0,1,2,3,4,5]',
   'in> rangeGenerator(100,-100).head(10);','out> [100,99,98,97,96,95,94,93,92,91]','in> divMod(10, 7);','out> [1,3]',
   "in> 'abba'.hasPrefix('ab');",'out> true',
   'in> isPrime(47531677974672740279381824573269878221106369761801704860769848227327108403647);','out> true','in> 3==3.0;',
   'out> false','in> [1, 2, 3]==[3, 1, 3];','out> false','in> 3=3.0;','out> true','in> {$x}=3;','out> {$x=3}',
   'in> [1, 2, 3]=[3, 1, 3];','out> [false,false,true]','in> 3<=3.0;','out> true','in> [1, 2, 3]<=[3, 1, 3];',
   'out> [true,false,true]','in> 3>=3.0;','out> true','in> [1, 2, 3]>=[3, 1, 3];','out> [false,true,true]','in> 3<3.0;',
   'out> false','in> [1, 2, 3]<[3, 1, 3];','out> [true,false,false]','in> 3>3.0;','out> false','in> [1, 2, 3]>[3, 1, 3];',
   'out> [false,true,false]','in> 3<>3.0;','out> false','in> [1, 2, 3]<>[3, 1, 3];','out> [true,true,false]',
   'in> true AND false;','out> false','in> true AND 3;','out> 3','in> false AND 3;','out> false','in> true and false;',
   'out> false','in> [true, false, true, false] and[true, true, false, false];','out> [true,false,false,false]','in> 7 and 252;',
   'out> 4','in> true OR false;','out> true','in> true OR 3;','out> true','in> false OR 3;','out> 3','in> true or false;',
   'out> true','in> [true, false, true, false] or[true, true, false, false];','out> [true,true,true,false]','in> 7 or 252;',
   'out> 255','in> true xor false;','out> true','in> [true, false, true, false] xor[true, true, false, false];',
   'out> [false,true,true,false]','in> 7 xor 252;','out> 251',"in> +'a';","out> 'a'",'in> -3;','out> -3',
   'in> -[1, 2.0, Inf, Nan];','out> [-1,-2.0,-Inf,Nan]','in> !true;','out> false','in> 3 in[1..5];','out> true',
   'in> 3.0 in[1..5];','out> false','in> 1|2;','out> [1,2]','in> [1]|[2];','out> [1,2]','in> [1]|2;','out> [1,2]',
   'in> [1]|[[2]];','out> [1,[2]]','in> [1]||2;','out> [1,2]','in> [1]||[2];','out> [1,[2]]','in> 10 div 3;','out> 3',
   'in> 10/3;','out> 3.3333333333333333332','in> 10/5;','out> 2','in> 10.0/5;','out> 2.0','in> void orElse 42;','out> 42',
   'in> 3 orElse fail;','out> 3','in> 3-pi;','out> -0.14159265358979323851','in> 32459378562983 mod 2342832;','out> 1139831',
   'in> 2*3;','out> 6','in> 2.0*3;','out> 6.0','in> 4+5;','out> 9',"in> 'a'+'b';","out> 'ab'",'in> 5^7;','out> 78125',
   'in> -3.5^3;','out> -42.875','in> 3&4;',"out> '34'",'in> isSubsetOf([1, 2, 3],[1, 2, 3]);','out> true',
   'in> isSubsetOf(1,[1, 2, 3]);','out> false','in> isSubsetOf([1],[1, 2, 3]);','out> true','in> isSubsetOf([1, 4],[1, 2, 3]);',
   'out> false'],
  'LDWin64'=>
  ['in> arity({3});','out> 0','in> arity({sin($x)/$x});','out> 1',
   "in> runScript(['name'=>'hello.mnh','source'=>[\"main->print('Hello world');\"],'side effects'=>['alter package state','output']].toMap).filter({$message.head=='printline'}).map(:: trailing);",
   "out> ['Hello world']",'in> arity({sin($x)/$y});','out> 2',"in> arity({printf('%s%s', $a,...)});",'out> 1',
   "in> toExpression('$x-$x^2+$x^3');",'out> {$x-$x^2+$x^3}',"in> toExpression('');",
   'Error The parsed expression appears to be empty','in> parameterNames({3});','out> []','in> parameterNames({sin($x)/$x});',
   "out> ['$x']","in> parameterNames({printf('%s%s', $a,...)});","out> ['$a']",'in> ord(3);','out> 3','in> ord(true);','out> 1',
   'in> ord(false);','out> 0',"in> ord('A');",'out> 65',"in> ord('abc');",'out> -1','in> ord(2.1);',
   'Error ord can only be applied to booleans, ints and strings',"in> softCast('A');","out> 'A'",'in> softCast(''"B"'');',
   "out> 'B'",'in> softCast(3);','out> 3',"in> softCast([1,'2','true',\"'TEXT'\",'1.5','2,6']);",
   "out> [1,2,true,'TEXT',1.5,'2,6']","in> toString('a');","out> 'a'",'in> toString(234);',"out> '234'",
   "in> toString([1, 2.6,'a', true,{$x}]);",'out> "[1,2.6,''a'',true,{$x}]"','in> abs(-0.92);','out> 0.92','in> abs(3);',
   'out> 3','in> abs({1+$x});','out> {abs(1+$x)}','in> arccos(-0.92);','out> 2.7388768120091318','in> arccos(3);','out> Nan',
   'in> arccos({1+$x});','out> {arccos(1+$x)}','in> arcsin(-0.92);','out> -1.1680804852142352','in> arcsin(3);','out> Nan',
   'in> arcsin({1+$x});','out> {arcsin(1+$x)}','in> tan(-0.92);','out> -1.313263699320248','in> tan(3);',
   'out> -0.1425465430742778','in> tan({1+$x});','out> {tan(1+$x)}','in> tan(pi/2);','out> 1.6331778728383844E16',
   'in> arctan(-0.92);','out> -0.7437555842988599','in> arctan({$x});','out> {arctan($x)}','in> argMax(sin([0..10]));','out> 8',
   'in> argMax([1, 3, 3, 0, 2]);','out> 1','in> argMin(sin([0..10]));','out> 5','in> argMin([1, 3, 3, 0, 2]);','out> 3',
   'in> ceil(20/3);','out> 7','in> ceil([0..3]/3);','out> [0,1,1,1]','in> ceil([0..3]/3, 2);','out> [0,0.34,0.67,1]',
   'in> floor(20/3);','out> 6','in> floor([0..3]/3);','out> [0,0,0,1]','in> floor([0..3]/3, 2);','out> [0,0.33,0.66,1]',
   'in> round(20/3);','out> 7','in> round([0.5, 1.5, 2.5, 3.5]);','out> [0,2,2,4]','in> round([0..3]/3, 2);',
   'out> [0,0.33,0.67,1]','in> isInfinite(Nan);','out> false','in> isInfinite(+Inf);','out> true','in> isInfinite(-Inf);',
   'out> true','in> isInfinite([-3.4344, Nan,+Inf]);','out> [false,false,true]','in> isNan(Nan);','out> true','in> isNan(+Inf);',
   'out> false','in> isNan(-Inf);','out> false','in> isNan([-3.4344, Nan,+Inf]);','out> [false,true,false]','in> cos(-0.92);',
   'out> 0.60582015664346289','in> cos(3);','out> -0.9899924966004454','in> cos({1+$x});','out> {cos(1+$x)}','in> exp(-0.92);',
   'out> 0.39851904108451419','in> exp(3);','out> 20.085536923187668','in> exp({1+$x});','out> {exp(1+$x)}','in> ln(-0.92);',
   'out> Nan','in> ln(3);','out> 1.0986122886681096','in> ln({1+$x});','out> {ln(1+$x)}','in> ln(-0.92);','out> Nan',
   'in> sin(3);','out> 0.1411200080598672','in> sin({1+$x});','out> {sin(1+$x)}','in> sqr(-0.92);','out> 0.8464','in> sqr(3);',
   'out> 9','in> sqr({1+$x});','out> {sqr(1+$x)}','in> sqrt(-0.92);','out> Nan','in> sqrt(3);','out> 1.7320508075688772',
   'in> sqrt({1+$x});','out> {sqrt(1+$x)}','in> isqrt(121);','out> [11,true]','in> isqrt(255);','out> [15,false]',
   'in> sign(-0.92);','out> -1','in> sign(3);','out> 1','in> sign({1+$x});','out> {sign(1+$x)}',"in> max(['a'..'z']);",
   "out> 'z'",'in> max([0..9]/2);','out> 4.5','in> max(true, false);','out> true',"in> min(['a'..'z']);","out> 'a'",
   'in> min([0..9]/2);','out> 0','in> min(true, false);','out> false',"in> copy('abcde', 1, 3);","out> 'bcd'",
   "in> copy('abcde', 2);","out> 'cde'","in> escape('a');",'out> "''a''"','in> escape(#9);',"out> '#9'",
   'in> group([1..10],[1..10] mod 3=0);','out> [false => [1,2,4,5,7,8,10],true=>[3,6,9]].toMap','in> fail;','Error Fail',
   'in> fail("Told you this wouldn''t work!");',"Error Told you this wouldn't work!",'in> hash(1);','out> 2','in> hash([1..3]);',
   'out> 299863',"in> hash('a');",'out> 283',"in> listBuiltin.filter({$s.matches('^mnh\\.')}).sort.trailing(10);",
   "out> ['mnh.listBuiltin','mnh.listSideEffects','mnh.mnhInfo','mnh.myPath','mnh.ord','mnh.parameterNames','mnh.runScript','mnh.sandBoxExecute','mnh.sleep','mnh.sleepUntil']",
   "in> group([[1,'a'],[2,'a'],[1,'b'],[4,'c'],[2,'a'],[2,'b']], 1, aggregator({[$x[0]+$y[0], $x[1]]}));",
   "out> ['b' => [3,'b'],'c'=>[4,'c'],'a'=>[5,'a']].toMap",'in> abs(3);','out> 3','in> abs(-3);','out> 3','in> abs([-2..2]/2);',
   'out> [1,0.5,0,0.5,1]',"in> chars('This is a test.');","out> ['T','h','i','s',' ','i','s',' ','a',' ','t','e','s','t','.']",
   'in> chars.get(100);',"out> 'd'","in> clean('+21/232/2116-11',['0'..'9'],' ');","out> ' 21 232 2116 11'",
   "in> join(['a','b','c']);","out> 'abc'","in> join([1..5],' ');","out> '1 2 3 4 5'","in> length(\"Test öäü\");",'out> 8',
   "in> byteLength(\"Test öäü\");",'out> 11',"in> length(['Text','AbC']);",'out> [4,3]',"in> lower('Test');","out> 'test'",
   "in> lower(['Text','AbC']);","out> ['text','abc']","in> upper('Test');","out> 'TEST'","in> upper(['Text','AbC']);",
   "out> ['TEXT','ABC']",'in> t :=[0..1000]*2*pi/1000;','in> plot(t, sin(t));','in> abs(3);','out> 3','in> abs(-5/7);',
   'out> 0.7142857142857143','in> abs([-2..2]);','out> [2,1,0,1,2]',"in> chars('Test');","out> ['T','e','s','t']",
   "in> pos('o','Hello World');",'out> 4',"in> pos(',',['Hello','Test','1,2,3']);",'out> [Inf,Inf,1]',
   "in> pos(['a','b'],'cdb');",'out> [Inf,2]',"in> repeat('-', 10);","out> '----------'","in> replace('[[][]][]][][','[]','');",
   "out> ']['","in> replace('aba','b','bb');","out> 'abba'","in> replaceOne('[[][]][]][][','[]','');","out> '[[]][]][]['",
   "in> replaceOne('1:.-.; 2:.-.; 3:.-.','.',['a'..'e']);","out> '1:a-b; 2:c-d; 3:e-.'","in> split('1,2,3;4,5,6',',');",
   "out> ['1','2','3;4','5','6']","in> split('1,2,3;4,5,6',';');","out> ['1,2,3','4,5,6']","in> split('1,2,3;4,5,6',[';',',']);",
   "out> ['1','2','3','4','5','6']","in> tokenSplit('f(x)->x+1; //Stupid, but just an example...','mnh');",
   "out> ['f','(','x',')','->','x','+','1',';',' ','//Stupid, but just an example...']",'in> trim(" \tA B C\t ");',
   "out> 'A B C'",'in> trimLeft(" \tA B C\t ");','out> "A B C\t "','in> trimRight(" \tA B C\t ");','out> " \tA B C"',
   "in> unbrace('3');","out> '3'","in> unbrace('(3)');","out> '3'","in> unbrace('(3]');","out> '(3]'",'in> unbrace(''"3"'');',
   'out> ''"3"''',"in> chars('Testtext').elementFrequency;","out> ['T' => 1,'e'=>2,'s'=>1,'t'=>3,'x'=>1].toMap",
   'in> flatten([1,[2,[3, 4],[5]], 6]);','out> [1,2,3,4,5,6]',"in> head(['A'..'Z']);","out> 'A'","in> head(['A'..'Z'], 3);",
   "out> ['A','B','C']","in> ['A'..'Z'].toSet.head(3);","out> ['F','V','G']","in> tail(['A'..'Z']);",
   "out> ['B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']",
   "in> tail(['A'..'Z'], 3);",
   "out> ['D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']",
   'in> rangeGenerator(1, 10).tail(3);','out> [4,5,6,7,8,9,10]',"in> leading(['A'..'Z']);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y']",
   "in> leading(['A'..'Z'], 3);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W']",
   'in> rangeGenerator(1, 10).leading(3);','out> [1,2,3,4,5,6,7]',"in> trailing(['A'..'Z']);","out> 'Z'",
   "in> trailing(['A'..'Z'], 3);","out> ['X','Y','Z']","in> ['A'..'Z'].toSet.trailing(3);","out> ['T','E','U']",
   'in> rangeGenerator(1, 10).trailing(3);','out> [8,9,10]','in> minus([1..10]^2, 2*[0..50]);','out> [1,9,25,49,81].toSet',
   'in> sort(intRandom(10, 5));','out> [0,1,2,3,8]',"in> sort(['01','10','100','1','010'],{softCast($x)<=softCast($y)});",
   "out> ['01','1','10','010','100']",'in> sortPerm(random(10));','out> [8,3,2,1,5,6,9,0,7,4]',"in> sortPerm(['a'..'c'..'a']);",
   'out> [0,4,1,3,2]','in> intersect([0..1000]^2,[0..1000]^3);',
   'out> [1,0,4096,262144,64,46656,1000000,729,15625,117649,531441].toSet','in> union(1/[1..5], 2/[2..6]);',
   'out> [0.3333333333333333,0.6666666666666666,1,0.5,0.25,0.2,0.4].toSet',"in> deleteFile('plotDemo1.png');",'out> false',
   "in> get(['a'..'f'], 3);","out> 'd'","in> get(['a'..'f'],[3, 1, 2]);","out> ['d','b','c']",'in> get([0..4],[2..6] mod 3=0);',
   'out> [1,4]',"in> get([['A', 1],['B', 2],['C', 0]],'B');",'out> 2','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]], 1);',
   'out> [2,5,8]','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[1, 0]);','out> [[2,1],[5,4],[8,7]]',
   'in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[true, false, true]);','out> [[1,3],[4,6],[7,9]]',
   'in> indexOf([1..6]^2 mod 3=0);','out> [2,5]','in> reverseList([1..5]);','out> [5,4,3,2,1]','in> size([0.5, 0.1, 0.2]);',
   'out> 3',"in> toMap([['A', 1],['B', 2],['C', 0],['B', 4]]);","out> ['B' => 4,'C'=>0,'A'=>1].toMap",
   'in> trueCount(10<[0..10]^2<50);','out> 4','in> unique([3, 1, 2, 1, 4, 1, 5]);','out> [1,2,3,4,5]',"in> compress('Test');",
   "out> 'Test'","in> compress('Test').decompress;","out> 'Test'","in> compress('Testtext');","out> #2#248'e'#240'9N'",
   "in> compress('Testtext').decompress;","out> 'Testtext'","in> relativeFileName('~/folder/','~/other/example.txt');",
   "out> '../other/example.txt'",'in> primes(20);','out> [2,3,5,7,11,13,17,19]','in> subSets([1, 2, 1]);',
   'out> [[],[1],[1,1],[2],[2,1],[2,1,1]]',"in> diff('encode','decode');",
   "out> ['deletes' => 1,'modifies'=>0,'adds'=>1,'matches'=>5,'edit'=>[['+',-1,0],[' ',0,1],['-',1,1],[' ',2,2],[' ',3,3],[' ',4,4],[' ',5,5]]].toMap",
   "in> diffStats('encode','decode');","out> ['deletes' => 1,'modifies'=>0,'adds'=>1,'matches'=>5].toMap",
   "in> format('%s is a string, %3.3d is a number','X', 7);","out> 'X is a string, 007 is a number'","in> format('%6.3f', 3);",
   "out> ' 3.000'","in> format('%6.3e', 3);","out> '3.00E+000'","in> format('%6.3g', 3);","out> '     3'",
   "in> format('%6.6x', 1234);","out> '0004D2'","in> formatTime('mm.dd.yyyy', 43210);","out> '04.20.2018'",
   'in> formatTime(12424.245);',"out> '05.01.1934 05:52:48'","in> isAscii('xyz');",'out> true',"in> isAscii('xyz'&chars[180]);",
   'out> false',"in> isAscii(\"Läuft\");",'out> false',"in> isUtf8('xyz');",'out> true',"in> isUtf8('xyz'&chars[180]);",
   'out> false',"in> isUtf8(\"Schräg\");",'out> true',"in> parseTime('yyyy-mm-dd hh:nn','2000-01-01 03:43');",
   'out> 36526.154861111114',"in> reverseString('Test');","out> 'tseT'","in> regex.matches('This is a test','[T|t]est');",
   'out> true',"in> regex.matchComposite('This is a test','[T|t]est');","out> [['test',11,4]]",
   "in> regex.replace('A Test is a test','[T|t]est','rose');","out> 'A rose is a rose'",
   "in> regex.split('A Test is a test','[e| ]');","out> ['A','T','st','is','a','t','st']",'in> toBoolean(0);','out> false',
   'in> toBoolean(1.0);','out> true',"in> toBoolean('true');",'out> true','in> toBoolean(3);',
   'Error 3 cannot be cast to boolean',"in> toInt('32');",'out> 32','in> toInt(3.0);','out> 3','in> toInt(3.1);',
   'Error 3.1 cannot be cast to int','in> toInt(false);','out> 0',"in> toReal('3.212');",'out> 3.212','in> toReal(true);',
   'out> 1','in> toReal(3);','out> 3.0','in> getOptions;','in> executor;','out> ''<#>\target\Win64\mnh_light_debug.exe''',
   'in> print("1\n2.0\n03.45");','1','2.0','03.45','out> void','in> print("1\n2.0\n03,45\t");',' 1',' 2.0','03,45','out> void',
   'in> print("1\tone\t|\n2.0\ttwo\t|\n03.45\tthree\t|");',' 1    one   |',' 2.0  two   |','03.45 three |','out> void',
   'in> print("1\vone\v|\n2.0\vtwo\v|\n03.45\vthree\v|");',' 1   one  |',' 2.0 two  |','03.45three|','out> void',
   "in> printf('%x is %d in hexadecimal form', 123, 123);",'7B is 123 in hexadecimal form','out> void',
   "in> printf('%{$0}x is %{$0}d in hexadecimal form', 123);",'7B is 123 in hexadecimal form','out> void',
   "in> printf('sin(%{$0}s)=%{sin($0)}4.4g', 1);",'sin(1)=0.8415','out> void','in> permutations([1, 1, 2]);',
   'out> [[1,2,1],[1,1,2],[2,1,1]].toSet','in> permutations([1..3]);',
   'out> [[1,3,2],[2,1,3],[2,3,1],[3,1,2],[1,2,3],[3,2,1]].toSet',"in> input :=[[1..10], random,'test', random(9)];",
   'in> serialized :=input.serialize;',"in> print(input.toString.byteLength,' > ', serialized.byteLength);",'227 > 104',
   'out> void','in> input==serialized.deserialize;','out> true','in> factorize(18447422338071909869);',
   'out> [2642257,2642287,2642291]','in> formatTabs("\v-2\n3\t4.3");',"out> ['  -2','3  4.3']",'in> typeOf(3);',"out> 'Int'",
   'in> typeOf([1..5, 7.5]);',"out> 'NumericList(6)'",'in> typeOf({$x^2+$y});',"out> 'Expression(2)'",
   'in> x :=transpose([1,[1, 2, 3],[1, 2]], 0);','in> x;','out> [[1,1,1],[0,2,2],[0,3,0]]','in> x.transpose(0);',
   'out> [[1,0,0],[1,2,3],[1,2,0]]','in> resetRandom(12157);','out> void','in> resetRandom;','out> void','in> intRandom(7);',
   'out> 1','in> intRandom(7, 10);','out> [2,2,3,0,0,3,2,2,6,5]','in> random;','out> 0.70794779062271118','in> random(3);',
   'out> [0.20965369045734406,0.45114782452583313,0.19202205538749695]',"in> note('Note that this is a note');",
   'Note Note that this is a note','out> void',"in> warn('Warning: I intend to say something important here');",
   'Warning Warning: I intend to say something important here','out> void','in> isScalar(1);','out> true',
   'in> isBoolean(false);','out> true','in> isBoolean(1);','out> false','in> isInt(false);','out> false','in> isInt(1);',
   'out> true','in> isInt(1.0);','out> false','in> isReal(false);','out> false','in> isReal(1);','out> false','in> isReal(1.0);',
   'out> true','in> isNumeric(false);','out> false','in> isNumeric(1);','out> true','in> isNumeric(1.0);','out> true',
   'in> isList([]);','out> true','in> isList([], 0);','out> true','in> isList([], 1);','out> false',"in> isList(['x'], 1);",
   'out> true',"in> isString('Test');",'out> true','in> isString(true);','out> false','in> isExpression(:: sin);','out> true',
   'in> isExpression(:: sin, 1);','out> true','in> isExpression(:: sin, 2);','out> false','in> digits(123);','out> [1,2,3]',
   'in> digits(123, 3);','out> [1,1,1,2,0]','in> arctan2(1, 1);','out> 0.78539816339744828',"in> charSet('abcba');",
   "out> ['a','b','c'].toSet","in> bytes(\"ö\").ord;",'out> [195,182]',"in> base64encode('Test');","out> 'VGVzdA=='",
   "in> base64decode('VGVzdA==');","out> 'Test'","in> base92encode('bla bla bla ');","out> ']En_)]En_)]En_)'",
   "in> base92decode('PgsC.?d@t^');","out> '12345'",'in> listSideEffects;',
   "out> ['input','output','sound','sleep','detaching','server','read package state','alter package state','alter context state','alter plot state','read file','write file','http','ipc','executing external']",
   "in> changeFileExt('file.extension','.newExtension');","out> 'file.newExtension'",
   "in> changeFileExt('file.2.extension','.newExtension');","out> 'file.2.newExtension'",'in> httpError;',
   'out> "HTTP/1.0 404\r\n"','in> isBooleanList([true, false]);','out> true','in> isBooleanList(true);','out> false',
   'in> isIntList([1..3]);','out> true','in> isIntList([1, 2.0]);','out> false','in> isRealList([1, 2, 3]);','out> false',
   'in> isRealList([1.0, 2.0, 3.0, Nan]);','out> true',"in> isStringList(['a'..'z']);",'out> true',
   'in> isNumericList([1, 2, 3]);','out> true','in> isNumericList([1.0, 2, 3, Inf]);','out> true','in> isVoid();','out> true',
   'in> isVoid(void);','out> true','in> isVoid(3);','out> false',"in> escapePascal('Test');",'out> "''Test''"',
   "in> escapeJava('Test');",'out> ''"Test"''',"in> extractFileNameOnly('/home/user/file.ext');","out> 'file'",
   "in> extractFileDirectory('/home/user/file.ext');","out> '/home/user'","in> extractFileName('/home/user/file.ext');",
   "out> 'file.ext'","in> extractFileExt('/home/user/file.ext');","out> '.ext'","in> extractPath('/index.html?x=0&y=3%2Ax');",
   "out> '/index.html'","in> extractParameters('/index.html?x=0&y=3%2Ax');","out> ['x' => 0,'y'=>'3*x'].toMap",
   "in> extractRawParameters('/index.html?x=0&y=3%2Ax');","out> 'x=0&y=3%2Ax'",
   "in> encodeRequest('127.0.0.1:3126','rest',[['user','anonymous'],['request','3*&7']].toMap);",
   "out> '127.0.0.1:3126/rest?user=anonymous&request=3%2A%267'","in> cross(['1'..'3'],['A'..'C']);",
   "out> [['1','A'],['1','B'],['1','C'],['2','A'],['2','B'],['2','C'],['3','A'],['3','B'],['3','C']]",'in> [1, 2, 1].toSet;',
   'out> [2,1].toSet','in> [1.2, 3.0].isRealCollection;','out> true','in> [1.2, 3.0].toSet.isRealCollection;','out> true',
   'in> [1.2, 3].isRealCollection;','out> false','in> [1.2, 3.0].isRealCollection(2);','out> true',
   'in> [1.2, 3.0].isRealCollection(3);','out> false','in> [true].isBooleanCollection;','out> true',
   'in> [true, false, true].toSet.isBooleanCollection(2);','out> true','in> [true, false, true].toSet.isBooleanSet;','out> true',
   'in> [1, 2, 3].isIntCollection;','out> true','in> [].isIntCollection;','out> true','in> [1.2, 3].isNumericCollection;',
   'out> true',"in> ['a','b'].toSet.isStringSet;",'out> true',"in> ['a','b'].isStringCollection;",'out> true',
   'in> [1, 2, 3].isIntSet;','out> false','in> [1, 2, 3].toSet.isIntSet;','out> true',
   "in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap;",'out> true',"in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(2);",'out> true',
   "in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(3);",'out> false',"in> [1,'a', false].isSet;",'out> false',
   "in> [1,'a', false].isCollection;",'out> true',"in> utf8ToAnsi(\"öµ\").bytes.ord;",'out> [246,181]',
   'in> chars[214].ansiToUtf8;',"out> \"Ö\"",'in> [1.2, 3.4].toSet.isRealSet;','out> true','in> toList(3);','out> [3]',
   'in> toList([2, 3, 6].toSet);','out> [3,2,6]','in> [1.2, 3.4].toSet.isNumericSet;','out> true',
   "in> [[1,'one'],[3,'three'],[5,'five']].toMap.getAll([1, 5, 6],['-','-','-']);","out> ['one','five','-']",
   'in> [1, 3, 5].getAll([0, 2])==[1, 3, 5].get([0, 2]);','out> true','in> [1..20].filter({$x mod 2<>0<>$x mod 3});',
   'out> [1,5,7,11,13,17,19]','in> rangeGenerator(1, 20).filter({$x mod 2<>0<>$x mod 3});',
   'out> rangeGenerator(1,20).filter({$x mod 2<>0<>$x mod 3})',"in> ['a'..'f'].map(:: upper);","out> ['A','B','C','D','E','F']",
   "in> ['a'..'f'].pMap(:: upper);","out> ['A','B','C','D','E','F']",'in> primeGenerator.head(10);',
   'out> [2,3,5,7,11,13,17,19,23,29]','in> [-1, 1,-1, 1,-2, 2].agg(head);','out> -1','in> [-1, 1,-1, 1,-2, 2].agg(trailing);',
   'out> 2','in> [-1, 1,-1, 1,-2, 2].agg(toSet);','out> [-1,-2,2,1].toSet','in> [-1, 1,-1, 1,-2, 2].agg(max);','out> 2',
   'in> [-1, 1,-1, 1,-2, 2].agg(min);','out> -2','in> [-1, 1,-1, 1,-2, 2].agg(&);',"out> '-11-11-22'",
   'in> [-1, 1,-1, 1,-2, 2].agg(*);','out> -4','in> [-1, 1,-1, 1,-2, 2].agg(+);','out> 0',
   'in> permutationIterator([3, 1, 2]).map(:: print).toList;','[1,2,3]','[1,3,2]','[2,1,3]','[2,3,1]','[3,1,2]','[3,2,1]',
   'out> []','in> rangeGenerator(1, 100).map({$x^2});','out> rangeGenerator(1,100).map({$x^2})',
   "in> mergeMaps([['A', 1],['B', 2]].toMap,[['A', 7],['C', 3]].toMap, ::+);","out> ['B' => 2,'C'=>3,'A'=>8].toMap",
   "in> try({deserialize('x')});",'out> void',"in> try({deserialize('x')}, :: print);",
   "[['el3_evalError','@?:3,6','Invalid literal encoding type 120']]",'out> void',"in> try({deserialize('x')}, 0);",'out> 0',
   "in> try({deserialize('x')},{warn($x.head.trailing)});",'Warning Invalid literal encoding type 120','out> void',
   "in> interpret('3+4');",'out> 7','in> shiftRight(7, 1);','out> 3','in> shiftRight(5,-2);','out> 20',
   'in> type FiniteRealList(L :List)->L.each(x,!x.isNan,!x.isInfinite, AND);','in> x :=[1, 5, 0.4, 1/7].toFiniteRealList;',
   'in> x;','out> [1,5,0.4,0.14285714285714285].toFiniteRealList','in> x.typeOf;',"out> 'FiniteRealList'",'in> x.toBuiltin;',
   'out> [1,5,0.4,0.14285714285714285]','in> x.toBuiltin.typeOf;',"out> 'NumericList(4)'",
   "in> interpret({print('Hello world')},[]);",'Error Cannot apply print because of side effect(s): [output]',
   'in> composeDigits([1, 0, 1], 2);','out> 5','in> composeDigits([1, 0, 2]);','out> 102','in> composeDigits([1, 0, 2], 10, 2);',
   'out> 1.02',"in> sandBoxExecute('f(x)->3*x+1; f(f(f(1)))',['alter package state']);",
   "out> [['echo_declaration','','f(x)->3*x+1;'],['echo_input','','f(f(f(1)));'],['echo_output','','40'],['exitCode','',0]]",
   "in> begin local x:=async({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   '1: true','start','2: end','out> void',
   "in> begin local x:=future({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   'start','1: false','2: end','out> void',"in> validateRegex('(3+.*');",'out> false',"in> validateRegex('\\(3+.*');",
   'out> true','in> [1..100].pFilter({$x mod 2=$x mod 3=$x mod 5});','out> [1,30,31,60,61,90,91]','in> pi;',
   'out> 3.141592653589793','in> isStatefulExpression(:: sin);','out> false','in> isStatefulExpression(future(:: sin,[3]));',
   'out> true','in> isStatelessExpression(:: sin);','out> true','in> isStatelessExpression(future(:: sin,[3]));','out> false',
   'in> isIteratable(future(:: sin,[3]));','out> false','in> isIteratable(primeGenerator);','out> true',
   'in> isIteratable([1..10]);','out> true','in> isIteratableExpression(primeGenerator);','out> true',
   'in> isIteratableExpression([1..10]);','out> false',
   "in> begin resetRandom; local gen:={begin local last:=0; save; last+=random; end}; print('gen.isIteratable= ', gen.isIteratable,'; ', gen.head(3)); gen:=gen.toIteratableExpression; print('gen.isIteratable= ', gen.isIteratable,'; ', gen.head(3)); end;",
   'gen.isIteratable= false; {begin local last:=0; save; last+=random; end}',
   'gen.isIteratable= true; [0.69890123605728149,1.5846346616744995,2.5055105686187744]','out> void',
   'in> toIteratableExpression(:: sqr);','Error Only nullary stateful expressions may be iteratable.',
   'in> toIteratableExpression({begin local i:=1; save; i+=i-1; end});','out> {begin local i:=1; save; i+=i-1; end}',
   'in> euklideanNorm([1, 2]);','out> 2.23606797749979','in> assert(1=1.0);','out> void',
   "in> assert('bla'.isInt,'Invalid integer given');",'Error Invalid integer given',
   "in> md5('Test input. Could be anything really.');",'out> 337964223705814058127798532806512273013',
   "in> sha256('Test input. Could be anything really.');",
   'out> 60429211283715320795241587111266756812669288936868807314606704811653259384943','in> hammingWeight(17213);','out> 8',
   'in> gcd(1231512, 143543);','out> 23',
   'in> powMod(2988348162058574136915891421498819466320163312926952423791023078876139, 2351399303373464486466122544523690094744975233415544072992656881240319, 10^40);',
   'out> 1527229998585248450016808958343740453059','in> randomGenerator(123).head(10);',
   'out> [0.88808047771453857,0.033595457673072815,0.07375691086053848,0.073728755116462708,0.4090341329574585,0.7116715908050537,0.46069467067718506,0.5966716408729553,0.8116149306297302,0.498393714427948]',
   'in> intRandomGenerator(123, 5).head(10);','out> [2,0,0,1,3,4,0,0,1,2]','in> isaacRandomGenerator(123, 5).head(10);',
   'out> [3,3,1,4,4,2,2,0,4,3]','in> modularInverse(3, 32);','out> 11','in> byteToChar(100);',"out> 'd'",
   'in> byteToChar([10, 12, 97, 45]);',"out> [#10,#12,'a','-']","in> systemSpecificFilename('..\\test/filename.txt');",
   'out> ''..\test\filename.txt''',"in> stringIterator(['a','b','c'], 1, 3).head(10);",
   "out> ['a','b','c','aa','ab','ac','ba','bb','bc','ca']",'in> vanDerCorputGenerator(2).head(10);',
   'out> [0.0,0.5,0.25,0.75,0.125,0.625,0.375,0.875,0.0625,0.5625]','in> primeGenerator.head(1000).trailing(5);',
   'out> [7879,7883,7901,7907,7919]','in> rangeGenerator(0, 5).head(10);','out> [0,1,2,3,4,5]',
   'in> rangeGenerator(100,-100).head(10);','out> [100,99,98,97,96,95,94,93,92,91]','in> divMod(10, 7);','out> [1,3]',
   "in> 'abba'.hasPrefix('ab');",'out> true',
   'in> isPrime(47531677974672740279381824573269878221106369761801704860769848227327108403647);','out> true','in> 3==3.0;',
   'out> false','in> [1, 2, 3]==[3, 1, 3];','out> false','in> 3=3.0;','out> true','in> {$x}=3;','out> {$x=3}',
   'in> [1, 2, 3]=[3, 1, 3];','out> [false,false,true]','in> 3<=3.0;','out> true','in> [1, 2, 3]<=[3, 1, 3];',
   'out> [true,false,true]','in> 3>=3.0;','out> true','in> [1, 2, 3]>=[3, 1, 3];','out> [false,true,true]','in> 3<3.0;',
   'out> false','in> [1, 2, 3]<[3, 1, 3];','out> [true,false,false]','in> 3>3.0;','out> false','in> [1, 2, 3]>[3, 1, 3];',
   'out> [false,true,false]','in> 3<>3.0;','out> false','in> [1, 2, 3]<>[3, 1, 3];','out> [true,true,false]',
   'in> true AND false;','out> false','in> true AND 3;','out> 3','in> false AND 3;','out> false','in> true and false;',
   'out> false','in> [true, false, true, false] and[true, true, false, false];','out> [true,false,false,false]','in> 7 and 252;',
   'out> 4','in> true OR false;','out> true','in> true OR 3;','out> true','in> false OR 3;','out> 3','in> true or false;',
   'out> true','in> [true, false, true, false] or[true, true, false, false];','out> [true,true,true,false]','in> 7 or 252;',
   'out> 255','in> true xor false;','out> true','in> [true, false, true, false] xor[true, true, false, false];',
   'out> [false,true,true,false]','in> 7 xor 252;','out> 251',"in> +'a';","out> 'a'",'in> -3;','out> -3',
   'in> -[1, 2.0, Inf, Nan];','out> [-1,-2.0,-Inf,Nan]','in> !true;','out> false','in> 3 in[1..5];','out> true',
   'in> 3.0 in[1..5];','out> false','in> 1|2;','out> [1,2]','in> [1]|[2];','out> [1,2]','in> [1]|2;','out> [1,2]',
   'in> [1]|[[2]];','out> [1,[2]]','in> [1]||2;','out> [1,2]','in> [1]||[2];','out> [1,[2]]','in> 10 div 3;','out> 3',
   'in> 10/3;','out> 3.3333333333333335','in> 10/5;','out> 2','in> 10.0/5;','out> 2.0','in> void orElse 42;','out> 42',
   'in> 3 orElse fail;','out> 3','in> 3-pi;','out> -0.14159265358979312','in> 32459378562983 mod 2342832;','out> 1139831',
   'in> 2*3;','out> 6','in> 2.0*3;','out> 6.0','in> 4+5;','out> 9',"in> 'a'+'b';","out> 'ab'",'in> 5^7;','out> 78125',
   'in> -3.5^3;','out> -42.875','in> 3&4;',"out> '34'",'in> isSubsetOf([1, 2, 3],[1, 2, 3]);','out> true',
   'in> isSubsetOf(1,[1, 2, 3]);','out> false','in> isSubsetOf([1],[1, 2, 3]);','out> true','in> isSubsetOf([1, 4],[1, 2, 3]);',
   'out> false'],
  'LOLinux'=>
  ['in> arity({3});','out> 0','in> arity({sin($x)/$x});','out> 1',
   "in> runScript(['name'=>'hello.mnh','source'=>[\"main->print('Hello world');\"],'side effects'=>['alter package state','output']].toMap).filter({$message.head=='printline'}).map(:: trailing);",
   "out> ['Hello world']",'in> arity({sin($x)/$y});','out> 2',"in> arity({printf('%s%s', $a,...)});",'out> 1',
   "in> toExpression('$x-$x^2+$x^3');",'out> {$x-$x^2+$x^3}',"in> toExpression('');",
   'Error The parsed expression appears to be empty','in> parameterNames({3});','out> []','in> parameterNames({sin($x)/$x});',
   "out> ['$x']","in> parameterNames({printf('%s%s', $a,...)});","out> ['$a']",'in> ord(3);','out> 3','in> ord(true);','out> 1',
   'in> ord(false);','out> 0',"in> ord('A');",'out> 65',"in> ord('abc');",'out> -1','in> ord(2.1);',
   'Error ord can only be applied to booleans, ints and strings',"in> softCast('A');","out> 'A'",'in> softCast(''"B"'');',
   "out> 'B'",'in> softCast(3);','out> 3',"in> softCast([1,'2','true',\"'TEXT'\",'1.5','2,6']);",
   "out> [1,2,true,'TEXT',1.5,'2,6']","in> toString('a');","out> 'a'",'in> toString(234);',"out> '234'",
   "in> toString([1, 2.6,'a', true,{$x}]);",'out> "[1,2.6,''a'',true,{$x}]"','in> abs(-0.92);','out> 0.92','in> abs(3);',
   'out> 3','in> abs({1+$x});','out> {abs(1+$x)}','in> arccos(-0.92);','out> 2.7388768120091316555','in> arccos(3);','out> Nan',
   'in> arccos({1+$x});','out> {arccos(1+$x)}','in> arcsin(-0.92);','out> -1.16808048521423503635','in> arcsin(3);','out> Nan',
   'in> arcsin({1+$x});','out> {arcsin(1+$x)}','in> tan(-0.92);','out> -1.31326369932024783656','in> tan(3);',
   'out> -0.14254654307427780529','in> tan({1+$x});','out> {tan(1+$x)}','in> tan(pi/2);','out> -3.6893488147419103232E19',
   'in> arctan(-0.92);','out> -0.74375558429885988575','in> arctan({$x});','out> {arctan($x)}','in> argMax(sin([0..10]));',
   'out> 8','in> argMax([1, 3, 3, 0, 2]);','out> 1','in> argMin(sin([0..10]));','out> 5','in> argMin([1, 3, 3, 0, 2]);','out> 3',
   'in> ceil(20/3);','out> 7','in> ceil([0..3]/3);','out> [0,1,1,1]','in> ceil([0..3]/3, 2);','out> [0,0.34,0.67,1]',
   'in> floor(20/3);','out> 6','in> floor([0..3]/3);','out> [0,0,0,1]','in> floor([0..3]/3, 2);','out> [0,0.33,0.66,1]',
   'in> round(20/3);','out> 7','in> round([0.5, 1.5, 2.5, 3.5]);','out> [0,2,2,4]','in> round([0..3]/3, 2);',
   'out> [0,0.33,0.67,1]','in> isInfinite(Nan);','out> false','in> isInfinite(+Inf);','out> true','in> isInfinite(-Inf);',
   'out> true','in> isInfinite([-3.4344, Nan,+Inf]);','out> [false,false,true]','in> isNan(Nan);','out> true','in> isNan(+Inf);',
   'out> false','in> isNan(-Inf);','out> false','in> isNan([-3.4344, Nan,+Inf]);','out> [false,true,false]','in> cos(-0.92);',
   'out> 0.60582015664346284178','in> cos(3);','out> -0.98999249660044545727','in> cos({1+$x});','out> {cos(1+$x)}',
   'in> exp(-0.92);','out> 0.39851904108451413621','in> exp(3);','out> 20.085536923187667923','in> exp({1+$x});',
   'out> {exp(1+$x)}','in> ln(-0.92);','out> Nan','in> ln(3);','out> 1.09861228866810969136','in> ln({1+$x});','out> {ln(1+$x)}',
   'in> ln(-0.92);','out> Nan','in> sin(3);','out> 0.1411200080598672221','in> sin({1+$x});','out> {sin(1+$x)}',
   'in> sqr(-0.92);','out> 0.8464','in> sqr(3);','out> 9','in> sqr({1+$x});','out> {sqr(1+$x)}','in> sqrt(-0.92);','out> Nan',
   'in> sqrt(3);','out> 1.73205080756887729357','in> sqrt({1+$x});','out> {sqrt(1+$x)}','in> isqrt(121);','out> [11,true]',
   'in> isqrt(255);','out> [15,false]','in> sign(-0.92);','out> -1','in> sign(3);','out> 1','in> sign({1+$x});',
   'out> {sign(1+$x)}',"in> max(['a'..'z']);","out> 'z'",'in> max([0..9]/2);','out> 4.5','in> max(true, false);','out> true',
   "in> min(['a'..'z']);","out> 'a'",'in> min([0..9]/2);','out> 0','in> min(true, false);','out> false',
   "in> copy('abcde', 1, 3);","out> 'bcd'","in> copy('abcde', 2);","out> 'cde'","in> escape('a');",'out> "''a''"',
   'in> escape(#9);',"out> '#9'",'in> group([1..10],[1..10] mod 3=0);','out> [false => [1,2,4,5,7,8,10],true=>[3,6,9]].toMap',
   'in> fail;','Error Fail','in> fail("Told you this wouldn''t work!");',"Error Told you this wouldn't work!",'in> hash(1);',
   'out> 2','in> hash([1..3]);','out> 299863',"in> hash('a');",'out> 283',
   "in> listBuiltin.filter({$s.matches('^mnh\\.')}).sort.trailing(10);",
   "out> ['mnh.listBuiltin','mnh.listSideEffects','mnh.mnhInfo','mnh.myPath','mnh.ord','mnh.parameterNames','mnh.runScript','mnh.sandBoxExecute','mnh.sleep','mnh.sleepUntil']",
   "in> group([[1,'a'],[2,'a'],[1,'b'],[4,'c'],[2,'a'],[2,'b']], 1, aggregator({[$x[0]+$y[0], $x[1]]}));",
   "out> ['b' => [3,'b'],'c'=>[4,'c'],'a'=>[5,'a']].toMap",'in> abs(3);','out> 3','in> abs(-3);','out> 3','in> abs([-2..2]/2);',
   'out> [1,0.5,0,0.5,1]',"in> chars('This is a test.');","out> ['T','h','i','s',' ','i','s',' ','a',' ','t','e','s','t','.']",
   'in> chars.get(100);',"out> 'd'","in> clean('+21/232/2116-11',['0'..'9'],' ');","out> ' 21 232 2116 11'",
   "in> join(['a','b','c']);","out> 'abc'","in> join([1..5],' ');","out> '1 2 3 4 5'","in> length(\"Test öäü\");",'out> 8',
   "in> byteLength(\"Test öäü\");",'out> 11',"in> length(['Text','AbC']);",'out> [4,3]',"in> lower('Test');","out> 'test'",
   "in> lower(['Text','AbC']);","out> ['text','abc']","in> upper('Test');","out> 'TEST'","in> upper(['Text','AbC']);",
   "out> ['TEXT','ABC']",'in> t :=[0..1000]*2*pi/1000;','in> plot(t, sin(t));','in> abs(3);','out> 3','in> abs(-5/7);',
   'out> 0.71428571428571430157','in> abs([-2..2]);','out> [2,1,0,1,2]',"in> chars('Test');","out> ['T','e','s','t']",
   "in> pos('o','Hello World');",'out> 4',"in> pos(',',['Hello','Test','1,2,3']);",'out> [Inf,Inf,1]',
   "in> pos(['a','b'],'cdb');",'out> [Inf,2]',"in> repeat('-', 10);","out> '----------'","in> replace('[[][]][]][][','[]','');",
   "out> ']['","in> replace('aba','b','bb');","out> 'abba'","in> replaceOne('[[][]][]][][','[]','');","out> '[[]][]][]['",
   "in> replaceOne('1:.-.; 2:.-.; 3:.-.','.',['a'..'e']);","out> '1:a-b; 2:c-d; 3:e-.'","in> split('1,2,3;4,5,6',',');",
   "out> ['1','2','3;4','5','6']","in> split('1,2,3;4,5,6',';');","out> ['1,2,3','4,5,6']","in> split('1,2,3;4,5,6',[';',',']);",
   "out> ['1','2','3','4','5','6']","in> tokenSplit('f(x)->x+1; //Stupid, but just an example...','mnh');",
   "out> ['f','(','x',')','->','x','+','1',';',' ','//Stupid, but just an example...']",'in> trim(" \tA B C\t ");',
   "out> 'A B C'",'in> trimLeft(" \tA B C\t ");','out> "A B C\t "','in> trimRight(" \tA B C\t ");','out> " \tA B C"',
   "in> unbrace('3');","out> '3'","in> unbrace('(3)');","out> '3'","in> unbrace('(3]');","out> '(3]'",'in> unbrace(''"3"'');',
   'out> ''"3"''',"in> chars('Testtext').elementFrequency;","out> ['T' => 1,'e'=>2,'s'=>1,'t'=>3,'x'=>1].toMap",
   'in> flatten([1,[2,[3, 4],[5]], 6]);','out> [1,2,3,4,5,6]',"in> head(['A'..'Z']);","out> 'A'","in> head(['A'..'Z'], 3);",
   "out> ['A','B','C']","in> ['A'..'Z'].toSet.head(3);","out> ['F','V','G']","in> tail(['A'..'Z']);",
   "out> ['B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']",
   "in> tail(['A'..'Z'], 3);",
   "out> ['D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']",
   'in> rangeGenerator(1, 10).tail(3);','out> [4,5,6,7,8,9,10]',"in> leading(['A'..'Z']);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y']",
   "in> leading(['A'..'Z'], 3);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W']",
   'in> rangeGenerator(1, 10).leading(3);','out> [1,2,3,4,5,6,7]',"in> trailing(['A'..'Z']);","out> 'Z'",
   "in> trailing(['A'..'Z'], 3);","out> ['X','Y','Z']","in> ['A'..'Z'].toSet.trailing(3);","out> ['T','E','U']",
   'in> rangeGenerator(1, 10).trailing(3);','out> [8,9,10]','in> minus([1..10]^2, 2*[0..50]);','out> [1,9,25,49,81].toSet',
   'in> sort(intRandom(10, 5));','out> [0,1,2,3,8]',"in> sort(['01','10','100','1','010'],{softCast($x)<=softCast($y)});",
   "out> ['01','1','10','010','100']",'in> sortPerm(random(10));','out> [8,3,2,1,5,6,9,0,7,4]',"in> sortPerm(['a'..'c'..'a']);",
   'out> [0,4,1,3,2]','in> intersect([0..1000]^2,[0..1000]^3);',
   'out> [1,0,4096,262144,64,46656,1000000,729,15625,117649,531441].toSet','in> union(1/[1..5], 2/[2..6]);',
   'out> [1,0.5,0.33333333333333331483,0.25,0.2000000000000000111,0.66666666666666662965,0.4000000000000000222].toSet',
   "in> deleteFile('plotDemo1.png');",'out> false',"in> get(['a'..'f'], 3);","out> 'd'","in> get(['a'..'f'],[3, 1, 2]);",
   "out> ['d','b','c']",'in> get([0..4],[2..6] mod 3=0);','out> [1,4]',"in> get([['A', 1],['B', 2],['C', 0]],'B');",'out> 2',
   'in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]], 1);','out> [2,5,8]','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[1, 0]);',
   'out> [[2,1],[5,4],[8,7]]','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[true, false, true]);','out> [[1,3],[4,6],[7,9]]',
   'in> indexOf([1..6]^2 mod 3=0);','out> [2,5]','in> reverseList([1..5]);','out> [5,4,3,2,1]','in> size([0.5, 0.1, 0.2]);',
   'out> 3',"in> toMap([['A', 1],['B', 2],['C', 0],['B', 4]]);","out> ['B' => 4,'C'=>0,'A'=>1].toMap",
   'in> trueCount(10<[0..10]^2<50);','out> 4','in> unique([3, 1, 2, 1, 4, 1, 5]);','out> [1,2,3,4,5]',"in> compress('Test');",
   "out> 'Test'","in> compress('Test').decompress;","out> 'Test'","in> compress('Testtext');","out> #2#248'e'#240'9N'",
   "in> compress('Testtext').decompress;","out> 'Testtext'","in> relativeFileName('~/folder/','~/other/example.txt');",
   "out> '../other/example.txt'",'in> primes(20);','out> [2,3,5,7,11,13,17,19]','in> subSets([1, 2, 1]);',
   'out> [[],[1],[1,1],[2],[2,1],[2,1,1]]',"in> diff('encode','decode');",
   "out> ['deletes' => 1,'modifies'=>0,'adds'=>1,'matches'=>5,'edit'=>[['+',-1,0],[' ',0,1],['-',1,1],[' ',2,2],[' ',3,3],[' ',4,4],[' ',5,5]]].toMap",
   "in> diffStats('encode','decode');","out> ['deletes' => 1,'modifies'=>0,'adds'=>1,'matches'=>5].toMap",
   "in> format('%s is a string, %3.3d is a number','X', 7);","out> 'X is a string, 007 is a number'","in> format('%6.3f', 3);",
   "out> ' 3.000'","in> format('%6.3e', 3);","out> '3.00E+000'","in> format('%6.3g', 3);","out> '     3'",
   "in> format('%6.6x', 1234);","out> '0004D2'","in> formatTime('mm.dd.yyyy', 43210);","out> '04.20.2018'",
   'in> formatTime(12424.245);',"out> '5-1-34 05:52:48'","in> isAscii('xyz');",'out> true',"in> isAscii('xyz'&chars[180]);",
   'out> false',"in> isAscii(\"Läuft\");",'out> false',"in> isUtf8('xyz');",'out> true',"in> isUtf8('xyz'&chars[180]);",
   'out> false',"in> isUtf8(\"Schräg\");",'out> true',"in> parseTime('yyyy-mm-dd hh:nn','2000-01-01 03:43');",
   'out> 36526.154861111113859',"in> reverseString('Test');","out> 'tseT'","in> regex.matches('This is a test','[T|t]est');",
   'out> true',"in> regex.matchComposite('This is a test','[T|t]est');","out> [['test',11,4]]",
   "in> regex.replace('A Test is a test','[T|t]est','rose');","out> 'A rose is a rose'",
   "in> regex.split('A Test is a test','[e| ]');","out> ['A','T','st','is','a','t','st']",'in> toBoolean(0);','out> false',
   'in> toBoolean(1.0);','out> true',"in> toBoolean('true');",'out> true','in> toBoolean(3);',
   'Error 3 cannot be cast to boolean',"in> toInt('32');",'out> 32','in> toInt(3.0);','out> 3','in> toInt(3.1);',
   'Error 3.1 cannot be cast to int','in> toInt(false);','out> 0',"in> toReal('3.212');",'out> 3.212','in> toReal(true);',
   'out> 1','in> toReal(3);','out> 3.0','in> getOptions;','in> executor;',"out> '<#>/target/Linux/mnh_light'",
   'in> print("1\n2.0\n03.45");','1','2.0','03.45','out> void','in> print("1\n2.0\n03,45\t");',' 1',' 2.0','03,45','out> void',
   'in> print("1\tone\t|\n2.0\ttwo\t|\n03.45\tthree\t|");',' 1    one   |',' 2.0  two   |','03.45 three |','out> void',
   'in> print("1\vone\v|\n2.0\vtwo\v|\n03.45\vthree\v|");',' 1   one  |',' 2.0 two  |','03.45three|','out> void',
   "in> printf('%x is %d in hexadecimal form', 123, 123);",'7B is 123 in hexadecimal form','out> void',
   "in> printf('%{$0}x is %{$0}d in hexadecimal form', 123);",'7B is 123 in hexadecimal form','out> void',
   "in> printf('sin(%{$0}s)=%{sin($0)}4.4g', 1);",'sin(1)=0.8415','out> void','in> permutations([1, 1, 2]);',
   'out> [[1,2,1],[1,1,2],[2,1,1]].toSet','in> permutations([1..3]);',
   'out> [[1,3,2],[2,1,3],[2,3,1],[3,1,2],[1,2,3],[3,2,1]].toSet',"in> input :=[[1..10], random,'test', random(9)];",
   'in> serialized :=input.serialize;',"in> print(input.toString.byteLength,' > ', serialized.byteLength);",'258 > 104',
   'out> void','in> input==serialized.deserialize;','out> true','in> factorize(18447422338071909869);',
   'out> [2642257,2642287,2642291]','in> formatTabs("\v-2\n3\t4.3");',"out> ['  -2','3  4.3']",'in> typeOf(3);',"out> 'Int'",
   'in> typeOf([1..5, 7.5]);',"out> 'NumericList(6)'",'in> typeOf({$x^2+$y});',"out> 'Expression(2)'",
   'in> x :=transpose([1,[1, 2, 3],[1, 2]], 0);','in> x;','out> [[1,1,1],[0,2,2],[0,3,0]]','in> x.transpose(0);',
   'out> [[1,0,0],[1,2,3],[1,2,0]]','in> resetRandom(12157);','out> void','in> resetRandom;','out> void','in> intRandom(7);',
   'out> 1','in> intRandom(7, 10);','out> [2,2,3,0,0,3,2,2,6,5]','in> random;','out> 0.70794778806157410144','in> random(3);',
   'out> [0.20965369325131177902,0.45114781009033322334,0.19202205142937600612]',"in> note('Note that this is a note');",
   'Note Note that this is a note','out> void',"in> warn('Warning: I intend to say something important here');",
   'Warning Warning: I intend to say something important here','out> void','in> isScalar(1);','out> true',
   'in> isBoolean(false);','out> true','in> isBoolean(1);','out> false','in> isInt(false);','out> false','in> isInt(1);',
   'out> true','in> isInt(1.0);','out> false','in> isReal(false);','out> false','in> isReal(1);','out> false','in> isReal(1.0);',
   'out> true','in> isNumeric(false);','out> false','in> isNumeric(1);','out> true','in> isNumeric(1.0);','out> true',
   'in> isList([]);','out> true','in> isList([], 0);','out> true','in> isList([], 1);','out> false',"in> isList(['x'], 1);",
   'out> true',"in> isString('Test');",'out> true','in> isString(true);','out> false','in> isExpression(:: sin);','out> true',
   'in> isExpression(:: sin, 1);','out> true','in> isExpression(:: sin, 2);','out> false','in> digits(123);','out> [1,2,3]',
   'in> digits(123, 3);','out> [1,1,1,2,0]','in> arctan2(1, 1);','out> 0.78539816339744830962',"in> charSet('abcba');",
   "out> ['a','b','c'].toSet","in> bytes(\"ö\").ord;",'out> [195,182]',"in> base64encode('Test');","out> 'VGVzdA=='",
   "in> base64decode('VGVzdA==');","out> 'Test'","in> base92encode('bla bla bla ');","out> ']En_)]En_)]En_)'",
   "in> base92decode('PgsC.?d@t^');","out> '12345'",'in> listSideEffects;',
   "out> ['input','output','sound','sleep','detaching','server','read package state','alter package state','alter context state','alter plot state','read file','write file','http','ipc','executing external']",
   "in> changeFileExt('file.extension','.newExtension');","out> 'file.newExtension'",
   "in> changeFileExt('file.2.extension','.newExtension');","out> 'file.2.newExtension'",'in> httpError;',
   'out> "HTTP/1.0 404\r\n"','in> isBooleanList([true, false]);','out> true','in> isBooleanList(true);','out> false',
   'in> isIntList([1..3]);','out> true','in> isIntList([1, 2.0]);','out> false','in> isRealList([1, 2, 3]);','out> false',
   'in> isRealList([1.0, 2.0, 3.0, Nan]);','out> true',"in> isStringList(['a'..'z']);",'out> true',
   'in> isNumericList([1, 2, 3]);','out> true','in> isNumericList([1.0, 2, 3, Inf]);','out> true','in> isVoid();','out> true',
   'in> isVoid(void);','out> true','in> isVoid(3);','out> false',"in> escapePascal('Test');",'out> "''Test''"',
   "in> escapeJava('Test');",'out> ''"Test"''',"in> extractFileNameOnly('/home/user/file.ext');","out> 'file'",
   "in> extractFileDirectory('/home/user/file.ext');","out> '/home/user'","in> extractFileName('/home/user/file.ext');",
   "out> 'file.ext'","in> extractFileExt('/home/user/file.ext');","out> '.ext'","in> extractPath('/index.html?x=0&y=3%2Ax');",
   "out> '/index.html'","in> extractParameters('/index.html?x=0&y=3%2Ax');","out> ['x' => 0,'y'=>'3*x'].toMap",
   "in> extractRawParameters('/index.html?x=0&y=3%2Ax');","out> 'x=0&y=3%2Ax'",
   "in> encodeRequest('127.0.0.1:3126','rest',[['user','anonymous'],['request','3*&7']].toMap);",
   "out> '127.0.0.1:3126/rest?user=anonymous&request=3%2A%267'","in> cross(['1'..'3'],['A'..'C']);",
   "out> [['1','A'],['1','B'],['1','C'],['2','A'],['2','B'],['2','C'],['3','A'],['3','B'],['3','C']]",'in> [1, 2, 1].toSet;',
   'out> [2,1].toSet','in> [1.2, 3.0].isRealCollection;','out> true','in> [1.2, 3.0].toSet.isRealCollection;','out> true',
   'in> [1.2, 3].isRealCollection;','out> false','in> [1.2, 3.0].isRealCollection(2);','out> true',
   'in> [1.2, 3.0].isRealCollection(3);','out> false','in> [true].isBooleanCollection;','out> true',
   'in> [true, false, true].toSet.isBooleanCollection(2);','out> true','in> [true, false, true].toSet.isBooleanSet;','out> true',
   'in> [1, 2, 3].isIntCollection;','out> true','in> [].isIntCollection;','out> true','in> [1.2, 3].isNumericCollection;',
   'out> true',"in> ['a','b'].toSet.isStringSet;",'out> true',"in> ['a','b'].isStringCollection;",'out> true',
   'in> [1, 2, 3].isIntSet;','out> false','in> [1, 2, 3].toSet.isIntSet;','out> true',
   "in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap;",'out> true',"in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(2);",'out> true',
   "in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(3);",'out> false',"in> [1,'a', false].isSet;",'out> false',
   "in> [1,'a', false].isCollection;",'out> true',"in> utf8ToAnsi(\"öµ\").bytes.ord;",'out> [246,181]',
   'in> chars[214].ansiToUtf8;',"out> \"Ö\"",'in> [1.2, 3.4].toSet.isRealSet;','out> true','in> toList(3);','out> [3]',
   'in> toList([2, 3, 6].toSet);','out> [3,2,6]','in> [1.2, 3.4].toSet.isNumericSet;','out> true',
   "in> [[1,'one'],[3,'three'],[5,'five']].toMap.getAll([1, 5, 6],['-','-','-']);","out> ['one','five','-']",
   'in> [1, 3, 5].getAll([0, 2])==[1, 3, 5].get([0, 2]);','out> true','in> [1..20].filter({$x mod 2<>0<>$x mod 3});',
   'out> [1,5,7,11,13,17,19]','in> rangeGenerator(1, 20).filter({$x mod 2<>0<>$x mod 3});',
   'out> rangeGenerator(1,20).filter({$x mod 2<>0<>$x mod 3})',"in> ['a'..'f'].map(:: upper);","out> ['A','B','C','D','E','F']",
   "in> ['a'..'f'].pMap(:: upper);","out> ['A','B','C','D','E','F']",'in> primeGenerator.head(10);',
   'out> [2,3,5,7,11,13,17,19,23,29]','in> [-1, 1,-1, 1,-2, 2].agg(head);','out> -1','in> [-1, 1,-1, 1,-2, 2].agg(trailing);',
   'out> 2','in> [-1, 1,-1, 1,-2, 2].agg(toSet);','out> [-1,-2,2,1].toSet','in> [-1, 1,-1, 1,-2, 2].agg(max);','out> 2',
   'in> [-1, 1,-1, 1,-2, 2].agg(min);','out> -2','in> [-1, 1,-1, 1,-2, 2].agg(&);',"out> '-11-11-22'",
   'in> [-1, 1,-1, 1,-2, 2].agg(*);','out> -4','in> [-1, 1,-1, 1,-2, 2].agg(+);','out> 0',
   'in> permutationIterator([3, 1, 2]).map(:: print).toList;','[1,2,3]','[1,3,2]','[2,1,3]','[2,3,1]','[3,1,2]','[3,2,1]',
   'out> []','in> rangeGenerator(1, 100).map({$x^2});','out> rangeGenerator(1,100).map({$x^2})',
   "in> mergeMaps([['A', 1],['B', 2]].toMap,[['A', 7],['C', 3]].toMap, ::+);","out> ['B' => 2,'C'=>3,'A'=>8].toMap",
   "in> try({deserialize('x')});",'out> void',"in> try({deserialize('x')}, :: print);",
   "[['el3_evalError','@?:3,6','Invalid literal encoding type 120']]",'out> void',"in> try({deserialize('x')}, 0);",'out> 0',
   "in> try({deserialize('x')},{warn($x.head.trailing)});",'Warning Invalid literal encoding type 120','out> void',
   "in> interpret('3+4');",'out> 7','in> shiftRight(7, 1);','out> 3','in> shiftRight(5,-2);','out> 20',
   'in> type FiniteRealList(L :List)->L.each(x,!x.isNan,!x.isInfinite, AND);','in> x :=[1, 5, 0.4, 1/7].toFiniteRealList;',
   'in> x;','out> [1,5,0.4,0.14285714285714284921].toFiniteRealList','in> x.typeOf;',"out> 'FiniteRealList'",'in> x.toBuiltin;',
   'out> [1,5,0.4,0.14285714285714284921]','in> x.toBuiltin.typeOf;',"out> 'NumericList(4)'",
   "in> interpret({print('Hello world')},[]);",'Error Cannot apply print because of side effect(s): [output]',
   'in> composeDigits([1, 0, 1], 2);','out> 5','in> composeDigits([1, 0, 2]);','out> 102','in> composeDigits([1, 0, 2], 10, 2);',
   'out> 1.02',"in> sandBoxExecute('f(x)->3*x+1; f(f(f(1)))',['alter package state']);",
   "out> [['echo_declaration','','f(x)->3*x+1;'],['echo_input','','f(f(f(1)));'],['echo_output','','40'],['exitCode','',0]]",
   "in> begin local x:=async({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   '1: true','start','2: end','out> void',
   "in> begin local x:=future({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   'start','1: false','2: end','out> void',"in> validateRegex('(3+.*');",'out> false',"in> validateRegex('\\(3+.*');",
   'out> true','in> [1..100].pFilter({$x mod 2=$x mod 3=$x mod 5});','out> [1,30,31,60,61,90,91]','in> pi;',
   'out> 3.1415926535897932385','in> isStatefulExpression(:: sin);','out> false','in> isStatefulExpression(future(:: sin,[3]));',
   'out> true','in> isStatelessExpression(:: sin);','out> true','in> isStatelessExpression(future(:: sin,[3]));','out> false',
   'in> isIteratable(future(:: sin,[3]));','out> false','in> isIteratable(primeGenerator);','out> true',
   'in> isIteratable([1..10]);','out> true','in> isIteratableExpression(primeGenerator);','out> true',
   'in> isIteratableExpression([1..10]);','out> false',
   "in> begin resetRandom; local gen:={begin local last:=0; save; last+=random; end}; print('gen.isIteratable= ', gen.isIteratable,'; ', gen.head(3)); gen:=gen.toIteratableExpression; print('gen.isIteratable= ', gen.isIteratable,'; ', gen.head(3)); end;",
   'gen.isIteratable= false; {begin local last:=0; save; last+=random; end}',
   'gen.isIteratable= true; [0.69890124513767659664,1.5846346444450318813,2.5055105253122746944]','out> void',
   'in> toIteratableExpression(:: sqr);','Error Only nullary stateful expressions may be iteratable.',
   'in> toIteratableExpression({begin local i:=1; save; i+=i-1; end});','out> {begin local i:=1; save; i+=i-1; end}',
   'in> euklideanNorm([1, 2]);','out> 2.236067977499789805','in> assert(1=1.0);','out> void',
   "in> assert('bla'.isInt,'Invalid integer given');",'Error Invalid integer given',
   "in> md5('Test input. Could be anything really.');",'out> 337964223705814058127798532806512273013',
   "in> sha256('Test input. Could be anything really.');",
   'out> 60429211283715320795241587111266756812669288936868807314606704811653259384943','in> hammingWeight(17213);','out> 8',
   'in> gcd(1231512, 143543);','out> 23',
   'in> powMod(2988348162058574136915891421498819466320163312926952423791023078876139, 2351399303373464486466122544523690094744975233415544072992656881240319, 10^40);',
   'out> 1527229998585248450016808958343740453059','in> randomGenerator(123).head(10);',
   'out> [0.8880804681684821844,0.033595459535717964172,0.073756912024691700935,0.073728758376091718673,0.40903412224724888801,0.7116715747397392988,0.46069467556662857532,0.5966716259717941284,0.81161490315571427345,0.4983937116339802742]',
   'in> intRandomGenerator(123, 5).head(10);','out> [2,0,0,1,3,4,0,0,1,2]','in> isaacRandomGenerator(123, 5).head(10);',
   'out> [3,3,1,4,4,2,2,0,4,3]','in> modularInverse(3, 32);','out> 11','in> byteToChar(100);',"out> 'd'",
   'in> byteToChar([10, 12, 97, 45]);',"out> [#10,#12,'a','-']","in> systemSpecificFilename('..\\test/filename.txt');",
   "out> '../test/filename.txt'","in> stringIterator(['a','b','c'], 1, 3).head(10);",
   "out> ['a','b','c','aa','ab','ac','ba','bb','bc','ca']",'in> vanDerCorputGenerator(2).head(10);',
   'out> [0.0,0.5,0.25,0.75,0.125,0.625,0.375,0.875,0.0625,0.5625]','in> primeGenerator.head(1000).trailing(5);',
   'out> [7879,7883,7901,7907,7919]','in> rangeGenerator(0, 5).head(10);','out> [0,1,2,3,4,5]',
   'in> rangeGenerator(100,-100).head(10);','out> [100,99,98,97,96,95,94,93,92,91]','in> divMod(10, 7);','out> [1,3]',
   "in> 'abba'.hasPrefix('ab');",'out> true',
   'in> isPrime(47531677974672740279381824573269878221106369761801704860769848227327108403647);','out> true','in> 3==3.0;',
   'out> false','in> [1, 2, 3]==[3, 1, 3];','out> false','in> 3=3.0;','out> true','in> {$x}=3;','out> {$x=3}',
   'in> [1, 2, 3]=[3, 1, 3];','out> [false,false,true]','in> 3<=3.0;','out> true','in> [1, 2, 3]<=[3, 1, 3];',
   'out> [true,false,true]','in> 3>=3.0;','out> true','in> [1, 2, 3]>=[3, 1, 3];','out> [false,true,true]','in> 3<3.0;',
   'out> false','in> [1, 2, 3]<[3, 1, 3];','out> [true,false,false]','in> 3>3.0;','out> false','in> [1, 2, 3]>[3, 1, 3];',
   'out> [false,true,false]','in> 3<>3.0;','out> false','in> [1, 2, 3]<>[3, 1, 3];','out> [true,true,false]',
   'in> true AND false;','out> false','in> true AND 3;','out> 3','in> false AND 3;','out> false','in> true and false;',
   'out> false','in> [true, false, true, false] and[true, true, false, false];','out> [true,false,false,false]','in> 7 and 252;',
   'out> 4','in> true OR false;','out> true','in> true OR 3;','out> true','in> false OR 3;','out> 3','in> true or false;',
   'out> true','in> [true, false, true, false] or[true, true, false, false];','out> [true,true,true,false]','in> 7 or 252;',
   'out> 255','in> true xor false;','out> true','in> [true, false, true, false] xor[true, true, false, false];',
   'out> [false,true,true,false]','in> 7 xor 252;','out> 251',"in> +'a';","out> 'a'",'in> -3;','out> -3',
   'in> -[1, 2.0, Inf, Nan];','out> [-1,-2.0,-Inf,Nan]','in> !true;','out> false','in> 3 in[1..5];','out> true',
   'in> 3.0 in[1..5];','out> false','in> 1|2;','out> [1,2]','in> [1]|[2];','out> [1,2]','in> [1]|2;','out> [1,2]',
   'in> [1]|[[2]];','out> [1,[2]]','in> [1]||2;','out> [1,2]','in> [1]||[2];','out> [1,[2]]','in> 10 div 3;','out> 3',
   'in> 10/3;','out> 3.3333333333333334813','in> 10/5;','out> 2','in> 10.0/5;','out> 2.0','in> void orElse 42;','out> 42',
   'in> 3 orElse fail;','out> 3','in> 3-pi;','out> -0.14159265358979323851','in> 32459378562983 mod 2342832;','out> 1139831',
   'in> 2*3;','out> 6','in> 2.0*3;','out> 6.0','in> 4+5;','out> 9',"in> 'a'+'b';","out> 'ab'",'in> 5^7;','out> 78125',
   'in> -3.5^3;','out> -42.875','in> 3&4;',"out> '34'",'in> isSubsetOf([1, 2, 3],[1, 2, 3]);','out> true',
   'in> isSubsetOf(1,[1, 2, 3]);','out> false','in> isSubsetOf([1],[1, 2, 3]);','out> true','in> isSubsetOf([1, 4],[1, 2, 3]);',
   'out> false'],
  'LOWin32'=>
  ['in> arity({3});','out> 0','in> arity({sin($x)/$x});','out> 1',
   "in> runScript(['name'=>'hello.mnh','source'=>[\"main->print('Hello world');\"],'side effects'=>['alter package state','output']].toMap).filter({$message.head=='printline'}).map(:: trailing);",
   "out> ['Hello world']",'in> arity({sin($x)/$y});','out> 2',"in> arity({printf('%s%s', $a,...)});",'out> 1',
   "in> toExpression('$x-$x^2+$x^3');",'out> {$x-$x^2+$x^3}',"in> toExpression('');",
   'Error The parsed expression appears to be empty','in> parameterNames({3});','out> []','in> parameterNames({sin($x)/$x});',
   "out> ['$x']","in> parameterNames({printf('%s%s', $a,...)});","out> ['$a']",'in> ord(3);','out> 3','in> ord(true);','out> 1',
   'in> ord(false);','out> 0',"in> ord('A');",'out> 65',"in> ord('abc');",'out> -1','in> ord(2.1);',
   'Error ord can only be applied to booleans, ints and strings',"in> softCast('A');","out> 'A'",'in> softCast(''"B"'');',
   "out> 'B'",'in> softCast(3);','out> 3',"in> softCast([1,'2','true',\"'TEXT'\",'1.5','2,6']);",
   "out> [1,2,true,'TEXT',1.5,'2,6']","in> toString('a');","out> 'a'",'in> toString(234);',"out> '234'",
   "in> toString([1, 2.6,'a', true,{$x}]);",'out> "[1,2.6,''a'',true,{$x}]"','in> abs(-0.92);','out> 0.92','in> abs(3);',
   'out> 3','in> abs({1+$x});','out> {abs(1+$x)}','in> arccos(-0.92);','out> 2.7388768120091316555','in> arccos(3);','out> Nan',
   'in> arccos({1+$x});','out> {arccos(1+$x)}','in> arcsin(-0.92);','out> -1.16808048521423503635','in> arcsin(3);','out> Nan',
   'in> arcsin({1+$x});','out> {arcsin(1+$x)}','in> tan(-0.92);','out> -1.31326369932024783656','in> tan(3);',
   'out> -0.14254654307427780529','in> tan({1+$x});','out> {tan(1+$x)}','in> tan(pi/2);','out> -3.6893488147419103232E19',
   'in> arctan(-0.92);','out> -0.74375558429885988575','in> arctan({$x});','out> {arctan($x)}','in> argMax(sin([0..10]));',
   'out> 8','in> argMax([1, 3, 3, 0, 2]);','out> 1','in> argMin(sin([0..10]));','out> 5','in> argMin([1, 3, 3, 0, 2]);','out> 3',
   'in> ceil(20/3);','out> 7','in> ceil([0..3]/3);','out> [0,1,1,1]','in> ceil([0..3]/3, 2);','out> [0,0.34,0.67,1]',
   'in> floor(20/3);','out> 6','in> floor([0..3]/3);','out> [0,0,0,1]','in> floor([0..3]/3, 2);','out> [0,0.33,0.66,1]',
   'in> round(20/3);','out> 7','in> round([0.5, 1.5, 2.5, 3.5]);','out> [0,2,2,4]','in> round([0..3]/3, 2);',
   'out> [0,0.33,0.67,1]','in> isInfinite(Nan);','out> false','in> isInfinite(+Inf);','out> true','in> isInfinite(-Inf);',
   'out> true','in> isInfinite([-3.4344, Nan,+Inf]);','out> [false,false,true]','in> isNan(Nan);','out> true','in> isNan(+Inf);',
   'out> false','in> isNan(-Inf);','out> false','in> isNan([-3.4344, Nan,+Inf]);','out> [false,true,false]','in> cos(-0.92);',
   'out> 0.60582015664346284178','in> cos(3);','out> -0.98999249660044545727','in> cos({1+$x});','out> {cos(1+$x)}',
   'in> exp(-0.92);','out> 0.39851904108451413621','in> exp(3);','out> 20.085536923187667923','in> exp({1+$x});',
   'out> {exp(1+$x)}','in> ln(-0.92);','out> Nan','in> ln(3);','out> 1.09861228866810969136','in> ln({1+$x});','out> {ln(1+$x)}',
   'in> ln(-0.92);','out> Nan','in> sin(3);','out> 0.1411200080598672221','in> sin({1+$x});','out> {sin(1+$x)}',
   'in> sqr(-0.92);','out> 0.8464','in> sqr(3);','out> 9','in> sqr({1+$x});','out> {sqr(1+$x)}','in> sqrt(-0.92);','out> Nan',
   'in> sqrt(3);','out> 1.73205080756887729357','in> sqrt({1+$x});','out> {sqrt(1+$x)}','in> isqrt(121);','out> [11,true]',
   'in> isqrt(255);','out> [15,false]','in> sign(-0.92);','out> -1','in> sign(3);','out> 1','in> sign({1+$x});',
   'out> {sign(1+$x)}',"in> max(['a'..'z']);","out> 'z'",'in> max([0..9]/2);','out> 4.5','in> max(true, false);','out> true',
   "in> min(['a'..'z']);","out> 'a'",'in> min([0..9]/2);','out> 0','in> min(true, false);','out> false',
   "in> copy('abcde', 1, 3);","out> 'bcd'","in> copy('abcde', 2);","out> 'cde'","in> escape('a');",'out> "''a''"',
   'in> escape(#9);',"out> '#9'",'in> group([1..10],[1..10] mod 3=0);','out> [false => [1,2,4,5,7,8,10],true=>[3,6,9]].toMap',
   'in> fail;','Error Fail','in> fail("Told you this wouldn''t work!");',"Error Told you this wouldn't work!",'in> hash(1);',
   'out> 2','in> hash([1..3]);','out> 299863',"in> hash('a');",'out> 283',
   "in> listBuiltin.filter({$s.matches('^mnh\\.')}).sort.trailing(10);",
   "out> ['mnh.listBuiltin','mnh.listSideEffects','mnh.mnhInfo','mnh.myPath','mnh.ord','mnh.parameterNames','mnh.runScript','mnh.sandBoxExecute','mnh.sleep','mnh.sleepUntil']",
   "in> group([[1,'a'],[2,'a'],[1,'b'],[4,'c'],[2,'a'],[2,'b']], 1, aggregator({[$x[0]+$y[0], $x[1]]}));",
   "out> ['b' => [3,'b'],'c'=>[4,'c'],'a'=>[5,'a']].toMap",'in> abs(3);','out> 3','in> abs(-3);','out> 3','in> abs([-2..2]/2);',
   'out> [1,0.5,0,0.5,1]',"in> chars('This is a test.');","out> ['T','h','i','s',' ','i','s',' ','a',' ','t','e','s','t','.']",
   'in> chars.get(100);',"out> 'd'","in> clean('+21/232/2116-11',['0'..'9'],' ');","out> ' 21 232 2116 11'",
   "in> join(['a','b','c']);","out> 'abc'","in> join([1..5],' ');","out> '1 2 3 4 5'","in> length(\"Test öäü\");",'out> 8',
   "in> byteLength(\"Test öäü\");",'out> 11',"in> length(['Text','AbC']);",'out> [4,3]',"in> lower('Test');","out> 'test'",
   "in> lower(['Text','AbC']);","out> ['text','abc']","in> upper('Test');","out> 'TEST'","in> upper(['Text','AbC']);",
   "out> ['TEXT','ABC']",'in> t :=[0..1000]*2*pi/1000;','in> plot(t, sin(t));','in> abs(3);','out> 3','in> abs(-5/7);',
   'out> 0.71428571428571428569','in> abs([-2..2]);','out> [2,1,0,1,2]',"in> chars('Test');","out> ['T','e','s','t']",
   "in> pos('o','Hello World');",'out> 4',"in> pos(',',['Hello','Test','1,2,3']);",'out> [Inf,Inf,1]',
   "in> pos(['a','b'],'cdb');",'out> [Inf,2]',"in> repeat('-', 10);","out> '----------'","in> replace('[[][]][]][][','[]','');",
   "out> ']['","in> replace('aba','b','bb');","out> 'abba'","in> replaceOne('[[][]][]][][','[]','');","out> '[[]][]][]['",
   "in> replaceOne('1:.-.; 2:.-.; 3:.-.','.',['a'..'e']);","out> '1:a-b; 2:c-d; 3:e-.'","in> split('1,2,3;4,5,6',',');",
   "out> ['1','2','3;4','5','6']","in> split('1,2,3;4,5,6',';');","out> ['1,2,3','4,5,6']","in> split('1,2,3;4,5,6',[';',',']);",
   "out> ['1','2','3','4','5','6']","in> tokenSplit('f(x)->x+1; //Stupid, but just an example...','mnh');",
   "out> ['f','(','x',')','->','x','+','1',';',' ','//Stupid, but just an example...']",'in> trim(" \tA B C\t ");',
   "out> 'A B C'",'in> trimLeft(" \tA B C\t ");','out> "A B C\t "','in> trimRight(" \tA B C\t ");','out> " \tA B C"',
   "in> unbrace('3');","out> '3'","in> unbrace('(3)');","out> '3'","in> unbrace('(3]');","out> '(3]'",'in> unbrace(''"3"'');',
   'out> ''"3"''',"in> chars('Testtext').elementFrequency;","out> ['T' => 1,'e'=>2,'s'=>1,'t'=>3,'x'=>1].toMap",
   'in> flatten([1,[2,[3, 4],[5]], 6]);','out> [1,2,3,4,5,6]',"in> head(['A'..'Z']);","out> 'A'","in> head(['A'..'Z'], 3);",
   "out> ['A','B','C']","in> ['A'..'Z'].toSet.head(3);","out> ['F','V','G']","in> tail(['A'..'Z']);",
   "out> ['B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']",
   "in> tail(['A'..'Z'], 3);",
   "out> ['D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']",
   'in> rangeGenerator(1, 10).tail(3);','out> [4,5,6,7,8,9,10]',"in> leading(['A'..'Z']);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y']",
   "in> leading(['A'..'Z'], 3);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W']",
   'in> rangeGenerator(1, 10).leading(3);','out> [1,2,3,4,5,6,7]',"in> trailing(['A'..'Z']);","out> 'Z'",
   "in> trailing(['A'..'Z'], 3);","out> ['X','Y','Z']","in> ['A'..'Z'].toSet.trailing(3);","out> ['T','E','U']",
   'in> rangeGenerator(1, 10).trailing(3);','out> [8,9,10]','in> minus([1..10]^2, 2*[0..50]);','out> [1,9,25,49,81].toSet',
   'in> sort(intRandom(10, 5));','out> [0,1,2,3,8]',"in> sort(['01','10','100','1','010'],{softCast($x)<=softCast($y)});",
   "out> ['01','1','10','010','100']",'in> sortPerm(random(10));','out> [8,3,2,1,5,6,9,0,7,4]',"in> sortPerm(['a'..'c'..'a']);",
   'out> [0,4,1,3,2]','in> intersect([0..1000]^2,[0..1000]^3);',
   'out> [1,0,4096,262144,64,46656,1000000,729,15625,117649,531441].toSet','in> union(1/[1..5], 2/[2..6]);',
   'out> [0.2,0.4,1,0.5,0.25,0.33333333333333333334,0.66666666666666666668].toSet',"in> deleteFile('plotDemo1.png');",
   'out> false',"in> get(['a'..'f'], 3);","out> 'd'","in> get(['a'..'f'],[3, 1, 2]);","out> ['d','b','c']",
   'in> get([0..4],[2..6] mod 3=0);','out> [1,4]',"in> get([['A', 1],['B', 2],['C', 0]],'B');",'out> 2',
   'in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]], 1);','out> [2,5,8]','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[1, 0]);',
   'out> [[2,1],[5,4],[8,7]]','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[true, false, true]);','out> [[1,3],[4,6],[7,9]]',
   'in> indexOf([1..6]^2 mod 3=0);','out> [2,5]','in> reverseList([1..5]);','out> [5,4,3,2,1]','in> size([0.5, 0.1, 0.2]);',
   'out> 3',"in> toMap([['A', 1],['B', 2],['C', 0],['B', 4]]);","out> ['B' => 4,'C'=>0,'A'=>1].toMap",
   'in> trueCount(10<[0..10]^2<50);','out> 4','in> unique([3, 1, 2, 1, 4, 1, 5]);','out> [1,2,3,4,5]',"in> compress('Test');",
   "out> 'Test'","in> compress('Test').decompress;","out> 'Test'","in> compress('Testtext');","out> #2#248'e'#240'9N'",
   "in> compress('Testtext').decompress;","out> 'Testtext'","in> relativeFileName('~/folder/','~/other/example.txt');",
   "out> '../other/example.txt'",'in> primes(20);','out> [2,3,5,7,11,13,17,19]','in> subSets([1, 2, 1]);',
   'out> [[],[1],[1,1],[2],[2,1],[2,1,1]]',"in> diff('encode','decode');",
   "out> ['deletes' => 1,'modifies'=>0,'adds'=>1,'matches'=>5,'edit'=>[['+',-1,0],[' ',0,1],['-',1,1],[' ',2,2],[' ',3,3],[' ',4,4],[' ',5,5]]].toMap",
   "in> diffStats('encode','decode');","out> ['deletes' => 1,'modifies'=>0,'adds'=>1,'matches'=>5].toMap",
   "in> format('%s is a string, %3.3d is a number','X', 7);","out> 'X is a string, 007 is a number'","in> format('%6.3f', 3);",
   "out> ' 3.000'","in> format('%6.3e', 3);","out> '3.00E+000'","in> format('%6.3g', 3);","out> '     3'",
   "in> format('%6.6x', 1234);","out> '0004D2'","in> formatTime('mm.dd.yyyy', 43210);","out> '04.20.2018'",
   'in> formatTime(12424.245);',"out> '05.01.1934 05:52:48'","in> isAscii('xyz');",'out> true',"in> isAscii('xyz'&chars[180]);",
   'out> false',"in> isAscii(\"Läuft\");",'out> false',"in> isUtf8('xyz');",'out> true',"in> isUtf8('xyz'&chars[180]);",
   'out> false',"in> isUtf8(\"Schräg\");",'out> true',"in> parseTime('yyyy-mm-dd hh:nn','2000-01-01 03:43');",
   'out> 36526.154861111113859',"in> reverseString('Test');","out> 'tseT'","in> regex.matches('This is a test','[T|t]est');",
   'out> true',"in> regex.matchComposite('This is a test','[T|t]est');","out> [['test',11,4]]",
   "in> regex.replace('A Test is a test','[T|t]est','rose');","out> 'A rose is a rose'",
   "in> regex.split('A Test is a test','[e| ]');","out> ['A','T','st','is','a','t','st']",'in> toBoolean(0);','out> false',
   'in> toBoolean(1.0);','out> true',"in> toBoolean('true');",'out> true','in> toBoolean(3);',
   'Error 3 cannot be cast to boolean',"in> toInt('32');",'out> 32','in> toInt(3.0);','out> 3','in> toInt(3.1);',
   'Error 3.1 cannot be cast to int','in> toInt(false);','out> 0',"in> toReal('3.212');",'out> 3.212','in> toReal(true);',
   'out> 1','in> toReal(3);','out> 3.0','in> getOptions;','in> executor;','out> ''<#>\target\Win32\mnh_light.exe''',
   'in> print("1\n2.0\n03.45");','1','2.0','03.45','out> void','in> print("1\n2.0\n03,45\t");',' 1',' 2.0','03,45','out> void',
   'in> print("1\tone\t|\n2.0\ttwo\t|\n03.45\tthree\t|");',' 1    one   |',' 2.0  two   |','03.45 three |','out> void',
   'in> print("1\vone\v|\n2.0\vtwo\v|\n03.45\vthree\v|");',' 1   one  |',' 2.0 two  |','03.45three|','out> void',
   "in> printf('%x is %d in hexadecimal form', 123, 123);",'7B is 123 in hexadecimal form','out> void',
   "in> printf('%{$0}x is %{$0}d in hexadecimal form', 123);",'7B is 123 in hexadecimal form','out> void',
   "in> printf('sin(%{$0}s)=%{sin($0)}4.4g', 1);",'sin(1)=0.8415','out> void','in> permutations([1, 1, 2]);',
   'out> [[1,2,1],[1,1,2],[2,1,1]].toSet','in> permutations([1..3]);',
   'out> [[1,3,2],[2,1,3],[2,3,1],[3,1,2],[1,2,3],[3,2,1]].toSet',"in> input :=[[1..10], random,'test', random(9)];",
   'in> serialized :=input.serialize;',"in> print(input.toString.byteLength,' > ', serialized.byteLength);",'258 > 104',
   'out> void','in> input==serialized.deserialize;','out> true','in> factorize(18447422338071909869);',
   'out> [2642257,2642287,2642291]','in> formatTabs("\v-2\n3\t4.3");',"out> ['  -2','3  4.3']",'in> typeOf(3);',"out> 'Int'",
   'in> typeOf([1..5, 7.5]);',"out> 'NumericList(6)'",'in> typeOf({$x^2+$y});',"out> 'Expression(2)'",
   'in> x :=transpose([1,[1, 2, 3],[1, 2]], 0);','in> x;','out> [[1,1,1],[0,2,2],[0,3,0]]','in> x.transpose(0);',
   'out> [[1,0,0],[1,2,3],[1,2,0]]','in> resetRandom(12157);','out> void','in> resetRandom;','out> void','in> intRandom(7);',
   'out> 1','in> intRandom(7, 10);','out> [2,2,3,0,0,3,2,2,6,5]','in> random;','out> 0.70794778806157410144','in> random(3);',
   'out> [0.20965369325131177902,0.45114781009033322334,0.19202205142937600612]',"in> note('Note that this is a note');",
   'Note Note that this is a note','out> void',"in> warn('Warning: I intend to say something important here');",
   'Warning Warning: I intend to say something important here','out> void','in> isScalar(1);','out> true',
   'in> isBoolean(false);','out> true','in> isBoolean(1);','out> false','in> isInt(false);','out> false','in> isInt(1);',
   'out> true','in> isInt(1.0);','out> false','in> isReal(false);','out> false','in> isReal(1);','out> false','in> isReal(1.0);',
   'out> true','in> isNumeric(false);','out> false','in> isNumeric(1);','out> true','in> isNumeric(1.0);','out> true',
   'in> isList([]);','out> true','in> isList([], 0);','out> true','in> isList([], 1);','out> false',"in> isList(['x'], 1);",
   'out> true',"in> isString('Test');",'out> true','in> isString(true);','out> false','in> isExpression(:: sin);','out> true',
   'in> isExpression(:: sin, 1);','out> true','in> isExpression(:: sin, 2);','out> false','in> digits(123);','out> [1,2,3]',
   'in> digits(123, 3);','out> [1,1,1,2,0]','in> arctan2(1, 1);','out> 0.78539816339744830962',"in> charSet('abcba');",
   "out> ['a','b','c'].toSet","in> bytes(\"ö\").ord;",'out> [195,182]',"in> base64encode('Test');","out> 'VGVzdA=='",
   "in> base64decode('VGVzdA==');","out> 'Test'","in> base92encode('bla bla bla ');","out> ']En_)]En_)]En_)'",
   "in> base92decode('PgsC.?d@t^');","out> '12345'",'in> listSideEffects;',
   "out> ['input','output','sound','sleep','detaching','server','read package state','alter package state','alter context state','alter plot state','read file','write file','http','ipc','executing external']",
   "in> changeFileExt('file.extension','.newExtension');","out> 'file.newExtension'",
   "in> changeFileExt('file.2.extension','.newExtension');","out> 'file.2.newExtension'",'in> httpError;',
   'out> "HTTP/1.0 404\r\n"','in> isBooleanList([true, false]);','out> true','in> isBooleanList(true);','out> false',
   'in> isIntList([1..3]);','out> true','in> isIntList([1, 2.0]);','out> false','in> isRealList([1, 2, 3]);','out> false',
   'in> isRealList([1.0, 2.0, 3.0, Nan]);','out> true',"in> isStringList(['a'..'z']);",'out> true',
   'in> isNumericList([1, 2, 3]);','out> true','in> isNumericList([1.0, 2, 3, Inf]);','out> true','in> isVoid();','out> true',
   'in> isVoid(void);','out> true','in> isVoid(3);','out> false',"in> escapePascal('Test');",'out> "''Test''"',
   "in> escapeJava('Test');",'out> ''"Test"''',"in> extractFileNameOnly('/home/user/file.ext');","out> 'file'",
   "in> extractFileDirectory('/home/user/file.ext');","out> '/home/user'","in> extractFileName('/home/user/file.ext');",
   "out> 'file.ext'","in> extractFileExt('/home/user/file.ext');","out> '.ext'","in> extractPath('/index.html?x=0&y=3%2Ax');",
   "out> '/index.html'","in> extractParameters('/index.html?x=0&y=3%2Ax');","out> ['x' => 0,'y'=>'3*x'].toMap",
   "in> extractRawParameters('/index.html?x=0&y=3%2Ax');","out> 'x=0&y=3%2Ax'",
   "in> encodeRequest('127.0.0.1:3126','rest',[['user','anonymous'],['request','3*&7']].toMap);",
   "out> '127.0.0.1:3126/rest?user=anonymous&request=3%2A%267'","in> cross(['1'..'3'],['A'..'C']);",
   "out> [['1','A'],['1','B'],['1','C'],['2','A'],['2','B'],['2','C'],['3','A'],['3','B'],['3','C']]",'in> [1, 2, 1].toSet;',
   'out> [2,1].toSet','in> [1.2, 3.0].isRealCollection;','out> true','in> [1.2, 3.0].toSet.isRealCollection;','out> true',
   'in> [1.2, 3].isRealCollection;','out> false','in> [1.2, 3.0].isRealCollection(2);','out> true',
   'in> [1.2, 3.0].isRealCollection(3);','out> false','in> [true].isBooleanCollection;','out> true',
   'in> [true, false, true].toSet.isBooleanCollection(2);','out> true','in> [true, false, true].toSet.isBooleanSet;','out> true',
   'in> [1, 2, 3].isIntCollection;','out> true','in> [].isIntCollection;','out> true','in> [1.2, 3].isNumericCollection;',
   'out> true',"in> ['a','b'].toSet.isStringSet;",'out> true',"in> ['a','b'].isStringCollection;",'out> true',
   'in> [1, 2, 3].isIntSet;','out> false','in> [1, 2, 3].toSet.isIntSet;','out> true',
   "in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap;",'out> true',"in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(2);",'out> true',
   "in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(3);",'out> false',"in> [1,'a', false].isSet;",'out> false',
   "in> [1,'a', false].isCollection;",'out> true',"in> utf8ToAnsi(\"öµ\").bytes.ord;",'out> [246,181]',
   'in> chars[214].ansiToUtf8;',"out> \"Ö\"",'in> [1.2, 3.4].toSet.isRealSet;','out> true','in> toList(3);','out> [3]',
   'in> toList([2, 3, 6].toSet);','out> [3,2,6]','in> [1.2, 3.4].toSet.isNumericSet;','out> true',
   "in> [[1,'one'],[3,'three'],[5,'five']].toMap.getAll([1, 5, 6],['-','-','-']);","out> ['one','five','-']",
   'in> [1, 3, 5].getAll([0, 2])==[1, 3, 5].get([0, 2]);','out> true','in> [1..20].filter({$x mod 2<>0<>$x mod 3});',
   'out> [1,5,7,11,13,17,19]','in> rangeGenerator(1, 20).filter({$x mod 2<>0<>$x mod 3});',
   'out> rangeGenerator(1,20).filter({$x mod 2<>0<>$x mod 3})',"in> ['a'..'f'].map(:: upper);","out> ['A','B','C','D','E','F']",
   "in> ['a'..'f'].pMap(:: upper);","out> ['A','B','C','D','E','F']",'in> primeGenerator.head(10);',
   'out> [2,3,5,7,11,13,17,19,23,29]','in> [-1, 1,-1, 1,-2, 2].agg(head);','out> -1','in> [-1, 1,-1, 1,-2, 2].agg(trailing);',
   'out> 2','in> [-1, 1,-1, 1,-2, 2].agg(toSet);','out> [-1,-2,2,1].toSet','in> [-1, 1,-1, 1,-2, 2].agg(max);','out> 2',
   'in> [-1, 1,-1, 1,-2, 2].agg(min);','out> -2','in> [-1, 1,-1, 1,-2, 2].agg(&);',"out> '-11-11-22'",
   'in> [-1, 1,-1, 1,-2, 2].agg(*);','out> -4','in> [-1, 1,-1, 1,-2, 2].agg(+);','out> 0',
   'in> permutationIterator([3, 1, 2]).map(:: print).toList;','[1,2,3]','[1,3,2]','[2,1,3]','[2,3,1]','[3,1,2]','[3,2,1]',
   'out> []','in> rangeGenerator(1, 100).map({$x^2});','out> rangeGenerator(1,100).map({$x^2})',
   "in> mergeMaps([['A', 1],['B', 2]].toMap,[['A', 7],['C', 3]].toMap, ::+);","out> ['B' => 2,'C'=>3,'A'=>8].toMap",
   "in> try({deserialize('x')});",'out> void',"in> try({deserialize('x')}, :: print);",
   "[['el3_evalError','@?:3,6','Invalid literal encoding type 120']]",'out> void',"in> try({deserialize('x')}, 0);",'out> 0',
   "in> try({deserialize('x')},{warn($x.head.trailing)});",'Warning Invalid literal encoding type 120','out> void',
   "in> interpret('3+4');",'out> 7','in> shiftRight(7, 1);','out> 3','in> shiftRight(5,-2);','out> 20',
   'in> type FiniteRealList(L :List)->L.each(x,!x.isNan,!x.isInfinite, AND);','in> x :=[1, 5, 0.4, 1/7].toFiniteRealList;',
   'in> x;','out> [1,5,0.4,0.14285714285714285714].toFiniteRealList','in> x.typeOf;',"out> 'FiniteRealList'",'in> x.toBuiltin;',
   'out> [1,5,0.4,0.14285714285714285714]','in> x.toBuiltin.typeOf;',"out> 'NumericList(4)'",
   "in> interpret({print('Hello world')},[]);",'Error Cannot apply print because of side effect(s): [output]',
   'in> composeDigits([1, 0, 1], 2);','out> 5','in> composeDigits([1, 0, 2]);','out> 102','in> composeDigits([1, 0, 2], 10, 2);',
   'out> 1.02',"in> sandBoxExecute('f(x)->3*x+1; f(f(f(1)))',['alter package state']);",
   "out> [['echo_declaration','','f(x)->3*x+1;'],['echo_input','','f(f(f(1)));'],['echo_output','','40'],['exitCode','',0]]",
   "in> begin local x:=async({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   '1: true','start','2: end','out> void',
   "in> begin local x:=future({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   'start','1: false','2: end','out> void',"in> validateRegex('(3+.*');",'out> false',"in> validateRegex('\\(3+.*');",
   'out> true','in> [1..100].pFilter({$x mod 2=$x mod 3=$x mod 5});','out> [1,30,31,60,61,90,91]','in> pi;',
   'out> 3.1415926535897932385','in> isStatefulExpression(:: sin);','out> false','in> isStatefulExpression(future(:: sin,[3]));',
   'out> true','in> isStatelessExpression(:: sin);','out> true','in> isStatelessExpression(future(:: sin,[3]));','out> false',
   'in> isIteratable(future(:: sin,[3]));','out> false','in> isIteratable(primeGenerator);','out> true',
   'in> isIteratable([1..10]);','out> true','in> isIteratableExpression(primeGenerator);','out> true',
   'in> isIteratableExpression([1..10]);','out> false',
   "in> begin resetRandom; local gen:={begin local last:=0; save; last+=random; end}; print('gen.isIteratable= ', gen.isIteratable,'; ', gen.head(3)); gen:=gen.toIteratableExpression; print('gen.isIteratable= ', gen.isIteratable,'; ', gen.head(3)); end;",
   'gen.isIteratable= false; {begin local last:=0; save; last+=random; end}',
   'gen.isIteratable= true; [0.69890124513767659664,1.5846346444450318813,2.5055105253122746944]','out> void',
   'in> toIteratableExpression(:: sqr);','Error Only nullary stateful expressions may be iteratable.',
   'in> toIteratableExpression({begin local i:=1; save; i+=i-1; end});','out> {begin local i:=1; save; i+=i-1; end}',
   'in> euklideanNorm([1, 2]);','out> 2.2360679774997896964','in> assert(1=1.0);','out> void',
   "in> assert('bla'.isInt,'Invalid integer given');",'Error Invalid integer given',
   "in> md5('Test input. Could be anything really.');",'out> 337964223705814058127798532806512273013',
   "in> sha256('Test input. Could be anything really.');",
   'out> 60429211283715320795241587111266756812669288936868807314606704811653259384943','in> hammingWeight(17213);','out> 8',
   'in> gcd(1231512, 143543);','out> 23',
   'in> powMod(2988348162058574136915891421498819466320163312926952423791023078876139, 2351399303373464486466122544523690094744975233415544072992656881240319, 10^40);',
   'out> 1527229998585248450016808958343740453059','in> randomGenerator(123).head(10);',
   'out> [0.8880804681684821844,0.033595459535717964172,0.073756912024691700935,0.073728758376091718673,0.40903412224724888801,0.7116715747397392988,0.46069467556662857532,0.5966716259717941284,0.81161490315571427345,0.4983937116339802742]',
   'in> intRandomGenerator(123, 5).head(10);','out> [2,0,0,1,3,4,0,0,1,2]','in> isaacRandomGenerator(123, 5).head(10);',
   'out> [3,3,1,4,4,2,2,0,4,3]','in> modularInverse(3, 32);','out> 11','in> byteToChar(100);',"out> 'd'",
   'in> byteToChar([10, 12, 97, 45]);',"out> [#10,#12,'a','-']","in> systemSpecificFilename('..\\test/filename.txt');",
   'out> ''..\test\filename.txt''',"in> stringIterator(['a','b','c'], 1, 3).head(10);",
   "out> ['a','b','c','aa','ab','ac','ba','bb','bc','ca']",'in> vanDerCorputGenerator(2).head(10);',
   'out> [0.0,0.5,0.25,0.75,0.125,0.625,0.375,0.875,0.0625,0.5625]','in> primeGenerator.head(1000).trailing(5);',
   'out> [7879,7883,7901,7907,7919]','in> rangeGenerator(0, 5).head(10);','out> [0,1,2,3,4,5]',
   'in> rangeGenerator(100,-100).head(10);','out> [100,99,98,97,96,95,94,93,92,91]','in> divMod(10, 7);','out> [1,3]',
   "in> 'abba'.hasPrefix('ab');",'out> true',
   'in> isPrime(47531677974672740279381824573269878221106369761801704860769848227327108403647);','out> true','in> 3==3.0;',
   'out> false','in> [1, 2, 3]==[3, 1, 3];','out> false','in> 3=3.0;','out> true','in> {$x}=3;','out> {$x=3}',
   'in> [1, 2, 3]=[3, 1, 3];','out> [false,false,true]','in> 3<=3.0;','out> true','in> [1, 2, 3]<=[3, 1, 3];',
   'out> [true,false,true]','in> 3>=3.0;','out> true','in> [1, 2, 3]>=[3, 1, 3];','out> [false,true,true]','in> 3<3.0;',
   'out> false','in> [1, 2, 3]<[3, 1, 3];','out> [true,false,false]','in> 3>3.0;','out> false','in> [1, 2, 3]>[3, 1, 3];',
   'out> [false,true,false]','in> 3<>3.0;','out> false','in> [1, 2, 3]<>[3, 1, 3];','out> [true,true,false]',
   'in> true AND false;','out> false','in> true AND 3;','out> 3','in> false AND 3;','out> false','in> true and false;',
   'out> false','in> [true, false, true, false] and[true, true, false, false];','out> [true,false,false,false]','in> 7 and 252;',
   'out> 4','in> true OR false;','out> true','in> true OR 3;','out> true','in> false OR 3;','out> 3','in> true or false;',
   'out> true','in> [true, false, true, false] or[true, true, false, false];','out> [true,true,true,false]','in> 7 or 252;',
   'out> 255','in> true xor false;','out> true','in> [true, false, true, false] xor[true, true, false, false];',
   'out> [false,true,true,false]','in> 7 xor 252;','out> 251',"in> +'a';","out> 'a'",'in> -3;','out> -3',
   'in> -[1, 2.0, Inf, Nan];','out> [-1,-2.0,-Inf,Nan]','in> !true;','out> false','in> 3 in[1..5];','out> true',
   'in> 3.0 in[1..5];','out> false','in> 1|2;','out> [1,2]','in> [1]|[2];','out> [1,2]','in> [1]|2;','out> [1,2]',
   'in> [1]|[[2]];','out> [1,[2]]','in> [1]||2;','out> [1,2]','in> [1]||[2];','out> [1,[2]]','in> 10 div 3;','out> 3',
   'in> 10/3;','out> 3.3333333333333333332','in> 10/5;','out> 2','in> 10.0/5;','out> 2.0','in> void orElse 42;','out> 42',
   'in> 3 orElse fail;','out> 3','in> 3-pi;','out> -0.14159265358979323851','in> 32459378562983 mod 2342832;','out> 1139831',
   'in> 2*3;','out> 6','in> 2.0*3;','out> 6.0','in> 4+5;','out> 9',"in> 'a'+'b';","out> 'ab'",'in> 5^7;','out> 78125',
   'in> -3.5^3;','out> -42.875','in> 3&4;',"out> '34'",'in> isSubsetOf([1, 2, 3],[1, 2, 3]);','out> true',
   'in> isSubsetOf(1,[1, 2, 3]);','out> false','in> isSubsetOf([1],[1, 2, 3]);','out> true','in> isSubsetOf([1, 4],[1, 2, 3]);',
   'out> false'],
  'LOWin64'=>
  ['in> arity({3});','out> 0','in> arity({sin($x)/$x});','out> 1',
   "in> runScript(['name'=>'hello.mnh','source'=>[\"main->print('Hello world');\"],'side effects'=>['alter package state','output']].toMap).filter({$message.head=='printline'}).map(:: trailing);",
   "out> ['Hello world']",'in> arity({sin($x)/$y});','out> 2',"in> arity({printf('%s%s', $a,...)});",'out> 1',
   "in> toExpression('$x-$x^2+$x^3');",'out> {$x-$x^2+$x^3}',"in> toExpression('');",
   'Error The parsed expression appears to be empty','in> parameterNames({3});','out> []','in> parameterNames({sin($x)/$x});',
   "out> ['$x']","in> parameterNames({printf('%s%s', $a,...)});","out> ['$a']",'in> ord(3);','out> 3','in> ord(true);','out> 1',
   'in> ord(false);','out> 0',"in> ord('A');",'out> 65',"in> ord('abc');",'out> -1','in> ord(2.1);',
   'Error ord can only be applied to booleans, ints and strings',"in> softCast('A');","out> 'A'",'in> softCast(''"B"'');',
   "out> 'B'",'in> softCast(3);','out> 3',"in> softCast([1,'2','true',\"'TEXT'\",'1.5','2,6']);",
   "out> [1,2,true,'TEXT',1.5,'2,6']","in> toString('a');","out> 'a'",'in> toString(234);',"out> '234'",
   "in> toString([1, 2.6,'a', true,{$x}]);",'out> "[1,2.6,''a'',true,{$x}]"','in> abs(-0.92);','out> 0.92','in> abs(3);',
   'out> 3','in> abs({1+$x});','out> {abs(1+$x)}','in> arccos(-0.92);','out> 2.7388768120091318','in> arccos(3);','out> Nan',
   'in> arccos({1+$x});','out> {arccos(1+$x)}','in> arcsin(-0.92);','out> -1.1680804852142352','in> arcsin(3);','out> Nan',
   'in> arcsin({1+$x});','out> {arcsin(1+$x)}','in> tan(-0.92);','out> -1.313263699320248','in> tan(3);',
   'out> -0.1425465430742778','in> tan({1+$x});','out> {tan(1+$x)}','in> tan(pi/2);','out> 1.6331778728383844E16',
   'in> arctan(-0.92);','out> -0.7437555842988599','in> arctan({$x});','out> {arctan($x)}','in> argMax(sin([0..10]));','out> 8',
   'in> argMax([1, 3, 3, 0, 2]);','out> 1','in> argMin(sin([0..10]));','out> 5','in> argMin([1, 3, 3, 0, 2]);','out> 3',
   'in> ceil(20/3);','out> 7','in> ceil([0..3]/3);','out> [0,1,1,1]','in> ceil([0..3]/3, 2);','out> [0,0.34,0.67,1]',
   'in> floor(20/3);','out> 6','in> floor([0..3]/3);','out> [0,0,0,1]','in> floor([0..3]/3, 2);','out> [0,0.33,0.66,1]',
   'in> round(20/3);','out> 7','in> round([0.5, 1.5, 2.5, 3.5]);','out> [0,2,2,4]','in> round([0..3]/3, 2);',
   'out> [0,0.33,0.67,1]','in> isInfinite(Nan);','out> false','in> isInfinite(+Inf);','out> true','in> isInfinite(-Inf);',
   'out> true','in> isInfinite([-3.4344, Nan,+Inf]);','out> [false,false,true]','in> isNan(Nan);','out> true','in> isNan(+Inf);',
   'out> false','in> isNan(-Inf);','out> false','in> isNan([-3.4344, Nan,+Inf]);','out> [false,true,false]','in> cos(-0.92);',
   'out> 0.60582015664346289','in> cos(3);','out> -0.9899924966004454','in> cos({1+$x});','out> {cos(1+$x)}','in> exp(-0.92);',
   'out> 0.39851904108451419','in> exp(3);','out> 20.085536923187668','in> exp({1+$x});','out> {exp(1+$x)}','in> ln(-0.92);',
   'out> Nan','in> ln(3);','out> 1.0986122886681096','in> ln({1+$x});','out> {ln(1+$x)}','in> ln(-0.92);','out> Nan',
   'in> sin(3);','out> 0.1411200080598672','in> sin({1+$x});','out> {sin(1+$x)}','in> sqr(-0.92);','out> 0.8464','in> sqr(3);',
   'out> 9','in> sqr({1+$x});','out> {sqr(1+$x)}','in> sqrt(-0.92);','out> Nan','in> sqrt(3);','out> 1.7320508075688772',
   'in> sqrt({1+$x});','out> {sqrt(1+$x)}','in> isqrt(121);','out> [11,true]','in> isqrt(255);','out> [15,false]',
   'in> sign(-0.92);','out> -1','in> sign(3);','out> 1','in> sign({1+$x});','out> {sign(1+$x)}',"in> max(['a'..'z']);",
   "out> 'z'",'in> max([0..9]/2);','out> 4.5','in> max(true, false);','out> true',"in> min(['a'..'z']);","out> 'a'",
   'in> min([0..9]/2);','out> 0','in> min(true, false);','out> false',"in> copy('abcde', 1, 3);","out> 'bcd'",
   "in> copy('abcde', 2);","out> 'cde'","in> escape('a');",'out> "''a''"','in> escape(#9);',"out> '#9'",
   'in> group([1..10],[1..10] mod 3=0);','out> [false => [1,2,4,5,7,8,10],true=>[3,6,9]].toMap','in> fail;','Error Fail',
   'in> fail("Told you this wouldn''t work!");',"Error Told you this wouldn't work!",'in> hash(1);','out> 2','in> hash([1..3]);',
   'out> 299863',"in> hash('a');",'out> 283',"in> listBuiltin.filter({$s.matches('^mnh\\.')}).sort.trailing(10);",
   "out> ['mnh.listBuiltin','mnh.listSideEffects','mnh.mnhInfo','mnh.myPath','mnh.ord','mnh.parameterNames','mnh.runScript','mnh.sandBoxExecute','mnh.sleep','mnh.sleepUntil']",
   "in> group([[1,'a'],[2,'a'],[1,'b'],[4,'c'],[2,'a'],[2,'b']], 1, aggregator({[$x[0]+$y[0], $x[1]]}));",
   "out> ['b' => [3,'b'],'c'=>[4,'c'],'a'=>[5,'a']].toMap",'in> abs(3);','out> 3','in> abs(-3);','out> 3','in> abs([-2..2]/2);',
   'out> [1,0.5,0,0.5,1]',"in> chars('This is a test.');","out> ['T','h','i','s',' ','i','s',' ','a',' ','t','e','s','t','.']",
   'in> chars.get(100);',"out> 'd'","in> clean('+21/232/2116-11',['0'..'9'],' ');","out> ' 21 232 2116 11'",
   "in> join(['a','b','c']);","out> 'abc'","in> join([1..5],' ');","out> '1 2 3 4 5'","in> length(\"Test öäü\");",'out> 8',
   "in> byteLength(\"Test öäü\");",'out> 11',"in> length(['Text','AbC']);",'out> [4,3]',"in> lower('Test');","out> 'test'",
   "in> lower(['Text','AbC']);","out> ['text','abc']","in> upper('Test');","out> 'TEST'","in> upper(['Text','AbC']);",
   "out> ['TEXT','ABC']",'in> t :=[0..1000]*2*pi/1000;','in> plot(t, sin(t));','in> abs(3);','out> 3','in> abs(-5/7);',
   'out> 0.7142857142857143','in> abs([-2..2]);','out> [2,1,0,1,2]',"in> chars('Test');","out> ['T','e','s','t']",
   "in> pos('o','Hello World');",'out> 4',"in> pos(',',['Hello','Test','1,2,3']);",'out> [Inf,Inf,1]',
   "in> pos(['a','b'],'cdb');",'out> [Inf,2]',"in> repeat('-', 10);","out> '----------'","in> replace('[[][]][]][][','[]','');",
   "out> ']['","in> replace('aba','b','bb');","out> 'abba'","in> replaceOne('[[][]][]][][','[]','');","out> '[[]][]][]['",
   "in> replaceOne('1:.-.; 2:.-.; 3:.-.','.',['a'..'e']);","out> '1:a-b; 2:c-d; 3:e-.'","in> split('1,2,3;4,5,6',',');",
   "out> ['1','2','3;4','5','6']","in> split('1,2,3;4,5,6',';');","out> ['1,2,3','4,5,6']","in> split('1,2,3;4,5,6',[';',',']);",
   "out> ['1','2','3','4','5','6']","in> tokenSplit('f(x)->x+1; //Stupid, but just an example...','mnh');",
   "out> ['f','(','x',')','->','x','+','1',';',' ','//Stupid, but just an example...']",'in> trim(" \tA B C\t ");',
   "out> 'A B C'",'in> trimLeft(" \tA B C\t ");','out> "A B C\t "','in> trimRight(" \tA B C\t ");','out> " \tA B C"',
   "in> unbrace('3');","out> '3'","in> unbrace('(3)');","out> '3'","in> unbrace('(3]');","out> '(3]'",'in> unbrace(''"3"'');',
   'out> ''"3"''',"in> chars('Testtext').elementFrequency;","out> ['T' => 1,'e'=>2,'s'=>1,'t'=>3,'x'=>1].toMap",
   'in> flatten([1,[2,[3, 4],[5]], 6]);','out> [1,2,3,4,5,6]',"in> head(['A'..'Z']);","out> 'A'","in> head(['A'..'Z'], 3);",
   "out> ['A','B','C']","in> ['A'..'Z'].toSet.head(3);","out> ['F','V','G']","in> tail(['A'..'Z']);",
   "out> ['B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']",
   "in> tail(['A'..'Z'], 3);",
   "out> ['D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']",
   'in> rangeGenerator(1, 10).tail(3);','out> [4,5,6,7,8,9,10]',"in> leading(['A'..'Z']);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y']",
   "in> leading(['A'..'Z'], 3);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W']",
   'in> rangeGenerator(1, 10).leading(3);','out> [1,2,3,4,5,6,7]',"in> trailing(['A'..'Z']);","out> 'Z'",
   "in> trailing(['A'..'Z'], 3);","out> ['X','Y','Z']","in> ['A'..'Z'].toSet.trailing(3);","out> ['T','E','U']",
   'in> rangeGenerator(1, 10).trailing(3);','out> [8,9,10]','in> minus([1..10]^2, 2*[0..50]);','out> [1,9,25,49,81].toSet',
   'in> sort(intRandom(10, 5));','out> [0,1,2,3,8]',"in> sort(['01','10','100','1','010'],{softCast($x)<=softCast($y)});",
   "out> ['01','1','10','010','100']",'in> sortPerm(random(10));','out> [8,3,2,1,5,6,9,0,7,4]',"in> sortPerm(['a'..'c'..'a']);",
   'out> [0,4,1,3,2]','in> intersect([0..1000]^2,[0..1000]^3);',
   'out> [1,0,4096,262144,64,46656,1000000,729,15625,117649,531441].toSet','in> union(1/[1..5], 2/[2..6]);',
   'out> [0.3333333333333333,0.6666666666666666,1,0.5,0.25,0.2,0.4].toSet',"in> deleteFile('plotDemo1.png');",'out> false',
   "in> get(['a'..'f'], 3);","out> 'd'","in> get(['a'..'f'],[3, 1, 2]);","out> ['d','b','c']",'in> get([0..4],[2..6] mod 3=0);',
   'out> [1,4]',"in> get([['A', 1],['B', 2],['C', 0]],'B');",'out> 2','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]], 1);',
   'out> [2,5,8]','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[1, 0]);','out> [[2,1],[5,4],[8,7]]',
   'in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[true, false, true]);','out> [[1,3],[4,6],[7,9]]',
   'in> indexOf([1..6]^2 mod 3=0);','out> [2,5]','in> reverseList([1..5]);','out> [5,4,3,2,1]','in> size([0.5, 0.1, 0.2]);',
   'out> 3',"in> toMap([['A', 1],['B', 2],['C', 0],['B', 4]]);","out> ['B' => 4,'C'=>0,'A'=>1].toMap",
   'in> trueCount(10<[0..10]^2<50);','out> 4','in> unique([3, 1, 2, 1, 4, 1, 5]);','out> [1,2,3,4,5]',"in> compress('Test');",
   "out> 'Test'","in> compress('Test').decompress;","out> 'Test'","in> compress('Testtext');","out> #2#248'e'#240'9N'",
   "in> compress('Testtext').decompress;","out> 'Testtext'","in> relativeFileName('~/folder/','~/other/example.txt');",
   "out> '../other/example.txt'",'in> primes(20);','out> [2,3,5,7,11,13,17,19]','in> subSets([1, 2, 1]);',
   'out> [[],[1],[1,1],[2],[2,1],[2,1,1]]',"in> diff('encode','decode');",
   "out> ['deletes' => 1,'modifies'=>0,'adds'=>1,'matches'=>5,'edit'=>[['+',-1,0],[' ',0,1],['-',1,1],[' ',2,2],[' ',3,3],[' ',4,4],[' ',5,5]]].toMap",
   "in> diffStats('encode','decode');","out> ['deletes' => 1,'modifies'=>0,'adds'=>1,'matches'=>5].toMap",
   "in> format('%s is a string, %3.3d is a number','X', 7);","out> 'X is a string, 007 is a number'","in> format('%6.3f', 3);",
   "out> ' 3.000'","in> format('%6.3e', 3);","out> '3.00E+000'","in> format('%6.3g', 3);","out> '     3'",
   "in> format('%6.6x', 1234);","out> '0004D2'","in> formatTime('mm.dd.yyyy', 43210);","out> '04.20.2018'",
   'in> formatTime(12424.245);',"out> '05.01.1934 05:52:48'","in> isAscii('xyz');",'out> true',"in> isAscii('xyz'&chars[180]);",
   'out> false',"in> isAscii(\"Läuft\");",'out> false',"in> isUtf8('xyz');",'out> true',"in> isUtf8('xyz'&chars[180]);",
   'out> false',"in> isUtf8(\"Schräg\");",'out> true',"in> parseTime('yyyy-mm-dd hh:nn','2000-01-01 03:43');",
   'out> 36526.154861111114',"in> reverseString('Test');","out> 'tseT'","in> regex.matches('This is a test','[T|t]est');",
   'out> true',"in> regex.matchComposite('This is a test','[T|t]est');","out> [['test',11,4]]",
   "in> regex.replace('A Test is a test','[T|t]est','rose');","out> 'A rose is a rose'",
   "in> regex.split('A Test is a test','[e| ]');","out> ['A','T','st','is','a','t','st']",'in> toBoolean(0);','out> false',
   'in> toBoolean(1.0);','out> true',"in> toBoolean('true');",'out> true','in> toBoolean(3);',
   'Error 3 cannot be cast to boolean',"in> toInt('32');",'out> 32','in> toInt(3.0);','out> 3','in> toInt(3.1);',
   'Error 3.1 cannot be cast to int','in> toInt(false);','out> 0',"in> toReal('3.212');",'out> 3.212','in> toReal(true);',
   'out> 1','in> toReal(3);','out> 3.0','in> getOptions;','in> executor;','out> ''<#>\target\Win64\mnh_light.exe''',
   'in> print("1\n2.0\n03.45");','1','2.0','03.45','out> void','in> print("1\n2.0\n03,45\t");',' 1',' 2.0','03,45','out> void',
   'in> print("1\tone\t|\n2.0\ttwo\t|\n03.45\tthree\t|");',' 1    one   |',' 2.0  two   |','03.45 three |','out> void',
   'in> print("1\vone\v|\n2.0\vtwo\v|\n03.45\vthree\v|");',' 1   one  |',' 2.0 two  |','03.45three|','out> void',
   "in> printf('%x is %d in hexadecimal form', 123, 123);",'7B is 123 in hexadecimal form','out> void',
   "in> printf('%{$0}x is %{$0}d in hexadecimal form', 123);",'7B is 123 in hexadecimal form','out> void',
   "in> printf('sin(%{$0}s)=%{sin($0)}4.4g', 1);",'sin(1)=0.8415','out> void','in> permutations([1, 1, 2]);',
   'out> [[1,2,1],[1,1,2],[2,1,1]].toSet','in> permutations([1..3]);',
   'out> [[1,3,2],[2,1,3],[2,3,1],[3,1,2],[1,2,3],[3,2,1]].toSet',"in> input :=[[1..10], random,'test', random(9)];",
   'in> serialized :=input.serialize;',"in> print(input.toString.byteLength,' > ', serialized.byteLength);",'227 > 104',
   'out> void','in> input==serialized.deserialize;','out> true','in> factorize(18447422338071909869);',
   'out> [2642257,2642287,2642291]','in> formatTabs("\v-2\n3\t4.3");',"out> ['  -2','3  4.3']",'in> typeOf(3);',"out> 'Int'",
   'in> typeOf([1..5, 7.5]);',"out> 'NumericList(6)'",'in> typeOf({$x^2+$y});',"out> 'Expression(2)'",
   'in> x :=transpose([1,[1, 2, 3],[1, 2]], 0);','in> x;','out> [[1,1,1],[0,2,2],[0,3,0]]','in> x.transpose(0);',
   'out> [[1,0,0],[1,2,3],[1,2,0]]','in> resetRandom(12157);','out> void','in> resetRandom;','out> void','in> intRandom(7);',
   'out> 1','in> intRandom(7, 10);','out> [2,2,3,0,0,3,2,2,6,5]','in> random;','out> 0.70794779062271118','in> random(3);',
   'out> [0.20965369045734406,0.45114782452583313,0.19202205538749695]',"in> note('Note that this is a note');",
   'Note Note that this is a note','out> void',"in> warn('Warning: I intend to say something important here');",
   'Warning Warning: I intend to say something important here','out> void','in> isScalar(1);','out> true',
   'in> isBoolean(false);','out> true','in> isBoolean(1);','out> false','in> isInt(false);','out> false','in> isInt(1);',
   'out> true','in> isInt(1.0);','out> false','in> isReal(false);','out> false','in> isReal(1);','out> false','in> isReal(1.0);',
   'out> true','in> isNumeric(false);','out> false','in> isNumeric(1);','out> true','in> isNumeric(1.0);','out> true',
   'in> isList([]);','out> true','in> isList([], 0);','out> true','in> isList([], 1);','out> false',"in> isList(['x'], 1);",
   'out> true',"in> isString('Test');",'out> true','in> isString(true);','out> false','in> isExpression(:: sin);','out> true',
   'in> isExpression(:: sin, 1);','out> true','in> isExpression(:: sin, 2);','out> false','in> digits(123);','out> [1,2,3]',
   'in> digits(123, 3);','out> [1,1,1,2,0]','in> arctan2(1, 1);','out> 0.78539816339744828',"in> charSet('abcba');",
   "out> ['a','b','c'].toSet","in> bytes(\"ö\").ord;",'out> [195,182]',"in> base64encode('Test');","out> 'VGVzdA=='",
   "in> base64decode('VGVzdA==');","out> 'Test'","in> base92encode('bla bla bla ');","out> ']En_)]En_)]En_)'",
   "in> base92decode('PgsC.?d@t^');","out> '12345'",'in> listSideEffects;',
   "out> ['input','output','sound','sleep','detaching','server','read package state','alter package state','alter context state','alter plot state','read file','write file','http','ipc','executing external']",
   "in> changeFileExt('file.extension','.newExtension');","out> 'file.newExtension'",
   "in> changeFileExt('file.2.extension','.newExtension');","out> 'file.2.newExtension'",'in> httpError;',
   'out> "HTTP/1.0 404\r\n"','in> isBooleanList([true, false]);','out> true','in> isBooleanList(true);','out> false',
   'in> isIntList([1..3]);','out> true','in> isIntList([1, 2.0]);','out> false','in> isRealList([1, 2, 3]);','out> false',
   'in> isRealList([1.0, 2.0, 3.0, Nan]);','out> true',"in> isStringList(['a'..'z']);",'out> true',
   'in> isNumericList([1, 2, 3]);','out> true','in> isNumericList([1.0, 2, 3, Inf]);','out> true','in> isVoid();','out> true',
   'in> isVoid(void);','out> true','in> isVoid(3);','out> false',"in> escapePascal('Test');",'out> "''Test''"',
   "in> escapeJava('Test');",'out> ''"Test"''',"in> extractFileNameOnly('/home/user/file.ext');","out> 'file'",
   "in> extractFileDirectory('/home/user/file.ext');","out> '/home/user'","in> extractFileName('/home/user/file.ext');",
   "out> 'file.ext'","in> extractFileExt('/home/user/file.ext');","out> '.ext'","in> extractPath('/index.html?x=0&y=3%2Ax');",
   "out> '/index.html'","in> extractParameters('/index.html?x=0&y=3%2Ax');","out> ['x' => 0,'y'=>'3*x'].toMap",
   "in> extractRawParameters('/index.html?x=0&y=3%2Ax');","out> 'x=0&y=3%2Ax'",
   "in> encodeRequest('127.0.0.1:3126','rest',[['user','anonymous'],['request','3*&7']].toMap);",
   "out> '127.0.0.1:3126/rest?user=anonymous&request=3%2A%267'","in> cross(['1'..'3'],['A'..'C']);",
   "out> [['1','A'],['1','B'],['1','C'],['2','A'],['2','B'],['2','C'],['3','A'],['3','B'],['3','C']]",'in> [1, 2, 1].toSet;',
   'out> [2,1].toSet','in> [1.2, 3.0].isRealCollection;','out> true','in> [1.2, 3.0].toSet.isRealCollection;','out> true',
   'in> [1.2, 3].isRealCollection;','out> false','in> [1.2, 3.0].isRealCollection(2);','out> true',
   'in> [1.2, 3.0].isRealCollection(3);','out> false','in> [true].isBooleanCollection;','out> true',
   'in> [true, false, true].toSet.isBooleanCollection(2);','out> true','in> [true, false, true].toSet.isBooleanSet;','out> true',
   'in> [1, 2, 3].isIntCollection;','out> true','in> [].isIntCollection;','out> true','in> [1.2, 3].isNumericCollection;',
   'out> true',"in> ['a','b'].toSet.isStringSet;",'out> true',"in> ['a','b'].isStringCollection;",'out> true',
   'in> [1, 2, 3].isIntSet;','out> false','in> [1, 2, 3].toSet.isIntSet;','out> true',
   "in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap;",'out> true',"in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(2);",'out> true',
   "in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(3);",'out> false',"in> [1,'a', false].isSet;",'out> false',
   "in> [1,'a', false].isCollection;",'out> true',"in> utf8ToAnsi(\"öµ\").bytes.ord;",'out> [246,181]',
   'in> chars[214].ansiToUtf8;',"out> \"Ö\"",'in> [1.2, 3.4].toSet.isRealSet;','out> true','in> toList(3);','out> [3]',
   'in> toList([2, 3, 6].toSet);','out> [3,2,6]','in> [1.2, 3.4].toSet.isNumericSet;','out> true',
   "in> [[1,'one'],[3,'three'],[5,'five']].toMap.getAll([1, 5, 6],['-','-','-']);","out> ['one','five','-']",
   'in> [1, 3, 5].getAll([0, 2])==[1, 3, 5].get([0, 2]);','out> true','in> [1..20].filter({$x mod 2<>0<>$x mod 3});',
   'out> [1,5,7,11,13,17,19]','in> rangeGenerator(1, 20).filter({$x mod 2<>0<>$x mod 3});',
   'out> rangeGenerator(1,20).filter({$x mod 2<>0<>$x mod 3})',"in> ['a'..'f'].map(:: upper);","out> ['A','B','C','D','E','F']",
   "in> ['a'..'f'].pMap(:: upper);","out> ['A','B','C','D','E','F']",'in> primeGenerator.head(10);',
   'out> [2,3,5,7,11,13,17,19,23,29]','in> [-1, 1,-1, 1,-2, 2].agg(head);','out> -1','in> [-1, 1,-1, 1,-2, 2].agg(trailing);',
   'out> 2','in> [-1, 1,-1, 1,-2, 2].agg(toSet);','out> [-1,-2,2,1].toSet','in> [-1, 1,-1, 1,-2, 2].agg(max);','out> 2',
   'in> [-1, 1,-1, 1,-2, 2].agg(min);','out> -2','in> [-1, 1,-1, 1,-2, 2].agg(&);',"out> '-11-11-22'",
   'in> [-1, 1,-1, 1,-2, 2].agg(*);','out> -4','in> [-1, 1,-1, 1,-2, 2].agg(+);','out> 0',
   'in> permutationIterator([3, 1, 2]).map(:: print).toList;','[1,2,3]','[1,3,2]','[2,1,3]','[2,3,1]','[3,1,2]','[3,2,1]',
   'out> []','in> rangeGenerator(1, 100).map({$x^2});','out> rangeGenerator(1,100).map({$x^2})',
   "in> mergeMaps([['A', 1],['B', 2]].toMap,[['A', 7],['C', 3]].toMap, ::+);","out> ['B' => 2,'C'=>3,'A'=>8].toMap",
   "in> try({deserialize('x')});",'out> void',"in> try({deserialize('x')}, :: print);",
   "[['el3_evalError','@?:3,6','Invalid literal encoding type 120']]",'out> void',"in> try({deserialize('x')}, 0);",'out> 0',
   "in> try({deserialize('x')},{warn($x.head.trailing)});",'Warning Invalid literal encoding type 120','out> void',
   "in> interpret('3+4');",'out> 7','in> shiftRight(7, 1);','out> 3','in> shiftRight(5,-2);','out> 20',
   'in> type FiniteRealList(L :List)->L.each(x,!x.isNan,!x.isInfinite, AND);','in> x :=[1, 5, 0.4, 1/7].toFiniteRealList;',
   'in> x;','out> [1,5,0.4,0.14285714285714285].toFiniteRealList','in> x.typeOf;',"out> 'FiniteRealList'",'in> x.toBuiltin;',
   'out> [1,5,0.4,0.14285714285714285]','in> x.toBuiltin.typeOf;',"out> 'NumericList(4)'",
   "in> interpret({print('Hello world')},[]);",'Error Cannot apply print because of side effect(s): [output]',
   'in> composeDigits([1, 0, 1], 2);','out> 5','in> composeDigits([1, 0, 2]);','out> 102','in> composeDigits([1, 0, 2], 10, 2);',
   'out> 1.02',"in> sandBoxExecute('f(x)->3*x+1; f(f(f(1)))',['alter package state']);",
   "out> [['echo_declaration','','f(x)->3*x+1;'],['echo_input','','f(f(f(1)));'],['echo_output','','40'],['exitCode','',0]]",
   "in> begin local x:=async({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   '1: true','start','2: end','out> void',
   "in> begin local x:=future({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   'start','1: false','2: end','out> void',"in> validateRegex('(3+.*');",'out> false',"in> validateRegex('\\(3+.*');",
   'out> true','in> [1..100].pFilter({$x mod 2=$x mod 3=$x mod 5});','out> [1,30,31,60,61,90,91]','in> pi;',
   'out> 3.141592653589793','in> isStatefulExpression(:: sin);','out> false','in> isStatefulExpression(future(:: sin,[3]));',
   'out> true','in> isStatelessExpression(:: sin);','out> true','in> isStatelessExpression(future(:: sin,[3]));','out> false',
   'in> isIteratable(future(:: sin,[3]));','out> false','in> isIteratable(primeGenerator);','out> true',
   'in> isIteratable([1..10]);','out> true','in> isIteratableExpression(primeGenerator);','out> true',
   'in> isIteratableExpression([1..10]);','out> false',
   "in> begin resetRandom; local gen:={begin local last:=0; save; last+=random; end}; print('gen.isIteratable= ', gen.isIteratable,'; ', gen.head(3)); gen:=gen.toIteratableExpression; print('gen.isIteratable= ', gen.isIteratable,'; ', gen.head(3)); end;",
   'gen.isIteratable= false; {begin local last:=0; save; last+=random; end}',
   'gen.isIteratable= true; [0.69890123605728149,1.5846346616744995,2.5055105686187744]','out> void',
   'in> toIteratableExpression(:: sqr);','Error Only nullary stateful expressions may be iteratable.',
   'in> toIteratableExpression({begin local i:=1; save; i+=i-1; end});','out> {begin local i:=1; save; i+=i-1; end}',
   'in> euklideanNorm([1, 2]);','out> 2.23606797749979','in> assert(1=1.0);','out> void',
   "in> assert('bla'.isInt,'Invalid integer given');",'Error Invalid integer given',
   "in> md5('Test input. Could be anything really.');",'out> 337964223705814058127798532806512273013',
   "in> sha256('Test input. Could be anything really.');",
   'out> 60429211283715320795241587111266756812669288936868807314606704811653259384943','in> hammingWeight(17213);','out> 8',
   'in> gcd(1231512, 143543);','out> 23',
   'in> powMod(2988348162058574136915891421498819466320163312926952423791023078876139, 2351399303373464486466122544523690094744975233415544072992656881240319, 10^40);',
   'out> 1527229998585248450016808958343740453059','in> randomGenerator(123).head(10);',
   'out> [0.88808047771453857,0.033595457673072815,0.07375691086053848,0.073728755116462708,0.4090341329574585,0.7116715908050537,0.46069467067718506,0.5966716408729553,0.8116149306297302,0.498393714427948]',
   'in> intRandomGenerator(123, 5).head(10);','out> [2,0,0,1,3,4,0,0,1,2]','in> isaacRandomGenerator(123, 5).head(10);',
   'out> [3,3,1,4,4,2,2,0,4,3]','in> modularInverse(3, 32);','out> 11','in> byteToChar(100);',"out> 'd'",
   'in> byteToChar([10, 12, 97, 45]);',"out> [#10,#12,'a','-']","in> systemSpecificFilename('..\\test/filename.txt');",
   'out> ''..\test\filename.txt''',"in> stringIterator(['a','b','c'], 1, 3).head(10);",
   "out> ['a','b','c','aa','ab','ac','ba','bb','bc','ca']",'in> vanDerCorputGenerator(2).head(10);',
   'out> [0.0,0.5,0.25,0.75,0.125,0.625,0.375,0.875,0.0625,0.5625]','in> primeGenerator.head(1000).trailing(5);',
   'out> [7879,7883,7901,7907,7919]','in> rangeGenerator(0, 5).head(10);','out> [0,1,2,3,4,5]',
   'in> rangeGenerator(100,-100).head(10);','out> [100,99,98,97,96,95,94,93,92,91]','in> divMod(10, 7);','out> [1,3]',
   "in> 'abba'.hasPrefix('ab');",'out> true',
   'in> isPrime(47531677974672740279381824573269878221106369761801704860769848227327108403647);','out> true','in> 3==3.0;',
   'out> false','in> [1, 2, 3]==[3, 1, 3];','out> false','in> 3=3.0;','out> true','in> {$x}=3;','out> {$x=3}',
   'in> [1, 2, 3]=[3, 1, 3];','out> [false,false,true]','in> 3<=3.0;','out> true','in> [1, 2, 3]<=[3, 1, 3];',
   'out> [true,false,true]','in> 3>=3.0;','out> true','in> [1, 2, 3]>=[3, 1, 3];','out> [false,true,true]','in> 3<3.0;',
   'out> false','in> [1, 2, 3]<[3, 1, 3];','out> [true,false,false]','in> 3>3.0;','out> false','in> [1, 2, 3]>[3, 1, 3];',
   'out> [false,true,false]','in> 3<>3.0;','out> false','in> [1, 2, 3]<>[3, 1, 3];','out> [true,true,false]',
   'in> true AND false;','out> false','in> true AND 3;','out> 3','in> false AND 3;','out> false','in> true and false;',
   'out> false','in> [true, false, true, false] and[true, true, false, false];','out> [true,false,false,false]','in> 7 and 252;',
   'out> 4','in> true OR false;','out> true','in> true OR 3;','out> true','in> false OR 3;','out> 3','in> true or false;',
   'out> true','in> [true, false, true, false] or[true, true, false, false];','out> [true,true,true,false]','in> 7 or 252;',
   'out> 255','in> true xor false;','out> true','in> [true, false, true, false] xor[true, true, false, false];',
   'out> [false,true,true,false]','in> 7 xor 252;','out> 251',"in> +'a';","out> 'a'",'in> -3;','out> -3',
   'in> -[1, 2.0, Inf, Nan];','out> [-1,-2.0,-Inf,Nan]','in> !true;','out> false','in> 3 in[1..5];','out> true',
   'in> 3.0 in[1..5];','out> false','in> 1|2;','out> [1,2]','in> [1]|[2];','out> [1,2]','in> [1]|2;','out> [1,2]',
   'in> [1]|[[2]];','out> [1,[2]]','in> [1]||2;','out> [1,2]','in> [1]||[2];','out> [1,[2]]','in> 10 div 3;','out> 3',
   'in> 10/3;','out> 3.3333333333333335','in> 10/5;','out> 2','in> 10.0/5;','out> 2.0','in> void orElse 42;','out> 42',
   'in> 3 orElse fail;','out> 3','in> 3-pi;','out> -0.14159265358979312','in> 32459378562983 mod 2342832;','out> 1139831',
   'in> 2*3;','out> 6','in> 2.0*3;','out> 6.0','in> 4+5;','out> 9',"in> 'a'+'b';","out> 'ab'",'in> 5^7;','out> 78125',
   'in> -3.5^3;','out> -42.875','in> 3&4;',"out> '34'",'in> isSubsetOf([1, 2, 3],[1, 2, 3]);','out> true',
   'in> isSubsetOf(1,[1, 2, 3]);','out> false','in> isSubsetOf([1],[1, 2, 3]);','out> true','in> isSubsetOf([1, 4],[1, 2, 3]);',
   'out> false']].toMap,
 'fannkuch'=>
 ['16'],
 'fibonacci'=>
 ['See http://rosettacode.org/wiki/Fibonacci_n-step_number_sequences','Fibonacci n-step sequence',' n | values',
  '---+-----------------------------------------------------------------------------------------------------',
  ' 1 | 1 1  1  1  1   1   1   1    1    1    1    1     1     1     1      1      1      1       1       1',
  ' 2 | 1 1  2  3  5   8  13  21   34   55   89  144   233   377   610    987   1597   2584    4181    6765',
  ' 3 | 1 1  3  5  9  17  31  57  105  193  355  653  1201  2209  4063   7473  13745  25281   46499   85525',
  ' 4 | 1 1  4  7 13  25  49  94  181  349  673 1297  2500  4819  9289  17905  34513  66526  128233  247177',
  ' 5 | 1 1  5  9 17  33  65 129  253  497  977 1921  3777  7425 14597  28697  56417 110913  218049  428673',
  ' 6 | 1 1  6 11 21  41  81 161  321  636 1261 2501  4961  9841 19521  38721  76806 152351  302201  599441',
  ' 7 | 1 1  7 13 25  49  97 193  385  769 1531 3049  6073 12097 24097  48001  95617 190465  379399  755749',
  ' 8 | 1 1  8 15 29  57 113 225  449  897 1793 3578  7141 14253 28449  56785 113345 226241  451585  901377',
  ' 9 | 1 1  9 17 33  65 129 257  513 1025 2049 4097  8185 16353 32673  65281 130433 260609  520705 1040385',
  '10 | 1 1 10 19 37  73 145 289  577 1153 2305 4609  9217 18424 36829  73621 147169 294193  588097 1175617',
  '11 | 1 1 11 21 41  81 161 321  641 1281 2561 5121 10241 20481 40951  81881 163721 327361  654561 1308801',
  '12 | 1 1 12 23 45  89 177 353  705 1409 2817 5633 11265 22529 45057  90102 180181 360317  720545 1440913',
  '13 | 1 1 13 25 49  97 193 385  769 1537 3073 6145 12289 24577 49153  98305 196597 393169  786289 1572481',
  '14 | 1 1 14 27 53 105 209 417  833 1665 3329 6657 13313 26625 53249 106497 212993 425972  851917 1703781',
  '15 | 1 1 15 29 57 113 225 449  897 1793 3585 7169 14337 28673 57345 114689 229377 458753  917491 1834953',
  '16 | 1 1 16 31 61 121 241 481  961 1921 3841 7681 15361 30721 61441 122881 245761 491521  983041 1966066',
  '17 | 1 1 17 33 65 129 257 513 1025 2049 4097 8193 16385 32769 65537 131073 262145 524289 1048577 2097153',
  '18 | 1 1 18 35 69 137 273 545 1089 2177 4353 8705 17409 34817 69633 139265 278529 557057 1114113 2228225',
  '19 | 1 1 19 37 73 145 289 577 1153 2305 4609 9217 18433 36865 73729 147457 294913 589825 1179649 2359297',
  '20 | 1 1 20 39 77 153 305 609 1217 2433 4865 9729 19457 38913 77825 155649 311297 622593 1245185 2490369'],
 'fibonacciWord'=>
 ['N Length Entropy Word','',' 1         1 0.0000000000000 1',' 2         1 0.0000000000000 0',' 3         2 1.0000000000000 01',
  ' 4         3 0.9182958340545 010',' 5         5 0.9709505944547 01001',' 6         8 0.9544340029250 01001010',
  ' 7        13 0.9612366047229 0100101001001',' 8        21 0.9587118829771 010010100100101001010',
  ' 9        34 0.9596868937742 0100101001001010010100100101001001','10        55 0.9593160320544',
  '11        89 0.9594579158387','12       144 0.9594037542210','13       233 0.9594244469560','14       377 0.9594165437404',
  '15       610 0.9594195626031','16       987 0.9594184095152','17      1597 0.9594188499578','18      2584 0.9594186817240',
  '19      4181 0.9594187459837','20      6765 0.9594187214387','21     10946 0.9594187308140','22     17711 0.9594187272330',
  '23     28657 0.9594187286008','24     46368 0.9594187280783','25     75025 0.9594187282779','26    121393 0.9594187282017',
  '27    196418 0.9594187282308','28    317811 0.9594187282197','29    514229 0.9594187282239','30    832040 0.9594187282223',
  '31   1346269 0.9594187282229','32   2178309 0.9594187282227','33   3524578 0.9594187282228','34   5702887 0.9594187282227',
  '35   9227465 0.9594187282227','36  14930352 0.9594187282227','37  24157817 0.9594187282227'],
 'fourRings'=>
 ['Four rings:','     ___   ___   ___   ___','    /   \ /   \ /   \ /   \','   /     X     X     X     \',
  '  (   A (B) C (D) E (F) G   )','   \     X     X     X     /','    \___/ \___/ \___/ \___/',
  'The solutions for 1..7 (unique) are: ','  [3,7,2,1,5,4,6]','  [4,5,3,1,6,2,7]','  [4,7,1,3,2,6,5]','  [5,6,2,3,1,7,4]',
  '  [6,4,1,5,2,3,7]','  [6,4,5,1,2,7,3]','  [7,2,6,1,3,5,4]','  [7,3,2,5,1,4,6]','The solutions for 3..9 (unique) are: ',
  '  [7,8,3,4,5,6,9]','  [8,7,3,5,4,6,9]','  [9,6,4,5,3,7,8]','  [9,6,5,4,3,8,7]',
  'The number of solutions for 0..9 (nonunique) is: 2860'],
 'fractalPlant'=>
 ['png hash: B3336FDBE3E21181652B9F861EC1A2A6552FAB7C35202E62F5C3EF88BC4BA7'],
 'fractran'=>
 ['0: 2^1 = 2','1: 3^1*5^1 = 15','2: 3^1*5^2*11^1 = 825','3: 5^2*29^1 = 725','4: 5^2*7^1*11^1 = 1925','5: 5^2*7^1*13^1 = 2275',
  '6: 5^2*17^1 = 425','7: 2^1*3^1*5^1*13^1 = 390','8: 2^1*3^1*5^1*11^1 = 330','9: 2^1*5^1*29^1 = 290',
  '10: 2^1*5^1*7^1*11^1 = 770','11: 2^1*5^1*7^1*13^1 = 910','12: 2^1*5^1*17^1 = 170','13: 2^2*3^1*13^1 = 156',
  '14: 2^2*3^1*11^1 = 132','15: 2^2*29^1 = 116','16: 2^2*7^1*11^1 = 308','17: 2^2*7^1*13^1 = 364','18: 2^2*17^1 = 68',
  '19: 2^2 = 4','20: 2^1*3^1*5^1 = 30','21: 3^2*5^2 = 225','22: 3^2*5^3*11^1 = 12375','23: 3^1*5^3*29^1 = 10875',
  '24: 3^1*5^3*7^1*11^1 = 28875','25: 5^3*7^1*29^1 = 25375','26: 5^3*7^2*11^1 = 67375','27: 5^3*7^2*13^1 = 79625',
  '28: 5^3*7^1*17^1 = 14875','29: 2^1*3^1*5^2*7^1*13^1 = 13650','30: 2^1*3^1*5^2*17^1 = 2550'],
 'generator'=>
 ['[529,576,625,676,784,841,900,961,1024,1089]'],
 'gol'=>
 [#12," █ ▀▄█▀▄▄█▀ ▄██▄▄▄▀█▄▀█ █  ▄▀▄█▀▀▄ █▀▄▀▀",
  "▀▄██▄█    ▀█▄▀▀█▄▄█   ▄█▄▄▄ █ ▄▄█▀▄▀▄█▄█",
  "█ █ ▀██▀▀█ ▄█▀▀██▄▀▀█ ▀▄█▀█ ▄▀███▀ ▀██▀ ",
  "  █▄    █▀▀ ▀█  █ ▀▄██▄█▄ ▀ ▀  ▀▄█▀▄█▀▀▀",
  "▄███▀▄██▀ ▀▀ █▄▄▀█ ▀█ ▀▀ ▄▀ █ ▀█▄█▄▀  ▀▀",
  " █▄█▀▄▀█▄▄█ ▀ ██ ▀▄██ ▀▄ ▀██ ▄█▄ ▀▄ ▀█ ▄",
  "▀█ █  ▀█   ▀  █▄  ▄  ▄ ▄▄▀█▄█ ▄█ █▀   ▄▄",
  "▀▀▀█▄ ▄ ▀▀▄▄ ▀▀▄ ▄▀ ▄▄▄▀█  █▄▄ ▄██  ▀█ ▀",
  "█▀ ▀▄▄██▄▄▄ ▄ ▀▄ ▄▄▀▄  ▄▀▄▀  ▀▀ ▀▀▀▄█▀██",
  " ▀▄█▀▄▀ ▄▄▀▀▄ ▀▀█▀ ▀ ▄▀ ▄▀██▀█▀  ▄█▄█  ▀",
  "█▄  ▄ ▀▄▀▀▄ ▄█▀█▀▄█▀▄ █ ▀ ▄ █████▀▄▄█▀▀▄",
  "▀█▀    ▄▄ ▀█ █▄▄▄▄▀▀██▄█▀▀██▀▀▀██ ██  █ ",
  "▀ █ ▄█▄▄█ ██▄ █▄ ▄ ▄▄█▀▀█▄ █▄██▄▀▄ ▀██▀█",
  "▀█▀█ █ ▄▀▄▀█▄▄▄█ ▄▄█ ▄▀█▄  ▀ ▄▀█ ▄▄█▄ ▀▄",
  "██ ▀ ▄ ▀▄▀ ▄▀█▄█▀█▄█▄ ▀▄▄▀▄▀█▀▄▀▄▀▄▀▄▄█▀",
  "▄▀ █▀▀█▀█▄ ▀▀ █▄▀ ▀▄█▄▄▄▀ ▀▄▀ ▄▄██▄  ██▄",
  " █ █▄▄ ███▀▄ ▀ ▄▀█ ▄▄▄▀▀▄▀  █ █ ██ ▀ ▄██",
  "██▄▄▄  ▄ █▀▄ █▄▄█  ███▄▄ ▄▀ ▀██  █▀▄   ▄",
  "▀ ▄▄█▀ ▀▀▀█▄▀███▄▄█▀█▀█████▄▄ ▀██▀▄█▄█  ",
  "█▀▄  ▀ ▀▀▄█▄▀▄▀▄▀  ██ █▀▀█▄▄█ ▀ ▄█▄█ ▀▀▀",#12,
  " █ ▀ ▀▀█▄       ▄█  ▄ █ █  ▄  █  ▄ ▄ █▀▀",
  "       ▄██▀          █▄   █ █      ▀   ▀",
  "█ ▄ ▄  ▀▀▀          ▀ ▀   ▄ █     ▀     ",
  "▄ ▀ ▄  ▀▀ ▀  ██▄▄ ▀     ▄▄   ██   ▀   ▀▀",
  "        ▀█▄  ▀   █    ▄▄▄█ ▀▄▀▀    ██▄▄█",
  "     ▄   ▄█▀    ▄▀▄ ▄▄  █▀   ▄ ▄  ▄████ ",
  "   █▄ ▄▄ ▀▀  ▀ ▄  ▀ ▀ ██    ▄▄▄▄ ▀▀  ▄▄ ",
  " ▀  ▄▄▄▀███  █ ▄▀▀███▄▄ ▄ ▄▄ ▄    ▀▄▀▀ ▀",
  " ▀▀▀    ▄▄▄  ▄▀▀ █ ▀▄ ▀▄▀ ▀▀ ▀▀▄  ▀     ",
  "▄█▄▄ ▄▄ ▄  ▄█▀▀    ████▀▄    ▀▀  ▀    ██",
  "▀ █▀▀▀▀▄▄ █▀   ▄  ▀▀▀ █   █           ▀ ",
  "  ▀    ██▀▀  ▄ ▄▄▄▄     ▀            ▀▀ ",
  "▀ ▀▀▀▀  ▄   ▄▄▄▄▄▀██     ▄ ▄      ▄     ",
  "   ▄   ▄ ▄       █ ▄ ▄  ▄▀██ ▄ ▄ █  ▄▄▀ ",
  "   ▄ ▄ ▀ █▄▄        ▄█▀▄▄▀█▀  ▄▀  ▄▄▄   ",
  " █ █      ▀██ ▄ ▀ ▄▄▄   ▀▄█▄█ █    ▀▄   ",
  " █ █▄▀▄▄   ▄▄ ▄▄ █ ▄   ▄▄▄ ▀█ █     ▀▄  ",
  "  ▄▄▄███   █ ▀  ▄█     ▀▀▀ ██      ▄▄  ▄",
  "▀ ▄▄ ▀▀▀                    █        ▀▀▀",
  "▀ ▄ █▄ ▄▀      ▄          ▄ ▄ ▄      ▀▀▀",#12,
  "▀▀▄▀ ▀          ▄█   ▀▄  █ █ ▄▀▀  ▄ ▀█▀▄",
  "          ▀         █ ▄▀ ▀▀ ██    ▀ ▀   ","▄▀ ▄   ▀ ▀            ▀    ▄█▀          ",
  "█      ▄    ▄▀ ▄▄▄      ▄█▄ ▀ ▀▄   ▄  ▄▀",
  "▀       █▀▀▄ ▀ ▀▄█▄    ▄    ▄▄▀   ▄▀   █",
  "           ▀    ▀▀█ ▄██ ▄▄       ▄    ▄ ",
  "  ▄█▄▀█▄▀▀▀   ▄ ▄▀  █ ▄▄▀   ▀▄▄▀▀██▄▄▄▄ ",
  "▄▄ █▄▄▄   █  ▄ █▀▀    ▄   ▄█ ▄▄   ▄██▀  ",
  "▄▄▀▀▀▀ ▀ ▄  ▄▀ █▄▀    ▀ █ ▀▀▄▀▀▄        ",
  " ▀    ▄█▀ █   ▀   ▀     ▀     ▀      ▄▀ ",
  "▀ ▄ ▄▄  ▀ ▀ ▀     ▀▄ ▄▀▄ █           ▄█▄",
  " ▄▄ ▄ █▄  ▀   ▀▀▄▀ ▄                    ",
  "   ██  ▀▀   ▀▄▄▄▄  ▄     ▄ ▄            ",
  "        ▀    ▀▀▀ ▀▄▀█▄▄ █     ▄ ▀▀▀  █  ",
  "  ▄ █ ▀ ▄█  ▄       ▄▄ ▄▄   ▀▄▄█▀ █▄▄▀  ",
  "▄▄ █     ▀▄ ▄█   ▄▄▄ ▀ ▀▀▄  ▀ ██  ▀▄▄   ",
  "▀▀ █ ▀▀▄   ▄▄▄█▀▀█  ▀  ▄ ▄    ▀▀    ▀▀  ",
  "▄  ▄    █ ▀▀▄▀▀▀▄█     ▀▄▀▄  ▄      █▄ ▄",
  "▀█ ▄▄▄▄█                    ▀▀      ▀▀▀▀",
  " ██ ▀▀ ▄▄                  ▀ █        ▀▀",#12,
  "█▄▄▀            ██   ▄▄  ▄ ▄ █▀     ▀▀▀█",
  "                      ██▀▀▀   █    ▀    ","▄▄                   ▀     ▄           ▄",
  "▀█      ▄▄  ▄▄ ▄▀▄      ██▄ ▀█▄▄      ▄ ",
  "█      ▀█▀▀██ ▀█      ▄ ▀▀   █▀   ▀▀  ▀▄",
  "         ▄▄     █ ▄ █ ▄ █▄       ▄▄     ",
  "  █▀ ▀█▄█▀▄      ▀  ▀▄ ▄▀▀  ▄███    ▀ █ ",
  " █    ▄▀       ▄ █   ▀▀█ ▄▀▀ ▄▄  ▀▄  ▄▀ ",
  "▄▄ ▄▄ ▄▄ ▄  ▀█ █▄▄      ▄ ▀▄▄  █   ▀    ",
  "▀▀    █▀▀ █▀   ▀                     ▄▄▄",
  "     █▀▀ █ █      ▄   █ █            ▄▄▄",
  " ▀█ █ █▀▄      ██ ▀ ▀                 ▀ ",
  "   ▄▄ ▀██   ▄▀▀ █ ▄▄▄            ▄      ",
  "             ▀▄  ▀▄ ▄▄ █▀▀       ▀▄ ▄▄▄ ",
  "   ▀▄█  ██▄        ▀▄▄ ▄█   ▄   ▀▀█ ▄▀  ",
  "▄█ █▀   ▀▀▀▀▄█ ▄ ▄██▄▀ ▀▄▀      █ ▀▄▄▄  ",
  "▀▀▄▀▄ █▄  ▄▄   ▀ ▄▄▀    ▀     ▀▀   ▀██  ",
  " ▄     ███▀▄▄▄▄█▄█▀    ▀▄█▀ ▄▄     ▄▀▀  ",
  " ▀ █ ▀ █▀                   ▀█      ▀   ","     ▄▄ ▀                 ▄ ▀▄          ",#12,
  " ▄█             ██   ▄▄  ▄▀ ▄█▀     ▄█▀ ",
  "▀▀                   ▄   █▀  ▀▀         ","▀▄                    ▀     ▄          ▄",
  " ▄▀    ▄    ▄▄ ▄▀      ▄▀ ▄▀▀▀ ▄        ",
  "█▀     █▄   ▄▄▄█▄      ██▄▀ ▀▄▄▀      ▀▄",
  "        ▄██▀   ▀█▀ ▀▄   ▀▀    ▄         ",
  " ▄██ █▀          ▀ ▀█▄▀▄ █▄▄█  ██    ▀▄▄",
  " ▀▀     ▀     ▄ ▀    ▀ █▄▄▀█  ▄▀  ▄  ▀▀ ",
  "███  ██▀ ▄▄▄▀█ █ ▀      ▀▀▀█▀▀ ▀        ",
  "▄▀▀     ▀ ▀▀  ▀▀                      █▄",
  "    ▄▀ ▀▀▀ ▀     ▄ ▄ ▄               ▄▄▄",
  " ██ ▀ ▀▀█      ▀▀  ▀                 ▀▀▀",
  "    ▀ █ ▄▀  ▄▀█▄█ ▄█    ▄               ",
  "             ▀   ▀▄▄▄▀██▀▄      ▄▀█▄▄█▄ ",
  "  ▄  █ ▄▀ ▀▄      ▄▀ ▄ ▄▀▄      ▄ █   ▀ ",
  "▀▀ █ ▀  ▀▄▄█▄█▀ ▄█   ▀ █▄█      ▄▄█  █  ",
  "▀▄▄█▀██▀  ▄█▀ ▀  ▄ ▄▀   ▄▄     ▀      █ ",
  "  ▄        ▄▄█▄█ ▄▄     ▄██▄▄▄     █ █  ",
  "  ▄ █ ▄▄ ▀  ▀▀▀▀▀            ▄▀         ","      ▀▀                    ██▄      ▄▄▄",
  #12,"▄▀█             ██       ▄ █▄       ▄▄▄▀",
  "██▀                  ▀▀ ▀██ ▀▀▀         ","█▄                         ▄▄▄          ",
  "███           ▄▄▄      ▄  ▄▀▀█▄         ",
  "▄█    ▀█▄▄▄▄▄▄   ▄    ▀   █▀ █▄▀       ▄",
  "       ▀▄  █▀▀ ▄ ▀  ▄▄ ▀▄█   ▀▀▄        ",
  "▄▀ ▀ ██  ▀         █  ▀▄▀█  █▀█ ▀     ▀▄",
  "█▀ ▀  ▄▄     ▄▄▄▄   ▀▀▄█     ▄██▀    ▀▀▀",
  "▀ ▀▄ █ ▀▄▄▀▀▀█ █▀      ▀ ▄ ▄ ▀▀        ▄",
  "▄▄▀    ▄   █▀ ▀▀                      █▄","█  ▄▄   ▀▄      ▄ ▄ ▄                █ ▄",
  "▄██  ▀▄▀█▄    ▄ █ ▀ ▀                ▀▄▀",
  "     █ ▄▀▀  ▄▀▀ █▀██▄ ▄ ▄               ",
  "             ▀▀▀▀▀▄▄▄▀   █       ▀▀ ▄▀█ ",
  " ▄▄  ▄▀▄▄▄▄▄▄     ▄ ▄▀ ▄ █        █▄▀ ▀ ",
  "▄█ █  ▀▄██   ▀▀▄██▀   ▄█ █▀     █▄█▀ ▄▄▄",
  " █▄▄   █ ▀▄▄ ▄▄ ▀▀▀    ▀▄▄▄     ▀▀   ███",
  " ▀ ▀      ▀▄ ▀ ▀ █      ▄  ▄█▄       ▀▀ ",
  "   ▄ ▀▄▄▄  ▀ ▄▄▄▀▀       ▀▀▀▄▄█         ",
  "     ▀▀▀                   ▄         ▄▀▄",#12,
  " ▀▀▄            ██      ▄▄ ▀        ▀▄▄▀","  █                     █ ▄▄▀█       ▀ ▄",
  "  ▄                       ▀█▀▄         █","               █          █            ▀",
  "▄▄    ▀▀ ██▀▀█▀▀▀        ███   █       ▀",
  "▀     ▄█▄ ▄▄ ▀▀ ▀   ▄▄▄  ▀█ ▄▀ █        ",
  "▀   ▀██▀           █ █▀▄ ▄▀ █ ▀ ▄    ▄ ▀",
  " ▀▄  ▀▄█   ▄ ▄▀▀▄   ▀█ █▄       █     █ ",
  "▀█▄▄█▀▄▀▄█▀▀          ▀▀▀   ▀▀ ▀       █",
  "▄█▀     ▀ ▀██▀▀▀                     ▄█ ",
  "  ▄▄▄  ▄▀▄                          ▄█ ▄",
  "▄ ▄ ▀██▀     ▄▄ █                    ▀▄▄",
  " ▀   ▀▄ ▄▀  ▄▀▀ ▀   █▄                  ",
  "             ▀███▄▄▄▄█  ██▄      ▄▄ ▄▀█▄",
  " ▄▄  ▄▀▀▀▀██▄▄    █▄ ▀▄  █▀       ▀ █   ",
  " ▄ ▀▀ █   ▄▀▀▀█   ▀▀  ▄█ ██    ▄▀  ▄█▄▀▀",
  " ▄ █  ▀▀▄█▄▄▄▄█▄  █   ▀▀▄▄▀     ▀ ▀ █   ",
  "▀▀ ▀      █▄▄▀  ▀▄▄     ▀▄▀ ▀█       ▀ ▀",
  "    ▄ ▀▀▄   ▀ ███▀       ▀█▄▄▄█         ",
  "▄    ▀▄ ▀     ▀             ▀▀        ▀▄",#12,
  " █▀▄            ██      ▄▄  ▄       ▄█▄▀",
  "  ▀▀                   ▀▀ █▀▀█       ▀▄ ","█                        ▀   ▀        ██",
  "          ▄▄▄▄            ▀▀            ",
  "█▄    ▄▄▀█ ▀▀▀ ▀█       ▄   ▄  ▄▄      ▄",
  "█▀    ▀▀▄  ▀▀▀▀     ▄▀▄   ▄ █  █▀      ▄",
  "▄   ▀   ▀          █   █▄▀▀▄▀▄ █      ▄▄",
  "  ▄ ▄▀ █   ▄▄ ██    ▄█ ▀       ██▀   ▀█ ",
  "    █ ▄  ▀ ▀▀▄▄       ▀▄▀             ██",
  "▄▄▄    ▀▀▄█  ▀█                      ██▄",
  "▀▀▀█▄  ▄▀                           ▄▄ ▀",
  "██▀    █▀    ▄▄▀▄▄                  ▀▀▄▄",
  "▀▀   ▀ ▀    █ ▀ ▄   ██                 ▀",
  "       ▄▄▄▄  █    █▄ ▄█ ▀ ▀      ▄▄ ▄▀██",
  "  ▄▄▄▄▀▀█▀   ▀█▀▀▄  ▄▀█          ▀▀ █   ",
  "▀▀▄██ █   ▄▄▄ █▄  ██   ▀   ▄   ▄▄▄    █ ",
  " ▄ ▄▄ ▀█▄  ▄█  ▄ ▄    ▀ ▄ █▄       ▄▄▄  ",
  "█▀        ▄ ▄ ▄▀▀ █     █ ▀▄██▄         ",
  "     ▄▄▀▄   ▀ ▀  ▄▀      █▄   █         ","▄▄   ▀ ▀      ▀             ▄ ▀       ▄█",
  #12,"▄▄ ▄            ██     ▄▄▄▄ ▄▄      █   ",
  "  ▀▀                   ▀█ █  █▄     ▀▄▄ ","█                         ▄          ▀▄ ",
  "         ▄▄▀▀▄▄                        ▀","▀▀    ▄▀▀█   ▀▀▀█              ▄▄      █",
  "▄▄    ▀ ▄   ██      ▄█▄  ▄▄ ███▄       ▄",
  "                   ▀█ ▀█ ██▄█▀ █▀    ▄█▄",
  "   ▄▄▄█ ▄ ▄▄▄▀██    ▄█ █▀      ▄ █   ▀  ",
  "    ▀▄ ▄▄▄██  ▄▀     ▀▀█             ▀  ",
  " ▀ ▄   █▀ █  ▄▄▀                     ▄  ","    █  ▄▀▀                          █▄▄▄",
  "  ▀▀  ▀█▀    ▄█▀█                   ▀▄▄ ",
  " ▀    ▀     █ ▀ ▀▀ ▄█▀▄               ▀ ",
  "      ▄ ▀▀▄ ██ ▄ ██▄▄ ▀▀         ▄▄ ▄▀ █",
  " ▄▄▀▀▀▀ ▄▄▀  ▀ ▀████▄ ▄█         ▀▀▄▀▄  ",
  " █▄ ▄ █▀   █▄ █▄ ▀▄▄▀           █    ▀ █",
  "▄▄▄   █▄█ ▀▄▄ ▀█▀▄▀    ▄ ▀█ ▄   ▀   █▀  ",
  "██▀        ▄▀▀█▀▀ █▄   ▀█ █▄  █     ▀   ",
  "     ▄▀▀▄  ▀ ▄   ▀▀     ▀█▄▀▀▄██        ",
  " ▄▄  ▀ ▀                     ▀        ▀▀",#12,
  "▀▄ ▄            ██     ▄▀▀▄▄▄▄     ▄▄▄  ",
  " ▀▀▀                   ▄▄ ▀  ▄▄     █▄▄ ","▄                        ▀           ▀▄ ",
  "         ▄██▀▀                         █","▀     ▄▀ ▄  ▄▀  █            ▄▄▄       █",
  "▄      ▀    ██     ▄▀▀▀▄▄▄▄▀▀   █      █",
  "              ▄    █▄  ▀    ▄▄▄▄▀    █ ▄",
  "   ▄█ ██ ▄▄▀█▀ ▀▄   ▄▀ ▀ ▀▀▀    ▄    ▀  ",
  "   ▀  ▄▄     ▀▄█    ▀▀ █▀               ","       ▄  ▄  ▀▄▀                        ",
  "   ▀█▄▄▀▀█     ▄                   ▄█ ▄ ",
  "  ▄▀  ▀ █    ▀▀ ▀                   ▀▄▄▀",
  "           ▄█ ▀ █▀ ██▀▄▄             ▀█ ",
  "    ▄ ▄▄ ▀▄   ▀▄▀▀  ▄ ██         ▄▄ ▄▄█ ",
  "▄▄███▀▀▀▄▄█▀▀▀▄▀    ▄███         █▄▄▀█▄ ",
  " ▄▄▀ ▀█▀▀ ███▀▀   ▄▄▀▀         ▄▄▄  █▄  ",
  "▄ ▄▀  █ ██▀▄▄     █▀   ▄ ▀█▀       ▄█▀  ",
  "▄ ▄    ▀   ▄  ▄ █ ▀█   ▀▀ ▀ ▄▀▄        ▀",
  "     ▄▀▀▄   ▀    ▀▀▀    █▄▄▄▀  ▄        ","      ▀                      ▀          "],
 'grayCode'=>
 ['decimal | binary | Gray code','--------+--------+----------',' 0      |     0  |     0',' 1      |     1  |     1',
  ' 2      |    10  |    11',' 3      |    11  |    10',' 4      |   100  |   110',' 5      |   101  |   111',
  ' 6      |   110  |   101',' 7      |   111  |   100',' 8      |  1000  |  1100',' 9      |  1001  |  1101',
  '10      |  1010  |  1111','11      |  1011  |  1110','12      |  1100  |  1010','13      |  1101  |  1011',
  '14      |  1110  |  1001','15      |  1111  |  1000','16      | 10000  | 11000'],
 'grep'=>
 ['FDLinux'=>
  ['Usage: <#>/demos/grep.mnh pattern [options] [filePattern1,[filePattern2,...]]','if no file pattern is given, * is assumed',
   'Options: -i  case insensitive matching','         -n# show # additional lines before and after',
   '         -l  only list files','         -r  recurse subdirectories'],
  'FDWin32'=>
  ['Usage: <#>\demos\grep.mnh pattern [options] [filePattern1,[filePattern2,...]]','if no file pattern is given, * is assumed',
   'Options: -i  case insensitive matching','         -n# show # additional lines before and after',
   '         -l  only list files','         -r  recurse subdirectories'],
  'FDWin64'=>
  ['Usage: <#>\demos\grep.mnh pattern [options] [filePattern1,[filePattern2,...]]','if no file pattern is given, * is assumed',
   'Options: -i  case insensitive matching','         -n# show # additional lines before and after',
   '         -l  only list files','         -r  recurse subdirectories'],
  'FOLinux'=>
  ['Usage: <#>/demos/grep.mnh pattern [options] [filePattern1,[filePattern2,...]]','if no file pattern is given, * is assumed',
   'Options: -i  case insensitive matching','         -n# show # additional lines before and after',
   '         -l  only list files','         -r  recurse subdirectories'],
  'FOWin32'=>
  ['Usage: <#>\demos\grep.mnh pattern [options] [filePattern1,[filePattern2,...]]','if no file pattern is given, * is assumed',
   'Options: -i  case insensitive matching','         -n# show # additional lines before and after',
   '         -l  only list files','         -r  recurse subdirectories'],
  'FOWin64'=>
  ['Usage: <#>\demos\grep.mnh pattern [options] [filePattern1,[filePattern2,...]]','if no file pattern is given, * is assumed',
   'Options: -i  case insensitive matching','         -n# show # additional lines before and after',
   '         -l  only list files','         -r  recurse subdirectories'],
  'LDLinux'=>
  ['Usage: <#>/demos/grep.mnh pattern [options] [filePattern1,[filePattern2,...]]','if no file pattern is given, * is assumed',
   'Options: -i  case insensitive matching','         -n# show # additional lines before and after',
   '         -l  only list files','         -r  recurse subdirectories'],
  'LDWin32'=>
  ['Usage: <#>\demos\grep.mnh pattern [options] [filePattern1,[filePattern2,...]]','if no file pattern is given, * is assumed',
   'Options: -i  case insensitive matching','         -n# show # additional lines before and after',
   '         -l  only list files','         -r  recurse subdirectories'],
  'LDWin64'=>
  ['Usage: <#>\demos\grep.mnh pattern [options] [filePattern1,[filePattern2,...]]','if no file pattern is given, * is assumed',
   'Options: -i  case insensitive matching','         -n# show # additional lines before and after',
   '         -l  only list files','         -r  recurse subdirectories'],
  'LOLinux'=>
  ['Usage: <#>/demos/grep.mnh pattern [options] [filePattern1,[filePattern2,...]]','if no file pattern is given, * is assumed',
   'Options: -i  case insensitive matching','         -n# show # additional lines before and after',
   '         -l  only list files','         -r  recurse subdirectories'],
  'LOWin32'=>
  ['Usage: <#>\demos\grep.mnh pattern [options] [filePattern1,[filePattern2,...]]','if no file pattern is given, * is assumed',
   'Options: -i  case insensitive matching','         -n# show # additional lines before and after',
   '         -l  only list files','         -r  recurse subdirectories'],
  'LOWin64'=>
  ['Usage: <#>\demos\grep.mnh pattern [options] [filePattern1,[filePattern2,...]]','if no file pattern is given, * is assumed',
   'Options: -i  case insensitive matching','         -n# show # additional lines before and after',
   '         -l  only list files','         -r  recurse subdirectories']].toMap,
 'hailstone'=>
 ['See http://rosettacode.org/wiki/Hailstone_sequence','Series starting @27 has 112 elements',
  'Starting with: [27,82,41,124] and','  ending with: [8,4,2,1]','Max length=351 for starting value 77031'],
 'hamming'=>
 ['The first 20 Hamming numbers are: [1,2,3,4,5,6,8,9,10,12,15,16,18,20,24,25,27,30,32,36]',
  'The 1691st Hamming number is    : 2125764000'],
 'happyNumbers'=>
 ['[1,7,10,13,19,23,28,31,32,44]'],
 'harshad'=>
 [' 1',' 2',' 3',' 4',' 5',' 6',' 7',' 8',' 9','10','12','18','20','21','24','27','30','36','40','42',
  'The first Harshad Number >1000 is 1002'],
 'hashJoin'=>
 ['Table A:','Age | Name','----+-------','27  | Jonah','18  | Alan','28  | Glory','18  | Popeye','28  | Alan','','Table B:',
  'Character | Nemesis','----------+--------','Jonah     | Whales','Jonah     | Spiders','Alan      | Ghosts',
  'Alan      | Zombies','Glory     | Buffy','Me        | Things','','Inner join:','A.Age | A.Name | B.Character | B.Nemesis',
  '------+--------+-------------+----------','27    | Jonah  | Jonah       | Whales','27    | Jonah  | Jonah       | Spiders',
  '18    | Alan   | Alan        | Ghosts','18    | Alan   | Alan        | Zombies','28    | Glory  | Glory       | Buffy',
  '28    | Alan   | Alan        | Ghosts','28    | Alan   | Alan        | Zombies','','Outer join:',
  'A.Age | A.Name | B.Character | B.Nemesis','------+--------+-------------+----------','27    | Jonah  | Jonah       | Whales',
  '27    | Jonah  | Jonah       | Spiders','18    | Alan   | Alan        | Ghosts','18    | Alan   | Alan        | Zombies',
  '28    | Glory  | Glory       | Buffy','18    | Popeye |             |','28    | Alan   | Alan        | Ghosts',
  '28    | Alan   | Alan        | Zombies','      |        | Me          | Things'],
 'heart'=>
 ['FDLinux'=>
  ['png hash: 5B17E85451D1B46A97054F507E771420AF6F58D6E8426B9F180E345FF5715D6D'],
  'FDWin32'=>
  ['png hash: B1D031AC585836C120BCC6C18C84A745711882AD09CF37C4B5817381077CB8C6'],
  'FDWin64'=>
  ['png hash: 5B17E85451D1B46A97054F507E771420AF6F58D6E8426B9F180E345FF5715D6D'],
  'FOLinux'=>
  ['png hash: 5B17E85451D1B46A97054F507E771420AF6F58D6E8426B9F180E345FF5715D6D'],
  'FOWin32'=>
  ['png hash: B1D031AC585836C120BCC6C18C84A745711882AD09CF37C4B5817381077CB8C6'],
  'FOWin64'=>
  ['png hash: 5B17E85451D1B46A97054F507E771420AF6F58D6E8426B9F180E345FF5715D6D']].toMap,
 'helloWorld'=>
 ['Hello world'],
 'helloWorldHttp'=>
 ['Server responded with code: 200',
  'Hello world.<br><br>method: GET<br>protocol: HTTP/1.1<br>path: /page.html<br><br>Host: 127.0.0.1:65432<br>Connection: close'],
 'hereDoc'=>
 ['','  This is a simple text...','       with a \ which would have to be escaped otherwise.','    And indentations of course.'],
 'hofstadterConway'=>
 ['range 2^ 0..2^ 1 max. a(n)/n= 1.00000000000000 @i=      1','range 2^ 1..2^ 2 max. a(n)/n= 0.66666666666667 @i=      3',
  'range 2^ 2..2^ 3 max. a(n)/n= 0.66666666666667 @i=      6','range 2^ 3..2^ 4 max. a(n)/n= 0.63636363636364 @i=     11',
  'range 2^ 4..2^ 5 max. a(n)/n= 0.60869565217391 @i=     23','range 2^ 5..2^ 6 max. a(n)/n= 0.59090909090909 @i=     44',
  'range 2^ 6..2^ 7 max. a(n)/n= 0.57608695652174 @i=     92','range 2^ 7..2^ 8 max. a(n)/n= 0.56741573033708 @i=    178',
  'range 2^ 8..2^ 9 max. a(n)/n= 0.55945945945946 @i=    370','range 2^ 9..2^10 max. a(n)/n= 0.55493741307371 @i=    719',
  'range 2^10..2^11 max. a(n)/n= 0.55010087424344 @i=   1487','range 2^11..2^12 max. a(n)/n= 0.54746289264757 @i=   2897',
  'range 2^12..2^13 max. a(n)/n= 0.54414474786396 @i=   5969','range 2^13..2^14 max. a(n)/n= 0.54244270878036 @i=  11651',
  'range 2^14..2^15 max. a(n)/n= 0.54007109751159 @i=  22223','range 2^15..2^16 max. a(n)/n= 0.53878402058426 @i=  45083',
  'range 2^16..2^17 max. a(n)/n= 0.53704365699987 @i=  89516','Mallows Number: 1489'],
 'hofstadter_sequences'=>
 ['(OEIS A005228) R: 1, 3, 7, 12, 18, 26, 35, 45, 56, 69, 83, 98, 114, 131, 150, 170, 191, 213, 236, 260',
  '(OEIS A030124) S: 2, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25',
  '(OEIS A005206) G: 0, 1, 1, 2, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 9, 10, 11, 11, 12',
  '(OEIS A005374) H: 0, 1, 1, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8, 9, 10, 10, 11, 12, 13, 13',
  '(OEIS A005378) F: 1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 11, 11, 12',
  '(OEIS A005379) M: 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10, 11, 11, 12',
  '(OEIS A005185) Q: 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 6, 8, 8, 8, 10, 9, 10, 11, 11, 12'],
 'huffmann'=>
 ['See http://rosettacode.org/wiki/Huffman_coding',' code                char',' 1101100110000000110 #173',
  ' 1101100110000000111 #180',' 1101100110000011010 #133',' 1101100110000011011 #165','  110110011000000010 #187',
  '  110110011000001100 #167','   01111001111001000 #162','   01111001111001001 #170','   11011001100000000 #164',
  '   11011001100000100 #177','   11011001100000101 #179','   11011001100000111 #161','    0111100111100101 #188',
  '    1101100110000001 #182','     011110011110011 #168',"      01111001111000 'X'","      11011001100001 'Q'",
  "       0111100111101 'U'",'       1101100110001 #169',"       1101100110010 'Y'","       1101100110011 'Z'",
  '        011110011111 #195',"        110110011110 'V'","        110110011111 'I'","         01111001110 'O'",
  "         11011001000 'W'","         11011001001 'F'","         11011001010 'J'","         11011001011 'N'",
  "         11011001101 'E'","         11011001110 'K'","          0011001000 'R'","          0011001001 'D'",
  "          0111100010 'G'","          0111100011 'T'","          0111100110 'H'","          1101100000 'L'",
  "          1101100001 'P'","           001100000 'A'","           001100001 'B'","           001100010 'j'",
  "           001100011 'q'","           001100101 'C'","           011110000 'S'","           011110010 'M'",
  "           110110001 'x'","            00110011 'z'","             0111101 'w'","             1101000 'v'",
  "             1101001 'k'","             1101101 'f'","              001101 'y'","              011111 'b'",
  "              110101 'h'","              110111 'm'","              111010 'p'","              111011 'g'",
  "               00111 'u'","               01110 'd'",'               10100 "''"',"               10101 'c'",
  "               11100 'l'","                0010 'o'","                0110 't'","                1000 'r'",
  "                1001 'n'","                1011 'a'","                1100 'i'","                1111 'e'",
  "                 000 's'",'                 010 #10'],
 'integerPartitionFunction'=>
 ['   1                                                                1',
  '   2                                                              1   1',
  '   3                                                            1   1   1',
  '   5                                                         1    2   1   1',
  '   7                                                       1    2   2   1   1',
  '  11                                                    1    3    3   2   1   1',
  '  15                                                 1     3    4   3   2   1   1',
  '  22                                              1     4    5    5   3   2   1   1',
  '  30                                           1     4     7    6   5   3   2   1   1',
  '  42                                        1     5     8    9    7   5   3   2   1   1',
  '  56                                     1     5    10    11   10   7   5   3   2   1   1',
  '  77                                  1     6    12    15   13   11   7   5   3   2   1   1',
  ' 101                               1     6    14    18    18   14  11   7   5   3   2   1   1',
  ' 135                            1     7    16    23    23   20   15  11   7   5   3   2   1  1',
  ' 176                         1     7    19    27    30    26   21  15  11   7   5   3   2   1 1',
  ' 231                      1     8    21    34    37    35   28   22  15  11   7   5   3   2  1 1',
  ' 297                   1     8    24    39    47    44    38   29  22  15  11   7   5   3   2 1 1',
  ' 385                1     9    27    47    57    58    49   40   30  22  15  11   7   5   3  2 1 1',
  ' 490             1     9    30    54    70    71    65    52   41  30  22  15  11   7   5   3 2 1 1',
  ' 627          1    10    33    64    84    90    82    70   54   42  30  22  15  11   7   5  3 2 1 1',
  ' 792        1   10    37    72   101   110   105    89    73   55  42  30  22  15  11   7   5 3 2 1 1',
  '1002      1  11    40    84   119   136   131   116    94   75   56  42  30  22  15  11   7  5 3 2 1 1',
  '1255    1  11   44    94   141   163   164   146   123    97   76  56  42  30  22  15  11   7 5 3 2 1 1',
  '1575  1  12  48   108   164   199   201   186   157   128   99   77  56  42  30  22  15  11  7 5 3 2 1 1',
  '1958 1 12  52  120   192   235   248   230   201   164   131  100  77  56  42  30  22  15  11 7 5 3 2 1 1'],
 'ipcTest'=>
 ['[2,3,7,11,13,83,28297]','?','[2,5,97,569,13901,1513651]'],
 'isaac'=>
 ['cx8OW1Z3GUIwLXegL2g=','This is a test'],
 'jaro'=>
 ["The Jaro distance of 'MARTHA'","                 and 'MARHTA' is 0.94444","The Jaro distance of 'DIXON'",
  "                 and 'DICKSONX' is 0.76667","The Jaro distance of 'JELLYFISH'","                 and 'SMELLYFISH' is 0.89630"
 ],
 'josephus'=>
 ['Prisoners: 41','Step size: 3','Survivors: [30]'],
 'json'=>
 ["['Reiten','Golfen','Lesen']",'2000000.0',
  '{"Deckung":2000000.0,"Waehrung":"EURO","Herausgeber":"Xema","Nummer":"1234-5678-9012-3456"}'],
 'kaprekar'=>
 ['The Kaprekar numbers up to 10000 are [1,9,45,55,99,297,703,999,2223,2728,4879,4950,5050,5292,7272,7777,9999]'],
 'knightsTour'=>
 ['46  7 62 59 38  9 40 53 ','61 58 47  8 51 54 37 10 ',' 6 45 60 63 48 39 52 41 ','57 64 33 44 55 50 11 36 ',
  '20  5 56 49 32 35 42 27 ','23  2 21 34 43 28 15 12 ',' 4 19 24 31 14 17 26 29 ',' 1 22  3 18 25 30 13 16 '],
 'kochCurve'=>
 ['png hash: 9207A5CC8DA7704A8B7CC8686B94E9B0FBF21BE0E161D4BFCA196C3836CDB803'],
 'lastSundays'=>
 ['25.01.2015','22.02.2015','29.03.2015','26.04.2015','31.05.2015','28.06.2015','26.07.2015','30.08.2015','27.09.2015',
  '25.10.2015','29.11.2015','27.12.2015'],
 'levenshtein'=>
 ['3'],
 'lindenmayer'=>
 [
  '[[0,0],[0.0,1.0],[1.0,1.0],[1.0,0.0],[3.0,0.0],[3.0,1.0],[2.0,1.0],[2.0,2.0],[3.0,2.0],[3.0,3.0],[1.0,3.0],[1.0,2.0],[0.0,2.0],[0.0,4.0],[1.0,4.0],[1.0,5.0],[0.0,5.0],[0.0,7.0],[1.0,7.0],[1.0,6.0],[2.0,6.0],[2.0,7.0],[3.0,7.0],[3.0,5.0],[2.0,5.0],[2.0,4.0],[4.0,4.0],[5.0,4.0],[5.0,5.0],[4.0,5.0],[4.0,7.0],[5.0,7.0],[5.0,6.0],[6.0,6.0],[6.0,7.0],[7.0,7.0],[7.0,5.0],[6.0,5.0],[6.0,4.0],[7.0,4.0],[7.0,2.0],[6.0,2.0],[6.0,3.0],[4.0,3.0],[4.0,2.0],[5.0,2.0],[5.0,1.0],[4.0,1.0],[4.0,0.0],[6.0,0.0],[6.0,1.0],[7.0,1.0],[7.0,0.0]]'
 ],
 'listAllBuiltinFunctions'=>
 ['files.allFiles','files.allFolders','files.appendFileLines','files.changeFileExt','files.copyFile','files.deleteDir',
  'files.deleteFile','files.exec','files.execAsync','files.execPipeless','files.expandedFileName','files.extractFileDirectory',
  'files.extractFileExt','files.extractFileName','files.extractFileNameOnly','files.fileContents','files.fileExists',
  'files.fileInfo','files.fileLineIterator','files.fileLines','files.fileStats','files.files','files.folderExists',
  'files.folders','files.moveFile','files.readDatastore','files.readXml','files.readXmlFile','files.relativeFileName',
  'files.setFileDate','files.systemSpecificFilename','files.teeExec','files.writeFile','files.writeFileLines',
  'gui.anyFormShowing','gui.editorContent','gui.editors','gui.showDialog','gui.showTable','gui.showVariable',
  'http.encodeRequest','http.extractParameters','http.extractPath','http.extractRawParameters','http.formatHtmlPage',
  'http.httpDelete','http.httpError','http.httpGet','http.httpPost','http.httpPut','http.isServerRunning','http.openUrl',
  'http.startHttpServer','http.wrapTextInHttp','ipc.assertUniqueInstance','ipc.isIpcServerRunning','ipc.sendIpcRequest',
  'ipc.startIpcServer','lists.chunkMap','lists.cross','lists.elementFrequency','lists.filter','lists.flatMap','lists.flatten',
  'lists.get','lists.getAll','lists.getInner','lists.head','lists.indexOf','lists.intersect','lists.isSubsetOf','lists.leading',
  'lists.map','lists.mergeMaps','lists.minus','lists.pFilter','lists.pMap','lists.reverseList','lists.size','lists.sort',
  'lists.sortPerm','lists.tail','lists.trailing','lists.transpose','lists.trueCount','lists.union','lists.unique','math.abs',
  'math.arccos','math.arcsin','math.arctan','math.arctan2','math.argMax','math.argMin','math.ceil','math.composeDigits',
  'math.cos','math.digits','math.divMod','math.euklideanNorm','math.exp','math.factorize','math.floor','math.gcd',
  'math.hammingWeight','math.isInfinite','math.isNan','math.isPrime','math.isqrt','math.ln','math.max','math.min',
  'math.modularInverse','math.permutationIterator','math.permutations','math.pi','math.powMod','math.primeGenerator',
  'math.primes','math.rangeGenerator','math.round','math.shiftRight','math.sign','math.sin','math.sqr','math.sqrt',
  'math.subSets','math.tan','mnh.COMPARATOR_EQ','mnh.COMPARATOR_GEQ','mnh.COMPARATOR_GRT','mnh.COMPARATOR_LEQ',
  'mnh.COMPARATOR_LISTEQ','mnh.COMPARATOR_LSS','mnh.COMPARATOR_NEQ','mnh.OPERATOR_AND','mnh.OPERATOR_CONCAT',
  'mnh.OPERATOR_CONCATALT','mnh.OPERATOR_DIVINT','mnh.OPERATOR_DIVREAL','mnh.OPERATOR_IN','mnh.OPERATOR_LAZYAND',
  'mnh.OPERATOR_LAZYOR','mnh.OPERATOR_MINUS','mnh.OPERATOR_MOD','mnh.OPERATOR_MULT','mnh.OPERATOR_NEGATE_ARITHMETIC',
  'mnh.OPERATOR_NEGATE_LOGICAL','mnh.OPERATOR_NOT_IN','mnh.OPERATOR_OR','mnh.OPERATOR_ORELSE','mnh.OPERATOR_PLUS',
  'mnh.OPERATOR_POT','mnh.OPERATOR_STRCONCAT','mnh.OPERATOR_UNARY_PLUS','mnh.OPERATOR_XOR','mnh.arity','mnh.executor',
  'mnh.group','mnh.hash','mnh.helpOnMain','mnh.inspect','mnh.inspectAll','mnh.interpret','mnh.listBuiltin','mnh.listSideEffects',
  'mnh.mnhInfo','mnh.myPath','mnh.ord','mnh.parameterNames','mnh.runScript','mnh.sandBoxExecute','mnh.sleep','mnh.sleepUntil',
  'plot.addAnimationFrame','plot.addPlot','plot.clearAnimation','plot.display','plot.drawText','plot.drawTextAbsolute',
  'plot.getOptions','plot.plot','plot.plotClosed','plot.postDisplay','plot.removePlot','plot.removeText','plot.renderToFile',
  'plot.renderToString','plot.resetOptions','plot.setOptions','regex.matchComposite','regex.matches','regex.replace',
  'regex.split','regex.validateRegex','strings.ansiToUtf8','strings.base64decode','strings.base64encode','strings.base92decode',
  'strings.base92encode','strings.byteLength','strings.byteToChar','strings.bytes','strings.charSet','strings.chars',
  'strings.clean','strings.compress','strings.copy','strings.decompress','strings.diff','strings.diffStats','strings.escape',
  'strings.escapeJava','strings.escapePascal','strings.format','strings.formatTabs','strings.formatTime','strings.hasPrefix',
  'strings.isAscii','strings.isUtf8','strings.join','strings.length','strings.lower','strings.md5','strings.parseTime',
  'strings.pos','strings.repeat','strings.replace','strings.replaceOne','strings.reverseString','strings.sha256','strings.split',
  'strings.stringIterator','strings.tokenSplit','strings.trim','strings.trimLeft','strings.trimRight','strings.unbrace',
  'strings.upper','strings.utf8ToAnsi','system.ask','system.assert','system.assertGuiStarted','system.async','system.beep',
  'system.callMemoryCleaner','system.changeDirectory','system.clearPrint','system.deserialize','system.driveInfo','system.fail',
  'system.future','system.getCPULoadPercentage','system.getEnv','system.getTaskInfo','system.halt','system.intRandom',
  'system.intRandomGenerator','system.isGuiStarted','system.isaacRandomGenerator','system.localAsync','system.note',
  'system.print','system.printDirect','system.printf','system.random','system.randomGenerator','system.resetRandom',
  'system.scriptTime','system.serialize','system.setExitCode','system.systime','system.time','system.try',
  'system.vanDerCorputGenerator','system.warn','system.writeAllDataStores','system.writeDataStores','typecast.isBoolean',
  'typecast.isBooleanCollection','typecast.isBooleanList','typecast.isBooleanSet','typecast.isCollection',
  'typecast.isExpression','typecast.isInt','typecast.isIntCollection','typecast.isIntList','typecast.isIntSet',
  'typecast.isIteratable','typecast.isIteratableExpression','typecast.isList','typecast.isMap','typecast.isNumeric',
  'typecast.isNumericCollection','typecast.isNumericList','typecast.isNumericSet','typecast.isReal','typecast.isRealCollection',
  'typecast.isRealList','typecast.isRealSet','typecast.isScalar','typecast.isSet','typecast.isStatefulExpression',
  'typecast.isStatelessExpression','typecast.isString','typecast.isStringCollection','typecast.isStringList',
  'typecast.isStringSet','typecast.isVoid','typecast.softCast','typecast.toBoolean','typecast.toBuiltin','typecast.toExpression',
  'typecast.toGenerator','typecast.toInt','typecast.toIteratableExpression','typecast.toList','typecast.toMap','typecast.toReal',
  'typecast.toSet','typecast.toString','typecast.typeOf'],
 'listRanking'=>
 ['List    : [1,6,1,4597,0]',
  'Rank    : 48942005486434827502806092006992560781726279940833240076824944099191814613366392386749511713434763839793302473069661829226469896255790152457173827842149281794599962607711210340276836500958930839473641144547780511809293095348639369721180460366414928804153948429166448151958340494749681812924530523361965128764932548323245565136986888584661354008705906617999366517351362086853543501906890988915157219711079820671912621909921395047344253197344657112755544702382729250669883310119301973836036251701710800552207368446803570537665178627003469484124786697014978833113893077356259143350219361001048384654470892585488086106944426818972239932713163354332014247560961130990241654849746236810643616383737149888816110076880093749904546441612910808259658574531716957005765890635376913364756146085740404821899425000897252572399977426713810869444077314341344145099171077329565437023340658785522450074057565221878954859960225238545160197314588850398422579241830323957893112028168676670519808656913218321781100341612223629062853317111157815024828973363574089650706601192225459515817614531841525757233033436342958238413758336341786786387933176955177949155980995936866788985585614664711170625337826033350471542591061371141124998467242260938236283646889611877716229550846620347986690447316267985993469720696664345697846169830501273004573947392636552548343809724870107046640208347311365203189121778629713330174',
  'Unranked: [1,6,1,4597,0]',' 0 -> []        ->  0',' 1 -> [0]       ->  1',' 2 -> [0,0]     ->  2',' 3 -> [1]       ->  3',
  ' 4 -> [0,0,0]   ->  4',' 5 -> [0,1]     ->  5',' 6 -> [1,0]     ->  6',' 7 -> [2]       ->  7',' 8 -> [0,0,0,0] ->  8',
  ' 9 -> [0,0,1]   ->  9','10 -> [0,1,0]   -> 10'],
 'logTest'=>
 ['[1]','[2]','[3]','[2,2]','[5]','[2,3]','[7]','[2,2,2]','[3,3]','[2,5]','[11]','[2,2,3]','[13]','[2,7]','[3,5]','[2,2,2,2]',
  '[17]','[2,3,3]','[19]','[2,2,5]','[3,7]','[2,11]','[23]','[2,2,2,3]','[5,5]','[2,13]','[3,3,3]','[2,2,7]','[29]','[2,3,5]',
  '[31]','[2,2,2,2,2]','[3,11]','[2,17]','[5,7]','[2,2,3,3]','[37]','[2,19]','[3,13]','[2,2,2,5]','[41]','[2,3,7]','[43]',
  '[2,2,11]','[3,3,5]','[2,23]','[47]','[2,2,2,2,3]','[7,7]','[2,5,5]','[3,17]','[2,2,13]','[53]','[2,3,3,3]','[5,11]',
  '[2,2,2,7]','[3,19]','[2,29]','[59]','[2,2,3,5]','[61]','[2,31]','[3,3,7]','[2,2,2,2,2,2]','[5,13]','[2,3,11]','[67]',
  '[2,2,17]','[3,23]','[2,5,7]','[71]','[2,2,2,3,3]','[73]','[2,37]','[3,5,5]','[2,2,19]','[7,11]','[2,3,13]','[79]',
  '[2,2,2,2,5]','[3,3,3,3]','[2,41]','[83]','[2,2,3,7]','[5,17]','[2,43]','[3,29]','[2,2,2,11]','[89]','[2,3,3,5]','[7,13]',
  '[2,2,23]','[3,31]','[2,47]','[5,19]','[2,2,2,2,2,3]','[97]','[2,7,7]','[3,3,11]','[2,2,5,5]','[101]','[2,3,17]','[103]',
  '[2,2,2,13]','[3,5,7]','[2,53]','[107]','[2,2,3,3,3]','[109]','[2,5,11]','[3,37]','[2,2,2,2,7]','[113]','[2,3,19]','[5,23]',
  '[2,2,29]','[3,3,13]','[2,59]','[7,17]','[2,2,2,3,5]','[11,11]','[2,61]','[3,41]','[2,2,31]','[5,5,5]','[2,3,3,7]','[127]',
  '[2,2,2,2,2,2,2]','[3,43]','[2,5,13]','[131]','[2,2,3,11]','[7,19]','[2,67]','[3,3,3,5]','[2,2,2,17]','[137]','[2,3,23]',
  '[139]','[2,2,5,7]','[3,47]','[2,71]','[11,13]','[2,2,2,2,3,3]','[5,29]','[2,73]','[3,7,7]','[2,2,37]','[149]','[2,3,5,5]',
  '[151]','[2,2,2,19]','[3,3,17]','[2,7,11]','[5,31]','[2,2,3,13]','[157]','[2,79]','[3,53]','[2,2,2,2,2,5]','[7,23]',
  '[2,3,3,3,3]','[163]','[2,2,41]','[3,5,11]','[2,83]','[167]','[2,2,2,3,7]','[13,13]','[2,5,17]','[3,3,19]','[2,2,43]','[173]',
  '[2,3,29]','[5,5,7]','[2,2,2,2,11]','[3,59]','[2,89]','[179]','[2,2,3,3,5]','[181]','[2,7,13]','[3,61]','[2,2,2,23]','[5,37]',
  '[2,3,31]','[11,17]','[2,2,47]','[3,3,3,7]','[2,5,19]','[191]','[2,2,2,2,2,2,3]','[193]','[2,97]','[3,5,13]','[2,2,7,7]',
  '[197]','[2,3,3,11]','[199]','[2,2,2,5,5]','[3,67]','[2,101]','[7,29]','[2,2,3,17]','[5,41]','[2,103]','[3,3,23]',
  '[2,2,2,2,13]','[11,19]','[2,3,5,7]','[211]','[2,2,53]','[3,71]','[2,107]','[5,43]','[2,2,2,3,3,3]','[7,31]','[2,109]',
  '[3,73]','[2,2,5,11]','[13,17]','[2,3,37]','[223]','[2,2,2,2,2,7]','[3,3,5,5]','[2,113]','[227]','[2,2,3,19]','[229]',
  '[2,5,23]','[3,7,11]','[2,2,2,29]','[233]','[2,3,3,13]','[5,47]','[2,2,59]','[3,79]','[2,7,17]','[239]','[2,2,2,2,3,5]',
  '[241]','[2,11,11]','[3,3,3,3,3]','[2,2,61]','[5,7,7]','[2,3,41]','[13,19]','[2,2,2,31]','[3,83]','[2,5,5,5]','[251]',
  '[2,2,3,3,7]','[11,23]','[2,127]','[3,5,17]','[2,2,2,2,2,2,2,2]','[257]','[2,3,43]','[7,37]','[2,2,5,13]','[3,3,29]','[2,131]',
  '[263]','[2,2,2,3,11]','[5,53]','[2,7,19]','[3,89]','[2,2,67]','[269]','[2,3,3,3,5]','[271]','[2,2,2,2,17]','[3,7,13]',
  '[2,137]','[5,5,11]','[2,2,3,23]','[277]','[2,139]','[3,3,31]','[2,2,2,5,7]','[281]','[2,3,47]','[283]','[2,2,71]','[3,5,19]',
  '[2,11,13]','[7,41]','[2,2,2,2,2,3,3]','[17,17]','[2,5,29]','[3,97]','[2,2,73]','[293]','[2,3,7,7]','[5,59]','[2,2,2,37]',
  '[3,3,3,11]','[2,149]','[13,23]','[2,2,3,5,5]','[7,43]','[2,151]','[3,101]','[2,2,2,2,19]','[5,61]','[2,3,3,17]','[307]',
  '[2,2,7,11]','[3,103]','[2,5,31]','[311]','[2,2,2,3,13]','[313]','[2,157]','[3,3,5,7]','[2,2,79]','[317]','[2,3,53]','[11,29]',
  '[2,2,2,2,2,2,5]','[3,107]','[2,7,23]','[17,19]','[2,2,3,3,3,3]','[5,5,13]','[2,163]','[3,109]','[2,2,2,41]','[7,47]',
  '[2,3,5,11]','[331]','[2,2,83]','[3,3,37]','[2,167]','[5,67]','[2,2,2,2,3,7]','[337]','[2,13,13]','[3,113]','[2,2,5,17]',
  '[11,31]','[2,3,3,19]','[7,7,7]','[2,2,2,43]','[3,5,23]','[2,173]','[347]','[2,2,3,29]','[349]','[2,5,5,7]','[3,3,3,13]',
  '[2,2,2,2,2,11]','[353]','[2,3,59]','[5,71]','[2,2,89]','[3,7,17]','[2,179]','[359]','[2,2,2,3,3,5]','[19,19]','[2,181]',
  '[3,11,11]','[2,2,7,13]','[5,73]','[2,3,61]','[367]','[2,2,2,2,23]','[3,3,41]','[2,5,37]','[7,53]','[2,2,3,31]','[373]',
  '[2,11,17]','[3,5,5,5]','[2,2,2,47]','[13,29]','[2,3,3,3,7]','[379]','[2,2,5,19]','[3,127]','[2,191]','[383]',
  '[2,2,2,2,2,2,2,3]','[5,7,11]','[2,193]','[3,3,43]','[2,2,97]','[389]','[2,3,5,13]','[17,23]','[2,2,2,7,7]','[3,131]',
  '[2,197]','[5,79]','[2,2,3,3,11]','[397]','[2,199]','[3,7,19]','[2,2,2,2,5,5]','[401]','[2,3,67]','[13,31]','[2,2,101]',
  '[3,3,3,3,5]','[2,7,29]','[11,37]','[2,2,2,3,17]','[409]','[2,5,41]','[3,137]','[2,2,103]','[7,59]','[2,3,3,23]','[5,83]',
  '[2,2,2,2,2,13]','[3,139]','[2,11,19]','[419]','[2,2,3,5,7]','[421]','[2,211]','[3,3,47]','[2,2,2,53]','[5,5,17]','[2,3,71]',
  '[7,61]','[2,2,107]','[3,11,13]','[2,5,43]','[431]','[2,2,2,2,3,3,3]','[433]','[2,7,31]','[3,5,29]','[2,2,109]','[19,23]',
  '[2,3,73]','[439]','[2,2,2,5,11]','[3,3,7,7]','[2,13,17]','[443]','[2,2,3,37]','[5,89]','[2,223]','[3,149]','[2,2,2,2,2,2,7]',
  '[449]','[2,3,3,5,5]','[11,41]','[2,2,113]','[3,151]','[2,227]','[5,7,13]','[2,2,2,3,19]','[457]','[2,229]','[3,3,3,17]',
  '[2,2,5,23]','[461]','[2,3,7,11]','[463]','[2,2,2,2,29]','[3,5,31]','[2,233]','[467]','[2,2,3,3,13]','[7,67]','[2,5,47]',
  '[3,157]','[2,2,2,59]','[11,43]','[2,3,79]','[5,5,19]','[2,2,7,17]','[3,3,53]','[2,239]','[479]','[2,2,2,2,2,3,5]','[13,37]',
  '[2,241]','[3,7,23]','[2,2,11,11]','[5,97]','[2,3,3,3,3,3]','[487]','[2,2,2,61]','[3,163]','[2,5,7,7]','[491]','[2,2,3,41]',
  '[17,29]','[2,13,19]','[3,3,5,11]','[2,2,2,2,31]','[7,71]','[2,3,83]','[499]','[2,2,5,5,5]','[3,167]','[2,251]','[503]',
  '[2,2,2,3,3,7]','[5,101]','[2,11,23]','[3,13,13]','[2,2,127]','[509]','[2,3,5,17]','[7,73]','[2,2,2,2,2,2,2,2,2]','[3,3,3,19]',
  '[2,257]','[5,103]','[2,2,3,43]','[11,47]','[2,7,37]','[3,173]','[2,2,2,5,13]','[521]','[2,3,3,29]','[523]','[2,2,131]',
  '[3,5,5,7]','[2,263]','[17,31]','[2,2,2,2,3,11]','[23,23]','[2,5,53]','[3,3,59]','[2,2,7,19]','[13,41]','[2,3,89]','[5,107]',
  '[2,2,2,67]','[3,179]','[2,269]','[7,7,11]','[2,2,3,3,3,5]','[541]','[2,271]','[3,181]','[2,2,2,2,2,17]','[5,109]',
  '[2,3,7,13]','[547]','[2,2,137]','[3,3,61]','[2,5,5,11]','[19,29]','[2,2,2,3,23]','[7,79]','[2,277]','[3,5,37]','[2,2,139]',
  '[557]','[2,3,3,31]','[13,43]','[2,2,2,2,5,7]','[3,11,17]','[2,281]','[563]','[2,2,3,47]','[5,113]','[2,283]','[3,3,3,3,7]',
  '[2,2,2,71]','[569]','[2,3,5,19]','[571]','[2,2,11,13]','[3,191]','[2,7,41]','[5,5,23]','[2,2,2,2,2,2,3,3]','[577]',
  '[2,17,17]','[3,193]','[2,2,5,29]','[7,83]','[2,3,97]','[11,53]','[2,2,2,73]','[3,3,5,13]','[2,293]','[587]','[2,2,3,7,7]',
  '[19,31]','[2,5,59]','[3,197]','[2,2,2,2,37]','[593]','[2,3,3,3,11]','[5,7,17]','[2,2,149]','[3,199]','[2,13,23]','[599]',
  '[2,2,2,3,5,5]','[601]','[2,7,43]','[3,3,67]','[2,2,151]','[5,11,11]','[2,3,101]','[607]','[2,2,2,2,2,19]','[3,7,29]',
  '[2,5,61]','[13,47]','[2,2,3,3,17]','[613]','[2,307]','[3,5,41]','[2,2,2,7,11]','[617]','[2,3,103]','[619]','[2,2,5,31]',
  '[3,3,3,23]','[2,311]','[7,89]','[2,2,2,2,3,13]','[5,5,5,5]','[2,313]','[3,11,19]','[2,2,157]','[17,37]','[2,3,3,5,7]','[631]',
  '[2,2,2,79]','[3,211]','[2,317]','[5,127]','[2,2,3,53]','[7,7,13]','[2,11,29]','[3,3,71]','[2,2,2,2,2,2,2,5]','[641]',
  '[2,3,107]','[643]','[2,2,7,23]','[3,5,43]','[2,17,19]','[647]','[2,2,2,3,3,3,3]','[11,59]','[2,5,5,13]','[3,7,31]',
  '[2,2,163]','[653]','[2,3,109]','[5,131]','[2,2,2,2,41]','[3,3,73]','[2,7,47]','[659]','[2,2,3,5,11]','[661]','[2,331]',
  '[3,13,17]','[2,2,2,83]','[5,7,19]','[2,3,3,37]','[23,29]','[2,2,167]','[3,223]','[2,5,67]','[11,61]','[2,2,2,2,2,3,7]',
  '[673]','[2,337]','[3,3,3,5,5]','[2,2,13,13]','[677]','[2,3,113]','[7,97]','[2,2,2,5,17]','[3,227]','[2,11,31]','[683]',
  '[2,2,3,3,19]','[5,137]','[2,7,7,7]','[3,229]','[2,2,2,2,43]','[13,53]','[2,3,5,23]','[691]','[2,2,173]','[3,3,7,11]',
  '[2,347]','[5,139]','[2,2,2,3,29]','[17,41]','[2,349]','[3,233]','[2,2,5,5,7]','[701]','[2,3,3,3,13]','[19,37]',
  '[2,2,2,2,2,2,11]','[3,5,47]','[2,353]','[7,101]','[2,2,3,59]','[709]','[2,5,71]','[3,3,79]','[2,2,2,89]','[23,31]',
  '[2,3,7,17]','[5,11,13]','[2,2,179]','[3,239]','[2,359]','[719]','[2,2,2,2,3,3,5]','[7,103]','[2,19,19]','[3,241]','[2,2,181]',
  '[5,5,29]','[2,3,11,11]','[727]','[2,2,2,7,13]','[3,3,3,3,3,3]','[2,5,73]','[17,43]','[2,2,3,61]','[733]','[2,367]',
  '[3,5,7,7]','[2,2,2,2,2,23]','[11,67]','[2,3,3,41]','[739]','[2,2,5,37]','[3,13,19]','[2,7,53]','[743]','[2,2,2,3,31]',
  '[5,149]','[2,373]','[3,3,83]','[2,2,11,17]','[7,107]','[2,3,5,5,5]','[751]','[2,2,2,2,47]','[3,251]','[2,13,29]','[5,151]',
  '[2,2,3,3,3,7]','[757]','[2,379]','[3,11,23]','[2,2,2,5,19]','[761]','[2,3,127]','[7,109]','[2,2,191]','[3,3,5,17]','[2,383]',
  '[13,59]','[2,2,2,2,2,2,2,2,3]','[769]','[2,5,7,11]','[3,257]','[2,2,193]','[773]','[2,3,3,43]','[5,5,31]','[2,2,2,97]',
  '[3,7,37]','[2,389]','[19,41]','[2,2,3,5,13]','[11,71]','[2,17,23]','[3,3,3,29]','[2,2,2,2,7,7]','[5,157]','[2,3,131]','[787]',
  '[2,2,197]','[3,263]','[2,5,79]','[7,113]','[2,2,2,3,3,11]','[13,61]','[2,397]','[3,5,53]','[2,2,199]','[797]','[2,3,7,19]',
  '[17,47]','[2,2,2,2,2,5,5]','[3,3,89]','[2,401]','[11,73]','[2,2,3,67]','[5,7,23]','[2,13,31]','[3,269]','[2,2,2,101]','[809]',
  '[2,3,3,3,3,5]','[811]','[2,2,7,29]','[3,271]','[2,11,37]','[5,163]','[2,2,2,2,3,17]','[19,43]','[2,409]','[3,3,7,13]',
  '[2,2,5,41]','[821]','[2,3,137]','[823]','[2,2,2,103]','[3,5,5,11]','[2,7,59]','[827]','[2,2,3,3,23]','[829]','[2,5,83]',
  '[3,277]','[2,2,2,2,2,2,13]','[7,7,17]','[2,3,139]','[5,167]','[2,2,11,19]','[3,3,3,31]','[2,419]','[839]','[2,2,2,3,5,7]',
  '[29,29]','[2,421]','[3,281]','[2,2,211]','[5,13,13]','[2,3,3,47]','[7,11,11]','[2,2,2,2,53]','[3,283]','[2,5,5,17]','[23,37]',
  '[2,2,3,71]','[853]','[2,7,61]','[3,3,5,19]','[2,2,2,107]','[857]','[2,3,11,13]','[859]','[2,2,5,43]','[3,7,41]','[2,431]',
  '[863]','[2,2,2,2,2,3,3,3]','[5,173]','[2,433]','[3,17,17]','[2,2,7,31]','[11,79]','[2,3,5,29]','[13,67]','[2,2,2,109]',
  '[3,3,97]','[2,19,23]','[5,5,5,7]','[2,2,3,73]','[877]','[2,439]','[3,293]','[2,2,2,2,5,11]','[881]','[2,3,3,7,7]','[883]',
  '[2,2,13,17]','[3,5,59]','[2,443]','[887]','[2,2,2,3,37]','[7,127]','[2,5,89]','[3,3,3,3,11]','[2,2,223]','[19,47]',
  '[2,3,149]','[5,179]','[2,2,2,2,2,2,2,7]','[3,13,23]','[2,449]','[29,31]','[2,2,3,3,5,5]','[17,53]','[2,11,41]','[3,7,43]',
  '[2,2,2,113]','[5,181]','[2,3,151]','[907]','[2,2,227]','[3,3,101]','[2,5,7,13]','[911]','[2,2,2,2,3,19]','[11,83]','[2,457]',
  '[3,5,61]','[2,2,229]','[7,131]','[2,3,3,3,17]','[919]','[2,2,2,5,23]','[3,307]','[2,461]','[13,71]','[2,2,3,7,11]','[5,5,37]',
  '[2,463]','[3,3,103]','[2,2,2,2,2,29]','[929]','[2,3,5,31]','[7,7,19]','[2,2,233]','[3,311]','[2,467]','[5,11,17]',
  '[2,2,2,3,3,13]','[937]','[2,7,67]','[3,313]','[2,2,5,47]','[941]','[2,3,157]','[23,41]','[2,2,2,2,59]','[3,3,3,5,7]',
  '[2,11,43]','[947]','[2,2,3,79]','[13,73]','[2,5,5,19]','[3,317]','[2,2,2,7,17]','[953]','[2,3,3,53]','[5,191]','[2,2,239]',
  '[3,11,29]','[2,479]','[7,137]','[2,2,2,2,2,2,3,5]','[31,31]','[2,13,37]','[3,3,107]','[2,2,241]','[5,193]','[2,3,7,23]',
  '[967]','[2,2,2,11,11]','[3,17,19]','[2,5,97]','[971]','[2,2,3,3,3,3,3]','[7,139]','[2,487]','[3,5,5,13]','[2,2,2,2,61]',
  '[977]','[2,3,163]','[11,89]','[2,2,5,7,7]','[3,3,109]','[2,491]','[983]','[2,2,2,3,41]','[5,197]','[2,17,29]','[3,7,47]',
  '[2,2,13,19]','[23,43]','[2,3,3,5,11]','[991]','[2,2,2,2,2,31]','[3,331]','[2,7,71]','[5,199]','[2,2,3,83]','[997]','[2,499]',
  '[3,3,3,37]','[2,2,2,5,5,5]','Exit code is okay'],
 'longestCommonSubsequence'=>
 ['The longest common subsequence',"of  'thisisatest'","and 'testing123testing'","is  'tsitest'"],
 'longestIncreasingSubseq'=>
 ['[3,4,5]','[0,4,6,9,13,15]'],
 'ludic'=>
 ['Ludic Numbers','  The first 25 are: [1,2,3,5,7,11,13,17,23,25,29,37,41,43,47,53,61,67,71,77,83,89,91,97,107].',
  '  There are 142 lesser or equal to 1000.','  The 2000..2005th are [21475,21481,21487,21493,21503,21511].',
  '  The triplets below 250 are (1,3,7),(5,7,11),(11,13,17),(23,25,29),(41,43,47),(173,175,179),(221,223,227),(233,235,239)'],
 'lychrelNumbers'=>
 ['Found 4 seed Lychrels below 10000','   196 with 141 related Lychrels','   879 with 100 related Lychrels',
  '  1997 with  58 related Lychrels','  7059 with  61 related Lychrels','Total       244 related Lychrels',
  'Found 3 palindromic Lychrel numbers: 4994, 8778, 9999'],
 'magicSquare'=>
 ['233 256 279 302 325 348 371 394 417 440   1  24  47  70  93 116 139 162 185 208 231',
  '255 278 301 324 347 370 393 416 439  21  23  46  69  92 115 138 161 184 207 230 232',
  '277 300 323 346 369 392 415 438  20  22  45  68  91 114 137 160 183 206 229 252 254',
  '299 322 345 368 391 414 437  19  42  44  67  90 113 136 159 182 205 228 251 253 276',
  '321 344 367 390 413 436  18  41  43  66  89 112 135 158 181 204 227 250 273 275 298',
  '343 366 389 412 435  17  40  63  65  88 111 134 157 180 203 226 249 272 274 297 320',
  '365 388 411 434  16  39  62  64  87 110 133 156 179 202 225 248 271 294 296 319 342',
  '387 410 433  15  38  61  84  86 109 132 155 178 201 224 247 270 293 295 318 341 364',
  '409 432  14  37  60  83  85 108 131 154 177 200 223 246 269 292 315 317 340 363 386',
  '431  13  36  59  82 105 107 130 153 176 199 222 245 268 291 314 316 339 362 385 408',
  ' 12  35  58  81 104 106 129 152 175 198 221 244 267 290 313 336 338 361 384 407 430',
  ' 34  57  80 103 126 128 151 174 197 220 243 266 289 312 335 337 360 383 406 429  11',
  ' 56  79 102 125 127 150 173 196 219 242 265 288 311 334 357 359 382 405 428  10  33',
  ' 78 101 124 147 149 172 195 218 241 264 287 310 333 356 358 381 404 427   9  32  55',
  '100 123 146 148 171 194 217 240 263 286 309 332 355 378 380 403 426   8  31  54  77',
  '122 145 168 170 193 216 239 262 285 308 331 354 377 379 402 425   7  30  53  76  99',
  '144 167 169 192 215 238 261 284 307 330 353 376 399 401 424   6  29  52  75  98 121',
  '166 189 191 214 237 260 283 306 329 352 375 398 400 423   5  28  51  74  97 120 143',
  '188 190 213 236 259 282 305 328 351 374 397 420 422   4  27  50  73  96 119 142 165',
  '210 212 235 258 281 304 327 350 373 396 419 421   3  26  49  72  95 118 141 164 187',
  '211 234 257 280 303 326 349 372 395 418 441   2  25  48  71  94 117 140 163 186 209','The magic number is 4641'],
 'maze'=>
 [
  "┌───────┬───┬───────┬───────┬───────┬───────┬───────────┬───────────────┬───────┐",
  "│       │   │       │       │       │       │           │               │       │   ",
  "│   │   ├───┘   │   │   ────┤   │   ├───────┘   ┌───┐   └───┬───────┐   └───────┤",
  "│   │   │       │   │       │   │   │           │   │       │       │           │   ",
  "│   └───┘   ┌───┼───┴───────┘   │   │   ┌───────┴───┼────   │   │   ├───┬────   │",
  "│           │   │               │       │           │       │   │   │   │       │   ",
  "├───────────┼───┘   ┌───────────┼───┬───┘   ┌───┐   │   ┌───┴───┤   └───┤   ────┤",
  "│           │       │           │   │       │   │       │       │       │       │   ",
  "│   ┌───┐   │   ┌───┤   ────┐   └───┘   ┌───┴───┼───────┘   │   └────   ├───────┤",
  "│   │   │       │   │       │           │       │           │           │       │   ",
  "│   └───┴───────┼───┴───┐   └───────────┤   │   ├───────┬───┼───────┬───┘   │   │",
  "│               │       │               │   │   │       │   │       │       │   │   ",
  "├───────────┐   │   ────┼───────────┐   ├───┘   │   │   │   │   ┌───┘   ┌───┤   │",
  "│           │   │       │           │   │       │   │   │       │       │   │   │   ",
  "├───────┐   │   └───┐   │   ┌───────┘   │   ┌───┤   │   └───────┤   ────┤   │   │",
  "│       │   │       │       │           │   │   │   │           │       │   │   │   ",
  "│   │   │   ├───┐   ├───────┤   ────────┘   │   │   ├────────   ├────   │   │   │",
  "│   │   │   │   │   │       │               │   │   │           │       │   │   │   ",
  "├───┘   │   │   │   │   │   ├───────┬───────┴───┘   │   ┌───────┤   ┌───┘   │   │",
  "│       │       │       │   │       │               │   │       │   │       │   │   ",
  "│   ┌───┴───────┴───┬───┤   │   │   ├───────────┬───┘   │   ┌───┘   │   ────┤   │",
  "│   │               │   │       │   │           │       │   │       │       │   │   ",
  "│   │   ────────┐   └───┴───┬───┘   │   ┌───┐   │   ┌───┘   │   ┌───┼───────┘   │",
  "│   │           │           │       │   │   │       │       │   │   │           │   ",
  "│   └───┬────   ├───┬────   │   ┌───┤   ├───┴───────┤   ┌───┤   │   │   ────────┤",
  "│       │       │   │       │   │   │   │           │   │   │   │   │           │   ",
  "├───┐   │   ┌───┘   │   ────┤   │   │   │   ┌────   │   │   │   │   ├───┬────   │",
  "│   │       │       │       │   │   │   │   │       │       │       │   │       │   ",
  "│   ├───────┴───────┴───┐   │   └───┤   │   └───┬───┼───────┴───────┤   │   ┌───┤",
  "│   │                   │   │       │   │       │   │               │   │   │   │   ",
  "│   │   ┌───────────┐   │   └───┐   └───┴───┐   │   │   ────┬───────┘   │   │   │",
  "│       │           │   │       │           │   │   │       │           │   │   │   ",
  "├───────┤   ────┬───┘   ├───┬───┴───┬───┬───┘   │   └───┐   │   ┌───────┘   │   │",
  "│       │       │       │   │       │   │       │       │   │   │           │   │   ",
  "│   ┌───┴────   │   ┌───┤   │   │   ├───┘   ┌───┼───────┘   │   │   ────────┴───┤",
  "│   │           │   │   │   │   │   │       │   │           │   │               │   ",
  "│   │   ┌───┬───┘   ├───┘   │   │   │   ┌───┘   │   ────┬───┤   ├───────┬───┐   │",
  "│       │   │       │       │   │       │       │       │   │   │       │   │   │   ",
  "├───────┘   │   ────┘   ┌───┤   └───────┴───────┴────   │   │   └────   │   │   │",
  "│           │           │   │                           │   │           │   │   │   ",
  "└───────────┴───────────┴───┴───────────────────────────┴───┴───────────┴───┴───┘"
 ],
 'memoization'=>
 ['The memoized function retuns 196418 and has been called     27 times',
  'The normal function retuns   196418 and has been called 392835 times'],
 'monteCarloPi'=>
 ['See http://rosettacode.org/wiki/Monte_Carlo_methods',
  'n=     10 pi approximated as 2.4       (random) and as 3.6       (Van der Corput generator)',
  'n=    100 pi approximated as 3.16      (random) and as 3.24      (Van der Corput generator)',
  'n=   1000 pi approximated as 3.132     (random) and as 3.148     (Van der Corput generator)',
  'n=  10000 pi approximated as 3.1412    (random) and as 3.1448    (Van der Corput generator)',
  'n= 100000 pi approximated as 3.14796   (random) and as 3.14208   (Van der Corput generator)',
  'n=1000000 pi approximated as 3.143148  (random) and as 3.141572  (Van der Corput generator)'],
 'montyHall'=>
 ['FDLinux'=>
  ['Monty Hall Problem','  1000 random runs','  Probability to win without switching doors 31.700000000000000399%',
   '  Probability to win with switching          68.30000000000000515 %','  Deterministic runs',
   '  Probability to win without switching doors 33.333333333333331483%',
   '  Probability to win with switching          66.666666666666662965%'],
  'FDWin32'=>
  ['Monty Hall Problem','  1000 random runs','  Probability to win without switching doors 31.7%',
   '  Probability to win with switching          68.3%','  Deterministic runs',
   '  Probability to win without switching doors 33.333333333333333335%',
   '  Probability to win with switching          66.66666666666666667 %'],
  'FDWin64'=>
  ['Monty Hall Problem','  1000 random runs','  Probability to win without switching doors 31.7             %',
   '  Probability to win with switching          68.30000000000001%','  Deterministic runs',
   '  Probability to win without switching doors 33.333333333333329%',
   '  Probability to win with switching          66.666666666666657%'],
  'FOLinux'=>
  ['Monty Hall Problem','  1000 random runs','  Probability to win without switching doors 31.700000000000000399%',
   '  Probability to win with switching          68.30000000000000515 %','  Deterministic runs',
   '  Probability to win without switching doors 33.333333333333331483%',
   '  Probability to win with switching          66.666666666666662965%'],
  'FOWin32'=>
  ['Monty Hall Problem','  1000 random runs','  Probability to win without switching doors 31.7%',
   '  Probability to win with switching          68.3%','  Deterministic runs',
   '  Probability to win without switching doors 33.333333333333333335%',
   '  Probability to win with switching          66.66666666666666667 %'],
  'FOWin64'=>
  ['Monty Hall Problem','  1000 random runs','  Probability to win without switching doors 31.7             %',
   '  Probability to win with switching          68.30000000000001%','  Deterministic runs',
   '  Probability to win without switching doors 33.333333333333329%',
   '  Probability to win with switching          66.666666666666657%'],
  'LDLinux'=>
  ['Monty Hall Problem','  1000 random runs','  Probability to win without switching doors 31.700000000000000399%',
   '  Probability to win with switching          68.30000000000000515 %','  Deterministic runs',
   '  Probability to win without switching doors 33.333333333333331483%',
   '  Probability to win with switching          66.666666666666662965%'],
  'LDWin32'=>
  ['Monty Hall Problem','  1000 random runs','  Probability to win without switching doors 31.7%',
   '  Probability to win with switching          68.3%','  Deterministic runs',
   '  Probability to win without switching doors 33.333333333333333335%',
   '  Probability to win with switching          66.66666666666666667 %'],
  'LDWin64'=>
  ['Monty Hall Problem','  1000 random runs','  Probability to win without switching doors 31.7             %',
   '  Probability to win with switching          68.30000000000001%','  Deterministic runs',
   '  Probability to win without switching doors 33.333333333333329%',
   '  Probability to win with switching          66.666666666666657%'],
  'LOLinux'=>
  ['Monty Hall Problem','  1000 random runs','  Probability to win without switching doors 31.700000000000000399%',
   '  Probability to win with switching          68.30000000000000515 %','  Deterministic runs',
   '  Probability to win without switching doors 33.333333333333331483%',
   '  Probability to win with switching          66.666666666666662965%'],
  'LOWin32'=>
  ['Monty Hall Problem','  1000 random runs','  Probability to win without switching doors 31.7%',
   '  Probability to win with switching          68.3%','  Deterministic runs',
   '  Probability to win without switching doors 33.333333333333333335%',
   '  Probability to win with switching          66.66666666666666667 %'],
  'LOWin64'=>
  ['Monty Hall Problem','  1000 random runs','  Probability to win without switching doors 31.7             %',
   '  Probability to win with switching          68.30000000000001%','  Deterministic runs',
   '  Probability to win without switching doors 33.333333333333329%',
   '  Probability to win with switching          66.666666666666657%']].toMap,
 'multifactorial'=>
 ['Degree | #1 | #2 | #3 | #4 | #5  | #6  | #7   | #8    | #9     | #10',
  '-------+----+----+----+----+-----+-----+------+-------+--------+--------',
  '1      | 1  | 2  | 6  | 24 | 120 | 720 | 5040 | 40320 | 362880 | 3628800',
  '2      | 1  | 2  | 3  |  8 |  15 |  48 |  105 |   384 |    945 |    3840',
  '3      | 1  | 2  | 3  |  4 |  10 |  18 |   28 |    80 |    162 |     280',
  '4      | 1  | 2  | 3  |  4 |   5 |  12 |   21 |    32 |     45 |     120',
  '5      | 1  | 2  | 3  |  4 |   5 |   6 |   14 |    24 |     36 |      50'],
 'numDiff'=>
 ['FDLinux'=>
  ['The approximate taylor expansion of {$t^(1+sin($t))} around 1 is ',
   '  {($x-1)^0*1.0+($x-1)^1*1.8414158821105957031+($x-1)^2*1.3150730505585670471+($x-1)^3*0.26311823477347691854+($x-1)^4*-0.39539841267590721449+($x-1)^5*-0.30900348825380206108}'
  ],
  'FDWin32'=>
  ['The approximate taylor expansion of {$t^(1+sin($t))} around 1 is ',
   '  {($x-1)^0*1.0+($x-1)^1*1.8414158821105957031+($x-1)^2*1.3150730505585670471+($x-1)^3*0.26311823477347691854+($x-1)^4*-0.39539841267590721449+($x-1)^5*-0.30900348825380206108}'
  ],
  'FDWin64'=>
  ['The approximate taylor expansion of {$t^(1+sin($t))} around 1 is ',
   '  {($x-1)^0*1.0+($x-1)^1*1.841552734375+($x-1)^2*1.3151092529296875+($x-1)^3*0.26312255859375+($x-1)^4*-0.39539845784505206+($x-1)^5*-0.3090026537577311}'
  ],
  'FOLinux'=>
  ['The approximate taylor expansion of {$t^(1+sin($t))} around 1 is ',
   '  {($x-1)^0*1.0+($x-1)^1*1.8414158821105957031+($x-1)^2*1.3150730505585670471+($x-1)^3*0.26311823477347691854+($x-1)^4*-0.39539841267590721449+($x-1)^5*-0.30900348825380206108}'
  ],
  'FOWin32'=>
  ['The approximate taylor expansion of {$t^(1+sin($t))} around 1 is ',
   '  {($x-1)^0*1.0+($x-1)^1*1.8414158821105957031+($x-1)^2*1.3150730505585670471+($x-1)^3*0.26311823477347691854+($x-1)^4*-0.39539841267590721449+($x-1)^5*-0.30900348825380206108}'
  ],
  'FOWin64'=>
  ['The approximate taylor expansion of {$t^(1+sin($t))} around 1 is ',
   '  {($x-1)^0*1.0+($x-1)^1*1.841552734375+($x-1)^2*1.3151092529296875+($x-1)^3*0.26312255859375+($x-1)^4*-0.39539845784505206+($x-1)^5*-0.3090026537577311}'
  ],
  'LDLinux'=>
  ['The approximate taylor expansion of {$t^(1+sin($t))} around 1 is ',
   '  {($x-1)^0*1.0+($x-1)^1*1.8414158821105957031+($x-1)^2*1.3150730505585670471+($x-1)^3*0.26311823477347691854+($x-1)^4*-0.39539841267590721449+($x-1)^5*-0.30900348825380206108}'
  ],
  'LDWin32'=>
  ['The approximate taylor expansion of {$t^(1+sin($t))} around 1 is ',
   '  {($x-1)^0*1.0+($x-1)^1*1.8414158821105957031+($x-1)^2*1.3150730505585670471+($x-1)^3*0.26311823477347691854+($x-1)^4*-0.39539841267590721449+($x-1)^5*-0.30900348825380206108}'
  ],
  'LDWin64'=>
  ['The approximate taylor expansion of {$t^(1+sin($t))} around 1 is ',
   '  {($x-1)^0*1.0+($x-1)^1*1.841552734375+($x-1)^2*1.3151092529296875+($x-1)^3*0.26312255859375+($x-1)^4*-0.39539845784505206+($x-1)^5*-0.3090026537577311}'
  ],
  'LOLinux'=>
  ['The approximate taylor expansion of {$t^(1+sin($t))} around 1 is ',
   '  {($x-1)^0*1.0+($x-1)^1*1.8414158821105957031+($x-1)^2*1.3150730505585670471+($x-1)^3*0.26311823477347691854+($x-1)^4*-0.39539841267590721449+($x-1)^5*-0.30900348825380206108}'
  ],
  'LOWin32'=>
  ['The approximate taylor expansion of {$t^(1+sin($t))} around 1 is ',
   '  {($x-1)^0*1.0+($x-1)^1*1.8414158821105957031+($x-1)^2*1.3150730505585670471+($x-1)^3*0.26311823477347691854+($x-1)^4*-0.39539841267590721449+($x-1)^5*-0.30900348825380206108}'
  ],
  'LOWin64'=>
  ['The approximate taylor expansion of {$t^(1+sin($t))} around 1 is ',
   '  {($x-1)^0*1.0+($x-1)^1*1.841552734375+($x-1)^2*1.3151092529296875+($x-1)^3*0.26312255859375+($x-1)^4*-0.39539845784505206+($x-1)^5*-0.3090026537577311}'
  ]].toMap,
 'numInt'=>
 ['FDLinux'=>
  ["integral of $x³  in [0,   1]=        0.25",'integral of 1/$x in [1, 100]=        4.6051783860084619746',
   'integral of $x   in [0,5000]= 12500000.0','integral of $x   in [0,6000]= 18000000.0'],
  'FDWin32'=>
  ["integral of $x³  in [0,   1]=        0.25",'integral of 1/$x in [1, 100]=        4.605178386008461974',
   'integral of $x   in [0,5000]= 12500000.0','integral of $x   in [0,6000]= 18000000.0'],
  'FDWin64'=>
  ["integral of $x³  in [0,   1]=        0.25",'integral of 1/$x in [1, 100]=        4.605178386008462',
   'integral of $x   in [0,5000]= 12500000.0','integral of $x   in [0,6000]= 18000000.0'],
  'FOLinux'=>
  ["integral of $x³  in [0,   1]=        0.25",'integral of 1/$x in [1, 100]=        4.6051783860084619746',
   'integral of $x   in [0,5000]= 12500000.0','integral of $x   in [0,6000]= 18000000.0'],
  'FOWin32'=>
  ["integral of $x³  in [0,   1]=        0.25",'integral of 1/$x in [1, 100]=        4.605178386008461974',
   'integral of $x   in [0,5000]= 12500000.0','integral of $x   in [0,6000]= 18000000.0'],
  'FOWin64'=>
  ["integral of $x³  in [0,   1]=        0.25",'integral of 1/$x in [1, 100]=        4.605178386008462',
   'integral of $x   in [0,5000]= 12500000.0','integral of $x   in [0,6000]= 18000000.0'],
  'LDLinux'=>
  ["integral of $x³  in [0,   1]=        0.25",'integral of 1/$x in [1, 100]=        4.6051783860084619746',
   'integral of $x   in [0,5000]= 12500000.0','integral of $x   in [0,6000]= 18000000.0'],
  'LDWin32'=>
  ["integral of $x³  in [0,   1]=        0.25",'integral of 1/$x in [1, 100]=        4.605178386008461974',
   'integral of $x   in [0,5000]= 12500000.0','integral of $x   in [0,6000]= 18000000.0'],
  'LDWin64'=>
  ["integral of $x³  in [0,   1]=        0.25",'integral of 1/$x in [1, 100]=        4.605178386008462',
   'integral of $x   in [0,5000]= 12500000.0','integral of $x   in [0,6000]= 18000000.0'],
  'LOLinux'=>
  ["integral of $x³  in [0,   1]=        0.25",'integral of 1/$x in [1, 100]=        4.6051783860084619746',
   'integral of $x   in [0,5000]= 12500000.0','integral of $x   in [0,6000]= 18000000.0'],
  'LOWin32'=>
  ["integral of $x³  in [0,   1]=        0.25",'integral of 1/$x in [1, 100]=        4.605178386008461974',
   'integral of $x   in [0,5000]= 12500000.0','integral of $x   in [0,6000]= 18000000.0'],
  'LOWin64'=>
  ["integral of $x³  in [0,   1]=        0.25",'integral of 1/$x in [1, 100]=        4.605178386008462',
   'integral of $x   in [0,5000]= 12500000.0','integral of $x   in [0,6000]= 18000000.0']].toMap,
 'opTest'=>
 ['FDLinux'=>
  ['true and false = false','true or false = true','true xor false = true','3+5 = 8','3*5 = 15','3-5 = -2',
   '3/5 = 0.59999999999999997779','3&5 = 35','3^5 = 243','3 and 5 = 1','3 or 5 = 7','3 xor 5 = 6','3 mod 5 = 3','3 div 5 = 0',
   '3.0+5.0 = 8.0','3.0*5.0 = 15.0','3.0-5.0 = -2.0','3.0/5.0 = 0.6','3.0&5.0 = 3.05.0','3.0^5.0 = 242.99999999999994315',
   '[true,true,false,false] and [true,false,true,false] = [true,false,false,false]',
   '[true,true,false,false] or [true,false,true,false] = [true,true,true,false]',
   '[true,true,false,false] xor [true,false,true,false] = [false,true,true,false]',
   '[1,2,3,4,5,6,7,8,9,10]+[1,2,3,2,2,3,1,4,3,5] = [2,4,6,6,7,9,8,12,12,15]',
   '[1,2,3,4,5,6,7,8,9,10]*[1,2,3,2,2,3,1,4,3,5] = [1,4,9,8,10,18,7,32,27,50]',
   '[1,2,3,4,5,6,7,8,9,10]-[1,2,3,2,2,3,1,4,3,5] = [0,0,0,2,3,3,6,4,6,5]',
   '[1,2,3,4,5,6,7,8,9,10]/[1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2.5,2,7,2,3,2]',
   "[1,2,3,4,5,6,7,8,9,10]&[1,2,3,2,2,3,1,4,3,5] = ['11','22','33','42','52','63','71','84','93','105']",
   '[1,2,3,4,5,6,7,8,9,10]^[1,2,3,2,2,3,1,4,3,5] = [1,4,27,16,25,216,7,4096,729,100000]',
   '[1,2,3,4,5,6,7,8,9,10] and [1,2,3,2,2,3,1,4,3,5] = [1,2,3,0,0,2,1,0,1,0]',
   '[1,2,3,4,5,6,7,8,9,10] or [1,2,3,2,2,3,1,4,3,5] = [1,2,3,6,7,7,7,12,11,15]',
   '[1,2,3,4,5,6,7,8,9,10] xor [1,2,3,2,2,3,1,4,3,5] = [0,0,0,6,7,5,6,12,10,15]',
   '[1,2,3,4,5,6,7,8,9,10] mod [1,2,3,2,2,3,1,4,3,5] = [0,0,0,0,1,0,0,0,0,0]',
   '[1,2,3,4,5,6,7,8,9,10] div [1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2,2,7,2,3,2]','3>3.0 = false','3<3.0 = false','3=3.0 = true',
   '3==3.0 = false','3!=3.0 = false','3>=3.0 = true','3<=3.0 = true','3>[5,3,8] = [false,false,false]',
   '3<[5,3,8] = [true,false,true]','3=[5,3,8] = [false,true,false]','3==[5,3,8] = false','3!=[5,3,8] = [true,false,true]',
   '3>=[5,3,8] = [false,true,false]','3<=[5,3,8] = [true,true,true]','[7,Nan]>Nan = [false,false]','[7,Nan]<Nan = [false,false]',
   '[7,Nan]=Nan = [false,false]','[7,Nan]==Nan = false','[7,Nan]!=Nan = [false,false]','[7,Nan]>=Nan = [false,false]',
   '[7,Nan]<=Nan = [false,false]'],
  'FDWin32'=>
  ['true and false = false','true or false = true','true xor false = true','3+5 = 8','3*5 = 15','3-5 = -2','3/5 = 0.6',
   '3&5 = 35','3^5 = 243','3 and 5 = 1','3 or 5 = 7','3 xor 5 = 6','3 mod 5 = 3','3 div 5 = 0','3.0+5.0 = 8.0','3.0*5.0 = 15.0',
   '3.0-5.0 = -2.0','3.0/5.0 = 0.6','3.0&5.0 = 3.05.0','3.0^5.0 = 242.99999999999994315',
   '[true,true,false,false] and [true,false,true,false] = [true,false,false,false]',
   '[true,true,false,false] or [true,false,true,false] = [true,true,true,false]',
   '[true,true,false,false] xor [true,false,true,false] = [false,true,true,false]',
   '[1,2,3,4,5,6,7,8,9,10]+[1,2,3,2,2,3,1,4,3,5] = [2,4,6,6,7,9,8,12,12,15]',
   '[1,2,3,4,5,6,7,8,9,10]*[1,2,3,2,2,3,1,4,3,5] = [1,4,9,8,10,18,7,32,27,50]',
   '[1,2,3,4,5,6,7,8,9,10]-[1,2,3,2,2,3,1,4,3,5] = [0,0,0,2,3,3,6,4,6,5]',
   '[1,2,3,4,5,6,7,8,9,10]/[1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2.5,2,7,2,3,2]',
   "[1,2,3,4,5,6,7,8,9,10]&[1,2,3,2,2,3,1,4,3,5] = ['11','22','33','42','52','63','71','84','93','105']",
   '[1,2,3,4,5,6,7,8,9,10]^[1,2,3,2,2,3,1,4,3,5] = [1,4,27,16,25,216,7,4096,729,100000]',
   '[1,2,3,4,5,6,7,8,9,10] and [1,2,3,2,2,3,1,4,3,5] = [1,2,3,0,0,2,1,0,1,0]',
   '[1,2,3,4,5,6,7,8,9,10] or [1,2,3,2,2,3,1,4,3,5] = [1,2,3,6,7,7,7,12,11,15]',
   '[1,2,3,4,5,6,7,8,9,10] xor [1,2,3,2,2,3,1,4,3,5] = [0,0,0,6,7,5,6,12,10,15]',
   '[1,2,3,4,5,6,7,8,9,10] mod [1,2,3,2,2,3,1,4,3,5] = [0,0,0,0,1,0,0,0,0,0]',
   '[1,2,3,4,5,6,7,8,9,10] div [1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2,2,7,2,3,2]','3>3.0 = false','3<3.0 = false','3=3.0 = true',
   '3==3.0 = false','3!=3.0 = false','3>=3.0 = true','3<=3.0 = true','3>[5,3,8] = [false,false,false]',
   '3<[5,3,8] = [true,false,true]','3=[5,3,8] = [false,true,false]','3==[5,3,8] = false','3!=[5,3,8] = [true,false,true]',
   '3>=[5,3,8] = [false,true,false]','3<=[5,3,8] = [true,true,true]','[7,Nan]>Nan = [false,false]','[7,Nan]<Nan = [false,false]',
   '[7,Nan]=Nan = [false,false]','[7,Nan]==Nan = false','[7,Nan]!=Nan = [false,false]','[7,Nan]>=Nan = [false,false]',
   '[7,Nan]<=Nan = [false,false]'],
  'FDWin64'=>
  ['true and false = false','true or false = true','true xor false = true','3+5 = 8','3*5 = 15','3-5 = -2','3/5 = 0.6',
   '3&5 = 35','3^5 = 243','3 and 5 = 1','3 or 5 = 7','3 xor 5 = 6','3 mod 5 = 3','3 div 5 = 0','3.0+5.0 = 8.0','3.0*5.0 = 15.0',
   '3.0-5.0 = -2.0','3.0/5.0 = 0.6','3.0&5.0 = 3.05.0','3.0^5.0 = 242.99999999999974',
   '[true,true,false,false] and [true,false,true,false] = [true,false,false,false]',
   '[true,true,false,false] or [true,false,true,false] = [true,true,true,false]',
   '[true,true,false,false] xor [true,false,true,false] = [false,true,true,false]',
   '[1,2,3,4,5,6,7,8,9,10]+[1,2,3,2,2,3,1,4,3,5] = [2,4,6,6,7,9,8,12,12,15]',
   '[1,2,3,4,5,6,7,8,9,10]*[1,2,3,2,2,3,1,4,3,5] = [1,4,9,8,10,18,7,32,27,50]',
   '[1,2,3,4,5,6,7,8,9,10]-[1,2,3,2,2,3,1,4,3,5] = [0,0,0,2,3,3,6,4,6,5]',
   '[1,2,3,4,5,6,7,8,9,10]/[1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2.5,2,7,2,3,2]',
   "[1,2,3,4,5,6,7,8,9,10]&[1,2,3,2,2,3,1,4,3,5] = ['11','22','33','42','52','63','71','84','93','105']",
   '[1,2,3,4,5,6,7,8,9,10]^[1,2,3,2,2,3,1,4,3,5] = [1,4,27,16,25,216,7,4096,729,100000]',
   '[1,2,3,4,5,6,7,8,9,10] and [1,2,3,2,2,3,1,4,3,5] = [1,2,3,0,0,2,1,0,1,0]',
   '[1,2,3,4,5,6,7,8,9,10] or [1,2,3,2,2,3,1,4,3,5] = [1,2,3,6,7,7,7,12,11,15]',
   '[1,2,3,4,5,6,7,8,9,10] xor [1,2,3,2,2,3,1,4,3,5] = [0,0,0,6,7,5,6,12,10,15]',
   '[1,2,3,4,5,6,7,8,9,10] mod [1,2,3,2,2,3,1,4,3,5] = [0,0,0,0,1,0,0,0,0,0]',
   '[1,2,3,4,5,6,7,8,9,10] div [1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2,2,7,2,3,2]','3>3.0 = false','3<3.0 = false','3=3.0 = true',
   '3==3.0 = false','3!=3.0 = false','3>=3.0 = true','3<=3.0 = true','3>[5,3,8] = [false,false,false]',
   '3<[5,3,8] = [true,false,true]','3=[5,3,8] = [false,true,false]','3==[5,3,8] = false','3!=[5,3,8] = [true,false,true]',
   '3>=[5,3,8] = [false,true,false]','3<=[5,3,8] = [true,true,true]','[7,Nan]>Nan = [false,false]','[7,Nan]<Nan = [false,false]',
   '[7,Nan]=Nan = [false,false]','[7,Nan]==Nan = false','[7,Nan]!=Nan = [false,false]','[7,Nan]>=Nan = [false,false]',
   '[7,Nan]<=Nan = [false,false]'],
  'FOLinux'=>
  ['true and false = false','true or false = true','true xor false = true','3+5 = 8','3*5 = 15','3-5 = -2',
   '3/5 = 0.59999999999999997779','3&5 = 35','3^5 = 243','3 and 5 = 1','3 or 5 = 7','3 xor 5 = 6','3 mod 5 = 3','3 div 5 = 0',
   '3.0+5.0 = 8.0','3.0*5.0 = 15.0','3.0-5.0 = -2.0','3.0/5.0 = 0.6','3.0&5.0 = 3.05.0','3.0^5.0 = 242.99999999999994315',
   '[true,true,false,false] and [true,false,true,false] = [true,false,false,false]',
   '[true,true,false,false] or [true,false,true,false] = [true,true,true,false]',
   '[true,true,false,false] xor [true,false,true,false] = [false,true,true,false]',
   '[1,2,3,4,5,6,7,8,9,10]+[1,2,3,2,2,3,1,4,3,5] = [2,4,6,6,7,9,8,12,12,15]',
   '[1,2,3,4,5,6,7,8,9,10]*[1,2,3,2,2,3,1,4,3,5] = [1,4,9,8,10,18,7,32,27,50]',
   '[1,2,3,4,5,6,7,8,9,10]-[1,2,3,2,2,3,1,4,3,5] = [0,0,0,2,3,3,6,4,6,5]',
   '[1,2,3,4,5,6,7,8,9,10]/[1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2.5,2,7,2,3,2]',
   "[1,2,3,4,5,6,7,8,9,10]&[1,2,3,2,2,3,1,4,3,5] = ['11','22','33','42','52','63','71','84','93','105']",
   '[1,2,3,4,5,6,7,8,9,10]^[1,2,3,2,2,3,1,4,3,5] = [1,4,27,16,25,216,7,4096,729,100000]',
   '[1,2,3,4,5,6,7,8,9,10] and [1,2,3,2,2,3,1,4,3,5] = [1,2,3,0,0,2,1,0,1,0]',
   '[1,2,3,4,5,6,7,8,9,10] or [1,2,3,2,2,3,1,4,3,5] = [1,2,3,6,7,7,7,12,11,15]',
   '[1,2,3,4,5,6,7,8,9,10] xor [1,2,3,2,2,3,1,4,3,5] = [0,0,0,6,7,5,6,12,10,15]',
   '[1,2,3,4,5,6,7,8,9,10] mod [1,2,3,2,2,3,1,4,3,5] = [0,0,0,0,1,0,0,0,0,0]',
   '[1,2,3,4,5,6,7,8,9,10] div [1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2,2,7,2,3,2]','3>3.0 = false','3<3.0 = false','3=3.0 = true',
   '3==3.0 = false','3!=3.0 = false','3>=3.0 = true','3<=3.0 = true','3>[5,3,8] = [false,false,false]',
   '3<[5,3,8] = [true,false,true]','3=[5,3,8] = [false,true,false]','3==[5,3,8] = false','3!=[5,3,8] = [true,false,true]',
   '3>=[5,3,8] = [false,true,false]','3<=[5,3,8] = [true,true,true]','[7,Nan]>Nan = [false,false]','[7,Nan]<Nan = [false,false]',
   '[7,Nan]=Nan = [false,false]','[7,Nan]==Nan = false','[7,Nan]!=Nan = [false,false]','[7,Nan]>=Nan = [false,false]',
   '[7,Nan]<=Nan = [false,false]'],
  'FOWin32'=>
  ['true and false = false','true or false = true','true xor false = true','3+5 = 8','3*5 = 15','3-5 = -2','3/5 = 0.6',
   '3&5 = 35','3^5 = 243','3 and 5 = 1','3 or 5 = 7','3 xor 5 = 6','3 mod 5 = 3','3 div 5 = 0','3.0+5.0 = 8.0','3.0*5.0 = 15.0',
   '3.0-5.0 = -2.0','3.0/5.0 = 0.6','3.0&5.0 = 3.05.0','3.0^5.0 = 242.99999999999994315',
   '[true,true,false,false] and [true,false,true,false] = [true,false,false,false]',
   '[true,true,false,false] or [true,false,true,false] = [true,true,true,false]',
   '[true,true,false,false] xor [true,false,true,false] = [false,true,true,false]',
   '[1,2,3,4,5,6,7,8,9,10]+[1,2,3,2,2,3,1,4,3,5] = [2,4,6,6,7,9,8,12,12,15]',
   '[1,2,3,4,5,6,7,8,9,10]*[1,2,3,2,2,3,1,4,3,5] = [1,4,9,8,10,18,7,32,27,50]',
   '[1,2,3,4,5,6,7,8,9,10]-[1,2,3,2,2,3,1,4,3,5] = [0,0,0,2,3,3,6,4,6,5]',
   '[1,2,3,4,5,6,7,8,9,10]/[1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2.5,2,7,2,3,2]',
   "[1,2,3,4,5,6,7,8,9,10]&[1,2,3,2,2,3,1,4,3,5] = ['11','22','33','42','52','63','71','84','93','105']",
   '[1,2,3,4,5,6,7,8,9,10]^[1,2,3,2,2,3,1,4,3,5] = [1,4,27,16,25,216,7,4096,729,100000]',
   '[1,2,3,4,5,6,7,8,9,10] and [1,2,3,2,2,3,1,4,3,5] = [1,2,3,0,0,2,1,0,1,0]',
   '[1,2,3,4,5,6,7,8,9,10] or [1,2,3,2,2,3,1,4,3,5] = [1,2,3,6,7,7,7,12,11,15]',
   '[1,2,3,4,5,6,7,8,9,10] xor [1,2,3,2,2,3,1,4,3,5] = [0,0,0,6,7,5,6,12,10,15]',
   '[1,2,3,4,5,6,7,8,9,10] mod [1,2,3,2,2,3,1,4,3,5] = [0,0,0,0,1,0,0,0,0,0]',
   '[1,2,3,4,5,6,7,8,9,10] div [1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2,2,7,2,3,2]','3>3.0 = false','3<3.0 = false','3=3.0 = true',
   '3==3.0 = false','3!=3.0 = false','3>=3.0 = true','3<=3.0 = true','3>[5,3,8] = [false,false,false]',
   '3<[5,3,8] = [true,false,true]','3=[5,3,8] = [false,true,false]','3==[5,3,8] = false','3!=[5,3,8] = [true,false,true]',
   '3>=[5,3,8] = [false,true,false]','3<=[5,3,8] = [true,true,true]','[7,Nan]>Nan = [false,false]','[7,Nan]<Nan = [false,false]',
   '[7,Nan]=Nan = [false,false]','[7,Nan]==Nan = false','[7,Nan]!=Nan = [false,false]','[7,Nan]>=Nan = [false,false]',
   '[7,Nan]<=Nan = [false,false]'],
  'FOWin64'=>
  ['true and false = false','true or false = true','true xor false = true','3+5 = 8','3*5 = 15','3-5 = -2','3/5 = 0.6',
   '3&5 = 35','3^5 = 243','3 and 5 = 1','3 or 5 = 7','3 xor 5 = 6','3 mod 5 = 3','3 div 5 = 0','3.0+5.0 = 8.0','3.0*5.0 = 15.0',
   '3.0-5.0 = -2.0','3.0/5.0 = 0.6','3.0&5.0 = 3.05.0','3.0^5.0 = 242.99999999999974',
   '[true,true,false,false] and [true,false,true,false] = [true,false,false,false]',
   '[true,true,false,false] or [true,false,true,false] = [true,true,true,false]',
   '[true,true,false,false] xor [true,false,true,false] = [false,true,true,false]',
   '[1,2,3,4,5,6,7,8,9,10]+[1,2,3,2,2,3,1,4,3,5] = [2,4,6,6,7,9,8,12,12,15]',
   '[1,2,3,4,5,6,7,8,9,10]*[1,2,3,2,2,3,1,4,3,5] = [1,4,9,8,10,18,7,32,27,50]',
   '[1,2,3,4,5,6,7,8,9,10]-[1,2,3,2,2,3,1,4,3,5] = [0,0,0,2,3,3,6,4,6,5]',
   '[1,2,3,4,5,6,7,8,9,10]/[1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2.5,2,7,2,3,2]',
   "[1,2,3,4,5,6,7,8,9,10]&[1,2,3,2,2,3,1,4,3,5] = ['11','22','33','42','52','63','71','84','93','105']",
   '[1,2,3,4,5,6,7,8,9,10]^[1,2,3,2,2,3,1,4,3,5] = [1,4,27,16,25,216,7,4096,729,100000]',
   '[1,2,3,4,5,6,7,8,9,10] and [1,2,3,2,2,3,1,4,3,5] = [1,2,3,0,0,2,1,0,1,0]',
   '[1,2,3,4,5,6,7,8,9,10] or [1,2,3,2,2,3,1,4,3,5] = [1,2,3,6,7,7,7,12,11,15]',
   '[1,2,3,4,5,6,7,8,9,10] xor [1,2,3,2,2,3,1,4,3,5] = [0,0,0,6,7,5,6,12,10,15]',
   '[1,2,3,4,5,6,7,8,9,10] mod [1,2,3,2,2,3,1,4,3,5] = [0,0,0,0,1,0,0,0,0,0]',
   '[1,2,3,4,5,6,7,8,9,10] div [1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2,2,7,2,3,2]','3>3.0 = false','3<3.0 = false','3=3.0 = true',
   '3==3.0 = false','3!=3.0 = false','3>=3.0 = true','3<=3.0 = true','3>[5,3,8] = [false,false,false]',
   '3<[5,3,8] = [true,false,true]','3=[5,3,8] = [false,true,false]','3==[5,3,8] = false','3!=[5,3,8] = [true,false,true]',
   '3>=[5,3,8] = [false,true,false]','3<=[5,3,8] = [true,true,true]','[7,Nan]>Nan = [false,false]','[7,Nan]<Nan = [false,false]',
   '[7,Nan]=Nan = [false,false]','[7,Nan]==Nan = false','[7,Nan]!=Nan = [false,false]','[7,Nan]>=Nan = [false,false]',
   '[7,Nan]<=Nan = [false,false]'],
  'LDLinux'=>
  ['true and false = false','true or false = true','true xor false = true','3+5 = 8','3*5 = 15','3-5 = -2',
   '3/5 = 0.59999999999999997779','3&5 = 35','3^5 = 243','3 and 5 = 1','3 or 5 = 7','3 xor 5 = 6','3 mod 5 = 3','3 div 5 = 0',
   '3.0+5.0 = 8.0','3.0*5.0 = 15.0','3.0-5.0 = -2.0','3.0/5.0 = 0.6','3.0&5.0 = 3.05.0','3.0^5.0 = 242.99999999999994315',
   '[true,true,false,false] and [true,false,true,false] = [true,false,false,false]',
   '[true,true,false,false] or [true,false,true,false] = [true,true,true,false]',
   '[true,true,false,false] xor [true,false,true,false] = [false,true,true,false]',
   '[1,2,3,4,5,6,7,8,9,10]+[1,2,3,2,2,3,1,4,3,5] = [2,4,6,6,7,9,8,12,12,15]',
   '[1,2,3,4,5,6,7,8,9,10]*[1,2,3,2,2,3,1,4,3,5] = [1,4,9,8,10,18,7,32,27,50]',
   '[1,2,3,4,5,6,7,8,9,10]-[1,2,3,2,2,3,1,4,3,5] = [0,0,0,2,3,3,6,4,6,5]',
   '[1,2,3,4,5,6,7,8,9,10]/[1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2.5,2,7,2,3,2]',
   "[1,2,3,4,5,6,7,8,9,10]&[1,2,3,2,2,3,1,4,3,5] = ['11','22','33','42','52','63','71','84','93','105']",
   '[1,2,3,4,5,6,7,8,9,10]^[1,2,3,2,2,3,1,4,3,5] = [1,4,27,16,25,216,7,4096,729,100000]',
   '[1,2,3,4,5,6,7,8,9,10] and [1,2,3,2,2,3,1,4,3,5] = [1,2,3,0,0,2,1,0,1,0]',
   '[1,2,3,4,5,6,7,8,9,10] or [1,2,3,2,2,3,1,4,3,5] = [1,2,3,6,7,7,7,12,11,15]',
   '[1,2,3,4,5,6,7,8,9,10] xor [1,2,3,2,2,3,1,4,3,5] = [0,0,0,6,7,5,6,12,10,15]',
   '[1,2,3,4,5,6,7,8,9,10] mod [1,2,3,2,2,3,1,4,3,5] = [0,0,0,0,1,0,0,0,0,0]',
   '[1,2,3,4,5,6,7,8,9,10] div [1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2,2,7,2,3,2]','3>3.0 = false','3<3.0 = false','3=3.0 = true',
   '3==3.0 = false','3!=3.0 = false','3>=3.0 = true','3<=3.0 = true','3>[5,3,8] = [false,false,false]',
   '3<[5,3,8] = [true,false,true]','3=[5,3,8] = [false,true,false]','3==[5,3,8] = false','3!=[5,3,8] = [true,false,true]',
   '3>=[5,3,8] = [false,true,false]','3<=[5,3,8] = [true,true,true]','[7,Nan]>Nan = [false,false]','[7,Nan]<Nan = [false,false]',
   '[7,Nan]=Nan = [false,false]','[7,Nan]==Nan = false','[7,Nan]!=Nan = [false,false]','[7,Nan]>=Nan = [false,false]',
   '[7,Nan]<=Nan = [false,false]'],
  'LDWin32'=>
  ['true and false = false','true or false = true','true xor false = true','3+5 = 8','3*5 = 15','3-5 = -2','3/5 = 0.6',
   '3&5 = 35','3^5 = 243','3 and 5 = 1','3 or 5 = 7','3 xor 5 = 6','3 mod 5 = 3','3 div 5 = 0','3.0+5.0 = 8.0','3.0*5.0 = 15.0',
   '3.0-5.0 = -2.0','3.0/5.0 = 0.6','3.0&5.0 = 3.05.0','3.0^5.0 = 242.99999999999994315',
   '[true,true,false,false] and [true,false,true,false] = [true,false,false,false]',
   '[true,true,false,false] or [true,false,true,false] = [true,true,true,false]',
   '[true,true,false,false] xor [true,false,true,false] = [false,true,true,false]',
   '[1,2,3,4,5,6,7,8,9,10]+[1,2,3,2,2,3,1,4,3,5] = [2,4,6,6,7,9,8,12,12,15]',
   '[1,2,3,4,5,6,7,8,9,10]*[1,2,3,2,2,3,1,4,3,5] = [1,4,9,8,10,18,7,32,27,50]',
   '[1,2,3,4,5,6,7,8,9,10]-[1,2,3,2,2,3,1,4,3,5] = [0,0,0,2,3,3,6,4,6,5]',
   '[1,2,3,4,5,6,7,8,9,10]/[1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2.5,2,7,2,3,2]',
   "[1,2,3,4,5,6,7,8,9,10]&[1,2,3,2,2,3,1,4,3,5] = ['11','22','33','42','52','63','71','84','93','105']",
   '[1,2,3,4,5,6,7,8,9,10]^[1,2,3,2,2,3,1,4,3,5] = [1,4,27,16,25,216,7,4096,729,100000]',
   '[1,2,3,4,5,6,7,8,9,10] and [1,2,3,2,2,3,1,4,3,5] = [1,2,3,0,0,2,1,0,1,0]',
   '[1,2,3,4,5,6,7,8,9,10] or [1,2,3,2,2,3,1,4,3,5] = [1,2,3,6,7,7,7,12,11,15]',
   '[1,2,3,4,5,6,7,8,9,10] xor [1,2,3,2,2,3,1,4,3,5] = [0,0,0,6,7,5,6,12,10,15]',
   '[1,2,3,4,5,6,7,8,9,10] mod [1,2,3,2,2,3,1,4,3,5] = [0,0,0,0,1,0,0,0,0,0]',
   '[1,2,3,4,5,6,7,8,9,10] div [1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2,2,7,2,3,2]','3>3.0 = false','3<3.0 = false','3=3.0 = true',
   '3==3.0 = false','3!=3.0 = false','3>=3.0 = true','3<=3.0 = true','3>[5,3,8] = [false,false,false]',
   '3<[5,3,8] = [true,false,true]','3=[5,3,8] = [false,true,false]','3==[5,3,8] = false','3!=[5,3,8] = [true,false,true]',
   '3>=[5,3,8] = [false,true,false]','3<=[5,3,8] = [true,true,true]','[7,Nan]>Nan = [false,false]','[7,Nan]<Nan = [false,false]',
   '[7,Nan]=Nan = [false,false]','[7,Nan]==Nan = false','[7,Nan]!=Nan = [false,false]','[7,Nan]>=Nan = [false,false]',
   '[7,Nan]<=Nan = [false,false]'],
  'LDWin64'=>
  ['true and false = false','true or false = true','true xor false = true','3+5 = 8','3*5 = 15','3-5 = -2','3/5 = 0.6',
   '3&5 = 35','3^5 = 243','3 and 5 = 1','3 or 5 = 7','3 xor 5 = 6','3 mod 5 = 3','3 div 5 = 0','3.0+5.0 = 8.0','3.0*5.0 = 15.0',
   '3.0-5.0 = -2.0','3.0/5.0 = 0.6','3.0&5.0 = 3.05.0','3.0^5.0 = 242.99999999999974',
   '[true,true,false,false] and [true,false,true,false] = [true,false,false,false]',
   '[true,true,false,false] or [true,false,true,false] = [true,true,true,false]',
   '[true,true,false,false] xor [true,false,true,false] = [false,true,true,false]',
   '[1,2,3,4,5,6,7,8,9,10]+[1,2,3,2,2,3,1,4,3,5] = [2,4,6,6,7,9,8,12,12,15]',
   '[1,2,3,4,5,6,7,8,9,10]*[1,2,3,2,2,3,1,4,3,5] = [1,4,9,8,10,18,7,32,27,50]',
   '[1,2,3,4,5,6,7,8,9,10]-[1,2,3,2,2,3,1,4,3,5] = [0,0,0,2,3,3,6,4,6,5]',
   '[1,2,3,4,5,6,7,8,9,10]/[1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2.5,2,7,2,3,2]',
   "[1,2,3,4,5,6,7,8,9,10]&[1,2,3,2,2,3,1,4,3,5] = ['11','22','33','42','52','63','71','84','93','105']",
   '[1,2,3,4,5,6,7,8,9,10]^[1,2,3,2,2,3,1,4,3,5] = [1,4,27,16,25,216,7,4096,729,100000]',
   '[1,2,3,4,5,6,7,8,9,10] and [1,2,3,2,2,3,1,4,3,5] = [1,2,3,0,0,2,1,0,1,0]',
   '[1,2,3,4,5,6,7,8,9,10] or [1,2,3,2,2,3,1,4,3,5] = [1,2,3,6,7,7,7,12,11,15]',
   '[1,2,3,4,5,6,7,8,9,10] xor [1,2,3,2,2,3,1,4,3,5] = [0,0,0,6,7,5,6,12,10,15]',
   '[1,2,3,4,5,6,7,8,9,10] mod [1,2,3,2,2,3,1,4,3,5] = [0,0,0,0,1,0,0,0,0,0]',
   '[1,2,3,4,5,6,7,8,9,10] div [1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2,2,7,2,3,2]','3>3.0 = false','3<3.0 = false','3=3.0 = true',
   '3==3.0 = false','3!=3.0 = false','3>=3.0 = true','3<=3.0 = true','3>[5,3,8] = [false,false,false]',
   '3<[5,3,8] = [true,false,true]','3=[5,3,8] = [false,true,false]','3==[5,3,8] = false','3!=[5,3,8] = [true,false,true]',
   '3>=[5,3,8] = [false,true,false]','3<=[5,3,8] = [true,true,true]','[7,Nan]>Nan = [false,false]','[7,Nan]<Nan = [false,false]',
   '[7,Nan]=Nan = [false,false]','[7,Nan]==Nan = false','[7,Nan]!=Nan = [false,false]','[7,Nan]>=Nan = [false,false]',
   '[7,Nan]<=Nan = [false,false]'],
  'LOLinux'=>
  ['true and false = false','true or false = true','true xor false = true','3+5 = 8','3*5 = 15','3-5 = -2',
   '3/5 = 0.59999999999999997779','3&5 = 35','3^5 = 243','3 and 5 = 1','3 or 5 = 7','3 xor 5 = 6','3 mod 5 = 3','3 div 5 = 0',
   '3.0+5.0 = 8.0','3.0*5.0 = 15.0','3.0-5.0 = -2.0','3.0/5.0 = 0.6','3.0&5.0 = 3.05.0','3.0^5.0 = 242.99999999999994315',
   '[true,true,false,false] and [true,false,true,false] = [true,false,false,false]',
   '[true,true,false,false] or [true,false,true,false] = [true,true,true,false]',
   '[true,true,false,false] xor [true,false,true,false] = [false,true,true,false]',
   '[1,2,3,4,5,6,7,8,9,10]+[1,2,3,2,2,3,1,4,3,5] = [2,4,6,6,7,9,8,12,12,15]',
   '[1,2,3,4,5,6,7,8,9,10]*[1,2,3,2,2,3,1,4,3,5] = [1,4,9,8,10,18,7,32,27,50]',
   '[1,2,3,4,5,6,7,8,9,10]-[1,2,3,2,2,3,1,4,3,5] = [0,0,0,2,3,3,6,4,6,5]',
   '[1,2,3,4,5,6,7,8,9,10]/[1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2.5,2,7,2,3,2]',
   "[1,2,3,4,5,6,7,8,9,10]&[1,2,3,2,2,3,1,4,3,5] = ['11','22','33','42','52','63','71','84','93','105']",
   '[1,2,3,4,5,6,7,8,9,10]^[1,2,3,2,2,3,1,4,3,5] = [1,4,27,16,25,216,7,4096,729,100000]',
   '[1,2,3,4,5,6,7,8,9,10] and [1,2,3,2,2,3,1,4,3,5] = [1,2,3,0,0,2,1,0,1,0]',
   '[1,2,3,4,5,6,7,8,9,10] or [1,2,3,2,2,3,1,4,3,5] = [1,2,3,6,7,7,7,12,11,15]',
   '[1,2,3,4,5,6,7,8,9,10] xor [1,2,3,2,2,3,1,4,3,5] = [0,0,0,6,7,5,6,12,10,15]',
   '[1,2,3,4,5,6,7,8,9,10] mod [1,2,3,2,2,3,1,4,3,5] = [0,0,0,0,1,0,0,0,0,0]',
   '[1,2,3,4,5,6,7,8,9,10] div [1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2,2,7,2,3,2]','3>3.0 = false','3<3.0 = false','3=3.0 = true',
   '3==3.0 = false','3!=3.0 = false','3>=3.0 = true','3<=3.0 = true','3>[5,3,8] = [false,false,false]',
   '3<[5,3,8] = [true,false,true]','3=[5,3,8] = [false,true,false]','3==[5,3,8] = false','3!=[5,3,8] = [true,false,true]',
   '3>=[5,3,8] = [false,true,false]','3<=[5,3,8] = [true,true,true]','[7,Nan]>Nan = [false,false]','[7,Nan]<Nan = [false,false]',
   '[7,Nan]=Nan = [false,false]','[7,Nan]==Nan = false','[7,Nan]!=Nan = [false,false]','[7,Nan]>=Nan = [false,false]',
   '[7,Nan]<=Nan = [false,false]'],
  'LOWin32'=>
  ['true and false = false','true or false = true','true xor false = true','3+5 = 8','3*5 = 15','3-5 = -2','3/5 = 0.6',
   '3&5 = 35','3^5 = 243','3 and 5 = 1','3 or 5 = 7','3 xor 5 = 6','3 mod 5 = 3','3 div 5 = 0','3.0+5.0 = 8.0','3.0*5.0 = 15.0',
   '3.0-5.0 = -2.0','3.0/5.0 = 0.6','3.0&5.0 = 3.05.0','3.0^5.0 = 242.99999999999994315',
   '[true,true,false,false] and [true,false,true,false] = [true,false,false,false]',
   '[true,true,false,false] or [true,false,true,false] = [true,true,true,false]',
   '[true,true,false,false] xor [true,false,true,false] = [false,true,true,false]',
   '[1,2,3,4,5,6,7,8,9,10]+[1,2,3,2,2,3,1,4,3,5] = [2,4,6,6,7,9,8,12,12,15]',
   '[1,2,3,4,5,6,7,8,9,10]*[1,2,3,2,2,3,1,4,3,5] = [1,4,9,8,10,18,7,32,27,50]',
   '[1,2,3,4,5,6,7,8,9,10]-[1,2,3,2,2,3,1,4,3,5] = [0,0,0,2,3,3,6,4,6,5]',
   '[1,2,3,4,5,6,7,8,9,10]/[1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2.5,2,7,2,3,2]',
   "[1,2,3,4,5,6,7,8,9,10]&[1,2,3,2,2,3,1,4,3,5] = ['11','22','33','42','52','63','71','84','93','105']",
   '[1,2,3,4,5,6,7,8,9,10]^[1,2,3,2,2,3,1,4,3,5] = [1,4,27,16,25,216,7,4096,729,100000]',
   '[1,2,3,4,5,6,7,8,9,10] and [1,2,3,2,2,3,1,4,3,5] = [1,2,3,0,0,2,1,0,1,0]',
   '[1,2,3,4,5,6,7,8,9,10] or [1,2,3,2,2,3,1,4,3,5] = [1,2,3,6,7,7,7,12,11,15]',
   '[1,2,3,4,5,6,7,8,9,10] xor [1,2,3,2,2,3,1,4,3,5] = [0,0,0,6,7,5,6,12,10,15]',
   '[1,2,3,4,5,6,7,8,9,10] mod [1,2,3,2,2,3,1,4,3,5] = [0,0,0,0,1,0,0,0,0,0]',
   '[1,2,3,4,5,6,7,8,9,10] div [1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2,2,7,2,3,2]','3>3.0 = false','3<3.0 = false','3=3.0 = true',
   '3==3.0 = false','3!=3.0 = false','3>=3.0 = true','3<=3.0 = true','3>[5,3,8] = [false,false,false]',
   '3<[5,3,8] = [true,false,true]','3=[5,3,8] = [false,true,false]','3==[5,3,8] = false','3!=[5,3,8] = [true,false,true]',
   '3>=[5,3,8] = [false,true,false]','3<=[5,3,8] = [true,true,true]','[7,Nan]>Nan = [false,false]','[7,Nan]<Nan = [false,false]',
   '[7,Nan]=Nan = [false,false]','[7,Nan]==Nan = false','[7,Nan]!=Nan = [false,false]','[7,Nan]>=Nan = [false,false]',
   '[7,Nan]<=Nan = [false,false]'],
  'LOWin64'=>
  ['true and false = false','true or false = true','true xor false = true','3+5 = 8','3*5 = 15','3-5 = -2','3/5 = 0.6',
   '3&5 = 35','3^5 = 243','3 and 5 = 1','3 or 5 = 7','3 xor 5 = 6','3 mod 5 = 3','3 div 5 = 0','3.0+5.0 = 8.0','3.0*5.0 = 15.0',
   '3.0-5.0 = -2.0','3.0/5.0 = 0.6','3.0&5.0 = 3.05.0','3.0^5.0 = 242.99999999999974',
   '[true,true,false,false] and [true,false,true,false] = [true,false,false,false]',
   '[true,true,false,false] or [true,false,true,false] = [true,true,true,false]',
   '[true,true,false,false] xor [true,false,true,false] = [false,true,true,false]',
   '[1,2,3,4,5,6,7,8,9,10]+[1,2,3,2,2,3,1,4,3,5] = [2,4,6,6,7,9,8,12,12,15]',
   '[1,2,3,4,5,6,7,8,9,10]*[1,2,3,2,2,3,1,4,3,5] = [1,4,9,8,10,18,7,32,27,50]',
   '[1,2,3,4,5,6,7,8,9,10]-[1,2,3,2,2,3,1,4,3,5] = [0,0,0,2,3,3,6,4,6,5]',
   '[1,2,3,4,5,6,7,8,9,10]/[1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2.5,2,7,2,3,2]',
   "[1,2,3,4,5,6,7,8,9,10]&[1,2,3,2,2,3,1,4,3,5] = ['11','22','33','42','52','63','71','84','93','105']",
   '[1,2,3,4,5,6,7,8,9,10]^[1,2,3,2,2,3,1,4,3,5] = [1,4,27,16,25,216,7,4096,729,100000]',
   '[1,2,3,4,5,6,7,8,9,10] and [1,2,3,2,2,3,1,4,3,5] = [1,2,3,0,0,2,1,0,1,0]',
   '[1,2,3,4,5,6,7,8,9,10] or [1,2,3,2,2,3,1,4,3,5] = [1,2,3,6,7,7,7,12,11,15]',
   '[1,2,3,4,5,6,7,8,9,10] xor [1,2,3,2,2,3,1,4,3,5] = [0,0,0,6,7,5,6,12,10,15]',
   '[1,2,3,4,5,6,7,8,9,10] mod [1,2,3,2,2,3,1,4,3,5] = [0,0,0,0,1,0,0,0,0,0]',
   '[1,2,3,4,5,6,7,8,9,10] div [1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2,2,7,2,3,2]','3>3.0 = false','3<3.0 = false','3=3.0 = true',
   '3==3.0 = false','3!=3.0 = false','3>=3.0 = true','3<=3.0 = true','3>[5,3,8] = [false,false,false]',
   '3<[5,3,8] = [true,false,true]','3=[5,3,8] = [false,true,false]','3==[5,3,8] = false','3!=[5,3,8] = [true,false,true]',
   '3>=[5,3,8] = [false,true,false]','3<=[5,3,8] = [true,true,true]','[7,Nan]>Nan = [false,false]','[7,Nan]<Nan = [false,false]',
   '[7,Nan]=Nan = [false,false]','[7,Nan]==Nan = false','[7,Nan]!=Nan = [false,false]','[7,Nan]>=Nan = [false,false]',
   '[7,Nan]<=Nan = [false,false]']].toMap,
 'overrideDemo'=>
 ['1 - declaring const1','2 - declaring const2','    overridden method called','3 - Calling f1','    overridden method called',
  '    0.1411200','4 - Calling f2','    overridden method called','    -0.7568025','5 - const1 = 0.8414710',
  '6 - const2 = 0.9092974'],
 'pangrams'=>
 ["'The quick brown fox jumps over the lazy dog.' is a pangram"],
 'pascal'=>
 ['                           1','                        1     1','                     1     2     1',
  '                  1     3     3     1','               1     4     6     4     1',
  '            1     5    10    10     5     1','         1     6    15    20    15     6    1',
  '       1    7    21    35    35    21     7   1','     1   8    28    56    70    56    28    8   1',
  '   1   9   36    84   126   126    84    36   9   1',' 1  10  45   120   210   252   210   120   45  10  1',
  '1 11  55  165   330   462   462   330   165  55  11 1'],
 'perfectPowers'=>
 ['The first perfect powers are [1,4,8,9,16,25,27,32,36,49,64,81,100]','There are 1111 distinct perfect powers <=1000000'],
 'pernicousNumbers'=>
 ['[3,5,6,7,9,10,11,12,13,14,17,18,19,20,21,22,24,25,26,28,31,33,34,35,36]',
  '[888888877,888888878,888888880,888888883,888888885,888888886]'],
 'prime_descendants'=>
 ['[46] level 3','Ancestors: 25, 10, 7','Descendants: 557',
  '129, 205, 246, 493, 518, 529, 740, 806, 888, 999, 1364, 1508, 1748, 2552, 2871, 3128, 3255, 3472, 3519, 3875, 3906, 4263, 4650, 4960, 5075, 5415, 5580, 5776, 5952, 6090, 6279, 6496, 6498, 6696, 6783, 7250, 7308, 7475, 7533, 8075, 8151, 8619, 8700, 8855, 8970, 9280, 9568, 9690, 10115, 10336, 10440, 10626, 10764, 11136, 11495, 11628, 11745, 12103, 12138, 12155, 12528, 12650, 13794, 14094, 14399, 14450, 14586, 15180, 15379, 15778, 16192, 17290, 17303, 17340, 18216, 18496, 20482, 20493, 20570, 20748, 20808, 21658, 21970, 22540, 23409, 24684, 24700, 26026, 26364, 27048, 29260, 29282, 29640, 30429, 30940, 31616, 32200, 33345, 35112, 35568, 36225, 36652, 37128, 37180, 38640, 39501, 40014, 41216, 41769, 41800, 43125, 43470, 44044, 44200, 44616, 46000, 46368, 47025, 49725, 50160, 50193, 51750, 52136, 52164, 52360, 53040, 53504, 55200, 56430, 56576, 58653, 58880, 58905, 59670, 60192, 62100, 62832, 62920, 63648, 66240, 66248, 67716, 69825, 70125, 70656, 70686, 70785, 71604, 74480, 74520, 74529, 74536, 74800, 75504, 79488, 83125, 83790, 83835, 83853, 84150, 84942, 87465, 88725, 89376, 89424, 89760, 93296, 94640, 95744, 99750, 99825, 100548, 100602, 100980, 104125, 104958, 105105, 105625, 106400, 106470, 106480, 107712, 112112, 113568, 118750, 119700, 119790, 121176, 124509, 124950, 125125, 126126, 126750, 127680, 127764, 127776, 133280, 135200, 136192, 136323, 142500, 143640, 143748, 148225, 148750, 149940, 150150, 152000, 152100, 153216, 156065, 159936, 160160, 161595, 162240, 171000, 172368, 173056, 177870, 178500, 178750, 179928, 180180, 182400, 182520, 184877, 187278, 189728, 190400, 192192, 192375, 193914, 194560, 194688, 202419, 205200, 205335, 211750, 212500, 213444, 214200, 214500, 216216, 218880, 219024, 222950, 228480, 228800, 230850, 233472, 240975, 243243, 243712, 246240, 246402, 254100, 255000, 257040, 257400, 262656, 264110, 267540, 271040, 272000, 274176, 274560, 277020, 285376, 286875, 289170, 289575, 292864, 295488, 302500, 304920, 306000, 308448, 308880, 316932, 318500, 321048, 325248, 326400, 329472, 332424, 343035, 344250, 347004, 347490, 348160, 361179, 363000, 365904, 367200, 370656, 373977, 377300, 382200, 387200, 391680, 407680, 408375, 411642, 413100, 416988, 417792, 429975, 435600, 440640, 452760, 455000, 458640, 464640, 470016, 470596, 482944, 489216, 490050, 495616, 495720, 509355, 511875, 515970, 522720, 528768, 539000, 543312, 546000, 550368, 557568, 557685, 582400, 588060, 594864, 606375, 609375, 611226, 614250, 619164, 627264, 646800, 650000, 655200, 669222, 672280, 689920, 698880, 705672, 721875, 727650, 731250, 737100, 745472, 756315, 770000, 776160, 780000, 786240, 793881, 806736, 827904, 832000, 838656, 859375, 866250, 873180, 877500, 884520, 900375, 907578, 924000, 931392, 936000, 943488, 960400, 985600, 995085, 998400, 1031250, 1039500, 1047816, 1053000, 1061424, 1064960, 1071875, 1080450, 1100000, 1108800, 1123200, 1152480, 1178793, 1182720, 1184625, 1194102, 1198080, 1229312, 1237500, 1247400, 1261568, 1263600, 1277952, 1286250, 1296540, 1320000, 1330560, 1347840, 1372000, 1382976, 1403325, 1408000, 1419264, 1421550, 1437696, 1485000, 1496880, 1516320, 1531250, 1543500, 1555848, 1584000, 1596672, 1617408, 1646400, 1670625, 1683990, 1689600, 1705860, 1750329, 1756160, 1782000, 1796256, 1802240, 1819584, 1837500, 1852200, 1900800, 1960000, 1975680, 2004750, 2020788, 2027520, 2047032, 2083725, 2107392, 2138400, 2162688, 2187500, 2205000, 2222640, 2280960, 2302911, 2352000, 2370816, 2405700, 2433024, 2480625, 2500470, 2508800, 2566080, 2625000, 2646000, 2667168, 2737152, 2800000, 2822400, 2886840, 2953125, 2976750, 3000564, 3010560, 3079296, 3125000, 3150000, 3175200, 3211264, 3247695, 3360000, 3386880, 3464208, 3515625, 3543750, 3572100, 3584000, 3612672, 3750000, 3780000, 3810240, 3897234, 4000000, 4032000, 4064256, 4218750, 4252500, 4286520, 4300800, 4500000, 4536000, 4572288, 4587520, 4800000, 4822335, 4838400, 5062500, 5103000, 5120000, 5143824, 5160960, 5400000, 5443200, 5505024, 5740875, 5760000, 5786802, 5806080, 6075000, 6123600, 6144000, 6193152, 6480000, 6531840, 6553600, 6834375, 6889050, 6912000, 6967296, 7290000, 7348320, 7372800, 7776000, 7838208, 7864320, 8201250, 8266860, 8294400, 8388608, 8748000, 8817984, 8847360, 9331200, 9437184, 9841500, 9920232, 9953280, 10497600, 10616832, 11160261, 11197440, 11809800, 11943936, 12597120, 13286025, 13436928, 14171760, 15116544, 15943230, 17006112, 19131876'
 ],
 'printfUsageDemo'=>
 ['FDLinux'=>
  ['Call with parameter:','  This is a test','Call with multiple parameters','  234 != 3.1415926535897932385',
   'Call with multiple parameters, reordering and/or computing','  3.1415926535897932385 != 234','  3.1415926535897932385 != 15',
   'Passing a list will result in multiple lines of output','  234','  3.1415926535897932385','  test',
   'Call without parameter, using string interpolation','  printf: test','  print : %{string}s',
   'Note, that you cannot access function/each parameters by string interpolation','Insteaf of %{...}s you can write {...}',
   '  pi=3.1415926535897932385','You can use curly brackets or percent signs in formats by escaping them',
   '  I am 0.75% sure that { and } can be escaped','Decimal format: %d (note the fallback for strings','  234',
   '  3.1415926535897932385','  test','Decimal format: %5d (5 chars wide without leading zero)','    234','   -234',
   'Decimal format: %5.5d (5 chars wide with leading zero)','  00234','  -0234','Exponential form: %e',
   '  2.3400000000000000E+002','  3.1415926535897932E+000','Exponential form: %3.3e','  2.34E+002','  3.14E+000',
   'Float form: %f','  234.00','  3.14','Float form: %7.3f (7 chars total, 3 decimal places)','  234.000','    3.142',
   'General number format: %g','  234','  3.1415926535897932',
   'General number format: %5.2g (5 chars with minimum, 2 most significant digits)','  2.3E2','    3.1','Money format %m',
   '  234.00$','Money format %m','  234.00$','Number format: %6.2n (6 chars width minimum, 2 decimal places)','  234.00',
   '    3.14','Hexadecimal form: %x','  EA','Hexadecimal form: %6.4x (6 chars width minimum, 4 digits guaranteed even if zero)',
   '    00EA'],
  'FDWin32'=>
  ['Call with parameter:','  This is a test','Call with multiple parameters','  234 != 3.1415926535897932385',
   'Call with multiple parameters, reordering and/or computing','  3.1415926535897932385 != 234','  3.1415926535897932385 != 15',
   'Passing a list will result in multiple lines of output','  234','  3.1415926535897932385','  test',
   'Call without parameter, using string interpolation','  printf: test','  print : %{string}s',
   'Note, that you cannot access function/each parameters by string interpolation','Insteaf of %{...}s you can write {...}',
   '  pi=3.1415926535897932385','You can use curly brackets or percent signs in formats by escaping them',
   '  I am 0.75% sure that { and } can be escaped','Decimal format: %d (note the fallback for strings','  234',
   '  3.1415926535897932385','  test','Decimal format: %5d (5 chars wide without leading zero)','    234','   -234',
   'Decimal format: %5.5d (5 chars wide with leading zero)','  00234','  -0234','Exponential form: %e',
   '  2.3400000000000000E+002','  3.1415926535897932E+000','Exponential form: %3.3e','  2.34E+002','  3.14E+000',
   'Float form: %f','  234.00','  3.14','Float form: %7.3f (7 chars total, 3 decimal places)','  234.000','    3.142',
   'General number format: %g','  234','  3.1415926535897932',
   'General number format: %5.2g (5 chars with minimum, 2 most significant digits)','  2.3E2','    3.1','Money format %m',
   "  234.00 €",'Money format %m',"  234.00 €",'Number format: %6.2n (6 chars width minimum, 2 decimal places)','  234.00',
   '    3.14','Hexadecimal form: %x','  EA','Hexadecimal form: %6.4x (6 chars width minimum, 4 digits guaranteed even if zero)',
   '    00EA'],
  'FDWin64'=>
  ['Call with parameter:','  This is a test','Call with multiple parameters','  234 != 3.141592653589793',
   'Call with multiple parameters, reordering and/or computing','  3.141592653589793 != 234','  3.141592653589793 != 15',
   'Passing a list will result in multiple lines of output','  234','  3.141592653589793','  test',
   'Call without parameter, using string interpolation','  printf: test','  print : %{string}s',
   'Note, that you cannot access function/each parameters by string interpolation','Insteaf of %{...}s you can write {...}',
   '  pi=3.141592653589793','You can use curly brackets or percent signs in formats by escaping them',
   '  I am 0.75% sure that { and } can be escaped','Decimal format: %d (note the fallback for strings','  234',
   '  3.141592653589793','  test','Decimal format: %5d (5 chars wide without leading zero)','    234','   -234',
   'Decimal format: %5.5d (5 chars wide with leading zero)','  00234','  -0234','Exponential form: %e','  2.34000000000000E+002',
   '  3.14159265358979E+000','Exponential form: %3.3e','  2.34E+002','  3.14E+000','Float form: %f','  234.00','  3.14',
   'Float form: %7.3f (7 chars total, 3 decimal places)','  234.000','    3.142','General number format: %g','  234',
   '  3.14159265358979','General number format: %5.2g (5 chars with minimum, 2 most significant digits)','  2.3E2','    3.1',
   'Money format %m',"  234.00 €",'Money format %m',"  234.00 €",
   'Number format: %6.2n (6 chars width minimum, 2 decimal places)','  234.00','    3.14','Hexadecimal form: %x','  EA',
   'Hexadecimal form: %6.4x (6 chars width minimum, 4 digits guaranteed even if zero)','    00EA'],
  'FOLinux'=>
  ['Call with parameter:','  This is a test','Call with multiple parameters','  234 != 3.1415926535897932385',
   'Call with multiple parameters, reordering and/or computing','  3.1415926535897932385 != 234','  3.1415926535897932385 != 15',
   'Passing a list will result in multiple lines of output','  234','  3.1415926535897932385','  test',
   'Call without parameter, using string interpolation','  printf: test','  print : %{string}s',
   'Note, that you cannot access function/each parameters by string interpolation','Insteaf of %{...}s you can write {...}',
   '  pi=3.1415926535897932385','You can use curly brackets or percent signs in formats by escaping them',
   '  I am 0.75% sure that { and } can be escaped','Decimal format: %d (note the fallback for strings','  234',
   '  3.1415926535897932385','  test','Decimal format: %5d (5 chars wide without leading zero)','    234','   -234',
   'Decimal format: %5.5d (5 chars wide with leading zero)','  00234','  -0234','Exponential form: %e',
   '  2.3400000000000000E+002','  3.1415926535897932E+000','Exponential form: %3.3e','  2.34E+002','  3.14E+000',
   'Float form: %f','  234.00','  3.14','Float form: %7.3f (7 chars total, 3 decimal places)','  234.000','    3.142',
   'General number format: %g','  234','  3.1415926535897932',
   'General number format: %5.2g (5 chars with minimum, 2 most significant digits)','  2.3E2','    3.1','Money format %m',
   '  234.00$','Money format %m','  234.00$','Number format: %6.2n (6 chars width minimum, 2 decimal places)','  234.00',
   '    3.14','Hexadecimal form: %x','  EA','Hexadecimal form: %6.4x (6 chars width minimum, 4 digits guaranteed even if zero)',
   '    00EA'],
  'FOWin32'=>
  ['Call with parameter:','  This is a test','Call with multiple parameters','  234 != 3.1415926535897932385',
   'Call with multiple parameters, reordering and/or computing','  3.1415926535897932385 != 234','  3.1415926535897932385 != 15',
   'Passing a list will result in multiple lines of output','  234','  3.1415926535897932385','  test',
   'Call without parameter, using string interpolation','  printf: test','  print : %{string}s',
   'Note, that you cannot access function/each parameters by string interpolation','Insteaf of %{...}s you can write {...}',
   '  pi=3.1415926535897932385','You can use curly brackets or percent signs in formats by escaping them',
   '  I am 0.75% sure that { and } can be escaped','Decimal format: %d (note the fallback for strings','  234',
   '  3.1415926535897932385','  test','Decimal format: %5d (5 chars wide without leading zero)','    234','   -234',
   'Decimal format: %5.5d (5 chars wide with leading zero)','  00234','  -0234','Exponential form: %e',
   '  2.3400000000000000E+002','  3.1415926535897932E+000','Exponential form: %3.3e','  2.34E+002','  3.14E+000',
   'Float form: %f','  234.00','  3.14','Float form: %7.3f (7 chars total, 3 decimal places)','  234.000','    3.142',
   'General number format: %g','  234','  3.1415926535897932',
   'General number format: %5.2g (5 chars with minimum, 2 most significant digits)','  2.3E2','    3.1','Money format %m',
   "  234.00 €",'Money format %m',"  234.00 €",'Number format: %6.2n (6 chars width minimum, 2 decimal places)','  234.00',
   '    3.14','Hexadecimal form: %x','  EA','Hexadecimal form: %6.4x (6 chars width minimum, 4 digits guaranteed even if zero)',
   '    00EA'],
  'FOWin64'=>
  ['Call with parameter:','  This is a test','Call with multiple parameters','  234 != 3.141592653589793',
   'Call with multiple parameters, reordering and/or computing','  3.141592653589793 != 234','  3.141592653589793 != 15',
   'Passing a list will result in multiple lines of output','  234','  3.141592653589793','  test',
   'Call without parameter, using string interpolation','  printf: test','  print : %{string}s',
   'Note, that you cannot access function/each parameters by string interpolation','Insteaf of %{...}s you can write {...}',
   '  pi=3.141592653589793','You can use curly brackets or percent signs in formats by escaping them',
   '  I am 0.75% sure that { and } can be escaped','Decimal format: %d (note the fallback for strings','  234',
   '  3.141592653589793','  test','Decimal format: %5d (5 chars wide without leading zero)','    234','   -234',
   'Decimal format: %5.5d (5 chars wide with leading zero)','  00234','  -0234','Exponential form: %e','  2.34000000000000E+002',
   '  3.14159265358979E+000','Exponential form: %3.3e','  2.34E+002','  3.14E+000','Float form: %f','  234.00','  3.14',
   'Float form: %7.3f (7 chars total, 3 decimal places)','  234.000','    3.142','General number format: %g','  234',
   '  3.14159265358979','General number format: %5.2g (5 chars with minimum, 2 most significant digits)','  2.3E2','    3.1',
   'Money format %m',"  234.00 €",'Money format %m',"  234.00 €",
   'Number format: %6.2n (6 chars width minimum, 2 decimal places)','  234.00','    3.14','Hexadecimal form: %x','  EA',
   'Hexadecimal form: %6.4x (6 chars width minimum, 4 digits guaranteed even if zero)','    00EA'],
  'LDLinux'=>
  ['Call with parameter:','  This is a test','Call with multiple parameters','  234 != 3.1415926535897932385',
   'Call with multiple parameters, reordering and/or computing','  3.1415926535897932385 != 234','  3.1415926535897932385 != 15',
   'Passing a list will result in multiple lines of output','  234','  3.1415926535897932385','  test',
   'Call without parameter, using string interpolation','  printf: test','  print : %{string}s',
   'Note, that you cannot access function/each parameters by string interpolation','Insteaf of %{...}s you can write {...}',
   '  pi=3.1415926535897932385','You can use curly brackets or percent signs in formats by escaping them',
   '  I am 0.75% sure that { and } can be escaped','Decimal format: %d (note the fallback for strings','  234',
   '  3.1415926535897932385','  test','Decimal format: %5d (5 chars wide without leading zero)','    234','   -234',
   'Decimal format: %5.5d (5 chars wide with leading zero)','  00234','  -0234','Exponential form: %e',
   '  2.3400000000000000E+002','  3.1415926535897932E+000','Exponential form: %3.3e','  2.34E+002','  3.14E+000',
   'Float form: %f','  234.00','  3.14','Float form: %7.3f (7 chars total, 3 decimal places)','  234.000','    3.142',
   'General number format: %g','  234','  3.1415926535897932',
   'General number format: %5.2g (5 chars with minimum, 2 most significant digits)','  2.3E2','    3.1','Money format %m',
   '  234.00$','Money format %m','  234.00$','Number format: %6.2n (6 chars width minimum, 2 decimal places)','  234.00',
   '    3.14','Hexadecimal form: %x','  EA','Hexadecimal form: %6.4x (6 chars width minimum, 4 digits guaranteed even if zero)',
   '    00EA'],
  'LDWin32'=>
  ['Call with parameter:','  This is a test','Call with multiple parameters','  234 != 3.1415926535897932385',
   'Call with multiple parameters, reordering and/or computing','  3.1415926535897932385 != 234','  3.1415926535897932385 != 15',
   'Passing a list will result in multiple lines of output','  234','  3.1415926535897932385','  test',
   'Call without parameter, using string interpolation','  printf: test','  print : %{string}s',
   'Note, that you cannot access function/each parameters by string interpolation','Insteaf of %{...}s you can write {...}',
   '  pi=3.1415926535897932385','You can use curly brackets or percent signs in formats by escaping them',
   '  I am 0.75% sure that { and } can be escaped','Decimal format: %d (note the fallback for strings','  234',
   '  3.1415926535897932385','  test','Decimal format: %5d (5 chars wide without leading zero)','    234','   -234',
   'Decimal format: %5.5d (5 chars wide with leading zero)','  00234','  -0234','Exponential form: %e',
   '  2.3400000000000000E+002','  3.1415926535897932E+000','Exponential form: %3.3e','  2.34E+002','  3.14E+000',
   'Float form: %f','  234.00','  3.14','Float form: %7.3f (7 chars total, 3 decimal places)','  234.000','    3.142',
   'General number format: %g','  234','  3.1415926535897932',
   'General number format: %5.2g (5 chars with minimum, 2 most significant digits)','  2.3E2','    3.1','Money format %m',
   "  234.00 €",'Money format %m',"  234.00 €",'Number format: %6.2n (6 chars width minimum, 2 decimal places)','  234.00',
   '    3.14','Hexadecimal form: %x','  EA','Hexadecimal form: %6.4x (6 chars width minimum, 4 digits guaranteed even if zero)',
   '    00EA'],
  'LDWin64'=>
  ['Call with parameter:','  This is a test','Call with multiple parameters','  234 != 3.141592653589793',
   'Call with multiple parameters, reordering and/or computing','  3.141592653589793 != 234','  3.141592653589793 != 15',
   'Passing a list will result in multiple lines of output','  234','  3.141592653589793','  test',
   'Call without parameter, using string interpolation','  printf: test','  print : %{string}s',
   'Note, that you cannot access function/each parameters by string interpolation','Insteaf of %{...}s you can write {...}',
   '  pi=3.141592653589793','You can use curly brackets or percent signs in formats by escaping them',
   '  I am 0.75% sure that { and } can be escaped','Decimal format: %d (note the fallback for strings','  234',
   '  3.141592653589793','  test','Decimal format: %5d (5 chars wide without leading zero)','    234','   -234',
   'Decimal format: %5.5d (5 chars wide with leading zero)','  00234','  -0234','Exponential form: %e','  2.34000000000000E+002',
   '  3.14159265358979E+000','Exponential form: %3.3e','  2.34E+002','  3.14E+000','Float form: %f','  234.00','  3.14',
   'Float form: %7.3f (7 chars total, 3 decimal places)','  234.000','    3.142','General number format: %g','  234',
   '  3.14159265358979','General number format: %5.2g (5 chars with minimum, 2 most significant digits)','  2.3E2','    3.1',
   'Money format %m',"  234.00 €",'Money format %m',"  234.00 €",
   'Number format: %6.2n (6 chars width minimum, 2 decimal places)','  234.00','    3.14','Hexadecimal form: %x','  EA',
   'Hexadecimal form: %6.4x (6 chars width minimum, 4 digits guaranteed even if zero)','    00EA'],
  'LOLinux'=>
  ['Call with parameter:','  This is a test','Call with multiple parameters','  234 != 3.1415926535897932385',
   'Call with multiple parameters, reordering and/or computing','  3.1415926535897932385 != 234','  3.1415926535897932385 != 15',
   'Passing a list will result in multiple lines of output','  234','  3.1415926535897932385','  test',
   'Call without parameter, using string interpolation','  printf: test','  print : %{string}s',
   'Note, that you cannot access function/each parameters by string interpolation','Insteaf of %{...}s you can write {...}',
   '  pi=3.1415926535897932385','You can use curly brackets or percent signs in formats by escaping them',
   '  I am 0.75% sure that { and } can be escaped','Decimal format: %d (note the fallback for strings','  234',
   '  3.1415926535897932385','  test','Decimal format: %5d (5 chars wide without leading zero)','    234','   -234',
   'Decimal format: %5.5d (5 chars wide with leading zero)','  00234','  -0234','Exponential form: %e',
   '  2.3400000000000000E+002','  3.1415926535897932E+000','Exponential form: %3.3e','  2.34E+002','  3.14E+000',
   'Float form: %f','  234.00','  3.14','Float form: %7.3f (7 chars total, 3 decimal places)','  234.000','    3.142',
   'General number format: %g','  234','  3.1415926535897932',
   'General number format: %5.2g (5 chars with minimum, 2 most significant digits)','  2.3E2','    3.1','Money format %m',
   '  234.00$','Money format %m','  234.00$','Number format: %6.2n (6 chars width minimum, 2 decimal places)','  234.00',
   '    3.14','Hexadecimal form: %x','  EA','Hexadecimal form: %6.4x (6 chars width minimum, 4 digits guaranteed even if zero)',
   '    00EA'],
  'LOWin32'=>
  ['Call with parameter:','  This is a test','Call with multiple parameters','  234 != 3.1415926535897932385',
   'Call with multiple parameters, reordering and/or computing','  3.1415926535897932385 != 234','  3.1415926535897932385 != 15',
   'Passing a list will result in multiple lines of output','  234','  3.1415926535897932385','  test',
   'Call without parameter, using string interpolation','  printf: test','  print : %{string}s',
   'Note, that you cannot access function/each parameters by string interpolation','Insteaf of %{...}s you can write {...}',
   '  pi=3.1415926535897932385','You can use curly brackets or percent signs in formats by escaping them',
   '  I am 0.75% sure that { and } can be escaped','Decimal format: %d (note the fallback for strings','  234',
   '  3.1415926535897932385','  test','Decimal format: %5d (5 chars wide without leading zero)','    234','   -234',
   'Decimal format: %5.5d (5 chars wide with leading zero)','  00234','  -0234','Exponential form: %e',
   '  2.3400000000000000E+002','  3.1415926535897932E+000','Exponential form: %3.3e','  2.34E+002','  3.14E+000',
   'Float form: %f','  234.00','  3.14','Float form: %7.3f (7 chars total, 3 decimal places)','  234.000','    3.142',
   'General number format: %g','  234','  3.1415926535897932',
   'General number format: %5.2g (5 chars with minimum, 2 most significant digits)','  2.3E2','    3.1','Money format %m',
   "  234.00 €",'Money format %m',"  234.00 €",'Number format: %6.2n (6 chars width minimum, 2 decimal places)','  234.00',
   '    3.14','Hexadecimal form: %x','  EA','Hexadecimal form: %6.4x (6 chars width minimum, 4 digits guaranteed even if zero)',
   '    00EA'],
  'LOWin64'=>
  ['Call with parameter:','  This is a test','Call with multiple parameters','  234 != 3.141592653589793',
   'Call with multiple parameters, reordering and/or computing','  3.141592653589793 != 234','  3.141592653589793 != 15',
   'Passing a list will result in multiple lines of output','  234','  3.141592653589793','  test',
   'Call without parameter, using string interpolation','  printf: test','  print : %{string}s',
   'Note, that you cannot access function/each parameters by string interpolation','Insteaf of %{...}s you can write {...}',
   '  pi=3.141592653589793','You can use curly brackets or percent signs in formats by escaping them',
   '  I am 0.75% sure that { and } can be escaped','Decimal format: %d (note the fallback for strings','  234',
   '  3.141592653589793','  test','Decimal format: %5d (5 chars wide without leading zero)','    234','   -234',
   'Decimal format: %5.5d (5 chars wide with leading zero)','  00234','  -0234','Exponential form: %e','  2.34000000000000E+002',
   '  3.14159265358979E+000','Exponential form: %3.3e','  2.34E+002','  3.14E+000','Float form: %f','  234.00','  3.14',
   'Float form: %7.3f (7 chars total, 3 decimal places)','  234.000','    3.142','General number format: %g','  234',
   '  3.14159265358979','General number format: %5.2g (5 chars with minimum, 2 most significant digits)','  2.3E2','    3.1',
   'Money format %m',"  234.00 €",'Money format %m',"  234.00 €",
   'Number format: %6.2n (6 chars width minimum, 2 decimal places)','  234.00','    3.14','Hexadecimal form: %x','  EA',
   'Hexadecimal form: %6.4x (6 chars width minimum, 4 digits guaranteed even if zero)','    00EA']].toMap,
 'pythagoras'=>
 ['In perimeter <=     10 there are      0 pythagorean triplets,     0 of which are primitive',
  'In perimeter <=    100 there are     17 pythagorean triplets,     7 of which are primitive',
  'In perimeter <=   1000 there are    325 pythagorean triplets,    70 of which are primitive',
  'In perimeter <=  10000 there are   4858 pythagorean triplets,   703 of which are primitive',
  'In perimeter <= 100000 there are  64741 pythagorean triplets,  7026 of which are primitive'],
 'queens'=>
 ['The 2-queens puzzle has 0 solutions','The 3-queens puzzle has 0 solutions','The 4-queens puzzle has 2 solutions',
  '  e.g. A2 B4 C1 D3 ','The 5-queens puzzle has 10 solutions','  e.g. A1 B3 C5 D2 E4 ','The 6-queens puzzle has 4 solutions',
  '  e.g. A2 B4 C6 D1 E3 F5 ','The 7-queens puzzle has 40 solutions','  e.g. A1 B3 C5 D7 E2 F4 G6 ',
  'The 8-queens puzzle has 92 solutions','  e.g. A1 B5 C8 D6 E3 F7 G2 H4 '],
 'queue'=>
 ['The next element is 51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71',
  '72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96',
  '97','98','99','100'],
 'quine'=>
 ["main->print('main', :: main,';');"],
 'quine2'=>
 ['//*Quine via inspection','@demo_for=textbook problems',"main->print(inspect['source']);"],
 'randomWords'=>
 ["Brr'ssiti","fassst'sst",'hcicuerge','rolloriere','Thainksmadj','phatre',"chukity's",'sgarameeyla','ctyinalf','cive',
  'duorrielilonhon',"anet'singes",'urtaccy','gaydoyhini','brvizi','press'],
 'range_extract_expand'=>
 ['Canonical form (as given by rosettacode.org):',
  '  The list              [0,1,2,4,6,7,8,11,12,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,35,36,37,38,39]',
  '  can be represented as 0-2,4,6-8,11-12,14-25,27-33,35-39',
  '  and be re-expanded to [0,1,2,4,6,7,8,11,12,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,35,36,37,38,39]','',
  '  The range               -6,-3--1,3-5,7-11,14,15,17-20',
  '  can be expanded to      [-6,-3,-2,-1,3,4,5,7,8,9,10,11,14,15,17,18,19,20]',
  '  and be re-compressed to -6,-3--1,3-5,7-11,14-15,17-20','','MNH form:',
  '  The list              [0,1,2,4,6,7,8,11,12,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,35,36,37,38,39]',
  '  can be represented as [0..2,4,6..8,11..12,14..25,27..33,35..39]',
  '  and be re-expanded to [0,1,2,4,6,7,8,11,12,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,35,36,37,38,39]'],
 'rationalPi'=>
 ['4                                     = 4.0','8/3                                   = 2.6666',
  '52/15                                 = 3.4666','304/105                               = 2.8952',
  '1052/315                              = 3.3396','10312/3465                            = 2.9760',
  '147916/45045                          = 3.2837','135904/45045                          = 3.0170',
  '2490548/765765                        = 3.2523','44257352/14549535                     = 3.0418',
  '47028692/14549535                     = 3.2323','1023461776/334639305                  = 3.0584',
  '5385020324/1673196525                 = 3.2184','15411418072/5019589575                = 3.0702',
  '467009482388/145568097675             = 3.2081','13895021563328/4512611027925          = 3.0791',
  '14442004718228/4512611027925          = 3.2003','13926277743608/4512611027925          = 3.0860',
  '533322720625196/166966608033225       = 3.1941','516197940314096/166966608033225       = 3.0916',
  '21831981985010836/6845630929362225    = 3.1891','911392701638017048/294362129962575675 = 3.0961'],
 'recaman'=>
 ['The first 15 Recaman numbers are [0,1,3,6,2,7,13,20,12,21,11,22,10,23,9]','The first duplicated Number in the sequence is 42',
  'You need 328002 steps to generate all integers up to (including) 1000'],
 'relevantDigitsTest'=>
 ['FDLinux'=>
  ['7.1','7.01','7.001','7.0001','7.00001','7.000001','7.0000001','7.00000001','7.000000001','7.0000000001','7.00000000001',
   '7.000000000001','7.0000000000001','7.00000000000001','7.000000000000001','7.0000000000000001','7.0000000000000000099',
   '7.0000000000000000008','7.0','7.0','7.0'],
  'FDWin32'=>
  ['7.1','7.01','7.001','7.0001','7.00001','7.000001','7.0000001','7.00000001','7.000000001','7.0000000001','7.00000000001',
   '7.000000000001','7.0000000000001','7.00000000000001','7.000000000000001','7.0000000000000001','7.0000000000000000099',
   '7.0000000000000000008','7.0','7.0','7.0'],
  'FDWin64'=>
  ['7.1','7.01','7.001','7.0001','7.00001','7.000001','7.0000001','7.00000001','7.000000001','7.0000000001','7.00000000001',
   '7.000000000001','7.0000000000001','7.00000000000001','7.0000000000000009','7.0','7.0','7.0','7.0','7.0','7.0'],
  'FOLinux'=>
  ['7.1','7.01','7.001','7.0001','7.00001','7.000001','7.0000001','7.00000001','7.000000001','7.0000000001','7.00000000001',
   '7.000000000001','7.0000000000001','7.00000000000001','7.000000000000001','7.0000000000000001','7.0000000000000000099',
   '7.0000000000000000008','7.0','7.0','7.0'],
  'FOWin32'=>
  ['7.1','7.01','7.001','7.0001','7.00001','7.000001','7.0000001','7.00000001','7.000000001','7.0000000001','7.00000000001',
   '7.000000000001','7.0000000000001','7.00000000000001','7.000000000000001','7.0000000000000001','7.0000000000000000099',
   '7.0000000000000000008','7.0','7.0','7.0'],
  'FOWin64'=>
  ['7.1','7.01','7.001','7.0001','7.00001','7.000001','7.0000001','7.00000001','7.000000001','7.0000000001','7.00000000001',
   '7.000000000001','7.0000000000001','7.00000000000001','7.0000000000000009','7.0','7.0','7.0','7.0','7.0','7.0'],
  'LDLinux'=>
  ['7.1','7.01','7.001','7.0001','7.00001','7.000001','7.0000001','7.00000001','7.000000001','7.0000000001','7.00000000001',
   '7.000000000001','7.0000000000001','7.00000000000001','7.000000000000001','7.0000000000000001','7.0000000000000000099',
   '7.0000000000000000008','7.0','7.0','7.0'],
  'LDWin32'=>
  ['7.1','7.01','7.001','7.0001','7.00001','7.000001','7.0000001','7.00000001','7.000000001','7.0000000001','7.00000000001',
   '7.000000000001','7.0000000000001','7.00000000000001','7.000000000000001','7.0000000000000001','7.0000000000000000099',
   '7.0000000000000000008','7.0','7.0','7.0'],
  'LDWin64'=>
  ['7.1','7.01','7.001','7.0001','7.00001','7.000001','7.0000001','7.00000001','7.000000001','7.0000000001','7.00000000001',
   '7.000000000001','7.0000000000001','7.00000000000001','7.0000000000000009','7.0','7.0','7.0','7.0','7.0','7.0'],
  'LOLinux'=>
  ['7.1','7.01','7.001','7.0001','7.00001','7.000001','7.0000001','7.00000001','7.000000001','7.0000000001','7.00000000001',
   '7.000000000001','7.0000000000001','7.00000000000001','7.000000000000001','7.0000000000000001','7.0000000000000000099',
   '7.0000000000000000008','7.0','7.0','7.0'],
  'LOWin32'=>
  ['7.1','7.01','7.001','7.0001','7.00001','7.000001','7.0000001','7.00000001','7.000000001','7.0000000001','7.00000000001',
   '7.000000000001','7.0000000000001','7.00000000000001','7.000000000000001','7.0000000000000001','7.0000000000000000099',
   '7.0000000000000000008','7.0','7.0','7.0'],
  'LOWin64'=>
  ['7.1','7.01','7.001','7.0001','7.00001','7.000001','7.0000001','7.00000001','7.000000001','7.0000000001','7.00000000001',
   '7.000000000001','7.0000000000001','7.00000000000001','7.0000000000000009','7.0','7.0','7.0','7.0','7.0','7.0']].toMap,
 'rk4'=>
 ['FDLinux'=>
  ['time | approx (RK4)                     error (RK4) | approx (CashCarp)           error (CashCarp)',
   ' 0.0 |   1                  0.0000000000000000E+000 |   1                  0.0000000000000000E+000',
   ' 0.1 |   1.0050062486962987 1.3037013056561506E-009 |   1.0050062500579799 5.7979866676001468E-011',
   ' 0.2 |   1.0200999947846331 5.2153668504088119E-009 |   1.0201000001149893 1.1498931624595587E-010',
   ' 0.3 |   1.0455062382554288 1.1744571179082494E-008 |   1.0455062501711931 1.7119307772588133E-010',
   ' 0.4 |   1.0815999790671547 2.0932845316064957E-008 |   1.0816000002268002 2.2680017965678173E-010',
   ' 0.5 |   1.1289062171139842 3.2886015827724747E-008 |   1.1289062502820451 2.8204512770441115E-010',
   ' 0.6 |   1.1880999521926327 4.7807367256906715E-008 |   1.1881000003371433 3.3714330958077576E-010',
   ' 0.7 |   1.2600061839764939 6.6023506033012491E-008 |   1.2600062503922304 3.9223038131221827E-010',
   ' 0.8 |   1.345599912002743  8.7997256953626160E-008 |   1.3456000004473012 4.4730128162615707E-010',
   ' 0.9 |   1.4460061356746574 1.1432534253834337E-007 |   1.4460062505021644 5.0216448490777998E-010',
   ' 1.0 |   1.5624998542781078 1.4572189208084119E-007 |   1.5625000005564221 5.5642214371199455E-010',
   ' 1.1 |   1.6965060670087851 1.8299121482391687E-007 |   1.6965062506094793 6.0947941214316986E-010',
   ' 1.2 |   1.8495997730055733 2.2699442658250923E-007 |   1.8496000006605792 6.6057935315354255E-010',
   ' 1.3 |   2.0235059713854678 2.7861453204573380E-007 |   2.0235062507088551 7.0885523124029903E-010',
   ' 1.4 |   2.2200996612762245 3.3872377531714119E-007 |   2.2201000007533902 7.5339035986339564E-010',
   ' 1.5 |   2.4414058418441126 4.0815588716117124E-007 |   2.4414062507932763 7.9327647293896131E-010',
   ' 1.6 |   2.6895995123153735 4.8768462628098405E-007 |   2.6896000008276637 8.2766393760293211E-010',
   ' 1.7 |   2.9670056719910381 5.7800896157886826E-007 |   2.9670062508557997 8.5579995499039663E-010',
   ' 1.8 |   3.2760993202555215 6.7974447813361205E-007 |   3.2761000008770532 8.7705351705172352E-010',
   ' 1.9 |   3.6195054565798759 7.9342012367024546E-007 |   3.6195062508909275 8.9092783519574559E-010',
   ' 2.0 |   3.9999990805207988 9.1947920073708403E-007 |   4.0000000008970617 8.9706218668605953E-010',
   ' 2.1 |   4.4205051917165137 1.0582834857829869E-006 |   4.4205062508952251 8.9522565749344807E-010',
   ' 2.2 |   4.8840987898805474 1.2101194519801781E-006 |   4.8841000008853047 8.8530531993855077E-010',
   ' 2.3 |   5.3940048747942681 1.3752057311995115E-006 |   5.3940062508672904 8.6729111479361132E-010',
   ' 2.4 |   5.9535984462988688 1.5537011304224413E-006 |   5.9536000008412585 8.4125928575748410E-010',
   ' 2.5 |   6.566404504287307  1.7457126921427597E-006 |   6.5664062508073549 8.0735576037105350E-010',
   ' 2.6 |   7.236098048696557  1.9513034420046323E-006 |   7.2361000007657794 7.6578043645830762E-010',
   ' 2.7 |   7.9665040795004052 2.1704995937120095E-006 |   7.9665062507167718 7.1677295002126051E-010',
   ' 2.8 |   8.7615975967029186 2.4032970801684053E-006 |   8.761600000660599  6.6060026632924762E-010',
   ' 2.9 |   9.6255036003326451 2.6496673534576187E-006 |   9.6255062505975447 5.9754614190749011E-010',
   ' 3.0 |  10.56249709043755   2.9095624481736970E-006 |  10.562500000622925  6.2292708751660042E-010',
   ' 3.1 |  11.577003067080661  3.1829193373449777E-006 |  11.577006250649043  6.4904462707127131E-010',
   ' 3.2 |  12.673596530336367  3.4696636314664880E-006 |  12.673600000675906  6.7590784358362299E-010',
   ' 3.3 |  13.857002480287315  3.7697126826947980E-006 |  13.857006250703523  7.0352553990793432E-010',
   ' 3.4 |  15.132095917021837  4.0829781608030941E-006 |  15.132100000731904  7.3190615200446896E-010',
   ' 3.5 |  16.50390184063183   4.4093681673511298E-006 |  16.503906250761055  7.6105769429568593E-010',
   ' 3.6 |  17.977595251211046  4.7487889513961323E-006 |  17.977600000790985  7.9098772323704658E-010',
   ' 3.7 |  19.558501148853712  5.1011462852031120E-006 |  19.5585062508217    8.2170328354058686E-010',
   ' 3.8 |  21.252094533653444  5.4663465524872057E-006 |  21.252100000853207  8.5321095848189810E-010',
   ' 3.9 |  23.0640004057024    5.8442975959683424E-006 |  23.064006250885513  8.8551681959314621E-010',
   ' 4.0 |  24.999993765090631  6.2349093646781040E-006 |  25.000000000918622  9.1862647523532903E-010',
   ' 4.1 |  27.065999611905599  6.6380943962857097E-006 |  27.06600625095254   9.5254507927189369E-010',
   ' 4.2 |  29.268092946231831  7.0537681642387356E-006 |  29.268100000987272  9.8727733453818356E-010',
   ' 4.3 |  31.612498768150679  7.4818493150958371E-006 |  31.612506251022822  1.0228275466178660E-009',
   ' 4.4 |  34.105592077740176  7.9222598174839842E-006 |  34.105600001059193  1.0591996169040385E-009',
   ' 4.5 |  36.753897875074953  8.3749250403726549E-006 |  36.75390625109639   1.0963971085187207E-009',
   ' 4.6 |  39.564091160226217  8.8397737755471772E-006 |  39.564100001134416  1.1344232567211954E-009',
   ' 4.7 |  42.542996933261776  9.3167382165387780E-006 |  42.543006251173273  1.1732809515607734E-009',
   ' 4.8 |  45.697590194246088  9.8057539039339559E-006 |  45.697600001212964  1.2129728367560322E-009',
   ' 4.9 |  49.034995943240345  1.0306759645455771E-005 |  49.035006251253492  1.2535012784697930E-009',
   ' 5.0 |  52.562489180302573  1.0819697417334406E-005 |  52.562500001294858  1.2948684173508251E-009',
   ' 5.1 |  56.287494905487737  1.1344512252521588E-005 |  56.287506251337065  1.3370761581255053E-009',
   ' 5.2 |  60.217588118847869  1.1881152119915667E-005 |  60.217600001380115  1.3801262216395216E-009',
   ' 5.3 |  64.360493820432189  1.2429567798212526E-005 |  64.360506251424008  1.4240201448578738E-009',
   ' 5.4 |  68.72408701028724   1.2989712747019100E-005 |  68.724100001468746  1.4687593086204487E-009',
   ' 5.5 |  73.316392688457008  1.3561542977449936E-005 |  73.316406251514331  1.5143449272336795E-009',
   ' 5.6 |  78.145585854983061  1.4145016923712561E-005 |  78.145600001560763  1.5607781039816970E-009',
   ' 5.7 |  83.219991509904666  1.4740095317163082E-005 |  83.220006251608043  1.6080597894929660E-009',
   ' 5.8 |  88.548084653258919  1.5346741063598790E-005 |  88.548100001656173  1.6561908372514367E-009',
   ' 5.9 |  94.138490285080857  1.5964919124526744E-005 |  94.138506251705153  1.7051720382910140E-009',
   ' 6.0 |  99.999983405403577  1.6594596402963457E-005 | 100.00000000175498   1.7550040379288312E-009',
   ' 6.1 | 106.14148901425834   1.7235741633911394E-005 | 106.14150625180567   1.8056874259708700E-009',
   ' 6.2 | 112.5720821116747    1.7888325279845352E-005 | 112.5721000018572    1.8572227158952792E-009',
   ' 6.3 | 119.30098769768054   1.8552319431271169E-005 | 119.30100625190959   1.9096103587301627E-009',
   ' 6.4 | 126.33758077230226   1.9227697712190239E-005 | 126.33760000196283   1.9628507430535791E-009',
   ' 6.5 | 133.69138633556478   1.9914435190754309E-005 | 133.69140625201692   2.0169442088713296E-009',
   ' 6.6 | 141.37207938749168   2.0612508294562404E-005 | 141.37210000207186   2.0718910198613827E-009',
   ' 6.7 | 149.38948492810524   2.1321894730780278E-005 | 149.38950625212766   2.1276914119461310E-009',
   ' 6.8 | 157.75357795742656   2.2042573410832600E-005 | 157.75360000218431   2.1843456626813307E-009',
   ' 6.9 | 166.47448347547559   2.2774524379529093E-005 | 166.47450625224182   2.2418538692114964E-009',
   ' 7.0 | 175.56247648227122   2.3517728748131961E-005 | 175.56250000230018   2.3002162119478697E-009',
   ' 7.1 | 185.02798197783133   2.4272168631683799E-005 | 185.02800625235939   2.3594327880349653E-009',
   ' 7.2 | 194.88157496217287   2.5037827090013121E-005 | 194.88160000241946   2.4195036529839342E-009',
   ' 7.3 | 205.13398043531189   2.5814688072139935E-005 | 205.13400625248039   2.4804289594504425E-009',
   ' 7.4 | 215.79607339726359   2.6602736364511603E-005 | 215.79610000254216   2.5422086519233389E-009',
   ' 7.5 | 226.87887884804241   2.7401957541861588E-005 | 226.8789062526048    2.6048428136693502E-009',
   ' 7.6 | 238.39357178766203   2.8212337921551534E-005 | 238.39360000266828   2.6683314308106887E-009',
   ' 7.7 | 250.35147721613543   2.9033864520425223E-005 | 250.35150625273262   2.7326745311029299E-009',
   ' 7.8 | 262.76407013347493   2.9866525014632384E-005 | 262.76410000279782   2.7978720729127105E-009',
   ' 7.9 | 275.64297553969224   3.0710307701520279E-005 | 275.64300625286387   2.8639240146066669E-009',
   ' 8.0 | 288.99996843479848   3.1565201464273107E-005 | 289.00000000293077   2.9308304116959505E-009',
   ' 8.1 | 302.8469738188042    3.2431195738452656E-005 | 302.84700625299853   2.9985912086694100E-009',
   ' 8.2 | 317.19606669171945   3.3308280481064712E-005 | 317.19610000306714   3.0672063777714698E-009',
   ' 8.3 | 332.05947205355379   3.4196446140943859E-005 | 332.05950625313661   3.1366757524686761E-009',
   ' 8.4 | 347.4495649043163    3.5095683631053420E-005 | 347.44960000320693   3.2069993050054535E-009',
   ' 8.5 | 363.37887024401562   3.6005984302978078E-005 | 363.3789062532781    3.2781770076262262E-009',
   ' 8.6 | 379.86006307266      3.6927339922498970E-005 | 379.86010000335013   3.3502087215531162E-009',
   ' 8.7 | 396.90596839025727   3.7859742646695338E-005 | 396.90600625342301   3.4230944745416991E-009',
   ' 8.8 | 414.52956119681491   3.8803185002850293E-005 | 414.52960000349674   3.4968340445473700E-009',
   ' 8.9 | 432.74396649234004   3.9757659867967199E-005 | 432.74400625357133   3.5714274593257045E-009',
   ' 9.0 | 451.56245927683945   4.0723160450173435E-005 | 451.56250000364678   3.6468744968320976E-009',
   ' 9.1 | 470.99846455031963   4.1699680270596007E-005 | 470.99850625372307   3.7231752403332763E-009',
   ' 9.2 | 491.06555731278675   4.2687213147124536E-005 | 491.06560000380022   3.8003296065625136E-009',
   ' 9.3 | 511.77746256424671   4.3685753178424047E-005 | 511.77750625387823   3.8783373179640535E-009',
   ' 9.4 | 533.14805530470515   4.4695294729002466E-005 | 533.14810000395708   3.9571985133157739E-009',
   ' 9.5 | 555.19136053416746   4.5715832415582636E-005 | 555.19140625403679   4.0369129150619187E-009',
   ' 9.6 | 577.92155325263878   4.6747361093835149E-005 | 577.92160000411735   4.1174805787136393E-009',
   ' 9.7 | 601.35295846012402   4.7789875846249164E-005 | 601.35300625419877   4.1989013932486330E-009',
   ' 9.8 | 625.50005115662789   4.8843371970141991E-005 | 625.50010000428104   4.2811752476445974E-009',
   ' 9.9 | 650.37745634215489   4.9907844967167492E-005 | 650.37750625436416   4.3643019753680790E-009',
   '10.0 | 675.99994901670932   5.0983290532380376E-005 | 676.00000000444813   4.4482815764190775E-009'],
  'FDWin32'=>
  ['time | approx (RK4)                     error (RK4) | approx (CashCarp)           error (CashCarp)',
   ' 0.0 |   1                  0.0000000000000000E+000 |   1                  0.0000000000000000E+000',
   ' 0.1 |   1.0050062486962987 1.3037013059814112E-009 |   1.0050062500579799 5.7979943979616366E-011',
   ' 0.2 |   1.0200999947846331 5.2153668509509130E-009 |   1.0201000001149894 1.1498935809615973E-010',
   ' 0.3 |   1.0455062382554288 1.1744571179949856E-008 |   1.0455062501711931 1.7119314104328820E-010',
   ' 0.4 |   1.0815999790671547 2.0932845317149160E-008 |   1.0816000002268003 2.2680025121412511E-010',
   ' 0.5 |   1.1289062171139842 3.2886015829025790E-008 |   1.1289062502820453 2.8204527602326834E-010',
   ' 0.6 |   1.1880999521926327 4.7807367258749858E-008 |   1.1881000003371434 3.3714335815303309E-010',
   ' 0.7 |   1.260006183976494  6.6023506035180896E-008 |   1.2600062503922305 3.9223046447052490E-010',
   ' 0.8 |   1.345599912002743  8.7997256956336666E-008 |   1.3456000004473014 4.4730143623338686E-010',
   ' 0.9 |   1.4460061356746575 1.1432534254170439E-007 |   1.4460062505021645 5.0216446940368892E-010',
   ' 1.0 |   1.5624998542781079 1.4572189208528642E-007 |   1.562500000556422  5.5642201924558515E-010',
   ' 1.1 |   1.6965060670087852 1.8299121482836210E-007 |   1.696506250609479  6.0947901619253647E-010',
   ' 1.2 |   1.8495997730055734 2.2699442658782182E-007 |   1.8496000006605788 6.6057883566384562E-010',
   ' 1.3 |   2.0235059713854679 2.7861453205137166E-007 |   2.0235062507088548 7.0885481468982436E-010',
   ' 1.4 |   2.2200996612762247 3.3872377532342957E-007 |   2.2201000007533893 7.5338931360829919E-010',
   ' 1.5 |   2.4414058418441128 4.0815588716789329E-007 |   2.4414062507932752 7.9327522393805860E-010',
   ' 1.6 |   2.6895995123153737 4.8768462628879031E-007 |   2.6896000008276624 8.2766237461708025E-010',
   ' 1.7 |   2.9670056719910384 5.7800896158754188E-007 |   2.9670062508557979 8.5579794531324971E-010',
   ' 1.8 |   3.2760993202555219 6.7974447814358671E-007 |   3.2761000008770513 8.7705133433590987E-010',
   ' 1.9 |   3.6195054565798763 7.9342012368173800E-007 |   3.6195062508909253 8.9092526043242637E-010',
   ' 2.0 |   3.9999990805207992 9.1947920074944393E-007 |   4.0000000008970593 8.9705931832079200E-010',
   ' 2.1 |   4.4205051917165142 1.0582834857959973E-006 |   4.4205062508952224 8.9522242570361232E-010',
   ' 2.2 |   4.884098789880548  1.2101194519936222E-006 |   4.8841000008853017 8.8530172168838073E-010',
   ' 2.3 |   5.3940048747942688 1.3752057312125220E-006 |   5.394006250867287  8.6728702735142105E-010',
   ' 2.4 |   5.9535984462988696 1.5537011304363191E-006 |   5.9536000008412548 8.4125485267164124E-010',
   ' 2.5 |   6.5664045042873078 1.7457126921562038E-006 |   6.5664062508073515 8.0735152547736777E-010',
   ' 2.6 |   7.236098048696558  1.9513034420167753E-006 |   7.2361000007657772 7.6577720510215275E-010',
   ' 2.7 |   7.9665040795004063 2.1704995937241525E-006 |   7.966506250716769  7.1676899832118224E-010',
   ' 2.8 |   8.7615975967029198 2.4032970801805484E-006 |   8.7616000006605947 6.6059475598012618E-010',
   ' 2.9 |   9.6255036003326465 2.6496673534697618E-006 |   9.6255062505975424 5.9754240271103765E-010',
   ' 3.0 |  10.562497090437552  2.9095624481849727E-006 |  10.562500000622926  6.2292572489131004E-010',
   ' 3.1 |  11.577003067080663  3.1829193373536513E-006 |  11.577006250649045  6.4904544325866675E-010',
   ' 3.2 |  12.673596530336369  3.4696636314742943E-006 |  12.67360000067591   6.7590954621471466E-010',
   ' 3.3 |  13.857002480287317  3.7697126827034716E-006 |  13.857006250703527  7.0352744983848137E-010',
   ' 3.4 |  15.132095917021839  4.0829781608100330E-006 |  15.13210000073191   7.3190999701905346E-010',
   ' 3.5 |  16.503901840631833  4.4093681673545992E-006 |  16.503906250761062  7.6106235202821892E-010',
   ' 3.6 |  17.977595251211049  4.7487889514030712E-006 |  17.977600000790989  7.9098932959098534E-010',
   ' 3.7 |  19.558501148853715  5.1011462852048467E-006 |  19.558506250821704  8.2170427580241512E-010',
   ' 3.8 |  21.252094533653447  5.4663465524889404E-006 |  21.252100000853211  8.5321130889604024E-010',
   ' 3.9 |  23.064000405702404  5.8442975959631382E-006 |  23.064006250885516  8.8551596957864298E-010',
   ' 4.0 |  24.999993765090635  6.2349093646781040E-006 |  25.000000000918622  9.1862167005130058E-010',
   ' 4.1 |  27.065999611905604  6.6380943963013223E-006 |  27.06600625095254   9.5254035908931556E-010',
   ' 4.2 |  29.268092946231836  7.0537681642647565E-006 |  29.268100000987268  9.8726764957701718E-010',
   ' 4.3 |  31.612498768150685  7.4818493151374704E-006 |  31.612506251022815  1.0228147911961472E-009',
   ' 4.4 |  34.105592077740182  7.9222598175464343E-006 |  34.10560000105918   1.0591802435122588E-009',
   ' 4.5 |  36.75389787507496   8.3749250404489828E-006 |  36.753906251096367  1.0963674620945163E-009',
   ' 4.6 |  39.564091160226224  8.8397737756477912E-006 |  39.564100001134392  1.1343919761874766E-009',
   ' 4.7 |  42.542996933261783  9.3167382166671475E-006 |  42.543006251173246  1.1732458615743013E-009',
   ' 4.8 |  45.697590194246096  9.8057539040866115E-006 |  45.697600001212933  1.2129333058774616E-009',
   ' 4.9 |  49.034995943240354  1.0306759645643121E-005 |  49.035006251253456  1.2534563352539774E-009',
   ' 5.0 |  52.562489180302582  1.0819697417552981E-005 |  52.562500001294822  1.2948219961506080E-009',
   ' 5.1 |  56.287494905487747  1.1344512252771388E-005 |  56.287506251337028  1.3370280715907512E-009',
   ' 5.2 |  60.21758811884788   1.1881152120203631E-005 |  60.21760000138007   1.3800702317046110E-009',
   ' 5.3 |  64.360493820432202  1.2429567798538654E-005 |  64.360506251423956  1.4239562307061249E-009',
   ' 5.4 |  68.724087010287253  1.2989712747393800E-005 |  68.724100001468685  1.4686845975497853E-009',
   ' 5.5 |  73.316392688457022  1.3561542977866270E-005 |  73.316406251514266  1.5142659279265835E-009',
   ' 5.6 |  78.145585854983076  1.4145016924184406E-005 |  78.145600001560695  1.5606944833712610E-009',
   ' 5.7 |  83.219991509904682  1.4740095317676560E-005 |  83.220006251607956  1.6079553383230305E-009',
   ' 5.8 |  88.548084653258936  1.5346741064160840E-005 |  88.548100001656067  1.6560669016674190E-009',
   ' 5.9 |  94.138490285080875  1.5964919125165122E-005 |  94.138506251705067  1.7050668030260674E-009',
   ' 6.0 |  99.999983405403597  1.6594596403678163E-005 | 100.00000000175487   1.7548697633928967E-009',
   ' 6.1 | 106.14148901425837   1.7235741634695489E-005 | 106.14150625180552   1.8055233766411938E-009',
   ' 6.2 | 112.57208211167472   1.7888325280691897E-005 | 112.57210000185702   1.8570233753512078E-009',
   ' 6.3 | 119.30098769768057   1.8552319432180164E-005 | 119.3010062519094    1.9093988543050777E-009',
   ' 6.4 | 126.33758077230229   1.9227697713182501E-005 | 126.33760000196261   1.9626128985872349E-009',
   ' 6.5 | 133.69138633556481   1.9914435191822899E-005 | 133.69140625201669   2.0166903563767491E-009',
   ' 6.6 | 141.3720793874917    2.0612508295700382E-005 | 141.37210000207162   2.0716184739866250E-009',
   ' 6.7 | 149.38948492810527   2.1321894732001523E-005 | 149.3895062521274    2.1274036421381481E-009',
   ' 6.8 | 157.75357795742659   2.2042573412150990E-005 | 157.75360000218402   2.1840146358087509E-009',
   ' 6.9 | 166.47448347547562   2.2774524380958505E-005 | 166.47450625224147   2.2414678030324708E-009',
   ' 7.0 | 175.56247648227125   2.3517728749658517E-005 | 175.56250000229977   2.2997703047478169E-009',
   ' 7.1 | 185.02798197783137   2.4272168633279745E-005 | 185.02800625235895   2.3589484948738360E-009',
   ' 7.2 | 194.88157496217291   2.5037827091706211E-005 | 194.88160000241902   2.4190194014561683E-009',
   ' 7.3 | 205.13398043531193   2.5814688073971803E-005 | 205.13400625247991   2.4799056835833611E-009',
   ' 7.4 | 215.79607339726363   2.6602736366454494E-005 | 215.79610000254161   2.5416059534766333E-009',
   ' 7.5 | 226.87887884804246   2.7401957543915501E-005 | 226.8789062526042    2.6041949013899668E-009',
   ' 7.6 | 238.39357178766208   2.8212337923730346E-005 | 238.39360000266768   2.6676810760406511E-009',
   ' 7.7 | 250.35147721613548   2.9033864522742814E-005 | 250.35150625273201   2.7320070650205253E-009',
   ' 7.8 | 262.76407013347498   2.9866525017047119E-005 | 262.76410000279719   2.7971913674207372E-009',
   ' 7.9 | 275.6429755396923    3.0710307704046036E-005 | 275.64300625286319   2.8631864934514084E-009',
   ' 8.0 | 288.99996843479853   3.1565201466993154E-005 | 289.00000000293005   2.9300493420425511E-009',
   ' 8.1 | 302.84697381880426   3.2431195741478014E-005 | 302.8470062529978    2.9977992310747936E-009',
   ' 8.2 | 317.19606669171952   3.3308280484450892E-005 | 317.19610000306642   3.0664177308459273E-009',
   ' 8.3 | 332.05947205355386   3.4196446144579840E-005 | 332.05950625313579   3.1357920426966501E-009',
   ' 8.4 | 347.44956490431637   3.5095683634939201E-005 | 347.44960000320606   3.2060558929902783E-009',
   ' 8.5 | 363.37887024401569   3.6005984307224681E-005 | 363.37890625327719   3.2771915181584177E-009',
   ' 8.6 | 379.86006307266008   3.6927339927050884E-005 | 379.86010000334909   3.3490868689423081E-009',
   ' 8.7 | 396.90596839025735   3.7859742651663586E-005 | 396.90600625342188   3.4218763100835048E-009',
   ' 8.8 | 414.52956119681499   3.8803185008151608E-005 | 414.52960000349555   3.4955429939476090E-009',
   ' 8.9 | 432.74396649234013   3.9757659873712603E-005 | 432.74400625356998   3.5699753986317972E-009',
   ' 9.0 | 451.56245927683955   4.0723160456251906E-005 | 451.56250000364531   3.6453088048116200E-009',
   ' 9.1 | 470.99846455031973   4.1699680277118567E-005 | 470.99850625372147   3.7214700765453301E-009',
   ' 9.2 | 491.06555731278685   4.2687213154118941E-005 | 491.06560000379852   3.7985191103651061E-009',
   ' 9.3 | 511.77746256424682   4.3685753185807030E-005 | 511.77750625387648   3.8764780829758649E-009',
   ' 9.4 | 533.14805530470527   4.4695294736829538E-005 | 533.14810000395516   3.9551610320209818E-009',
   ' 9.5 | 555.19136053416758   4.5715832423853797E-005 | 555.19140625403497   4.0349695806796149E-009',
   ' 9.6 | 577.9215532526389    4.6747361102661422E-005 | 577.92160000411536   4.1153581653574633E-009',
   ' 9.7 | 601.35295846012415   4.7789875855519526E-005 | 601.35300625419654   4.1965395047860454E-009',
   ' 9.8 | 625.50005115662802   4.8843371980022976E-005 | 625.50010000427869   4.2786884590917396E-009',
   ' 9.9 | 650.37745634215503   4.9907844977603588E-005 | 650.37750625436172   4.3617150446983999E-009',
   '10.0 | 675.99994901670946   5.0983290543371584E-005 | 676.00000000444561   4.4456053283070673E-009'],
  'FDWin64'=>
  ['time | approx (RK4)                 error (RK4) | approx (CashCarp)       error (CashCarp)',
   ' 0.0 |   1                0.00000000000000E+000 |   1                0.00000000000000E+000',
   ' 0.1 |   1.0050062486963  1.30370114703737E-009 |   1.00500625005798 5.79800651934193E-011',
   ' 0.2 |   1.02009999478463 5.21536658304456E-009 |   1.02010000011499 1.14989351374106E-010',
   ' 0.3 |   1.04550623825543 1.17445706493413E-008 |   1.04550625017119 1.71193281772730E-010',
   ' 0.4 |   1.08159997906715 2.09328452349666E-008 |   1.0816000002268  2.26800134228711E-010',
   ' 0.5 |   1.12890621711398 3.28860156884048E-008 |   1.12890625028205 2.82045276023268E-010',
   ' 0.6 |   1.18809995219263 4.78073671761337E-008 |   1.18810000033714 3.37143202244761E-010',
   ' 0.7 |   1.26000618397649 6.60235057736713E-008 |   1.26000625039223 3.92230248280612E-010',
   ' 0.8 |   1.34559991200274 8.79972565925868E-008 |   1.3456000004473  4.47301085060303E-010',
   ' 0.9 |   1.44600613567466 1.14325342082111E-007 |   1.44600625050216 5.02164310134390E-010',
   ' 1.0 |   1.56249985427811 1.45721891220418E-007 |   1.56250000055642 5.56422241615451E-010',
   ' 1.1 |   1.69650606700879 1.82991214181527E-007 |   1.69650625060948 6.09478911783867E-010',
   ' 1.2 |   1.84959977300557 2.26994425922555E-007 |   1.84960000066058 6.60578702849079E-010',
   ' 1.3 |   2.02350597138547 2.78614531445953E-007 |   2.02350625070886 7.08854308584250E-010',
   ' 1.4 |   2.22009966127623 3.38723775250571E-007 |   2.22010000075339 7.53388462726434E-010',
   ' 1.5 |   2.44140584184411 4.08155887310357E-007 |   2.44140625079328 7.93274335109118E-010',
   ' 1.6 |   2.68959951231538 4.87684626460094E-007 |   2.68960000082766 8.27661050806228E-010',
   ' 1.7 |   2.96700567199104 5.78008962026644E-007 |   2.9670062508558  8.55796322696278E-010',
   ' 1.8 |   3.27609932025552 6.79744480258648E-007 |   3.27610000087705 8.77048211833653E-010',
   ' 1.9 |   3.61950545657988 7.93420125599908E-007 |   3.61950625089093 8.90922002838579E-010',
   ' 2.0 |   3.9999990805208  9.19479203442819E-007 |   4.00000000089706 8.97053986648189E-010',
   ' 2.1 |   4.42050519171652 1.05828348750947E-006 |   4.42050625089522 8.95218121854668E-010',
   ' 2.2 |   4.88409878988055 1.21011945264371E-006 |   4.8841000008853  8.85298057085038E-010',
   ' 2.3 |   5.39400487479427 1.37520572973671E-006 |   5.39400625086729 8.67285798733519E-010',
   ' 2.4 |   5.95359844629887 1.55370112686626E-006 |   5.95360000084126 8.41255953787368E-010',
   ' 2.5 |   6.56640450428731 1.74571268551915E-006 |   6.56640625080735 8.07355071685834E-010',
   ' 2.6 |   7.23609804869656 1.95130343261241E-006 |   7.23610000076578 7.65782992573349E-010',
   ' 2.7 |   7.96650407950041 2.17049958095572E-006 |   7.96650625071677 7.16778636444815E-010',
   ' 2.8 |   8.76159759670292 2.40329706535647E-006 |   8.7616000006606  6.60607568647720E-010',
   ' 2.9 |   9.62550360033265 2.64966733354299E-006 |   9.62550625059755 5.97562888060565E-010',
   ' 3.0 |  10.5624970904376  2.90956242743334E-006 |  10.5625000006229  6.22948803652434E-010',
   ' 3.1 |  11.5770030670807  3.18291930767600E-006 |  11.577006250649   6.49077236403173E-010',
   ' 3.2 |  12.6735965303364  3.46966359643375E-006 |  12.6736000006759  6.75948186312780E-010',
   ' 3.3 |  13.8570024802873  3.76971264159920E-006 |  13.8570062507035  7.03572311522294E-010',
   ' 3.4 |  15.1320959170218  4.08297811560487E-006 |  15.1321000007319  7.31962046529588E-010',
   ' 3.5 |  16.5039018406318  4.40936811330062E-006 |  16.5039062507611  7.61126273118862E-010',
   ' 3.6 |  17.977595251211   4.74878889278330E-006 |  17.977600000791   7.91061438576435E-010',
   ' 3.7 |  19.5585011488537  5.10114621832258E-006 |  19.5585062508217  8.21785306470701E-010',
   ' 3.8 |  21.2520945336534  5.46634647591304E-006 |  21.2521000008532  8.53304982229020E-010',
   ' 3.9 |  23.0640004057024  5.84429750816184E-006 |  23.0640062508855  8.85624018565068E-010',
   ' 4.0 |  24.9999937650906  6.23490926798809E-006 |  25.0000000009186  9.18745968192525E-010',
   ' 4.1 |  27.0659996119056  6.63809429468643E-006 |  27.0660062509526  9.52674383825070E-010',
   ' 4.2 |  29.2680929462318  7.05376805498759E-006 |  29.2681000009873  9.87416370890060E-010',
   ' 4.3 |  31.6124987681507  7.48184919174832E-006 |  31.6125062510228  1.02298614024221E-009',
   ' 4.4 |  34.1055920777402  7.92225966961269E-006 |  34.1056000010592  1.05936948102681E-009',
   ' 4.5 |  36.7538978750749  8.37492488159342E-006 |  36.7539062510964  1.09657349867121E-009',
   ' 4.6 |  39.5640911602262  8.83977360643939E-006 |  39.5641000011344  1.13461595674380E-009',
   ' 4.7 |  42.5429969332617  9.31673802284649E-006 |  42.5430062511733  1.17350396067195E-009',
   ' 4.8 |  45.697590194246   9.80575369169401E-006 |  45.6976000012129  1.21321619417358E-009',
   ' 4.9 |  49.0349959432403  1.03067594139361E-005 |  49.0350062512535  1.25376686810341E-009',
   ' 5.0 |  52.5624891803025  1.08196971666530E-005 |  52.5625000012948  1.29515598246144E-009',
   ' 5.1 |  56.2874949054877  1.13445119822586E-005 |  56.287506251337   1.33739774810238E-009',
   ' 5.2 |  60.2175881188478  1.18811518277084E-005 |  60.2176000013801  1.38047084874415E-009',
   ' 5.3 |  64.3604938204321  1.24295674623909E-005 |  64.360506251424   1.42441081152356E-009',
   ' 5.4 |  68.7240870102871  1.29897124026002E-005 |  68.7241000014687  1.46916079302173E-009',
   ' 5.5 |  73.3163926884569  1.35615426160030E-005 |  73.3164062515143  1.51476342580281E-009',
   ' 5.6 |  78.1455858549829  1.41450164932166E-005 |  78.1456000015607  1.56127555328567E-009',
   ' 5.7 |  83.2199915099045  1.47400948549148E-005 |  83.220006251608   1.60858348863258E-009',
   ' 5.8 |  88.5480846532588  1.53467405965557E-005 |  88.5481000016561  1.65671565355296E-009',
   ' 5.9 |  94.1384902850807  1.59649186315391E-005 |  94.1385062517051  1.70575731317513E-009',
   ' 6.0 |  99.9999834054034  1.65945958769953E-005 | 100.000000001755   1.75562320237077E-009',
   ' 6.1 | 106.141489014258   1.72357410690438E-005 | 106.141506251806   1.80634174284933E-009',
   ' 6.2 | 112.572082111674   1.78883246633177E-005 | 112.572100001857   1.85791293461079E-009',
   ' 6.3 | 119.30098769768    1.85523187781200E-005 | 119.301006251909   1.91035098850989E-009',
   ' 6.4 | 126.337580772302   1.92276970096827E-005 | 126.337600001963   1.96362748283718E-009',
   ' 6.5 | 133.691386335564   1.99144344321667E-005 | 133.691406252017   2.01779926101153E-009',
   ' 6.6 | 141.372079387491   2.06125074839747E-005 | 141.372100002072   2.07276684704993E-009',
   ' 6.7 | 149.389484928105   2.13218938824866E-005 | 149.389506252127   2.12864392779011E-009',
   ' 6.8 | 157.753577957426   2.20425724819506E-005 | 157.753600002184   2.18537365981319E-009',
   ' 6.9 | 166.474483475475   2.27745234724352E-005 | 166.474506252242   2.24287077799090E-009',
   ' 7.0 | 175.562476482271   2.35177277829735E-005 | 175.5625000023     2.30124896916095E-009',
   ' 7.1 | 185.027981977831   2.42721675931534E-005 | 185.028006252359   2.36053665503277E-009',
   ' 7.2 | 194.881574962172   2.50378259920581E-005 | 194.881600002419   2.42070541389694E-009',
   ' 7.3 | 205.133980435311   2.58146868929998E-005 | 205.13400625248    2.48172682404402E-009',
   ' 7.4 | 215.796073397263   2.66027351187859E-005 | 215.796100002542   2.54351562034572E-009',
   ' 7.5 | 226.878878848042   2.74019562311878E-005 | 226.878906252604   2.60621391134919E-009',
   ' 7.6 | 238.393571787661   2.82123365593634E-005 | 238.393600002668   2.66982169705443E-009',
   ' 7.7 | 250.351477216135   2.90338630577480E-005 | 250.351506252732   2.73428213404259E-009',
   ' 7.8 | 262.764070133474   2.98665233913198E-005 | 262.764100002797   2.79965206573252E-009',
   ' 7.9 | 275.642975539692   3.07103059640212E-005 | 275.643006252863   2.86576096186764E-009',
   ' 8.0 | 288.999968434798   3.15651996629640E-005 | 289.00000000293    2.93277935270453E-009',
   ' 8.1 | 302.846973818803   3.24311940858024E-005 | 302.847006252998   3.00047986456775E-009',
   ' 8.2 | 317.196066691719   3.33082790575645E-005 | 317.196100003066   3.06891934087616E-009',
   ' 8.3 | 332.059472053553   3.41964449148691E-005 | 332.059506253136   3.13815462504863E-009',
   ' 8.4 | 347.449564904315   3.50956825627691E-005 | 347.449600003206   3.20835624734173E-009',
   ' 8.5 | 363.378870244014   3.60059834747517E-005 | 363.378906253277   3.27929683408001E-009',
   ' 8.6 | 379.860063072659   3.69273392379910E-005 | 379.860100003349   3.35103322868235E-009',
   ' 8.7 | 396.905968390256   3.78597421217819E-005 | 396.906006253422   3.42367911798647E-009',
   ' 8.8 | 414.529561196814   3.88031847933235E-005 | 414.529600003496   3.49706397173577E-009',
   ' 8.9 | 432.743966492339   3.97576598629712E-005 | 432.74400625357    3.57130147676799E-009',
   ' 9.0 | 451.562459276838   4.07231606232017E-005 | 451.562500003645   3.64644847650197E-009',
   ' 9.1 | 470.998464550318   4.16996808212389E-005 | 470.998506253722   3.72227759726229E-009',
   ' 9.2 | 491.065557312786   4.26872139769330E-005 | 491.065600003799   3.79907305614324E-009',
   ' 9.3 | 511.777462564245   4.36857543490987E-005 | 511.777506253877   3.87677800972597E-009',
   ' 9.4 | 533.148055304704   4.46952963102376E-005 | 533.148100003955   3.95516508433502E-009',
   ' 9.5 | 555.191360534166   4.57158342896946E-005 | 555.191406254035   4.03474587074015E-009',
   ' 9.6 | 577.921553252637   4.67473633989357E-005 | 577.921600004115   4.11466771765845E-009',
   ' 9.7 | 601.352958460123   4.77898784083663E-005 | 601.353006254197   4.19561274611624E-009',
   ' 9.8 | 625.500051156627   4.88433748841999E-005 | 625.500100004279   4.27735358243808E-009',
   ' 9.9 | 650.377456342154   4.99078482789628E-005 | 650.377506254362   4.36000391346170E-009',
   '10.0 | 675.999949016708   5.09832944999289E-005 | 676.000000004446   4.44333636551164E-009'],
  'FOLinux'=>
  ['time | approx (RK4)                     error (RK4) | approx (CashCarp)           error (CashCarp)',
   ' 0.0 |   1                  0.0000000000000000E+000 |   1                  0.0000000000000000E+000',
   ' 0.1 |   1.0050062486962987 1.3037013056561506E-009 |   1.0050062500579799 5.7979866676001468E-011',
   ' 0.2 |   1.0200999947846331 5.2153668504088119E-009 |   1.0201000001149893 1.1498931624595587E-010',
   ' 0.3 |   1.0455062382554288 1.1744571179082494E-008 |   1.0455062501711931 1.7119307772588133E-010',
   ' 0.4 |   1.0815999790671547 2.0932845316064957E-008 |   1.0816000002268002 2.2680017965678173E-010',
   ' 0.5 |   1.1289062171139842 3.2886015827724747E-008 |   1.1289062502820451 2.8204512770441115E-010',
   ' 0.6 |   1.1880999521926327 4.7807367256906715E-008 |   1.1881000003371433 3.3714330958077576E-010',
   ' 0.7 |   1.2600061839764939 6.6023506033012491E-008 |   1.2600062503922304 3.9223038131221827E-010',
   ' 0.8 |   1.345599912002743  8.7997256953626160E-008 |   1.3456000004473012 4.4730128162615707E-010',
   ' 0.9 |   1.4460061356746574 1.1432534253834337E-007 |   1.4460062505021644 5.0216448490777998E-010',
   ' 1.0 |   1.5624998542781078 1.4572189208084119E-007 |   1.5625000005564221 5.5642214371199455E-010',
   ' 1.1 |   1.6965060670087851 1.8299121482391687E-007 |   1.6965062506094793 6.0947941214316986E-010',
   ' 1.2 |   1.8495997730055733 2.2699442658250923E-007 |   1.8496000006605792 6.6057935315354255E-010',
   ' 1.3 |   2.0235059713854678 2.7861453204573380E-007 |   2.0235062507088551 7.0885523124029903E-010',
   ' 1.4 |   2.2200996612762245 3.3872377531714119E-007 |   2.2201000007533902 7.5339035986339564E-010',
   ' 1.5 |   2.4414058418441126 4.0815588716117124E-007 |   2.4414062507932763 7.9327647293896131E-010',
   ' 1.6 |   2.6895995123153735 4.8768462628098405E-007 |   2.6896000008276637 8.2766393760293211E-010',
   ' 1.7 |   2.9670056719910381 5.7800896157886826E-007 |   2.9670062508557997 8.5579995499039663E-010',
   ' 1.8 |   3.2760993202555215 6.7974447813361205E-007 |   3.2761000008770532 8.7705351705172352E-010',
   ' 1.9 |   3.6195054565798759 7.9342012367024546E-007 |   3.6195062508909275 8.9092783519574559E-010',
   ' 2.0 |   3.9999990805207988 9.1947920073708403E-007 |   4.0000000008970617 8.9706218668605953E-010',
   ' 2.1 |   4.4205051917165137 1.0582834857829869E-006 |   4.4205062508952251 8.9522565749344807E-010',
   ' 2.2 |   4.8840987898805474 1.2101194519801781E-006 |   4.8841000008853047 8.8530531993855077E-010',
   ' 2.3 |   5.3940048747942681 1.3752057311995115E-006 |   5.3940062508672904 8.6729111479361132E-010',
   ' 2.4 |   5.9535984462988688 1.5537011304224413E-006 |   5.9536000008412585 8.4125928575748410E-010',
   ' 2.5 |   6.566404504287307  1.7457126921427597E-006 |   6.5664062508073549 8.0735576037105350E-010',
   ' 2.6 |   7.236098048696557  1.9513034420046323E-006 |   7.2361000007657794 7.6578043645830762E-010',
   ' 2.7 |   7.9665040795004052 2.1704995937120095E-006 |   7.9665062507167718 7.1677295002126051E-010',
   ' 2.8 |   8.7615975967029186 2.4032970801684053E-006 |   8.761600000660599  6.6060026632924762E-010',
   ' 2.9 |   9.6255036003326451 2.6496673534576187E-006 |   9.6255062505975447 5.9754614190749011E-010',
   ' 3.0 |  10.56249709043755   2.9095624481736970E-006 |  10.562500000622925  6.2292708751660042E-010',
   ' 3.1 |  11.577003067080661  3.1829193373449777E-006 |  11.577006250649043  6.4904462707127131E-010',
   ' 3.2 |  12.673596530336367  3.4696636314664880E-006 |  12.673600000675906  6.7590784358362299E-010',
   ' 3.3 |  13.857002480287315  3.7697126826947980E-006 |  13.857006250703523  7.0352553990793432E-010',
   ' 3.4 |  15.132095917021837  4.0829781608030941E-006 |  15.132100000731904  7.3190615200446896E-010',
   ' 3.5 |  16.50390184063183   4.4093681673511298E-006 |  16.503906250761055  7.6105769429568593E-010',
   ' 3.6 |  17.977595251211046  4.7487889513961323E-006 |  17.977600000790985  7.9098772323704658E-010',
   ' 3.7 |  19.558501148853712  5.1011462852031120E-006 |  19.5585062508217    8.2170328354058686E-010',
   ' 3.8 |  21.252094533653444  5.4663465524872057E-006 |  21.252100000853207  8.5321095848189810E-010',
   ' 3.9 |  23.0640004057024    5.8442975959683424E-006 |  23.064006250885513  8.8551681959314621E-010',
   ' 4.0 |  24.999993765090631  6.2349093646781040E-006 |  25.000000000918622  9.1862647523532903E-010',
   ' 4.1 |  27.065999611905599  6.6380943962857097E-006 |  27.06600625095254   9.5254507927189369E-010',
   ' 4.2 |  29.268092946231831  7.0537681642387356E-006 |  29.268100000987272  9.8727733453818356E-010',
   ' 4.3 |  31.612498768150679  7.4818493150958371E-006 |  31.612506251022822  1.0228275466178660E-009',
   ' 4.4 |  34.105592077740176  7.9222598174839842E-006 |  34.105600001059193  1.0591996169040385E-009',
   ' 4.5 |  36.753897875074953  8.3749250403726549E-006 |  36.75390625109639   1.0963971085187207E-009',
   ' 4.6 |  39.564091160226217  8.8397737755471772E-006 |  39.564100001134416  1.1344232567211954E-009',
   ' 4.7 |  42.542996933261776  9.3167382165387780E-006 |  42.543006251173273  1.1732809515607734E-009',
   ' 4.8 |  45.697590194246088  9.8057539039339559E-006 |  45.697600001212964  1.2129728367560322E-009',
   ' 4.9 |  49.034995943240345  1.0306759645455771E-005 |  49.035006251253492  1.2535012784697930E-009',
   ' 5.0 |  52.562489180302573  1.0819697417334406E-005 |  52.562500001294858  1.2948684173508251E-009',
   ' 5.1 |  56.287494905487737  1.1344512252521588E-005 |  56.287506251337065  1.3370761581255053E-009',
   ' 5.2 |  60.217588118847869  1.1881152119915667E-005 |  60.217600001380115  1.3801262216395216E-009',
   ' 5.3 |  64.360493820432189  1.2429567798212526E-005 |  64.360506251424008  1.4240201448578738E-009',
   ' 5.4 |  68.72408701028724   1.2989712747019100E-005 |  68.724100001468746  1.4687593086204487E-009',
   ' 5.5 |  73.316392688457008  1.3561542977449936E-005 |  73.316406251514331  1.5143449272336795E-009',
   ' 5.6 |  78.145585854983061  1.4145016923712561E-005 |  78.145600001560763  1.5607781039816970E-009',
   ' 5.7 |  83.219991509904666  1.4740095317163082E-005 |  83.220006251608043  1.6080597894929660E-009',
   ' 5.8 |  88.548084653258919  1.5346741063598790E-005 |  88.548100001656173  1.6561908372514367E-009',
   ' 5.9 |  94.138490285080857  1.5964919124526744E-005 |  94.138506251705153  1.7051720382910140E-009',
   ' 6.0 |  99.999983405403577  1.6594596402963457E-005 | 100.00000000175498   1.7550040379288312E-009',
   ' 6.1 | 106.14148901425834   1.7235741633911394E-005 | 106.14150625180567   1.8056874259708700E-009',
   ' 6.2 | 112.5720821116747    1.7888325279845352E-005 | 112.5721000018572    1.8572227158952792E-009',
   ' 6.3 | 119.30098769768054   1.8552319431271169E-005 | 119.30100625190959   1.9096103587301627E-009',
   ' 6.4 | 126.33758077230226   1.9227697712190239E-005 | 126.33760000196283   1.9628507430535791E-009',
   ' 6.5 | 133.69138633556478   1.9914435190754309E-005 | 133.69140625201692   2.0169442088713296E-009',
   ' 6.6 | 141.37207938749168   2.0612508294562404E-005 | 141.37210000207186   2.0718910198613827E-009',
   ' 6.7 | 149.38948492810524   2.1321894730780278E-005 | 149.38950625212766   2.1276914119461310E-009',
   ' 6.8 | 157.75357795742656   2.2042573410832600E-005 | 157.75360000218431   2.1843456626813307E-009',
   ' 6.9 | 166.47448347547559   2.2774524379529093E-005 | 166.47450625224182   2.2418538692114964E-009',
   ' 7.0 | 175.56247648227122   2.3517728748131961E-005 | 175.56250000230018   2.3002162119478697E-009',
   ' 7.1 | 185.02798197783133   2.4272168631683799E-005 | 185.02800625235939   2.3594327880349653E-009',
   ' 7.2 | 194.88157496217287   2.5037827090013121E-005 | 194.88160000241946   2.4195036529839342E-009',
   ' 7.3 | 205.13398043531189   2.5814688072139935E-005 | 205.13400625248039   2.4804289594504425E-009',
   ' 7.4 | 215.79607339726359   2.6602736364511603E-005 | 215.79610000254216   2.5422086519233389E-009',
   ' 7.5 | 226.87887884804241   2.7401957541861588E-005 | 226.8789062526048    2.6048428136693502E-009',
   ' 7.6 | 238.39357178766203   2.8212337921551534E-005 | 238.39360000266828   2.6683314308106887E-009',
   ' 7.7 | 250.35147721613543   2.9033864520425223E-005 | 250.35150625273262   2.7326745311029299E-009',
   ' 7.8 | 262.76407013347493   2.9866525014632384E-005 | 262.76410000279782   2.7978720729127105E-009',
   ' 7.9 | 275.64297553969224   3.0710307701520279E-005 | 275.64300625286387   2.8639240146066669E-009',
   ' 8.0 | 288.99996843479848   3.1565201464273107E-005 | 289.00000000293077   2.9308304116959505E-009',
   ' 8.1 | 302.8469738188042    3.2431195738452656E-005 | 302.84700625299853   2.9985912086694100E-009',
   ' 8.2 | 317.19606669171945   3.3308280481064712E-005 | 317.19610000306714   3.0672063777714698E-009',
   ' 8.3 | 332.05947205355379   3.4196446140943859E-005 | 332.05950625313661   3.1366757524686761E-009',
   ' 8.4 | 347.4495649043163    3.5095683631053420E-005 | 347.44960000320693   3.2069993050054535E-009',
   ' 8.5 | 363.37887024401562   3.6005984302978078E-005 | 363.3789062532781    3.2781770076262262E-009',
   ' 8.6 | 379.86006307266      3.6927339922498970E-005 | 379.86010000335013   3.3502087215531162E-009',
   ' 8.7 | 396.90596839025727   3.7859742646695338E-005 | 396.90600625342301   3.4230944745416991E-009',
   ' 8.8 | 414.52956119681491   3.8803185002850293E-005 | 414.52960000349674   3.4968340445473700E-009',
   ' 8.9 | 432.74396649234004   3.9757659867967199E-005 | 432.74400625357133   3.5714274593257045E-009',
   ' 9.0 | 451.56245927683945   4.0723160450173435E-005 | 451.56250000364678   3.6468744968320976E-009',
   ' 9.1 | 470.99846455031963   4.1699680270596007E-005 | 470.99850625372307   3.7231752403332763E-009',
   ' 9.2 | 491.06555731278675   4.2687213147124536E-005 | 491.06560000380022   3.8003296065625136E-009',
   ' 9.3 | 511.77746256424671   4.3685753178424047E-005 | 511.77750625387823   3.8783373179640535E-009',
   ' 9.4 | 533.14805530470515   4.4695294729002466E-005 | 533.14810000395708   3.9571985133157739E-009',
   ' 9.5 | 555.19136053416746   4.5715832415582636E-005 | 555.19140625403679   4.0369129150619187E-009',
   ' 9.6 | 577.92155325263878   4.6747361093835149E-005 | 577.92160000411735   4.1174805787136393E-009',
   ' 9.7 | 601.35295846012402   4.7789875846249164E-005 | 601.35300625419877   4.1989013932486330E-009',
   ' 9.8 | 625.50005115662789   4.8843371970141991E-005 | 625.50010000428104   4.2811752476445974E-009',
   ' 9.9 | 650.37745634215489   4.9907844967167492E-005 | 650.37750625436416   4.3643019753680790E-009',
   '10.0 | 675.99994901670932   5.0983290532380376E-005 | 676.00000000444813   4.4482815764190775E-009'],
  'FOWin32'=>
  ['time | approx (RK4)                     error (RK4) | approx (CashCarp)           error (CashCarp)',
   ' 0.0 |   1                  0.0000000000000000E+000 |   1                  0.0000000000000000E+000',
   ' 0.1 |   1.0050062486962987 1.3037013059814112E-009 |   1.0050062500579799 5.7979943979616366E-011',
   ' 0.2 |   1.0200999947846331 5.2153668509509130E-009 |   1.0201000001149894 1.1498935809615973E-010',
   ' 0.3 |   1.0455062382554288 1.1744571179949856E-008 |   1.0455062501711931 1.7119314104328820E-010',
   ' 0.4 |   1.0815999790671547 2.0932845317149160E-008 |   1.0816000002268003 2.2680025121412511E-010',
   ' 0.5 |   1.1289062171139842 3.2886015829025790E-008 |   1.1289062502820453 2.8204527602326834E-010',
   ' 0.6 |   1.1880999521926327 4.7807367258749858E-008 |   1.1881000003371434 3.3714335815303309E-010',
   ' 0.7 |   1.260006183976494  6.6023506035180896E-008 |   1.2600062503922305 3.9223046447052490E-010',
   ' 0.8 |   1.345599912002743  8.7997256956336666E-008 |   1.3456000004473014 4.4730143623338686E-010',
   ' 0.9 |   1.4460061356746575 1.1432534254170439E-007 |   1.4460062505021645 5.0216446940368892E-010',
   ' 1.0 |   1.5624998542781079 1.4572189208528642E-007 |   1.562500000556422  5.5642201924558515E-010',
   ' 1.1 |   1.6965060670087852 1.8299121482836210E-007 |   1.696506250609479  6.0947901619253647E-010',
   ' 1.2 |   1.8495997730055734 2.2699442658782182E-007 |   1.8496000006605788 6.6057883566384562E-010',
   ' 1.3 |   2.0235059713854679 2.7861453205137166E-007 |   2.0235062507088548 7.0885481468982436E-010',
   ' 1.4 |   2.2200996612762247 3.3872377532342957E-007 |   2.2201000007533893 7.5338931360829919E-010',
   ' 1.5 |   2.4414058418441128 4.0815588716789329E-007 |   2.4414062507932752 7.9327522393805860E-010',
   ' 1.6 |   2.6895995123153737 4.8768462628879031E-007 |   2.6896000008276624 8.2766237461708025E-010',
   ' 1.7 |   2.9670056719910384 5.7800896158754188E-007 |   2.9670062508557979 8.5579794531324971E-010',
   ' 1.8 |   3.2760993202555219 6.7974447814358671E-007 |   3.2761000008770513 8.7705133433590987E-010',
   ' 1.9 |   3.6195054565798763 7.9342012368173800E-007 |   3.6195062508909253 8.9092526043242637E-010',
   ' 2.0 |   3.9999990805207992 9.1947920074944393E-007 |   4.0000000008970593 8.9705931832079200E-010',
   ' 2.1 |   4.4205051917165142 1.0582834857959973E-006 |   4.4205062508952224 8.9522242570361232E-010',
   ' 2.2 |   4.884098789880548  1.2101194519936222E-006 |   4.8841000008853017 8.8530172168838073E-010',
   ' 2.3 |   5.3940048747942688 1.3752057312125220E-006 |   5.394006250867287  8.6728702735142105E-010',
   ' 2.4 |   5.9535984462988696 1.5537011304363191E-006 |   5.9536000008412548 8.4125485267164124E-010',
   ' 2.5 |   6.5664045042873078 1.7457126921562038E-006 |   6.5664062508073515 8.0735152547736777E-010',
   ' 2.6 |   7.236098048696558  1.9513034420167753E-006 |   7.2361000007657772 7.6577720510215275E-010',
   ' 2.7 |   7.9665040795004063 2.1704995937241525E-006 |   7.966506250716769  7.1676899832118224E-010',
   ' 2.8 |   8.7615975967029198 2.4032970801805484E-006 |   8.7616000006605947 6.6059475598012618E-010',
   ' 2.9 |   9.6255036003326465 2.6496673534697618E-006 |   9.6255062505975424 5.9754240271103765E-010',
   ' 3.0 |  10.562497090437552  2.9095624481849727E-006 |  10.562500000622926  6.2292572489131004E-010',
   ' 3.1 |  11.577003067080663  3.1829193373536513E-006 |  11.577006250649045  6.4904544325866675E-010',
   ' 3.2 |  12.673596530336369  3.4696636314742943E-006 |  12.67360000067591   6.7590954621471466E-010',
   ' 3.3 |  13.857002480287317  3.7697126827034716E-006 |  13.857006250703527  7.0352744983848137E-010',
   ' 3.4 |  15.132095917021839  4.0829781608100330E-006 |  15.13210000073191   7.3190999701905346E-010',
   ' 3.5 |  16.503901840631833  4.4093681673545992E-006 |  16.503906250761062  7.6106235202821892E-010',
   ' 3.6 |  17.977595251211049  4.7487889514030712E-006 |  17.977600000790989  7.9098932959098534E-010',
   ' 3.7 |  19.558501148853715  5.1011462852048467E-006 |  19.558506250821704  8.2170427580241512E-010',
   ' 3.8 |  21.252094533653447  5.4663465524889404E-006 |  21.252100000853211  8.5321130889604024E-010',
   ' 3.9 |  23.064000405702404  5.8442975959631382E-006 |  23.064006250885516  8.8551596957864298E-010',
   ' 4.0 |  24.999993765090635  6.2349093646781040E-006 |  25.000000000918622  9.1862167005130058E-010',
   ' 4.1 |  27.065999611905604  6.6380943963013223E-006 |  27.06600625095254   9.5254035908931556E-010',
   ' 4.2 |  29.268092946231836  7.0537681642647565E-006 |  29.268100000987268  9.8726764957701718E-010',
   ' 4.3 |  31.612498768150685  7.4818493151374704E-006 |  31.612506251022815  1.0228147911961472E-009',
   ' 4.4 |  34.105592077740182  7.9222598175464343E-006 |  34.10560000105918   1.0591802435122588E-009',
   ' 4.5 |  36.75389787507496   8.3749250404489828E-006 |  36.753906251096367  1.0963674620945163E-009',
   ' 4.6 |  39.564091160226224  8.8397737756477912E-006 |  39.564100001134392  1.1343919761874766E-009',
   ' 4.7 |  42.542996933261783  9.3167382166671475E-006 |  42.543006251173246  1.1732458615743013E-009',
   ' 4.8 |  45.697590194246096  9.8057539040866115E-006 |  45.697600001212933  1.2129333058774616E-009',
   ' 4.9 |  49.034995943240354  1.0306759645643121E-005 |  49.035006251253456  1.2534563352539774E-009',
   ' 5.0 |  52.562489180302582  1.0819697417552981E-005 |  52.562500001294822  1.2948219961506080E-009',
   ' 5.1 |  56.287494905487747  1.1344512252771388E-005 |  56.287506251337028  1.3370280715907512E-009',
   ' 5.2 |  60.21758811884788   1.1881152120203631E-005 |  60.21760000138007   1.3800702317046110E-009',
   ' 5.3 |  64.360493820432202  1.2429567798538654E-005 |  64.360506251423956  1.4239562307061249E-009',
   ' 5.4 |  68.724087010287253  1.2989712747393800E-005 |  68.724100001468685  1.4686845975497853E-009',
   ' 5.5 |  73.316392688457022  1.3561542977866270E-005 |  73.316406251514266  1.5142659279265835E-009',
   ' 5.6 |  78.145585854983076  1.4145016924184406E-005 |  78.145600001560695  1.5606944833712610E-009',
   ' 5.7 |  83.219991509904682  1.4740095317676560E-005 |  83.220006251607956  1.6079553383230305E-009',
   ' 5.8 |  88.548084653258936  1.5346741064160840E-005 |  88.548100001656067  1.6560669016674190E-009',
   ' 5.9 |  94.138490285080875  1.5964919125165122E-005 |  94.138506251705067  1.7050668030260674E-009',
   ' 6.0 |  99.999983405403597  1.6594596403678163E-005 | 100.00000000175487   1.7548697633928967E-009',
   ' 6.1 | 106.14148901425837   1.7235741634695489E-005 | 106.14150625180552   1.8055233766411938E-009',
   ' 6.2 | 112.57208211167472   1.7888325280691897E-005 | 112.57210000185702   1.8570233753512078E-009',
   ' 6.3 | 119.30098769768057   1.8552319432180164E-005 | 119.3010062519094    1.9093988543050777E-009',
   ' 6.4 | 126.33758077230229   1.9227697713182501E-005 | 126.33760000196261   1.9626128985872349E-009',
   ' 6.5 | 133.69138633556481   1.9914435191822899E-005 | 133.69140625201669   2.0166903563767491E-009',
   ' 6.6 | 141.3720793874917    2.0612508295700382E-005 | 141.37210000207162   2.0716184739866250E-009',
   ' 6.7 | 149.38948492810527   2.1321894732001523E-005 | 149.3895062521274    2.1274036421381481E-009',
   ' 6.8 | 157.75357795742659   2.2042573412150990E-005 | 157.75360000218402   2.1840146358087509E-009',
   ' 6.9 | 166.47448347547562   2.2774524380958505E-005 | 166.47450625224147   2.2414678030324708E-009',
   ' 7.0 | 175.56247648227125   2.3517728749658517E-005 | 175.56250000229977   2.2997703047478169E-009',
   ' 7.1 | 185.02798197783137   2.4272168633279745E-005 | 185.02800625235895   2.3589484948738360E-009',
   ' 7.2 | 194.88157496217291   2.5037827091706211E-005 | 194.88160000241902   2.4190194014561683E-009',
   ' 7.3 | 205.13398043531193   2.5814688073971803E-005 | 205.13400625247991   2.4799056835833611E-009',
   ' 7.4 | 215.79607339726363   2.6602736366454494E-005 | 215.79610000254161   2.5416059534766333E-009',
   ' 7.5 | 226.87887884804246   2.7401957543915501E-005 | 226.8789062526042    2.6041949013899668E-009',
   ' 7.6 | 238.39357178766208   2.8212337923730346E-005 | 238.39360000266768   2.6676810760406511E-009',
   ' 7.7 | 250.35147721613548   2.9033864522742814E-005 | 250.35150625273201   2.7320070650205253E-009',
   ' 7.8 | 262.76407013347498   2.9866525017047119E-005 | 262.76410000279719   2.7971913674207372E-009',
   ' 7.9 | 275.6429755396923    3.0710307704046036E-005 | 275.64300625286319   2.8631864934514084E-009',
   ' 8.0 | 288.99996843479853   3.1565201466993154E-005 | 289.00000000293005   2.9300493420425511E-009',
   ' 8.1 | 302.84697381880426   3.2431195741478014E-005 | 302.8470062529978    2.9977992310747936E-009',
   ' 8.2 | 317.19606669171952   3.3308280484450892E-005 | 317.19610000306642   3.0664177308459273E-009',
   ' 8.3 | 332.05947205355386   3.4196446144579840E-005 | 332.05950625313579   3.1357920426966501E-009',
   ' 8.4 | 347.44956490431637   3.5095683634939201E-005 | 347.44960000320606   3.2060558929902783E-009',
   ' 8.5 | 363.37887024401569   3.6005984307224681E-005 | 363.37890625327719   3.2771915181584177E-009',
   ' 8.6 | 379.86006307266008   3.6927339927050884E-005 | 379.86010000334909   3.3490868689423081E-009',
   ' 8.7 | 396.90596839025735   3.7859742651663586E-005 | 396.90600625342188   3.4218763100835048E-009',
   ' 8.8 | 414.52956119681499   3.8803185008151608E-005 | 414.52960000349555   3.4955429939476090E-009',
   ' 8.9 | 432.74396649234013   3.9757659873712603E-005 | 432.74400625356998   3.5699753986317972E-009',
   ' 9.0 | 451.56245927683955   4.0723160456251906E-005 | 451.56250000364531   3.6453088048116200E-009',
   ' 9.1 | 470.99846455031973   4.1699680277118567E-005 | 470.99850625372147   3.7214700765453301E-009',
   ' 9.2 | 491.06555731278685   4.2687213154118941E-005 | 491.06560000379852   3.7985191103651061E-009',
   ' 9.3 | 511.77746256424682   4.3685753185807030E-005 | 511.77750625387648   3.8764780829758649E-009',
   ' 9.4 | 533.14805530470527   4.4695294736829538E-005 | 533.14810000395516   3.9551610320209818E-009',
   ' 9.5 | 555.19136053416758   4.5715832423853797E-005 | 555.19140625403497   4.0349695806796149E-009',
   ' 9.6 | 577.9215532526389    4.6747361102661422E-005 | 577.92160000411536   4.1153581653574633E-009',
   ' 9.7 | 601.35295846012415   4.7789875855519526E-005 | 601.35300625419654   4.1965395047860454E-009',
   ' 9.8 | 625.50005115662802   4.8843371980022976E-005 | 625.50010000427869   4.2786884590917396E-009',
   ' 9.9 | 650.37745634215503   4.9907844977603588E-005 | 650.37750625436172   4.3617150446983999E-009',
   '10.0 | 675.99994901670946   5.0983290543371584E-005 | 676.00000000444561   4.4456053283070673E-009'],
  'FOWin64'=>
  ['time | approx (RK4)                 error (RK4) | approx (CashCarp)       error (CashCarp)',
   ' 0.0 |   1                0.00000000000000E+000 |   1                0.00000000000000E+000',
   ' 0.1 |   1.0050062486963  1.30370114703737E-009 |   1.00500625005798 5.79800651934193E-011',
   ' 0.2 |   1.02009999478463 5.21536658304456E-009 |   1.02010000011499 1.14989351374106E-010',
   ' 0.3 |   1.04550623825543 1.17445706493413E-008 |   1.04550625017119 1.71193281772730E-010',
   ' 0.4 |   1.08159997906715 2.09328452349666E-008 |   1.0816000002268  2.26800134228711E-010',
   ' 0.5 |   1.12890621711398 3.28860156884048E-008 |   1.12890625028205 2.82045276023268E-010',
   ' 0.6 |   1.18809995219263 4.78073671761337E-008 |   1.18810000033714 3.37143202244761E-010',
   ' 0.7 |   1.26000618397649 6.60235057736713E-008 |   1.26000625039223 3.92230248280612E-010',
   ' 0.8 |   1.34559991200274 8.79972565925868E-008 |   1.3456000004473  4.47301085060303E-010',
   ' 0.9 |   1.44600613567466 1.14325342082111E-007 |   1.44600625050216 5.02164310134390E-010',
   ' 1.0 |   1.56249985427811 1.45721891220418E-007 |   1.56250000055642 5.56422241615451E-010',
   ' 1.1 |   1.69650606700879 1.82991214181527E-007 |   1.69650625060948 6.09478911783867E-010',
   ' 1.2 |   1.84959977300557 2.26994425922555E-007 |   1.84960000066058 6.60578702849079E-010',
   ' 1.3 |   2.02350597138547 2.78614531445953E-007 |   2.02350625070886 7.08854308584250E-010',
   ' 1.4 |   2.22009966127623 3.38723775250571E-007 |   2.22010000075339 7.53388462726434E-010',
   ' 1.5 |   2.44140584184411 4.08155887310357E-007 |   2.44140625079328 7.93274335109118E-010',
   ' 1.6 |   2.68959951231538 4.87684626460094E-007 |   2.68960000082766 8.27661050806228E-010',
   ' 1.7 |   2.96700567199104 5.78008962026644E-007 |   2.9670062508558  8.55796322696278E-010',
   ' 1.8 |   3.27609932025552 6.79744480258648E-007 |   3.27610000087705 8.77048211833653E-010',
   ' 1.9 |   3.61950545657988 7.93420125599908E-007 |   3.61950625089093 8.90922002838579E-010',
   ' 2.0 |   3.9999990805208  9.19479203442819E-007 |   4.00000000089706 8.97053986648189E-010',
   ' 2.1 |   4.42050519171652 1.05828348750947E-006 |   4.42050625089522 8.95218121854668E-010',
   ' 2.2 |   4.88409878988055 1.21011945264371E-006 |   4.8841000008853  8.85298057085038E-010',
   ' 2.3 |   5.39400487479427 1.37520572973671E-006 |   5.39400625086729 8.67285798733519E-010',
   ' 2.4 |   5.95359844629887 1.55370112686626E-006 |   5.95360000084126 8.41255953787368E-010',
   ' 2.5 |   6.56640450428731 1.74571268551915E-006 |   6.56640625080735 8.07355071685834E-010',
   ' 2.6 |   7.23609804869656 1.95130343261241E-006 |   7.23610000076578 7.65782992573349E-010',
   ' 2.7 |   7.96650407950041 2.17049958095572E-006 |   7.96650625071677 7.16778636444815E-010',
   ' 2.8 |   8.76159759670292 2.40329706535647E-006 |   8.7616000006606  6.60607568647720E-010',
   ' 2.9 |   9.62550360033265 2.64966733354299E-006 |   9.62550625059755 5.97562888060565E-010',
   ' 3.0 |  10.5624970904376  2.90956242743334E-006 |  10.5625000006229  6.22948803652434E-010',
   ' 3.1 |  11.5770030670807  3.18291930767600E-006 |  11.577006250649   6.49077236403173E-010',
   ' 3.2 |  12.6735965303364  3.46966359643375E-006 |  12.6736000006759  6.75948186312780E-010',
   ' 3.3 |  13.8570024802873  3.76971264159920E-006 |  13.8570062507035  7.03572311522294E-010',
   ' 3.4 |  15.1320959170218  4.08297811560487E-006 |  15.1321000007319  7.31962046529588E-010',
   ' 3.5 |  16.5039018406318  4.40936811330062E-006 |  16.5039062507611  7.61126273118862E-010',
   ' 3.6 |  17.977595251211   4.74878889278330E-006 |  17.977600000791   7.91061438576435E-010',
   ' 3.7 |  19.5585011488537  5.10114621832258E-006 |  19.5585062508217  8.21785306470701E-010',
   ' 3.8 |  21.2520945336534  5.46634647591304E-006 |  21.2521000008532  8.53304982229020E-010',
   ' 3.9 |  23.0640004057024  5.84429750816184E-006 |  23.0640062508855  8.85624018565068E-010',
   ' 4.0 |  24.9999937650906  6.23490926798809E-006 |  25.0000000009186  9.18745968192525E-010',
   ' 4.1 |  27.0659996119056  6.63809429468643E-006 |  27.0660062509526  9.52674383825070E-010',
   ' 4.2 |  29.2680929462318  7.05376805498759E-006 |  29.2681000009873  9.87416370890060E-010',
   ' 4.3 |  31.6124987681507  7.48184919174832E-006 |  31.6125062510228  1.02298614024221E-009',
   ' 4.4 |  34.1055920777402  7.92225966961269E-006 |  34.1056000010592  1.05936948102681E-009',
   ' 4.5 |  36.7538978750749  8.37492488159342E-006 |  36.7539062510964  1.09657349867121E-009',
   ' 4.6 |  39.5640911602262  8.83977360643939E-006 |  39.5641000011344  1.13461595674380E-009',
   ' 4.7 |  42.5429969332617  9.31673802284649E-006 |  42.5430062511733  1.17350396067195E-009',
   ' 4.8 |  45.697590194246   9.80575369169401E-006 |  45.6976000012129  1.21321619417358E-009',
   ' 4.9 |  49.0349959432403  1.03067594139361E-005 |  49.0350062512535  1.25376686810341E-009',
   ' 5.0 |  52.5624891803025  1.08196971666530E-005 |  52.5625000012948  1.29515598246144E-009',
   ' 5.1 |  56.2874949054877  1.13445119822586E-005 |  56.287506251337   1.33739774810238E-009',
   ' 5.2 |  60.2175881188478  1.18811518277084E-005 |  60.2176000013801  1.38047084874415E-009',
   ' 5.3 |  64.3604938204321  1.24295674623909E-005 |  64.360506251424   1.42441081152356E-009',
   ' 5.4 |  68.7240870102871  1.29897124026002E-005 |  68.7241000014687  1.46916079302173E-009',
   ' 5.5 |  73.3163926884569  1.35615426160030E-005 |  73.3164062515143  1.51476342580281E-009',
   ' 5.6 |  78.1455858549829  1.41450164932166E-005 |  78.1456000015607  1.56127555328567E-009',
   ' 5.7 |  83.2199915099045  1.47400948549148E-005 |  83.220006251608   1.60858348863258E-009',
   ' 5.8 |  88.5480846532588  1.53467405965557E-005 |  88.5481000016561  1.65671565355296E-009',
   ' 5.9 |  94.1384902850807  1.59649186315391E-005 |  94.1385062517051  1.70575731317513E-009',
   ' 6.0 |  99.9999834054034  1.65945958769953E-005 | 100.000000001755   1.75562320237077E-009',
   ' 6.1 | 106.141489014258   1.72357410690438E-005 | 106.141506251806   1.80634174284933E-009',
   ' 6.2 | 112.572082111674   1.78883246633177E-005 | 112.572100001857   1.85791293461079E-009',
   ' 6.3 | 119.30098769768    1.85523187781200E-005 | 119.301006251909   1.91035098850989E-009',
   ' 6.4 | 126.337580772302   1.92276970096827E-005 | 126.337600001963   1.96362748283718E-009',
   ' 6.5 | 133.691386335564   1.99144344321667E-005 | 133.691406252017   2.01779926101153E-009',
   ' 6.6 | 141.372079387491   2.06125074839747E-005 | 141.372100002072   2.07276684704993E-009',
   ' 6.7 | 149.389484928105   2.13218938824866E-005 | 149.389506252127   2.12864392779011E-009',
   ' 6.8 | 157.753577957426   2.20425724819506E-005 | 157.753600002184   2.18537365981319E-009',
   ' 6.9 | 166.474483475475   2.27745234724352E-005 | 166.474506252242   2.24287077799090E-009',
   ' 7.0 | 175.562476482271   2.35177277829735E-005 | 175.5625000023     2.30124896916095E-009',
   ' 7.1 | 185.027981977831   2.42721675931534E-005 | 185.028006252359   2.36053665503277E-009',
   ' 7.2 | 194.881574962172   2.50378259920581E-005 | 194.881600002419   2.42070541389694E-009',
   ' 7.3 | 205.133980435311   2.58146868929998E-005 | 205.13400625248    2.48172682404402E-009',
   ' 7.4 | 215.796073397263   2.66027351187859E-005 | 215.796100002542   2.54351562034572E-009',
   ' 7.5 | 226.878878848042   2.74019562311878E-005 | 226.878906252604   2.60621391134919E-009',
   ' 7.6 | 238.393571787661   2.82123365593634E-005 | 238.393600002668   2.66982169705443E-009',
   ' 7.7 | 250.351477216135   2.90338630577480E-005 | 250.351506252732   2.73428213404259E-009',
   ' 7.8 | 262.764070133474   2.98665233913198E-005 | 262.764100002797   2.79965206573252E-009',
   ' 7.9 | 275.642975539692   3.07103059640212E-005 | 275.643006252863   2.86576096186764E-009',
   ' 8.0 | 288.999968434798   3.15651996629640E-005 | 289.00000000293    2.93277935270453E-009',
   ' 8.1 | 302.846973818803   3.24311940858024E-005 | 302.847006252998   3.00047986456775E-009',
   ' 8.2 | 317.196066691719   3.33082790575645E-005 | 317.196100003066   3.06891934087616E-009',
   ' 8.3 | 332.059472053553   3.41964449148691E-005 | 332.059506253136   3.13815462504863E-009',
   ' 8.4 | 347.449564904315   3.50956825627691E-005 | 347.449600003206   3.20835624734173E-009',
   ' 8.5 | 363.378870244014   3.60059834747517E-005 | 363.378906253277   3.27929683408001E-009',
   ' 8.6 | 379.860063072659   3.69273392379910E-005 | 379.860100003349   3.35103322868235E-009',
   ' 8.7 | 396.905968390256   3.78597421217819E-005 | 396.906006253422   3.42367911798647E-009',
   ' 8.8 | 414.529561196814   3.88031847933235E-005 | 414.529600003496   3.49706397173577E-009',
   ' 8.9 | 432.743966492339   3.97576598629712E-005 | 432.74400625357    3.57130147676799E-009',
   ' 9.0 | 451.562459276838   4.07231606232017E-005 | 451.562500003645   3.64644847650197E-009',
   ' 9.1 | 470.998464550318   4.16996808212389E-005 | 470.998506253722   3.72227759726229E-009',
   ' 9.2 | 491.065557312786   4.26872139769330E-005 | 491.065600003799   3.79907305614324E-009',
   ' 9.3 | 511.777462564245   4.36857543490987E-005 | 511.777506253877   3.87677800972597E-009',
   ' 9.4 | 533.148055304704   4.46952963102376E-005 | 533.148100003955   3.95516508433502E-009',
   ' 9.5 | 555.191360534166   4.57158342896946E-005 | 555.191406254035   4.03474587074015E-009',
   ' 9.6 | 577.921553252637   4.67473633989357E-005 | 577.921600004115   4.11466771765845E-009',
   ' 9.7 | 601.352958460123   4.77898784083663E-005 | 601.353006254197   4.19561274611624E-009',
   ' 9.8 | 625.500051156627   4.88433748841999E-005 | 625.500100004279   4.27735358243808E-009',
   ' 9.9 | 650.377456342154   4.99078482789628E-005 | 650.377506254362   4.36000391346170E-009',
   '10.0 | 675.999949016708   5.09832944999289E-005 | 676.000000004446   4.44333636551164E-009'],
  'LDLinux'=>
  ['time | approx (RK4)                     error (RK4) | approx (CashCarp)           error (CashCarp)',
   ' 0.0 |   1                  0.0000000000000000E+000 |   1                  0.0000000000000000E+000',
   ' 0.1 |   1.0050062486962987 1.3037013056561506E-009 |   1.0050062500579799 5.7979866676001468E-011',
   ' 0.2 |   1.0200999947846331 5.2153668504088119E-009 |   1.0201000001149893 1.1498931624595587E-010',
   ' 0.3 |   1.0455062382554288 1.1744571179082494E-008 |   1.0455062501711931 1.7119307772588133E-010',
   ' 0.4 |   1.0815999790671547 2.0932845316064957E-008 |   1.0816000002268002 2.2680017965678173E-010',
   ' 0.5 |   1.1289062171139842 3.2886015827724747E-008 |   1.1289062502820451 2.8204512770441115E-010',
   ' 0.6 |   1.1880999521926327 4.7807367256906715E-008 |   1.1881000003371433 3.3714330958077576E-010',
   ' 0.7 |   1.2600061839764939 6.6023506033012491E-008 |   1.2600062503922304 3.9223038131221827E-010',
   ' 0.8 |   1.345599912002743  8.7997256953626160E-008 |   1.3456000004473012 4.4730128162615707E-010',
   ' 0.9 |   1.4460061356746574 1.1432534253834337E-007 |   1.4460062505021644 5.0216448490777998E-010',
   ' 1.0 |   1.5624998542781078 1.4572189208084119E-007 |   1.5625000005564221 5.5642214371199455E-010',
   ' 1.1 |   1.6965060670087851 1.8299121482391687E-007 |   1.6965062506094793 6.0947941214316986E-010',
   ' 1.2 |   1.8495997730055733 2.2699442658250923E-007 |   1.8496000006605792 6.6057935315354255E-010',
   ' 1.3 |   2.0235059713854678 2.7861453204573380E-007 |   2.0235062507088551 7.0885523124029903E-010',
   ' 1.4 |   2.2200996612762245 3.3872377531714119E-007 |   2.2201000007533902 7.5339035986339564E-010',
   ' 1.5 |   2.4414058418441126 4.0815588716117124E-007 |   2.4414062507932763 7.9327647293896131E-010',
   ' 1.6 |   2.6895995123153735 4.8768462628098405E-007 |   2.6896000008276637 8.2766393760293211E-010',
   ' 1.7 |   2.9670056719910381 5.7800896157886826E-007 |   2.9670062508557997 8.5579995499039663E-010',
   ' 1.8 |   3.2760993202555215 6.7974447813361205E-007 |   3.2761000008770532 8.7705351705172352E-010',
   ' 1.9 |   3.6195054565798759 7.9342012367024546E-007 |   3.6195062508909275 8.9092783519574559E-010',
   ' 2.0 |   3.9999990805207988 9.1947920073708403E-007 |   4.0000000008970617 8.9706218668605953E-010',
   ' 2.1 |   4.4205051917165137 1.0582834857829869E-006 |   4.4205062508952251 8.9522565749344807E-010',
   ' 2.2 |   4.8840987898805474 1.2101194519801781E-006 |   4.8841000008853047 8.8530531993855077E-010',
   ' 2.3 |   5.3940048747942681 1.3752057311995115E-006 |   5.3940062508672904 8.6729111479361132E-010',
   ' 2.4 |   5.9535984462988688 1.5537011304224413E-006 |   5.9536000008412585 8.4125928575748410E-010',
   ' 2.5 |   6.566404504287307  1.7457126921427597E-006 |   6.5664062508073549 8.0735576037105350E-010',
   ' 2.6 |   7.236098048696557  1.9513034420046323E-006 |   7.2361000007657794 7.6578043645830762E-010',
   ' 2.7 |   7.9665040795004052 2.1704995937120095E-006 |   7.9665062507167718 7.1677295002126051E-010',
   ' 2.8 |   8.7615975967029186 2.4032970801684053E-006 |   8.761600000660599  6.6060026632924762E-010',
   ' 2.9 |   9.6255036003326451 2.6496673534576187E-006 |   9.6255062505975447 5.9754614190749011E-010',
   ' 3.0 |  10.56249709043755   2.9095624481736970E-006 |  10.562500000622925  6.2292708751660042E-010',
   ' 3.1 |  11.577003067080661  3.1829193373449777E-006 |  11.577006250649043  6.4904462707127131E-010',
   ' 3.2 |  12.673596530336367  3.4696636314664880E-006 |  12.673600000675906  6.7590784358362299E-010',
   ' 3.3 |  13.857002480287315  3.7697126826947980E-006 |  13.857006250703523  7.0352553990793432E-010',
   ' 3.4 |  15.132095917021837  4.0829781608030941E-006 |  15.132100000731904  7.3190615200446896E-010',
   ' 3.5 |  16.50390184063183   4.4093681673511298E-006 |  16.503906250761055  7.6105769429568593E-010',
   ' 3.6 |  17.977595251211046  4.7487889513961323E-006 |  17.977600000790985  7.9098772323704658E-010',
   ' 3.7 |  19.558501148853712  5.1011462852031120E-006 |  19.5585062508217    8.2170328354058686E-010',
   ' 3.8 |  21.252094533653444  5.4663465524872057E-006 |  21.252100000853207  8.5321095848189810E-010',
   ' 3.9 |  23.0640004057024    5.8442975959683424E-006 |  23.064006250885513  8.8551681959314621E-010',
   ' 4.0 |  24.999993765090631  6.2349093646781040E-006 |  25.000000000918622  9.1862647523532903E-010',
   ' 4.1 |  27.065999611905599  6.6380943962857097E-006 |  27.06600625095254   9.5254507927189369E-010',
   ' 4.2 |  29.268092946231831  7.0537681642387356E-006 |  29.268100000987272  9.8727733453818356E-010',
   ' 4.3 |  31.612498768150679  7.4818493150958371E-006 |  31.612506251022822  1.0228275466178660E-009',
   ' 4.4 |  34.105592077740176  7.9222598174839842E-006 |  34.105600001059193  1.0591996169040385E-009',
   ' 4.5 |  36.753897875074953  8.3749250403726549E-006 |  36.75390625109639   1.0963971085187207E-009',
   ' 4.6 |  39.564091160226217  8.8397737755471772E-006 |  39.564100001134416  1.1344232567211954E-009',
   ' 4.7 |  42.542996933261776  9.3167382165387780E-006 |  42.543006251173273  1.1732809515607734E-009',
   ' 4.8 |  45.697590194246088  9.8057539039339559E-006 |  45.697600001212964  1.2129728367560322E-009',
   ' 4.9 |  49.034995943240345  1.0306759645455771E-005 |  49.035006251253492  1.2535012784697930E-009',
   ' 5.0 |  52.562489180302573  1.0819697417334406E-005 |  52.562500001294858  1.2948684173508251E-009',
   ' 5.1 |  56.287494905487737  1.1344512252521588E-005 |  56.287506251337065  1.3370761581255053E-009',
   ' 5.2 |  60.217588118847869  1.1881152119915667E-005 |  60.217600001380115  1.3801262216395216E-009',
   ' 5.3 |  64.360493820432189  1.2429567798212526E-005 |  64.360506251424008  1.4240201448578738E-009',
   ' 5.4 |  68.72408701028724   1.2989712747019100E-005 |  68.724100001468746  1.4687593086204487E-009',
   ' 5.5 |  73.316392688457008  1.3561542977449936E-005 |  73.316406251514331  1.5143449272336795E-009',
   ' 5.6 |  78.145585854983061  1.4145016923712561E-005 |  78.145600001560763  1.5607781039816970E-009',
   ' 5.7 |  83.219991509904666  1.4740095317163082E-005 |  83.220006251608043  1.6080597894929660E-009',
   ' 5.8 |  88.548084653258919  1.5346741063598790E-005 |  88.548100001656173  1.6561908372514367E-009',
   ' 5.9 |  94.138490285080857  1.5964919124526744E-005 |  94.138506251705153  1.7051720382910140E-009',
   ' 6.0 |  99.999983405403577  1.6594596402963457E-005 | 100.00000000175498   1.7550040379288312E-009',
   ' 6.1 | 106.14148901425834   1.7235741633911394E-005 | 106.14150625180567   1.8056874259708700E-009',
   ' 6.2 | 112.5720821116747    1.7888325279845352E-005 | 112.5721000018572    1.8572227158952792E-009',
   ' 6.3 | 119.30098769768054   1.8552319431271169E-005 | 119.30100625190959   1.9096103587301627E-009',
   ' 6.4 | 126.33758077230226   1.9227697712190239E-005 | 126.33760000196283   1.9628507430535791E-009',
   ' 6.5 | 133.69138633556478   1.9914435190754309E-005 | 133.69140625201692   2.0169442088713296E-009',
   ' 6.6 | 141.37207938749168   2.0612508294562404E-005 | 141.37210000207186   2.0718910198613827E-009',
   ' 6.7 | 149.38948492810524   2.1321894730780278E-005 | 149.38950625212766   2.1276914119461310E-009',
   ' 6.8 | 157.75357795742656   2.2042573410832600E-005 | 157.75360000218431   2.1843456626813307E-009',
   ' 6.9 | 166.47448347547559   2.2774524379529093E-005 | 166.47450625224182   2.2418538692114964E-009',
   ' 7.0 | 175.56247648227122   2.3517728748131961E-005 | 175.56250000230018   2.3002162119478697E-009',
   ' 7.1 | 185.02798197783133   2.4272168631683799E-005 | 185.02800625235939   2.3594327880349653E-009',
   ' 7.2 | 194.88157496217287   2.5037827090013121E-005 | 194.88160000241946   2.4195036529839342E-009',
   ' 7.3 | 205.13398043531189   2.5814688072139935E-005 | 205.13400625248039   2.4804289594504425E-009',
   ' 7.4 | 215.79607339726359   2.6602736364511603E-005 | 215.79610000254216   2.5422086519233389E-009',
   ' 7.5 | 226.87887884804241   2.7401957541861588E-005 | 226.8789062526048    2.6048428136693502E-009',
   ' 7.6 | 238.39357178766203   2.8212337921551534E-005 | 238.39360000266828   2.6683314308106887E-009',
   ' 7.7 | 250.35147721613543   2.9033864520425223E-005 | 250.35150625273262   2.7326745311029299E-009',
   ' 7.8 | 262.76407013347493   2.9866525014632384E-005 | 262.76410000279782   2.7978720729127105E-009',
   ' 7.9 | 275.64297553969224   3.0710307701520279E-005 | 275.64300625286387   2.8639240146066669E-009',
   ' 8.0 | 288.99996843479848   3.1565201464273107E-005 | 289.00000000293077   2.9308304116959505E-009',
   ' 8.1 | 302.8469738188042    3.2431195738452656E-005 | 302.84700625299853   2.9985912086694100E-009',
   ' 8.2 | 317.19606669171945   3.3308280481064712E-005 | 317.19610000306714   3.0672063777714698E-009',
   ' 8.3 | 332.05947205355379   3.4196446140943859E-005 | 332.05950625313661   3.1366757524686761E-009',
   ' 8.4 | 347.4495649043163    3.5095683631053420E-005 | 347.44960000320693   3.2069993050054535E-009',
   ' 8.5 | 363.37887024401562   3.6005984302978078E-005 | 363.3789062532781    3.2781770076262262E-009',
   ' 8.6 | 379.86006307266      3.6927339922498970E-005 | 379.86010000335013   3.3502087215531162E-009',
   ' 8.7 | 396.90596839025727   3.7859742646695338E-005 | 396.90600625342301   3.4230944745416991E-009',
   ' 8.8 | 414.52956119681491   3.8803185002850293E-005 | 414.52960000349674   3.4968340445473700E-009',
   ' 8.9 | 432.74396649234004   3.9757659867967199E-005 | 432.74400625357133   3.5714274593257045E-009',
   ' 9.0 | 451.56245927683945   4.0723160450173435E-005 | 451.56250000364678   3.6468744968320976E-009',
   ' 9.1 | 470.99846455031963   4.1699680270596007E-005 | 470.99850625372307   3.7231752403332763E-009',
   ' 9.2 | 491.06555731278675   4.2687213147124536E-005 | 491.06560000380022   3.8003296065625136E-009',
   ' 9.3 | 511.77746256424671   4.3685753178424047E-005 | 511.77750625387823   3.8783373179640535E-009',
   ' 9.4 | 533.14805530470515   4.4695294729002466E-005 | 533.14810000395708   3.9571985133157739E-009',
   ' 9.5 | 555.19136053416746   4.5715832415582636E-005 | 555.19140625403679   4.0369129150619187E-009',
   ' 9.6 | 577.92155325263878   4.6747361093835149E-005 | 577.92160000411735   4.1174805787136393E-009',
   ' 9.7 | 601.35295846012402   4.7789875846249164E-005 | 601.35300625419877   4.1989013932486330E-009',
   ' 9.8 | 625.50005115662789   4.8843371970141991E-005 | 625.50010000428104   4.2811752476445974E-009',
   ' 9.9 | 650.37745634215489   4.9907844967167492E-005 | 650.37750625436416   4.3643019753680790E-009',
   '10.0 | 675.99994901670932   5.0983290532380376E-005 | 676.00000000444813   4.4482815764190775E-009'],
  'LDWin32'=>
  ['time | approx (RK4)                     error (RK4) | approx (CashCarp)           error (CashCarp)',
   ' 0.0 |   1                  0.0000000000000000E+000 |   1                  0.0000000000000000E+000',
   ' 0.1 |   1.0050062486962987 1.3037013059814112E-009 |   1.0050062500579799 5.7979943979616366E-011',
   ' 0.2 |   1.0200999947846331 5.2153668509509130E-009 |   1.0201000001149894 1.1498935809615973E-010',
   ' 0.3 |   1.0455062382554288 1.1744571179949856E-008 |   1.0455062501711931 1.7119314104328820E-010',
   ' 0.4 |   1.0815999790671547 2.0932845317149160E-008 |   1.0816000002268003 2.2680025121412511E-010',
   ' 0.5 |   1.1289062171139842 3.2886015829025790E-008 |   1.1289062502820453 2.8204527602326834E-010',
   ' 0.6 |   1.1880999521926327 4.7807367258749858E-008 |   1.1881000003371434 3.3714335815303309E-010',
   ' 0.7 |   1.260006183976494  6.6023506035180896E-008 |   1.2600062503922305 3.9223046447052490E-010',
   ' 0.8 |   1.345599912002743  8.7997256956336666E-008 |   1.3456000004473014 4.4730143623338686E-010',
   ' 0.9 |   1.4460061356746575 1.1432534254170439E-007 |   1.4460062505021645 5.0216446940368892E-010',
   ' 1.0 |   1.5624998542781079 1.4572189208528642E-007 |   1.562500000556422  5.5642201924558515E-010',
   ' 1.1 |   1.6965060670087852 1.8299121482836210E-007 |   1.696506250609479  6.0947901619253647E-010',
   ' 1.2 |   1.8495997730055734 2.2699442658782182E-007 |   1.8496000006605788 6.6057883566384562E-010',
   ' 1.3 |   2.0235059713854679 2.7861453205137166E-007 |   2.0235062507088548 7.0885481468982436E-010',
   ' 1.4 |   2.2200996612762247 3.3872377532342957E-007 |   2.2201000007533893 7.5338931360829919E-010',
   ' 1.5 |   2.4414058418441128 4.0815588716789329E-007 |   2.4414062507932752 7.9327522393805860E-010',
   ' 1.6 |   2.6895995123153737 4.8768462628879031E-007 |   2.6896000008276624 8.2766237461708025E-010',
   ' 1.7 |   2.9670056719910384 5.7800896158754188E-007 |   2.9670062508557979 8.5579794531324971E-010',
   ' 1.8 |   3.2760993202555219 6.7974447814358671E-007 |   3.2761000008770513 8.7705133433590987E-010',
   ' 1.9 |   3.6195054565798763 7.9342012368173800E-007 |   3.6195062508909253 8.9092526043242637E-010',
   ' 2.0 |   3.9999990805207992 9.1947920074944393E-007 |   4.0000000008970593 8.9705931832079200E-010',
   ' 2.1 |   4.4205051917165142 1.0582834857959973E-006 |   4.4205062508952224 8.9522242570361232E-010',
   ' 2.2 |   4.884098789880548  1.2101194519936222E-006 |   4.8841000008853017 8.8530172168838073E-010',
   ' 2.3 |   5.3940048747942688 1.3752057312125220E-006 |   5.394006250867287  8.6728702735142105E-010',
   ' 2.4 |   5.9535984462988696 1.5537011304363191E-006 |   5.9536000008412548 8.4125485267164124E-010',
   ' 2.5 |   6.5664045042873078 1.7457126921562038E-006 |   6.5664062508073515 8.0735152547736777E-010',
   ' 2.6 |   7.236098048696558  1.9513034420167753E-006 |   7.2361000007657772 7.6577720510215275E-010',
   ' 2.7 |   7.9665040795004063 2.1704995937241525E-006 |   7.966506250716769  7.1676899832118224E-010',
   ' 2.8 |   8.7615975967029198 2.4032970801805484E-006 |   8.7616000006605947 6.6059475598012618E-010',
   ' 2.9 |   9.6255036003326465 2.6496673534697618E-006 |   9.6255062505975424 5.9754240271103765E-010',
   ' 3.0 |  10.562497090437552  2.9095624481849727E-006 |  10.562500000622926  6.2292572489131004E-010',
   ' 3.1 |  11.577003067080663  3.1829193373536513E-006 |  11.577006250649045  6.4904544325866675E-010',
   ' 3.2 |  12.673596530336369  3.4696636314742943E-006 |  12.67360000067591   6.7590954621471466E-010',
   ' 3.3 |  13.857002480287317  3.7697126827034716E-006 |  13.857006250703527  7.0352744983848137E-010',
   ' 3.4 |  15.132095917021839  4.0829781608100330E-006 |  15.13210000073191   7.3190999701905346E-010',
   ' 3.5 |  16.503901840631833  4.4093681673545992E-006 |  16.503906250761062  7.6106235202821892E-010',
   ' 3.6 |  17.977595251211049  4.7487889514030712E-006 |  17.977600000790989  7.9098932959098534E-010',
   ' 3.7 |  19.558501148853715  5.1011462852048467E-006 |  19.558506250821704  8.2170427580241512E-010',
   ' 3.8 |  21.252094533653447  5.4663465524889404E-006 |  21.252100000853211  8.5321130889604024E-010',
   ' 3.9 |  23.064000405702404  5.8442975959631382E-006 |  23.064006250885516  8.8551596957864298E-010',
   ' 4.0 |  24.999993765090635  6.2349093646781040E-006 |  25.000000000918622  9.1862167005130058E-010',
   ' 4.1 |  27.065999611905604  6.6380943963013223E-006 |  27.06600625095254   9.5254035908931556E-010',
   ' 4.2 |  29.268092946231836  7.0537681642647565E-006 |  29.268100000987268  9.8726764957701718E-010',
   ' 4.3 |  31.612498768150685  7.4818493151374704E-006 |  31.612506251022815  1.0228147911961472E-009',
   ' 4.4 |  34.105592077740182  7.9222598175464343E-006 |  34.10560000105918   1.0591802435122588E-009',
   ' 4.5 |  36.75389787507496   8.3749250404489828E-006 |  36.753906251096367  1.0963674620945163E-009',
   ' 4.6 |  39.564091160226224  8.8397737756477912E-006 |  39.564100001134392  1.1343919761874766E-009',
   ' 4.7 |  42.542996933261783  9.3167382166671475E-006 |  42.543006251173246  1.1732458615743013E-009',
   ' 4.8 |  45.697590194246096  9.8057539040866115E-006 |  45.697600001212933  1.2129333058774616E-009',
   ' 4.9 |  49.034995943240354  1.0306759645643121E-005 |  49.035006251253456  1.2534563352539774E-009',
   ' 5.0 |  52.562489180302582  1.0819697417552981E-005 |  52.562500001294822  1.2948219961506080E-009',
   ' 5.1 |  56.287494905487747  1.1344512252771388E-005 |  56.287506251337028  1.3370280715907512E-009',
   ' 5.2 |  60.21758811884788   1.1881152120203631E-005 |  60.21760000138007   1.3800702317046110E-009',
   ' 5.3 |  64.360493820432202  1.2429567798538654E-005 |  64.360506251423956  1.4239562307061249E-009',
   ' 5.4 |  68.724087010287253  1.2989712747393800E-005 |  68.724100001468685  1.4686845975497853E-009',
   ' 5.5 |  73.316392688457022  1.3561542977866270E-005 |  73.316406251514266  1.5142659279265835E-009',
   ' 5.6 |  78.145585854983076  1.4145016924184406E-005 |  78.145600001560695  1.5606944833712610E-009',
   ' 5.7 |  83.219991509904682  1.4740095317676560E-005 |  83.220006251607956  1.6079553383230305E-009',
   ' 5.8 |  88.548084653258936  1.5346741064160840E-005 |  88.548100001656067  1.6560669016674190E-009',
   ' 5.9 |  94.138490285080875  1.5964919125165122E-005 |  94.138506251705067  1.7050668030260674E-009',
   ' 6.0 |  99.999983405403597  1.6594596403678163E-005 | 100.00000000175487   1.7548697633928967E-009',
   ' 6.1 | 106.14148901425837   1.7235741634695489E-005 | 106.14150625180552   1.8055233766411938E-009',
   ' 6.2 | 112.57208211167472   1.7888325280691897E-005 | 112.57210000185702   1.8570233753512078E-009',
   ' 6.3 | 119.30098769768057   1.8552319432180164E-005 | 119.3010062519094    1.9093988543050777E-009',
   ' 6.4 | 126.33758077230229   1.9227697713182501E-005 | 126.33760000196261   1.9626128985872349E-009',
   ' 6.5 | 133.69138633556481   1.9914435191822899E-005 | 133.69140625201669   2.0166903563767491E-009',
   ' 6.6 | 141.3720793874917    2.0612508295700382E-005 | 141.37210000207162   2.0716184739866250E-009',
   ' 6.7 | 149.38948492810527   2.1321894732001523E-005 | 149.3895062521274    2.1274036421381481E-009',
   ' 6.8 | 157.75357795742659   2.2042573412150990E-005 | 157.75360000218402   2.1840146358087509E-009',
   ' 6.9 | 166.47448347547562   2.2774524380958505E-005 | 166.47450625224147   2.2414678030324708E-009',
   ' 7.0 | 175.56247648227125   2.3517728749658517E-005 | 175.56250000229977   2.2997703047478169E-009',
   ' 7.1 | 185.02798197783137   2.4272168633279745E-005 | 185.02800625235895   2.3589484948738360E-009',
   ' 7.2 | 194.88157496217291   2.5037827091706211E-005 | 194.88160000241902   2.4190194014561683E-009',
   ' 7.3 | 205.13398043531193   2.5814688073971803E-005 | 205.13400625247991   2.4799056835833611E-009',
   ' 7.4 | 215.79607339726363   2.6602736366454494E-005 | 215.79610000254161   2.5416059534766333E-009',
   ' 7.5 | 226.87887884804246   2.7401957543915501E-005 | 226.8789062526042    2.6041949013899668E-009',
   ' 7.6 | 238.39357178766208   2.8212337923730346E-005 | 238.39360000266768   2.6676810760406511E-009',
   ' 7.7 | 250.35147721613548   2.9033864522742814E-005 | 250.35150625273201   2.7320070650205253E-009',
   ' 7.8 | 262.76407013347498   2.9866525017047119E-005 | 262.76410000279719   2.7971913674207372E-009',
   ' 7.9 | 275.6429755396923    3.0710307704046036E-005 | 275.64300625286319   2.8631864934514084E-009',
   ' 8.0 | 288.99996843479853   3.1565201466993154E-005 | 289.00000000293005   2.9300493420425511E-009',
   ' 8.1 | 302.84697381880426   3.2431195741478014E-005 | 302.8470062529978    2.9977992310747936E-009',
   ' 8.2 | 317.19606669171952   3.3308280484450892E-005 | 317.19610000306642   3.0664177308459273E-009',
   ' 8.3 | 332.05947205355386   3.4196446144579840E-005 | 332.05950625313579   3.1357920426966501E-009',
   ' 8.4 | 347.44956490431637   3.5095683634939201E-005 | 347.44960000320606   3.2060558929902783E-009',
   ' 8.5 | 363.37887024401569   3.6005984307224681E-005 | 363.37890625327719   3.2771915181584177E-009',
   ' 8.6 | 379.86006307266008   3.6927339927050884E-005 | 379.86010000334909   3.3490868689423081E-009',
   ' 8.7 | 396.90596839025735   3.7859742651663586E-005 | 396.90600625342188   3.4218763100835048E-009',
   ' 8.8 | 414.52956119681499   3.8803185008151608E-005 | 414.52960000349555   3.4955429939476090E-009',
   ' 8.9 | 432.74396649234013   3.9757659873712603E-005 | 432.74400625356998   3.5699753986317972E-009',
   ' 9.0 | 451.56245927683955   4.0723160456251906E-005 | 451.56250000364531   3.6453088048116200E-009',
   ' 9.1 | 470.99846455031973   4.1699680277118567E-005 | 470.99850625372147   3.7214700765453301E-009',
   ' 9.2 | 491.06555731278685   4.2687213154118941E-005 | 491.06560000379852   3.7985191103651061E-009',
   ' 9.3 | 511.77746256424682   4.3685753185807030E-005 | 511.77750625387648   3.8764780829758649E-009',
   ' 9.4 | 533.14805530470527   4.4695294736829538E-005 | 533.14810000395516   3.9551610320209818E-009',
   ' 9.5 | 555.19136053416758   4.5715832423853797E-005 | 555.19140625403497   4.0349695806796149E-009',
   ' 9.6 | 577.9215532526389    4.6747361102661422E-005 | 577.92160000411536   4.1153581653574633E-009',
   ' 9.7 | 601.35295846012415   4.7789875855519526E-005 | 601.35300625419654   4.1965395047860454E-009',
   ' 9.8 | 625.50005115662802   4.8843371980022976E-005 | 625.50010000427869   4.2786884590917396E-009',
   ' 9.9 | 650.37745634215503   4.9907844977603588E-005 | 650.37750625436172   4.3617150446983999E-009',
   '10.0 | 675.99994901670946   5.0983290543371584E-005 | 676.00000000444561   4.4456053283070673E-009'],
  'LDWin64'=>
  ['time | approx (RK4)                 error (RK4) | approx (CashCarp)       error (CashCarp)',
   ' 0.0 |   1                0.00000000000000E+000 |   1                0.00000000000000E+000',
   ' 0.1 |   1.0050062486963  1.30370114703737E-009 |   1.00500625005798 5.79800651934193E-011',
   ' 0.2 |   1.02009999478463 5.21536658304456E-009 |   1.02010000011499 1.14989351374106E-010',
   ' 0.3 |   1.04550623825543 1.17445706493413E-008 |   1.04550625017119 1.71193281772730E-010',
   ' 0.4 |   1.08159997906715 2.09328452349666E-008 |   1.0816000002268  2.26800134228711E-010',
   ' 0.5 |   1.12890621711398 3.28860156884048E-008 |   1.12890625028205 2.82045276023268E-010',
   ' 0.6 |   1.18809995219263 4.78073671761337E-008 |   1.18810000033714 3.37143202244761E-010',
   ' 0.7 |   1.26000618397649 6.60235057736713E-008 |   1.26000625039223 3.92230248280612E-010',
   ' 0.8 |   1.34559991200274 8.79972565925868E-008 |   1.3456000004473  4.47301085060303E-010',
   ' 0.9 |   1.44600613567466 1.14325342082111E-007 |   1.44600625050216 5.02164310134390E-010',
   ' 1.0 |   1.56249985427811 1.45721891220418E-007 |   1.56250000055642 5.56422241615451E-010',
   ' 1.1 |   1.69650606700879 1.82991214181527E-007 |   1.69650625060948 6.09478911783867E-010',
   ' 1.2 |   1.84959977300557 2.26994425922555E-007 |   1.84960000066058 6.60578702849079E-010',
   ' 1.3 |   2.02350597138547 2.78614531445953E-007 |   2.02350625070886 7.08854308584250E-010',
   ' 1.4 |   2.22009966127623 3.38723775250571E-007 |   2.22010000075339 7.53388462726434E-010',
   ' 1.5 |   2.44140584184411 4.08155887310357E-007 |   2.44140625079328 7.93274335109118E-010',
   ' 1.6 |   2.68959951231538 4.87684626460094E-007 |   2.68960000082766 8.27661050806228E-010',
   ' 1.7 |   2.96700567199104 5.78008962026644E-007 |   2.9670062508558  8.55796322696278E-010',
   ' 1.8 |   3.27609932025552 6.79744480258648E-007 |   3.27610000087705 8.77048211833653E-010',
   ' 1.9 |   3.61950545657988 7.93420125599908E-007 |   3.61950625089093 8.90922002838579E-010',
   ' 2.0 |   3.9999990805208  9.19479203442819E-007 |   4.00000000089706 8.97053986648189E-010',
   ' 2.1 |   4.42050519171652 1.05828348750947E-006 |   4.42050625089522 8.95218121854668E-010',
   ' 2.2 |   4.88409878988055 1.21011945264371E-006 |   4.8841000008853  8.85298057085038E-010',
   ' 2.3 |   5.39400487479427 1.37520572973671E-006 |   5.39400625086729 8.67285798733519E-010',
   ' 2.4 |   5.95359844629887 1.55370112686626E-006 |   5.95360000084126 8.41255953787368E-010',
   ' 2.5 |   6.56640450428731 1.74571268551915E-006 |   6.56640625080735 8.07355071685834E-010',
   ' 2.6 |   7.23609804869656 1.95130343261241E-006 |   7.23610000076578 7.65782992573349E-010',
   ' 2.7 |   7.96650407950041 2.17049958095572E-006 |   7.96650625071677 7.16778636444815E-010',
   ' 2.8 |   8.76159759670292 2.40329706535647E-006 |   8.7616000006606  6.60607568647720E-010',
   ' 2.9 |   9.62550360033265 2.64966733354299E-006 |   9.62550625059755 5.97562888060565E-010',
   ' 3.0 |  10.5624970904376  2.90956242743334E-006 |  10.5625000006229  6.22948803652434E-010',
   ' 3.1 |  11.5770030670807  3.18291930767600E-006 |  11.577006250649   6.49077236403173E-010',
   ' 3.2 |  12.6735965303364  3.46966359643375E-006 |  12.6736000006759  6.75948186312780E-010',
   ' 3.3 |  13.8570024802873  3.76971264159920E-006 |  13.8570062507035  7.03572311522294E-010',
   ' 3.4 |  15.1320959170218  4.08297811560487E-006 |  15.1321000007319  7.31962046529588E-010',
   ' 3.5 |  16.5039018406318  4.40936811330062E-006 |  16.5039062507611  7.61126273118862E-010',
   ' 3.6 |  17.977595251211   4.74878889278330E-006 |  17.977600000791   7.91061438576435E-010',
   ' 3.7 |  19.5585011488537  5.10114621832258E-006 |  19.5585062508217  8.21785306470701E-010',
   ' 3.8 |  21.2520945336534  5.46634647591304E-006 |  21.2521000008532  8.53304982229020E-010',
   ' 3.9 |  23.0640004057024  5.84429750816184E-006 |  23.0640062508855  8.85624018565068E-010',
   ' 4.0 |  24.9999937650906  6.23490926798809E-006 |  25.0000000009186  9.18745968192525E-010',
   ' 4.1 |  27.0659996119056  6.63809429468643E-006 |  27.0660062509526  9.52674383825070E-010',
   ' 4.2 |  29.2680929462318  7.05376805498759E-006 |  29.2681000009873  9.87416370890060E-010',
   ' 4.3 |  31.6124987681507  7.48184919174832E-006 |  31.6125062510228  1.02298614024221E-009',
   ' 4.4 |  34.1055920777402  7.92225966961269E-006 |  34.1056000010592  1.05936948102681E-009',
   ' 4.5 |  36.7538978750749  8.37492488159342E-006 |  36.7539062510964  1.09657349867121E-009',
   ' 4.6 |  39.5640911602262  8.83977360643939E-006 |  39.5641000011344  1.13461595674380E-009',
   ' 4.7 |  42.5429969332617  9.31673802284649E-006 |  42.5430062511733  1.17350396067195E-009',
   ' 4.8 |  45.697590194246   9.80575369169401E-006 |  45.6976000012129  1.21321619417358E-009',
   ' 4.9 |  49.0349959432403  1.03067594139361E-005 |  49.0350062512535  1.25376686810341E-009',
   ' 5.0 |  52.5624891803025  1.08196971666530E-005 |  52.5625000012948  1.29515598246144E-009',
   ' 5.1 |  56.2874949054877  1.13445119822586E-005 |  56.287506251337   1.33739774810238E-009',
   ' 5.2 |  60.2175881188478  1.18811518277084E-005 |  60.2176000013801  1.38047084874415E-009',
   ' 5.3 |  64.3604938204321  1.24295674623909E-005 |  64.360506251424   1.42441081152356E-009',
   ' 5.4 |  68.7240870102871  1.29897124026002E-005 |  68.7241000014687  1.46916079302173E-009',
   ' 5.5 |  73.3163926884569  1.35615426160030E-005 |  73.3164062515143  1.51476342580281E-009',
   ' 5.6 |  78.1455858549829  1.41450164932166E-005 |  78.1456000015607  1.56127555328567E-009',
   ' 5.7 |  83.2199915099045  1.47400948549148E-005 |  83.220006251608   1.60858348863258E-009',
   ' 5.8 |  88.5480846532588  1.53467405965557E-005 |  88.5481000016561  1.65671565355296E-009',
   ' 5.9 |  94.1384902850807  1.59649186315391E-005 |  94.1385062517051  1.70575731317513E-009',
   ' 6.0 |  99.9999834054034  1.65945958769953E-005 | 100.000000001755   1.75562320237077E-009',
   ' 6.1 | 106.141489014258   1.72357410690438E-005 | 106.141506251806   1.80634174284933E-009',
   ' 6.2 | 112.572082111674   1.78883246633177E-005 | 112.572100001857   1.85791293461079E-009',
   ' 6.3 | 119.30098769768    1.85523187781200E-005 | 119.301006251909   1.91035098850989E-009',
   ' 6.4 | 126.337580772302   1.92276970096827E-005 | 126.337600001963   1.96362748283718E-009',
   ' 6.5 | 133.691386335564   1.99144344321667E-005 | 133.691406252017   2.01779926101153E-009',
   ' 6.6 | 141.372079387491   2.06125074839747E-005 | 141.372100002072   2.07276684704993E-009',
   ' 6.7 | 149.389484928105   2.13218938824866E-005 | 149.389506252127   2.12864392779011E-009',
   ' 6.8 | 157.753577957426   2.20425724819506E-005 | 157.753600002184   2.18537365981319E-009',
   ' 6.9 | 166.474483475475   2.27745234724352E-005 | 166.474506252242   2.24287077799090E-009',
   ' 7.0 | 175.562476482271   2.35177277829735E-005 | 175.5625000023     2.30124896916095E-009',
   ' 7.1 | 185.027981977831   2.42721675931534E-005 | 185.028006252359   2.36053665503277E-009',
   ' 7.2 | 194.881574962172   2.50378259920581E-005 | 194.881600002419   2.42070541389694E-009',
   ' 7.3 | 205.133980435311   2.58146868929998E-005 | 205.13400625248    2.48172682404402E-009',
   ' 7.4 | 215.796073397263   2.66027351187859E-005 | 215.796100002542   2.54351562034572E-009',
   ' 7.5 | 226.878878848042   2.74019562311878E-005 | 226.878906252604   2.60621391134919E-009',
   ' 7.6 | 238.393571787661   2.82123365593634E-005 | 238.393600002668   2.66982169705443E-009',
   ' 7.7 | 250.351477216135   2.90338630577480E-005 | 250.351506252732   2.73428213404259E-009',
   ' 7.8 | 262.764070133474   2.98665233913198E-005 | 262.764100002797   2.79965206573252E-009',
   ' 7.9 | 275.642975539692   3.07103059640212E-005 | 275.643006252863   2.86576096186764E-009',
   ' 8.0 | 288.999968434798   3.15651996629640E-005 | 289.00000000293    2.93277935270453E-009',
   ' 8.1 | 302.846973818803   3.24311940858024E-005 | 302.847006252998   3.00047986456775E-009',
   ' 8.2 | 317.196066691719   3.33082790575645E-005 | 317.196100003066   3.06891934087616E-009',
   ' 8.3 | 332.059472053553   3.41964449148691E-005 | 332.059506253136   3.13815462504863E-009',
   ' 8.4 | 347.449564904315   3.50956825627691E-005 | 347.449600003206   3.20835624734173E-009',
   ' 8.5 | 363.378870244014   3.60059834747517E-005 | 363.378906253277   3.27929683408001E-009',
   ' 8.6 | 379.860063072659   3.69273392379910E-005 | 379.860100003349   3.35103322868235E-009',
   ' 8.7 | 396.905968390256   3.78597421217819E-005 | 396.906006253422   3.42367911798647E-009',
   ' 8.8 | 414.529561196814   3.88031847933235E-005 | 414.529600003496   3.49706397173577E-009',
   ' 8.9 | 432.743966492339   3.97576598629712E-005 | 432.74400625357    3.57130147676799E-009',
   ' 9.0 | 451.562459276838   4.07231606232017E-005 | 451.562500003645   3.64644847650197E-009',
   ' 9.1 | 470.998464550318   4.16996808212389E-005 | 470.998506253722   3.72227759726229E-009',
   ' 9.2 | 491.065557312786   4.26872139769330E-005 | 491.065600003799   3.79907305614324E-009',
   ' 9.3 | 511.777462564245   4.36857543490987E-005 | 511.777506253877   3.87677800972597E-009',
   ' 9.4 | 533.148055304704   4.46952963102376E-005 | 533.148100003955   3.95516508433502E-009',
   ' 9.5 | 555.191360534166   4.57158342896946E-005 | 555.191406254035   4.03474587074015E-009',
   ' 9.6 | 577.921553252637   4.67473633989357E-005 | 577.921600004115   4.11466771765845E-009',
   ' 9.7 | 601.352958460123   4.77898784083663E-005 | 601.353006254197   4.19561274611624E-009',
   ' 9.8 | 625.500051156627   4.88433748841999E-005 | 625.500100004279   4.27735358243808E-009',
   ' 9.9 | 650.377456342154   4.99078482789628E-005 | 650.377506254362   4.36000391346170E-009',
   '10.0 | 675.999949016708   5.09832944999289E-005 | 676.000000004446   4.44333636551164E-009'],
  'LOLinux'=>
  ['time | approx (RK4)                     error (RK4) | approx (CashCarp)           error (CashCarp)',
   ' 0.0 |   1                  0.0000000000000000E+000 |   1                  0.0000000000000000E+000',
   ' 0.1 |   1.0050062486962987 1.3037013056561506E-009 |   1.0050062500579799 5.7979866676001468E-011',
   ' 0.2 |   1.0200999947846331 5.2153668504088119E-009 |   1.0201000001149893 1.1498931624595587E-010',
   ' 0.3 |   1.0455062382554288 1.1744571179082494E-008 |   1.0455062501711931 1.7119307772588133E-010',
   ' 0.4 |   1.0815999790671547 2.0932845316064957E-008 |   1.0816000002268002 2.2680017965678173E-010',
   ' 0.5 |   1.1289062171139842 3.2886015827724747E-008 |   1.1289062502820451 2.8204512770441115E-010',
   ' 0.6 |   1.1880999521926327 4.7807367256906715E-008 |   1.1881000003371433 3.3714330958077576E-010',
   ' 0.7 |   1.2600061839764939 6.6023506033012491E-008 |   1.2600062503922304 3.9223038131221827E-010',
   ' 0.8 |   1.345599912002743  8.7997256953626160E-008 |   1.3456000004473012 4.4730128162615707E-010',
   ' 0.9 |   1.4460061356746574 1.1432534253834337E-007 |   1.4460062505021644 5.0216448490777998E-010',
   ' 1.0 |   1.5624998542781078 1.4572189208084119E-007 |   1.5625000005564221 5.5642214371199455E-010',
   ' 1.1 |   1.6965060670087851 1.8299121482391687E-007 |   1.6965062506094793 6.0947941214316986E-010',
   ' 1.2 |   1.8495997730055733 2.2699442658250923E-007 |   1.8496000006605792 6.6057935315354255E-010',
   ' 1.3 |   2.0235059713854678 2.7861453204573380E-007 |   2.0235062507088551 7.0885523124029903E-010',
   ' 1.4 |   2.2200996612762245 3.3872377531714119E-007 |   2.2201000007533902 7.5339035986339564E-010',
   ' 1.5 |   2.4414058418441126 4.0815588716117124E-007 |   2.4414062507932763 7.9327647293896131E-010',
   ' 1.6 |   2.6895995123153735 4.8768462628098405E-007 |   2.6896000008276637 8.2766393760293211E-010',
   ' 1.7 |   2.9670056719910381 5.7800896157886826E-007 |   2.9670062508557997 8.5579995499039663E-010',
   ' 1.8 |   3.2760993202555215 6.7974447813361205E-007 |   3.2761000008770532 8.7705351705172352E-010',
   ' 1.9 |   3.6195054565798759 7.9342012367024546E-007 |   3.6195062508909275 8.9092783519574559E-010',
   ' 2.0 |   3.9999990805207988 9.1947920073708403E-007 |   4.0000000008970617 8.9706218668605953E-010',
   ' 2.1 |   4.4205051917165137 1.0582834857829869E-006 |   4.4205062508952251 8.9522565749344807E-010',
   ' 2.2 |   4.8840987898805474 1.2101194519801781E-006 |   4.8841000008853047 8.8530531993855077E-010',
   ' 2.3 |   5.3940048747942681 1.3752057311995115E-006 |   5.3940062508672904 8.6729111479361132E-010',
   ' 2.4 |   5.9535984462988688 1.5537011304224413E-006 |   5.9536000008412585 8.4125928575748410E-010',
   ' 2.5 |   6.566404504287307  1.7457126921427597E-006 |   6.5664062508073549 8.0735576037105350E-010',
   ' 2.6 |   7.236098048696557  1.9513034420046323E-006 |   7.2361000007657794 7.6578043645830762E-010',
   ' 2.7 |   7.9665040795004052 2.1704995937120095E-006 |   7.9665062507167718 7.1677295002126051E-010',
   ' 2.8 |   8.7615975967029186 2.4032970801684053E-006 |   8.761600000660599  6.6060026632924762E-010',
   ' 2.9 |   9.6255036003326451 2.6496673534576187E-006 |   9.6255062505975447 5.9754614190749011E-010',
   ' 3.0 |  10.56249709043755   2.9095624481736970E-006 |  10.562500000622925  6.2292708751660042E-010',
   ' 3.1 |  11.577003067080661  3.1829193373449777E-006 |  11.577006250649043  6.4904462707127131E-010',
   ' 3.2 |  12.673596530336367  3.4696636314664880E-006 |  12.673600000675906  6.7590784358362299E-010',
   ' 3.3 |  13.857002480287315  3.7697126826947980E-006 |  13.857006250703523  7.0352553990793432E-010',
   ' 3.4 |  15.132095917021837  4.0829781608030941E-006 |  15.132100000731904  7.3190615200446896E-010',
   ' 3.5 |  16.50390184063183   4.4093681673511298E-006 |  16.503906250761055  7.6105769429568593E-010',
   ' 3.6 |  17.977595251211046  4.7487889513961323E-006 |  17.977600000790985  7.9098772323704658E-010',
   ' 3.7 |  19.558501148853712  5.1011462852031120E-006 |  19.5585062508217    8.2170328354058686E-010',
   ' 3.8 |  21.252094533653444  5.4663465524872057E-006 |  21.252100000853207  8.5321095848189810E-010',
   ' 3.9 |  23.0640004057024    5.8442975959683424E-006 |  23.064006250885513  8.8551681959314621E-010',
   ' 4.0 |  24.999993765090631  6.2349093646781040E-006 |  25.000000000918622  9.1862647523532903E-010',
   ' 4.1 |  27.065999611905599  6.6380943962857097E-006 |  27.06600625095254   9.5254507927189369E-010',
   ' 4.2 |  29.268092946231831  7.0537681642387356E-006 |  29.268100000987272  9.8727733453818356E-010',
   ' 4.3 |  31.612498768150679  7.4818493150958371E-006 |  31.612506251022822  1.0228275466178660E-009',
   ' 4.4 |  34.105592077740176  7.9222598174839842E-006 |  34.105600001059193  1.0591996169040385E-009',
   ' 4.5 |  36.753897875074953  8.3749250403726549E-006 |  36.75390625109639   1.0963971085187207E-009',
   ' 4.6 |  39.564091160226217  8.8397737755471772E-006 |  39.564100001134416  1.1344232567211954E-009',
   ' 4.7 |  42.542996933261776  9.3167382165387780E-006 |  42.543006251173273  1.1732809515607734E-009',
   ' 4.8 |  45.697590194246088  9.8057539039339559E-006 |  45.697600001212964  1.2129728367560322E-009',
   ' 4.9 |  49.034995943240345  1.0306759645455771E-005 |  49.035006251253492  1.2535012784697930E-009',
   ' 5.0 |  52.562489180302573  1.0819697417334406E-005 |  52.562500001294858  1.2948684173508251E-009',
   ' 5.1 |  56.287494905487737  1.1344512252521588E-005 |  56.287506251337065  1.3370761581255053E-009',
   ' 5.2 |  60.217588118847869  1.1881152119915667E-005 |  60.217600001380115  1.3801262216395216E-009',
   ' 5.3 |  64.360493820432189  1.2429567798212526E-005 |  64.360506251424008  1.4240201448578738E-009',
   ' 5.4 |  68.72408701028724   1.2989712747019100E-005 |  68.724100001468746  1.4687593086204487E-009',
   ' 5.5 |  73.316392688457008  1.3561542977449936E-005 |  73.316406251514331  1.5143449272336795E-009',
   ' 5.6 |  78.145585854983061  1.4145016923712561E-005 |  78.145600001560763  1.5607781039816970E-009',
   ' 5.7 |  83.219991509904666  1.4740095317163082E-005 |  83.220006251608043  1.6080597894929660E-009',
   ' 5.8 |  88.548084653258919  1.5346741063598790E-005 |  88.548100001656173  1.6561908372514367E-009',
   ' 5.9 |  94.138490285080857  1.5964919124526744E-005 |  94.138506251705153  1.7051720382910140E-009',
   ' 6.0 |  99.999983405403577  1.6594596402963457E-005 | 100.00000000175498   1.7550040379288312E-009',
   ' 6.1 | 106.14148901425834   1.7235741633911394E-005 | 106.14150625180567   1.8056874259708700E-009',
   ' 6.2 | 112.5720821116747    1.7888325279845352E-005 | 112.5721000018572    1.8572227158952792E-009',
   ' 6.3 | 119.30098769768054   1.8552319431271169E-005 | 119.30100625190959   1.9096103587301627E-009',
   ' 6.4 | 126.33758077230226   1.9227697712190239E-005 | 126.33760000196283   1.9628507430535791E-009',
   ' 6.5 | 133.69138633556478   1.9914435190754309E-005 | 133.69140625201692   2.0169442088713296E-009',
   ' 6.6 | 141.37207938749168   2.0612508294562404E-005 | 141.37210000207186   2.0718910198613827E-009',
   ' 6.7 | 149.38948492810524   2.1321894730780278E-005 | 149.38950625212766   2.1276914119461310E-009',
   ' 6.8 | 157.75357795742656   2.2042573410832600E-005 | 157.75360000218431   2.1843456626813307E-009',
   ' 6.9 | 166.47448347547559   2.2774524379529093E-005 | 166.47450625224182   2.2418538692114964E-009',
   ' 7.0 | 175.56247648227122   2.3517728748131961E-005 | 175.56250000230018   2.3002162119478697E-009',
   ' 7.1 | 185.02798197783133   2.4272168631683799E-005 | 185.02800625235939   2.3594327880349653E-009',
   ' 7.2 | 194.88157496217287   2.5037827090013121E-005 | 194.88160000241946   2.4195036529839342E-009',
   ' 7.3 | 205.13398043531189   2.5814688072139935E-005 | 205.13400625248039   2.4804289594504425E-009',
   ' 7.4 | 215.79607339726359   2.6602736364511603E-005 | 215.79610000254216   2.5422086519233389E-009',
   ' 7.5 | 226.87887884804241   2.7401957541861588E-005 | 226.8789062526048    2.6048428136693502E-009',
   ' 7.6 | 238.39357178766203   2.8212337921551534E-005 | 238.39360000266828   2.6683314308106887E-009',
   ' 7.7 | 250.35147721613543   2.9033864520425223E-005 | 250.35150625273262   2.7326745311029299E-009',
   ' 7.8 | 262.76407013347493   2.9866525014632384E-005 | 262.76410000279782   2.7978720729127105E-009',
   ' 7.9 | 275.64297553969224   3.0710307701520279E-005 | 275.64300625286387   2.8639240146066669E-009',
   ' 8.0 | 288.99996843479848   3.1565201464273107E-005 | 289.00000000293077   2.9308304116959505E-009',
   ' 8.1 | 302.8469738188042    3.2431195738452656E-005 | 302.84700625299853   2.9985912086694100E-009',
   ' 8.2 | 317.19606669171945   3.3308280481064712E-005 | 317.19610000306714   3.0672063777714698E-009',
   ' 8.3 | 332.05947205355379   3.4196446140943859E-005 | 332.05950625313661   3.1366757524686761E-009',
   ' 8.4 | 347.4495649043163    3.5095683631053420E-005 | 347.44960000320693   3.2069993050054535E-009',
   ' 8.5 | 363.37887024401562   3.6005984302978078E-005 | 363.3789062532781    3.2781770076262262E-009',
   ' 8.6 | 379.86006307266      3.6927339922498970E-005 | 379.86010000335013   3.3502087215531162E-009',
   ' 8.7 | 396.90596839025727   3.7859742646695338E-005 | 396.90600625342301   3.4230944745416991E-009',
   ' 8.8 | 414.52956119681491   3.8803185002850293E-005 | 414.52960000349674   3.4968340445473700E-009',
   ' 8.9 | 432.74396649234004   3.9757659867967199E-005 | 432.74400625357133   3.5714274593257045E-009',
   ' 9.0 | 451.56245927683945   4.0723160450173435E-005 | 451.56250000364678   3.6468744968320976E-009',
   ' 9.1 | 470.99846455031963   4.1699680270596007E-005 | 470.99850625372307   3.7231752403332763E-009',
   ' 9.2 | 491.06555731278675   4.2687213147124536E-005 | 491.06560000380022   3.8003296065625136E-009',
   ' 9.3 | 511.77746256424671   4.3685753178424047E-005 | 511.77750625387823   3.8783373179640535E-009',
   ' 9.4 | 533.14805530470515   4.4695294729002466E-005 | 533.14810000395708   3.9571985133157739E-009',
   ' 9.5 | 555.19136053416746   4.5715832415582636E-005 | 555.19140625403679   4.0369129150619187E-009',
   ' 9.6 | 577.92155325263878   4.6747361093835149E-005 | 577.92160000411735   4.1174805787136393E-009',
   ' 9.7 | 601.35295846012402   4.7789875846249164E-005 | 601.35300625419877   4.1989013932486330E-009',
   ' 9.8 | 625.50005115662789   4.8843371970141991E-005 | 625.50010000428104   4.2811752476445974E-009',
   ' 9.9 | 650.37745634215489   4.9907844967167492E-005 | 650.37750625436416   4.3643019753680790E-009',
   '10.0 | 675.99994901670932   5.0983290532380376E-005 | 676.00000000444813   4.4482815764190775E-009'],
  'LOWin32'=>
  ['time | approx (RK4)                     error (RK4) | approx (CashCarp)           error (CashCarp)',
   ' 0.0 |   1                  0.0000000000000000E+000 |   1                  0.0000000000000000E+000',
   ' 0.1 |   1.0050062486962987 1.3037013059814112E-009 |   1.0050062500579799 5.7979943979616366E-011',
   ' 0.2 |   1.0200999947846331 5.2153668509509130E-009 |   1.0201000001149894 1.1498935809615973E-010',
   ' 0.3 |   1.0455062382554288 1.1744571179949856E-008 |   1.0455062501711931 1.7119314104328820E-010',
   ' 0.4 |   1.0815999790671547 2.0932845317149160E-008 |   1.0816000002268003 2.2680025121412511E-010',
   ' 0.5 |   1.1289062171139842 3.2886015829025790E-008 |   1.1289062502820453 2.8204527602326834E-010',
   ' 0.6 |   1.1880999521926327 4.7807367258749858E-008 |   1.1881000003371434 3.3714335815303309E-010',
   ' 0.7 |   1.260006183976494  6.6023506035180896E-008 |   1.2600062503922305 3.9223046447052490E-010',
   ' 0.8 |   1.345599912002743  8.7997256956336666E-008 |   1.3456000004473014 4.4730143623338686E-010',
   ' 0.9 |   1.4460061356746575 1.1432534254170439E-007 |   1.4460062505021645 5.0216446940368892E-010',
   ' 1.0 |   1.5624998542781079 1.4572189208528642E-007 |   1.562500000556422  5.5642201924558515E-010',
   ' 1.1 |   1.6965060670087852 1.8299121482836210E-007 |   1.696506250609479  6.0947901619253647E-010',
   ' 1.2 |   1.8495997730055734 2.2699442658782182E-007 |   1.8496000006605788 6.6057883566384562E-010',
   ' 1.3 |   2.0235059713854679 2.7861453205137166E-007 |   2.0235062507088548 7.0885481468982436E-010',
   ' 1.4 |   2.2200996612762247 3.3872377532342957E-007 |   2.2201000007533893 7.5338931360829919E-010',
   ' 1.5 |   2.4414058418441128 4.0815588716789329E-007 |   2.4414062507932752 7.9327522393805860E-010',
   ' 1.6 |   2.6895995123153737 4.8768462628879031E-007 |   2.6896000008276624 8.2766237461708025E-010',
   ' 1.7 |   2.9670056719910384 5.7800896158754188E-007 |   2.9670062508557979 8.5579794531324971E-010',
   ' 1.8 |   3.2760993202555219 6.7974447814358671E-007 |   3.2761000008770513 8.7705133433590987E-010',
   ' 1.9 |   3.6195054565798763 7.9342012368173800E-007 |   3.6195062508909253 8.9092526043242637E-010',
   ' 2.0 |   3.9999990805207992 9.1947920074944393E-007 |   4.0000000008970593 8.9705931832079200E-010',
   ' 2.1 |   4.4205051917165142 1.0582834857959973E-006 |   4.4205062508952224 8.9522242570361232E-010',
   ' 2.2 |   4.884098789880548  1.2101194519936222E-006 |   4.8841000008853017 8.8530172168838073E-010',
   ' 2.3 |   5.3940048747942688 1.3752057312125220E-006 |   5.394006250867287  8.6728702735142105E-010',
   ' 2.4 |   5.9535984462988696 1.5537011304363191E-006 |   5.9536000008412548 8.4125485267164124E-010',
   ' 2.5 |   6.5664045042873078 1.7457126921562038E-006 |   6.5664062508073515 8.0735152547736777E-010',
   ' 2.6 |   7.236098048696558  1.9513034420167753E-006 |   7.2361000007657772 7.6577720510215275E-010',
   ' 2.7 |   7.9665040795004063 2.1704995937241525E-006 |   7.966506250716769  7.1676899832118224E-010',
   ' 2.8 |   8.7615975967029198 2.4032970801805484E-006 |   8.7616000006605947 6.6059475598012618E-010',
   ' 2.9 |   9.6255036003326465 2.6496673534697618E-006 |   9.6255062505975424 5.9754240271103765E-010',
   ' 3.0 |  10.562497090437552  2.9095624481849727E-006 |  10.562500000622926  6.2292572489131004E-010',
   ' 3.1 |  11.577003067080663  3.1829193373536513E-006 |  11.577006250649045  6.4904544325866675E-010',
   ' 3.2 |  12.673596530336369  3.4696636314742943E-006 |  12.67360000067591   6.7590954621471466E-010',
   ' 3.3 |  13.857002480287317  3.7697126827034716E-006 |  13.857006250703527  7.0352744983848137E-010',
   ' 3.4 |  15.132095917021839  4.0829781608100330E-006 |  15.13210000073191   7.3190999701905346E-010',
   ' 3.5 |  16.503901840631833  4.4093681673545992E-006 |  16.503906250761062  7.6106235202821892E-010',
   ' 3.6 |  17.977595251211049  4.7487889514030712E-006 |  17.977600000790989  7.9098932959098534E-010',
   ' 3.7 |  19.558501148853715  5.1011462852048467E-006 |  19.558506250821704  8.2170427580241512E-010',
   ' 3.8 |  21.252094533653447  5.4663465524889404E-006 |  21.252100000853211  8.5321130889604024E-010',
   ' 3.9 |  23.064000405702404  5.8442975959631382E-006 |  23.064006250885516  8.8551596957864298E-010',
   ' 4.0 |  24.999993765090635  6.2349093646781040E-006 |  25.000000000918622  9.1862167005130058E-010',
   ' 4.1 |  27.065999611905604  6.6380943963013223E-006 |  27.06600625095254   9.5254035908931556E-010',
   ' 4.2 |  29.268092946231836  7.0537681642647565E-006 |  29.268100000987268  9.8726764957701718E-010',
   ' 4.3 |  31.612498768150685  7.4818493151374704E-006 |  31.612506251022815  1.0228147911961472E-009',
   ' 4.4 |  34.105592077740182  7.9222598175464343E-006 |  34.10560000105918   1.0591802435122588E-009',
   ' 4.5 |  36.75389787507496   8.3749250404489828E-006 |  36.753906251096367  1.0963674620945163E-009',
   ' 4.6 |  39.564091160226224  8.8397737756477912E-006 |  39.564100001134392  1.1343919761874766E-009',
   ' 4.7 |  42.542996933261783  9.3167382166671475E-006 |  42.543006251173246  1.1732458615743013E-009',
   ' 4.8 |  45.697590194246096  9.8057539040866115E-006 |  45.697600001212933  1.2129333058774616E-009',
   ' 4.9 |  49.034995943240354  1.0306759645643121E-005 |  49.035006251253456  1.2534563352539774E-009',
   ' 5.0 |  52.562489180302582  1.0819697417552981E-005 |  52.562500001294822  1.2948219961506080E-009',
   ' 5.1 |  56.287494905487747  1.1344512252771388E-005 |  56.287506251337028  1.3370280715907512E-009',
   ' 5.2 |  60.21758811884788   1.1881152120203631E-005 |  60.21760000138007   1.3800702317046110E-009',
   ' 5.3 |  64.360493820432202  1.2429567798538654E-005 |  64.360506251423956  1.4239562307061249E-009',
   ' 5.4 |  68.724087010287253  1.2989712747393800E-005 |  68.724100001468685  1.4686845975497853E-009',
   ' 5.5 |  73.316392688457022  1.3561542977866270E-005 |  73.316406251514266  1.5142659279265835E-009',
   ' 5.6 |  78.145585854983076  1.4145016924184406E-005 |  78.145600001560695  1.5606944833712610E-009',
   ' 5.7 |  83.219991509904682  1.4740095317676560E-005 |  83.220006251607956  1.6079553383230305E-009',
   ' 5.8 |  88.548084653258936  1.5346741064160840E-005 |  88.548100001656067  1.6560669016674190E-009',
   ' 5.9 |  94.138490285080875  1.5964919125165122E-005 |  94.138506251705067  1.7050668030260674E-009',
   ' 6.0 |  99.999983405403597  1.6594596403678163E-005 | 100.00000000175487   1.7548697633928967E-009',
   ' 6.1 | 106.14148901425837   1.7235741634695489E-005 | 106.14150625180552   1.8055233766411938E-009',
   ' 6.2 | 112.57208211167472   1.7888325280691897E-005 | 112.57210000185702   1.8570233753512078E-009',
   ' 6.3 | 119.30098769768057   1.8552319432180164E-005 | 119.3010062519094    1.9093988543050777E-009',
   ' 6.4 | 126.33758077230229   1.9227697713182501E-005 | 126.33760000196261   1.9626128985872349E-009',
   ' 6.5 | 133.69138633556481   1.9914435191822899E-005 | 133.69140625201669   2.0166903563767491E-009',
   ' 6.6 | 141.3720793874917    2.0612508295700382E-005 | 141.37210000207162   2.0716184739866250E-009',
   ' 6.7 | 149.38948492810527   2.1321894732001523E-005 | 149.3895062521274    2.1274036421381481E-009',
   ' 6.8 | 157.75357795742659   2.2042573412150990E-005 | 157.75360000218402   2.1840146358087509E-009',
   ' 6.9 | 166.47448347547562   2.2774524380958505E-005 | 166.47450625224147   2.2414678030324708E-009',
   ' 7.0 | 175.56247648227125   2.3517728749658517E-005 | 175.56250000229977   2.2997703047478169E-009',
   ' 7.1 | 185.02798197783137   2.4272168633279745E-005 | 185.02800625235895   2.3589484948738360E-009',
   ' 7.2 | 194.88157496217291   2.5037827091706211E-005 | 194.88160000241902   2.4190194014561683E-009',
   ' 7.3 | 205.13398043531193   2.5814688073971803E-005 | 205.13400625247991   2.4799056835833611E-009',
   ' 7.4 | 215.79607339726363   2.6602736366454494E-005 | 215.79610000254161   2.5416059534766333E-009',
   ' 7.5 | 226.87887884804246   2.7401957543915501E-005 | 226.8789062526042    2.6041949013899668E-009',
   ' 7.6 | 238.39357178766208   2.8212337923730346E-005 | 238.39360000266768   2.6676810760406511E-009',
   ' 7.7 | 250.35147721613548   2.9033864522742814E-005 | 250.35150625273201   2.7320070650205253E-009',
   ' 7.8 | 262.76407013347498   2.9866525017047119E-005 | 262.76410000279719   2.7971913674207372E-009',
   ' 7.9 | 275.6429755396923    3.0710307704046036E-005 | 275.64300625286319   2.8631864934514084E-009',
   ' 8.0 | 288.99996843479853   3.1565201466993154E-005 | 289.00000000293005   2.9300493420425511E-009',
   ' 8.1 | 302.84697381880426   3.2431195741478014E-005 | 302.8470062529978    2.9977992310747936E-009',
   ' 8.2 | 317.19606669171952   3.3308280484450892E-005 | 317.19610000306642   3.0664177308459273E-009',
   ' 8.3 | 332.05947205355386   3.4196446144579840E-005 | 332.05950625313579   3.1357920426966501E-009',
   ' 8.4 | 347.44956490431637   3.5095683634939201E-005 | 347.44960000320606   3.2060558929902783E-009',
   ' 8.5 | 363.37887024401569   3.6005984307224681E-005 | 363.37890625327719   3.2771915181584177E-009',
   ' 8.6 | 379.86006307266008   3.6927339927050884E-005 | 379.86010000334909   3.3490868689423081E-009',
   ' 8.7 | 396.90596839025735   3.7859742651663586E-005 | 396.90600625342188   3.4218763100835048E-009',
   ' 8.8 | 414.52956119681499   3.8803185008151608E-005 | 414.52960000349555   3.4955429939476090E-009',
   ' 8.9 | 432.74396649234013   3.9757659873712603E-005 | 432.74400625356998   3.5699753986317972E-009',
   ' 9.0 | 451.56245927683955   4.0723160456251906E-005 | 451.56250000364531   3.6453088048116200E-009',
   ' 9.1 | 470.99846455031973   4.1699680277118567E-005 | 470.99850625372147   3.7214700765453301E-009',
   ' 9.2 | 491.06555731278685   4.2687213154118941E-005 | 491.06560000379852   3.7985191103651061E-009',
   ' 9.3 | 511.77746256424682   4.3685753185807030E-005 | 511.77750625387648   3.8764780829758649E-009',
   ' 9.4 | 533.14805530470527   4.4695294736829538E-005 | 533.14810000395516   3.9551610320209818E-009',
   ' 9.5 | 555.19136053416758   4.5715832423853797E-005 | 555.19140625403497   4.0349695806796149E-009',
   ' 9.6 | 577.9215532526389    4.6747361102661422E-005 | 577.92160000411536   4.1153581653574633E-009',
   ' 9.7 | 601.35295846012415   4.7789875855519526E-005 | 601.35300625419654   4.1965395047860454E-009',
   ' 9.8 | 625.50005115662802   4.8843371980022976E-005 | 625.50010000427869   4.2786884590917396E-009',
   ' 9.9 | 650.37745634215503   4.9907844977603588E-005 | 650.37750625436172   4.3617150446983999E-009',
   '10.0 | 675.99994901670946   5.0983290543371584E-005 | 676.00000000444561   4.4456053283070673E-009'],
  'LOWin64'=>
  ['time | approx (RK4)                 error (RK4) | approx (CashCarp)       error (CashCarp)',
   ' 0.0 |   1                0.00000000000000E+000 |   1                0.00000000000000E+000',
   ' 0.1 |   1.0050062486963  1.30370114703737E-009 |   1.00500625005798 5.79800651934193E-011',
   ' 0.2 |   1.02009999478463 5.21536658304456E-009 |   1.02010000011499 1.14989351374106E-010',
   ' 0.3 |   1.04550623825543 1.17445706493413E-008 |   1.04550625017119 1.71193281772730E-010',
   ' 0.4 |   1.08159997906715 2.09328452349666E-008 |   1.0816000002268  2.26800134228711E-010',
   ' 0.5 |   1.12890621711398 3.28860156884048E-008 |   1.12890625028205 2.82045276023268E-010',
   ' 0.6 |   1.18809995219263 4.78073671761337E-008 |   1.18810000033714 3.37143202244761E-010',
   ' 0.7 |   1.26000618397649 6.60235057736713E-008 |   1.26000625039223 3.92230248280612E-010',
   ' 0.8 |   1.34559991200274 8.79972565925868E-008 |   1.3456000004473  4.47301085060303E-010',
   ' 0.9 |   1.44600613567466 1.14325342082111E-007 |   1.44600625050216 5.02164310134390E-010',
   ' 1.0 |   1.56249985427811 1.45721891220418E-007 |   1.56250000055642 5.56422241615451E-010',
   ' 1.1 |   1.69650606700879 1.82991214181527E-007 |   1.69650625060948 6.09478911783867E-010',
   ' 1.2 |   1.84959977300557 2.26994425922555E-007 |   1.84960000066058 6.60578702849079E-010',
   ' 1.3 |   2.02350597138547 2.78614531445953E-007 |   2.02350625070886 7.08854308584250E-010',
   ' 1.4 |   2.22009966127623 3.38723775250571E-007 |   2.22010000075339 7.53388462726434E-010',
   ' 1.5 |   2.44140584184411 4.08155887310357E-007 |   2.44140625079328 7.93274335109118E-010',
   ' 1.6 |   2.68959951231538 4.87684626460094E-007 |   2.68960000082766 8.27661050806228E-010',
   ' 1.7 |   2.96700567199104 5.78008962026644E-007 |   2.9670062508558  8.55796322696278E-010',
   ' 1.8 |   3.27609932025552 6.79744480258648E-007 |   3.27610000087705 8.77048211833653E-010',
   ' 1.9 |   3.61950545657988 7.93420125599908E-007 |   3.61950625089093 8.90922002838579E-010',
   ' 2.0 |   3.9999990805208  9.19479203442819E-007 |   4.00000000089706 8.97053986648189E-010',
   ' 2.1 |   4.42050519171652 1.05828348750947E-006 |   4.42050625089522 8.95218121854668E-010',
   ' 2.2 |   4.88409878988055 1.21011945264371E-006 |   4.8841000008853  8.85298057085038E-010',
   ' 2.3 |   5.39400487479427 1.37520572973671E-006 |   5.39400625086729 8.67285798733519E-010',
   ' 2.4 |   5.95359844629887 1.55370112686626E-006 |   5.95360000084126 8.41255953787368E-010',
   ' 2.5 |   6.56640450428731 1.74571268551915E-006 |   6.56640625080735 8.07355071685834E-010',
   ' 2.6 |   7.23609804869656 1.95130343261241E-006 |   7.23610000076578 7.65782992573349E-010',
   ' 2.7 |   7.96650407950041 2.17049958095572E-006 |   7.96650625071677 7.16778636444815E-010',
   ' 2.8 |   8.76159759670292 2.40329706535647E-006 |   8.7616000006606  6.60607568647720E-010',
   ' 2.9 |   9.62550360033265 2.64966733354299E-006 |   9.62550625059755 5.97562888060565E-010',
   ' 3.0 |  10.5624970904376  2.90956242743334E-006 |  10.5625000006229  6.22948803652434E-010',
   ' 3.1 |  11.5770030670807  3.18291930767600E-006 |  11.577006250649   6.49077236403173E-010',
   ' 3.2 |  12.6735965303364  3.46966359643375E-006 |  12.6736000006759  6.75948186312780E-010',
   ' 3.3 |  13.8570024802873  3.76971264159920E-006 |  13.8570062507035  7.03572311522294E-010',
   ' 3.4 |  15.1320959170218  4.08297811560487E-006 |  15.1321000007319  7.31962046529588E-010',
   ' 3.5 |  16.5039018406318  4.40936811330062E-006 |  16.5039062507611  7.61126273118862E-010',
   ' 3.6 |  17.977595251211   4.74878889278330E-006 |  17.977600000791   7.91061438576435E-010',
   ' 3.7 |  19.5585011488537  5.10114621832258E-006 |  19.5585062508217  8.21785306470701E-010',
   ' 3.8 |  21.2520945336534  5.46634647591304E-006 |  21.2521000008532  8.53304982229020E-010',
   ' 3.9 |  23.0640004057024  5.84429750816184E-006 |  23.0640062508855  8.85624018565068E-010',
   ' 4.0 |  24.9999937650906  6.23490926798809E-006 |  25.0000000009186  9.18745968192525E-010',
   ' 4.1 |  27.0659996119056  6.63809429468643E-006 |  27.0660062509526  9.52674383825070E-010',
   ' 4.2 |  29.2680929462318  7.05376805498759E-006 |  29.2681000009873  9.87416370890060E-010',
   ' 4.3 |  31.6124987681507  7.48184919174832E-006 |  31.6125062510228  1.02298614024221E-009',
   ' 4.4 |  34.1055920777402  7.92225966961269E-006 |  34.1056000010592  1.05936948102681E-009',
   ' 4.5 |  36.7538978750749  8.37492488159342E-006 |  36.7539062510964  1.09657349867121E-009',
   ' 4.6 |  39.5640911602262  8.83977360643939E-006 |  39.5641000011344  1.13461595674380E-009',
   ' 4.7 |  42.5429969332617  9.31673802284649E-006 |  42.5430062511733  1.17350396067195E-009',
   ' 4.8 |  45.697590194246   9.80575369169401E-006 |  45.6976000012129  1.21321619417358E-009',
   ' 4.9 |  49.0349959432403  1.03067594139361E-005 |  49.0350062512535  1.25376686810341E-009',
   ' 5.0 |  52.5624891803025  1.08196971666530E-005 |  52.5625000012948  1.29515598246144E-009',
   ' 5.1 |  56.2874949054877  1.13445119822586E-005 |  56.287506251337   1.33739774810238E-009',
   ' 5.2 |  60.2175881188478  1.18811518277084E-005 |  60.2176000013801  1.38047084874415E-009',
   ' 5.3 |  64.3604938204321  1.24295674623909E-005 |  64.360506251424   1.42441081152356E-009',
   ' 5.4 |  68.7240870102871  1.29897124026002E-005 |  68.7241000014687  1.46916079302173E-009',
   ' 5.5 |  73.3163926884569  1.35615426160030E-005 |  73.3164062515143  1.51476342580281E-009',
   ' 5.6 |  78.1455858549829  1.41450164932166E-005 |  78.1456000015607  1.56127555328567E-009',
   ' 5.7 |  83.2199915099045  1.47400948549148E-005 |  83.220006251608   1.60858348863258E-009',
   ' 5.8 |  88.5480846532588  1.53467405965557E-005 |  88.5481000016561  1.65671565355296E-009',
   ' 5.9 |  94.1384902850807  1.59649186315391E-005 |  94.1385062517051  1.70575731317513E-009',
   ' 6.0 |  99.9999834054034  1.65945958769953E-005 | 100.000000001755   1.75562320237077E-009',
   ' 6.1 | 106.141489014258   1.72357410690438E-005 | 106.141506251806   1.80634174284933E-009',
   ' 6.2 | 112.572082111674   1.78883246633177E-005 | 112.572100001857   1.85791293461079E-009',
   ' 6.3 | 119.30098769768    1.85523187781200E-005 | 119.301006251909   1.91035098850989E-009',
   ' 6.4 | 126.337580772302   1.92276970096827E-005 | 126.337600001963   1.96362748283718E-009',
   ' 6.5 | 133.691386335564   1.99144344321667E-005 | 133.691406252017   2.01779926101153E-009',
   ' 6.6 | 141.372079387491   2.06125074839747E-005 | 141.372100002072   2.07276684704993E-009',
   ' 6.7 | 149.389484928105   2.13218938824866E-005 | 149.389506252127   2.12864392779011E-009',
   ' 6.8 | 157.753577957426   2.20425724819506E-005 | 157.753600002184   2.18537365981319E-009',
   ' 6.9 | 166.474483475475   2.27745234724352E-005 | 166.474506252242   2.24287077799090E-009',
   ' 7.0 | 175.562476482271   2.35177277829735E-005 | 175.5625000023     2.30124896916095E-009',
   ' 7.1 | 185.027981977831   2.42721675931534E-005 | 185.028006252359   2.36053665503277E-009',
   ' 7.2 | 194.881574962172   2.50378259920581E-005 | 194.881600002419   2.42070541389694E-009',
   ' 7.3 | 205.133980435311   2.58146868929998E-005 | 205.13400625248    2.48172682404402E-009',
   ' 7.4 | 215.796073397263   2.66027351187859E-005 | 215.796100002542   2.54351562034572E-009',
   ' 7.5 | 226.878878848042   2.74019562311878E-005 | 226.878906252604   2.60621391134919E-009',
   ' 7.6 | 238.393571787661   2.82123365593634E-005 | 238.393600002668   2.66982169705443E-009',
   ' 7.7 | 250.351477216135   2.90338630577480E-005 | 250.351506252732   2.73428213404259E-009',
   ' 7.8 | 262.764070133474   2.98665233913198E-005 | 262.764100002797   2.79965206573252E-009',
   ' 7.9 | 275.642975539692   3.07103059640212E-005 | 275.643006252863   2.86576096186764E-009',
   ' 8.0 | 288.999968434798   3.15651996629640E-005 | 289.00000000293    2.93277935270453E-009',
   ' 8.1 | 302.846973818803   3.24311940858024E-005 | 302.847006252998   3.00047986456775E-009',
   ' 8.2 | 317.196066691719   3.33082790575645E-005 | 317.196100003066   3.06891934087616E-009',
   ' 8.3 | 332.059472053553   3.41964449148691E-005 | 332.059506253136   3.13815462504863E-009',
   ' 8.4 | 347.449564904315   3.50956825627691E-005 | 347.449600003206   3.20835624734173E-009',
   ' 8.5 | 363.378870244014   3.60059834747517E-005 | 363.378906253277   3.27929683408001E-009',
   ' 8.6 | 379.860063072659   3.69273392379910E-005 | 379.860100003349   3.35103322868235E-009',
   ' 8.7 | 396.905968390256   3.78597421217819E-005 | 396.906006253422   3.42367911798647E-009',
   ' 8.8 | 414.529561196814   3.88031847933235E-005 | 414.529600003496   3.49706397173577E-009',
   ' 8.9 | 432.743966492339   3.97576598629712E-005 | 432.74400625357    3.57130147676799E-009',
   ' 9.0 | 451.562459276838   4.07231606232017E-005 | 451.562500003645   3.64644847650197E-009',
   ' 9.1 | 470.998464550318   4.16996808212389E-005 | 470.998506253722   3.72227759726229E-009',
   ' 9.2 | 491.065557312786   4.26872139769330E-005 | 491.065600003799   3.79907305614324E-009',
   ' 9.3 | 511.777462564245   4.36857543490987E-005 | 511.777506253877   3.87677800972597E-009',
   ' 9.4 | 533.148055304704   4.46952963102376E-005 | 533.148100003955   3.95516508433502E-009',
   ' 9.5 | 555.191360534166   4.57158342896946E-005 | 555.191406254035   4.03474587074015E-009',
   ' 9.6 | 577.921553252637   4.67473633989357E-005 | 577.921600004115   4.11466771765845E-009',
   ' 9.7 | 601.352958460123   4.77898784083663E-005 | 601.353006254197   4.19561274611624E-009',
   ' 9.8 | 625.500051156627   4.88433748841999E-005 | 625.500100004279   4.27735358243808E-009',
   ' 9.9 | 650.377456342154   4.99078482789628E-005 | 650.377506254362   4.36000391346170E-009',
   '10.0 | 675.999949016708   5.09832944999289E-005 | 676.000000004446   4.44333636551164E-009']].toMap,
 'roman'=>
 ['MMXV       (roman)  =       2015 (arabic)','MCMXC      (roman)  =       1990 (arabic)',
  'MMVIII     (roman)  =       2008 (arabic)','MDCLXVI    (roman)  =       1666 (arabic)',
  '      2000 (arabic) = M          (roman)','      1989 (arabic) = MCMLXXXIX  (roman)',
  '        23 (arabic) = XXIII      (roman)','      1666 (arabic) = MDCLXVI    (roman)'],
 'root'=>
 ['FDLinux'=>
  ['See http://rosettacode.org/wiki/Roots_of_a_function','Analyzing $x^3-3*$x^2+2*$x',
   'Root found near -1.67047794380762227866E-52','Root found at   1.0','Root found at   2.0'],
  'FDWin32'=>
  ['See http://rosettacode.org/wiki/Roots_of_a_function','Analyzing $x^3-3*$x^2+2*$x','Root found at   0.0',
   'Root found at   1.0','Root found at   2.0'],
  'FDWin64'=>
  ['See http://rosettacode.org/wiki/Roots_of_a_function','Analyzing $x^3-3*$x^2+2*$x','Root found at   0.0',
   'Root found at   1.0','Root found at   2.0'],
  'FOLinux'=>
  ['See http://rosettacode.org/wiki/Roots_of_a_function','Analyzing $x^3-3*$x^2+2*$x',
   'Root found near -1.67047794380762227866E-52','Root found at   1.0','Root found at   2.0'],
  'FOWin32'=>
  ['See http://rosettacode.org/wiki/Roots_of_a_function','Analyzing $x^3-3*$x^2+2*$x','Root found at   0.0',
   'Root found at   1.0','Root found at   2.0'],
  'FOWin64'=>
  ['See http://rosettacode.org/wiki/Roots_of_a_function','Analyzing $x^3-3*$x^2+2*$x','Root found at   0.0',
   'Root found at   1.0','Root found at   2.0'],
  'LDLinux'=>
  ['See http://rosettacode.org/wiki/Roots_of_a_function','Analyzing $x^3-3*$x^2+2*$x',
   'Root found near -1.67047794380762227866E-52','Root found at   1.0','Root found at   2.0'],
  'LDWin32'=>
  ['See http://rosettacode.org/wiki/Roots_of_a_function','Analyzing $x^3-3*$x^2+2*$x','Root found at   0.0',
   'Root found at   1.0','Root found at   2.0'],
  'LDWin64'=>
  ['See http://rosettacode.org/wiki/Roots_of_a_function','Analyzing $x^3-3*$x^2+2*$x','Root found at   0.0',
   'Root found at   1.0','Root found at   2.0'],
  'LOLinux'=>
  ['See http://rosettacode.org/wiki/Roots_of_a_function','Analyzing $x^3-3*$x^2+2*$x',
   'Root found near -1.67047794380762227866E-52','Root found at   1.0','Root found at   2.0'],
  'LOWin32'=>
  ['See http://rosettacode.org/wiki/Roots_of_a_function','Analyzing $x^3-3*$x^2+2*$x','Root found at   0.0',
   'Root found at   1.0','Root found at   2.0'],
  'LOWin64'=>
  ['See http://rosettacode.org/wiki/Roots_of_a_function','Analyzing $x^3-3*$x^2+2*$x','Root found at   0.0',
   'Root found at   1.0','Root found at   2.0']].toMap,
 'rotatingCube'=>
 ['FDLinux'=>
  ['png hash: F47A32011FFA2691F53DF384435D29B9BFF469AA7D191EFA74BFCB7926ADE1E0'],
  'FDWin32'=>
  ['png hash: 768F93F928DDF8FBA310BF2F9B173F35CDB50F039814E4E53EFE3BB80BBA3DD8'],
  'FDWin64'=>
  ['png hash: F47A32011FFA2691F53DF384435D29B9BFF469AA7D191EFA74BFCB7926ADE1E0'],
  'FOLinux'=>
  ['png hash: F47A32011FFA2691F53DF384435D29B9BFF469AA7D191EFA74BFCB7926ADE1E0'],
  'FOWin32'=>
  ['png hash: 768F93F928DDF8FBA310BF2F9B173F35CDB50F039814E4E53EFE3BB80BBA3DD8'],
  'FOWin64'=>
  ['png hash: F47A32011FFA2691F53DF384435D29B9BFF469AA7D191EFA74BFCB7926ADE1E0']].toMap,
 'rsa'=>
 ['Creating key pair',' private key: [128143,593].toKey','  public key: [128143,65537].toKey','',
  'Cipher: 102030405060708090 with public...','        104399454243902252327','Decipher with private...',
  '        102030405060708090','','Cipher: 102030405060708090 with private...','        33852323349932410086',
  'Decipher with public...','        102030405060708090'],
 'safeAndUnsafePrimes'=>
 ['The first 35 safe primes are: ',
  '  5 7 11 23 47 59 83 107 167 179 227 263 347 359 383 467 479 503 563 587 719 839 863 887 983 1019 1187 1283 1307 1319 1367 1439 1487 1523 1619',
  'The first 40 unsafe primes are: ',
  '  2 3 13 17 19 29 31 37 41 43 53 61 67 71 73 79 89 97 101 103 109 113 127 131 137 139 149 151 157 163 173 181 191 193 197',
  'There are  4324 safe primes below  1000000','There are 30657 safe primes below 10000000',
  'There are  74174 unsafe primes below  1000000','There are 633922 unsafe primes below 10000000'],
 'selfRefSeq'=>
 [
  '0099, 2029, 102219, 10212219, 10313219, 1031122319, 1041222319, 103132131419, 105112331419, 10511223141519, 10612213142519, 1051321314151619, 1071122314251619, 106132131415161719, 108112231415261719, 10713213141516171819, 10911223141516271819, 10813213141516171829, 10812223141516172819, 10714213141516172819, 10812213241516271819'
 ],
 'semiprime'=>
 ['[4,6,9,10,14,15,21,22,25,26,33,34,35,38,39,46,49,51,55,57,58,62,65,69,74,77,82,85,86,87,91,93,94,95]'],
 'semordnilap'=>
 ['Found 244 Semordnilaps','Examples: naps  , pans  , snap, span','          par   , rap','          elbert, treble',
  '          saab  , baas','          in    , ni','Longest : naps  , pans  , snap  , span',
  '          pots  , spot  , stop  , tops','          parts , sprat , strap , tarps','          loops , pools , sloop , spool',
  '          drawer, warder, redraw, reward'],
 'sequenceOfNonSquares'=>
 ['OEIS: A000037 starts with 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, ...',
  '  The series contains no squares','  The series contains all non-square integers'],
 'setConsolidation'=>
 ['Consolidation of [{A,B} {C,D}]','              is [{C,D},{A,B}]','Consolidation of [{A,B} {B,C}]',
  '              is [{A,B,C}]','Consolidation of [{A,B} {C,D} {D,B}]','              is [{A,B,C,D}]',
  'Consolidation of [{h,i,k} {a,b} {c,d} {d,b} {f,g,h}]','              is [{f,g,h,i,k},{a,b,c,d}]'],
 'shannonEntropy'=>
 ['FDLinux'=>
  ['1.84643934467101550768'],
  'FDWin32'=>
  ['1.84643934467101549337'],
  'FDWin64'=>
  ['1.8464393446710154'],
  'FOLinux'=>
  ['1.84643934467101550768'],
  'FOWin32'=>
  ['1.84643934467101549337'],
  'FOWin64'=>
  ['1.8464393446710154'],
  'LDLinux'=>
  ['1.84643934467101550768'],
  'LDWin32'=>
  ['1.84643934467101549337'],
  'LDWin64'=>
  ['1.8464393446710154'],
  'LOLinux'=>
  ['1.84643934467101550768'],
  'LOWin32'=>
  ['1.84643934467101549337'],
  'LOWin64'=>
  ['1.8464393446710154']].toMap,
 'sierpinskiCarpet'=>
 [
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][]',
  '[]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  []',
  '[][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][]',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][]',
  '[]  [][]  [][]  []                  []  [][]  [][]  [][]  [][]  [][]  []                  []  [][]  [][]  [][]  [][]  [][]  []                  []  [][]  [][]  []',
  '[][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][]',
  '[][][]      [][][]                  [][][]      [][][][][][]      [][][]                  [][][]      [][][][][][]      [][][]                  [][][]      [][][]',
  '[]  []      []  []                  []  []      []  [][]  []      []  []                  []  []      []  [][]  []      []  []                  []  []      []  []',
  '[][][]      [][][]                  [][][]      [][][][][][]      [][][]                  [][][]      [][][][][][]      [][][]                  [][][]      [][][]',
  '[][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][]',
  '[]  [][]  [][]  []                  []  [][]  [][]  [][]  [][]  [][]  []                  []  [][]  [][]  [][]  [][]  [][]  []                  []  [][]  [][]  []',
  '[][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][]',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][]',
  '[]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  []',
  '[][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][]',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][]                                                      [][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []                                                      []  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][]                                                      [][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[][][]      [][][][][][]      [][][][][][]      [][][]                                                      [][][]      [][][][][][]      [][][][][][]      [][][]',
  '[]  []      []  [][]  []      []  [][]  []      []  []                                                      []  []      []  [][]  []      []  [][]  []      []  []',
  '[][][]      [][][][][][]      [][][][][][]      [][][]                                                      [][][]      [][][][][][]      [][][][][][]      [][][]',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][]                                                      [][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []                                                      []  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][]                                                      [][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[][][][][][][][][]                  [][][][][][][][][]                                                      [][][][][][][][][]                  [][][][][][][][][]',
  '[]  [][]  [][]  []                  []  [][]  [][]  []                                                      []  [][]  [][]  []                  []  [][]  [][]  []',
  '[][][][][][][][][]                  [][][][][][][][][]                                                      [][][][][][][][][]                  [][][][][][][][][]',
  '[][][]      [][][]                  [][][]      [][][]                                                      [][][]      [][][]                  [][][]      [][][]',
  '[]  []      []  []                  []  []      []  []                                                      []  []      []  []                  []  []      []  []',
  '[][][]      [][][]                  [][][]      [][][]                                                      [][][]      [][][]                  [][][]      [][][]',
  '[][][][][][][][][]                  [][][][][][][][][]                                                      [][][][][][][][][]                  [][][][][][][][][]',
  '[]  [][]  [][]  []                  []  [][]  [][]  []                                                      []  [][]  [][]  []                  []  [][]  [][]  []',
  '[][][][][][][][][]                  [][][][][][][][][]                                                      [][][][][][][][][]                  [][][][][][][][][]',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][]                                                      [][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []                                                      []  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][]                                                      [][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[][][]      [][][][][][]      [][][][][][]      [][][]                                                      [][][]      [][][][][][]      [][][][][][]      [][][]',
  '[]  []      []  [][]  []      []  [][]  []      []  []                                                      []  []      []  [][]  []      []  [][]  []      []  []',
  '[][][]      [][][][][][]      [][][][][][]      [][][]                                                      [][][]      [][][][][][]      [][][][][][]      [][][]',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][]                                                      [][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []                                                      []  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][]                                                      [][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][]',
  '[]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  []',
  '[][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][]',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][]',
  '[]  [][]  [][]  []                  []  [][]  [][]  [][]  [][]  [][]  []                  []  [][]  [][]  [][]  [][]  [][]  []                  []  [][]  [][]  []',
  '[][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][]',
  '[][][]      [][][]                  [][][]      [][][][][][]      [][][]                  [][][]      [][][][][][]      [][][]                  [][][]      [][][]',
  '[]  []      []  []                  []  []      []  [][]  []      []  []                  []  []      []  [][]  []      []  []                  []  []      []  []',
  '[][][]      [][][]                  [][][]      [][][][][][]      [][][]                  [][][]      [][][][][][]      [][][]                  [][][]      [][][]',
  '[][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][]',
  '[]  [][]  [][]  []                  []  [][]  [][]  [][]  [][]  [][]  []                  []  [][]  [][]  [][]  [][]  [][]  []                  []  [][]  [][]  []',
  '[][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][]',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][]',
  '[]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  []',
  '[][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][]',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]'
 ],
 'sierpinskiCurve'=>
 ['png hash: 218DBE2CB5C79809DFCB3B53287D7750C3DACB43B581B27DC007ED214F171AEE'],
 'sierpinskiTriangle'=>
 ['                               A                                                               ',
  '                              A A                                                             ',
  '                             A   A                                                           ',
  '                            A A A A                                                         ',
  '                           A       A                                                       ',
  '                          A A     A A                                                     ',
  '                         A   A   A   A                                                   ',
  '                        A A A A A A A A                                                 ',
  '                       A               A                                               ',
  '                      A A             A A                                             ',
  '                     A   A           A   A                                           ',
  '                    A A A A         A A A A                                         ',
  '                   A       A       A       A                                       ',
  '                  A A     A A     A A     A A                                     ',
  '                 A   A   A   A   A   A   A   A                                   ',
  '                A A A A A A A A A A A A A A A A                                 ',
  '               A                               A                               ',
  '              A A                             A A                             ',
  '             A   A                           A   A                           ',
  '            A A A A                         A A A A                         ',
  '           A       A                       A       A                       ',
  '          A A     A A                     A A     A A                     ',
  '         A   A   A   A                   A   A   A   A                   ',
  '        A A A A A A A A                 A A A A A A A A                 ',
  '       A               A               A               A               ',
  '      A A             A A             A A             A A             ',
  '     A   A           A   A           A   A           A   A           ',
  '    A A A A         A A A A         A A A A         A A A A         ',
  '   A       A       A       A       A       A       A       A       ',
  '  A A     A A     A A     A A     A A     A A     A A     A A     ',
  ' A   A   A   A   A   A   A   A   A   A   A   A   A   A   A   A   ',
  'A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A '],
 'smithNumbers'=>
 [
  '[4,22,27,58,85,94,121,166,202,265,274,319,346,355,378,382,391,438,454,483,517,526,535,562,576,588,627,634,636,645,648,654,663,666,690,706,728,729,762,778,825,852,861,895,913,915,922,958,985,1086,1111,1165,1219,1255,1282,1284,1376,1449,1507,1581,1626,1633,1642,1678,1736,1755,1776,1795,1822,1842,1858,1872,1881,1894,1903,1908,1921,1935,1952,1962,1966,2038,2067,2079,2155,2173,2182,2218,2227,2265,2286,2326,2362,2366,2373,2409,2434,2461,2475,2484,2515,2556,2576,2578,2583,2605,2614,2679,2688,2722,2745,2751,2785,2839,2888,2902,2911,2934,2944,2958,2964,2965,2970,2974,3046,3091,3138,3168,3174,3226,3246,3258,3294,3345,3366,3390,3442,3505,3564,3595,3615,3622,3649,3663,3690,3694,3802,3852,3864,3865,3930,3946,3973,4054,4126,4162,4173,4185,4189,4191,4198,4209,4279,4306,4369,4414,4428,4464,4472,4557,4592,4594,4702,4743,4765,4788,4794,4832,4855,4880,4918,4954,4959,4960,4974,4981,5062,5071,5088,5098,5172,5242,5248,5253,5269,5298,5305,5386,5388,5397,5422,5458,5485,5526,5539,5602,5638,5642,5674,5772,5818,5854,5874,5915,5926,5935,5936,5946,5998,6036,6054,6084,6096,6115,6171,6178,6187,6188,6252,6259,6295,6315,6344,6385,6439,6457,6502,6531,6567,6583,6585,6603,6684,6693,6702,6718,6760,6816,6835,6855,6880,6934,6981,7026,7051,7062,7068,7078,7089,7119,7136,7186,7195,7227,7249,7287,7339,7402,7438,7447,7465,7503,7627,7674,7683,7695,7712,7726,7762,7764,7782,7784,7809,7824,7834,7915,7952,7978,8005,8014,8023,8073,8077,8095,8149,8154,8158,8185,8196,8253,8257,8277,8307,8347,8372,8412,8421,8466,8518,8545,8568,8628,8653,8680,8736,8754,8766,8790,8792,8851,8864,8874,8883,8901,8914,9015,9031,9036,9094,9166,9184,9193,9229,9274,9276,9285,9294,9296,9301,9330,9346,9355,9382,9386,9387,9396,9414,9427,9483,9522,9535,9571,9598,9633,9634,9639,9648,9657,9684,9708,9717,9735,9742,9760,9778,9840,9843,9849,9861,9880,9895,9924,9942,9968,9975,9985]'
 ],
 'sternBrocot'=>
 ['Stern-Brocot seqence','  First 15: [1,1,2,1,3,2,3,1,4,3,5,2,5,3,4]','    1 first occurs at index    1',
  '    2 first occurs at index    3','    3 first occurs at index    5','    4 first occurs at index    9',
  '    5 first occurs at index   11','    6 first occurs at index   33','    7 first occurs at index   19',
  '    8 first occurs at index   21','    9 first occurs at index   35','   10 first occurs at index   39',
  '  100 first occurs at index 1179','Correct: The first 999 consecutive pairs are relative prime!'],
 'subGen'=>
 ['220 : 467478574','221 : 512932792','222 : 539453717'],
 'sudoku'=>
 ['Generated a riddle with difficulty: 54',' 8       | 3       |    2  6 ','       6 | 2       | 4       ',
  '         |       8 |         ','---------+---------+---------','    9    |    2    |       8 ',
  '    2    | 6       |    7    ',' 1  7    | 8  4    |    5    ','---------+---------+---------',
  ' 4       | 7  8  1 |       3 ','         | 4  3    |       1 ','         |         |         '],
 'sumTo100'=>
 ['Show all solutions that sum to 100','  100 = 123+45-67+8-9','  100 = 123+4-5+67-89','  100 = 123-45-67+89',
  '  100 = 123-4-5-6-7+8-9','  100 = 12+3+4+5-6-7+89','  100 = 12+3-4+5+67+8+9','  100 = 12-3-4+5-6+7+89',
  '  100 = 1+23-4+56+7+8+9','  100 = 1+23-4+5+6+78-9','  100 = 1+2+34-5+67-8+9','  100 = 1+2+3-4+5+6+78+9',
  '  100 = -1+2-3+4+5+6+78+9','','Show the sum that has the maximum number of solutions','  9 has 46 solutions','',
  "Show the lowest positive number that can't be expressed",'  211','','Show the ten highest numbers that can be expressed',
  '    3456786 = -1-2+3456789','    3456788 = 1-2+3456789','    3456790 = -1+2+3456789','    3456792 = 1+2+3456789',
  '    3456801 = 12+3456789','   12345669 = 12345678-9','   12345687 = 12345678+9','   23456788 = -1+23456789',
  '   23456790 = 1+23456789','  123456789 = 123456789'],
 'testExitCode'=>
 ['Calling testExitCode.mnh print','Hello world','Exit code: 0','Sandbox produces the same output',
  'Calling testExitCode.mnh note','Note @[myPath]:2,15 This is a note','Exit code: 0','Sandbox produces the same output',
  'Calling testExitCode.mnh warn','Warning @[myPath]:3,15 This is a warning','Exit code: 0','Sandbox produces the same output',
  'Calling testExitCode.mnh fail','Error @[myPath]:4,15 This is a failure','Exit code: 2','Sandbox produces the same output',
  'Calling testExitCode.mnh 40','Setting exit code 40','Exit code: 40','Sandbox produces the same output',
  'Calling testExitCode.mnh 41','Setting exit code 41','Exit code: 41','Sandbox produces the same output',
  'Calling testExitCode.mnh x',"Error @[myPath]:5,45 Cannot apply intrinsic rule toInt to parameter list (String):  ('x')",
  'Exit code: 3','Sandbox produces the same output'],
 'testExpressionSerialization'=>
 ['','Test deserialization of unary function',"  f    = {(1-$x)²}",'  f(2) = 1.00000','',
  'Test deserialization of unary function','  f    = ::math.cos','  f(2) = -0.41615','','Test deserialization of unary function',
  '  f    = {sin($x)/(1+cos($x))}','  f(2) = 1.55741','','Test deserialization of binary function','  f      = (x, y>x)->y-x',
  '  Fails for parameters (1,1)','  f(1,2) = 1','','Test serialization of {$x+1}',
  "#251#12#4#0#1#0#2'$x'#0#30#3#3#2'$x'#0':'#252#255#0#251#4#1#252#255#0",'     reconstructed to {$x+1}','     equals: true','',
  'Test serialization of {sleep(1) orElse print()}',
  "#251#12#4#0#0#0#8#5#5'sleep'#252#255#29#252#255#0#251#4#1#252#255#30#252#255'B'#252#255#5#5'print'#252#255#29#252#255#30#252#255#0",
  '     reconstructed to {sleep(1) orElse print()}','     equals: true','','Test serialization of ::math.cos',
  "#251#12#0#8'math.cos'",'     reconstructed to ::math.cos','     equals: true','','Test serialization of rangeGenerator(1,0)',
  '#251#12#1#3#0#1','     reconstructed to rangeGenerator(1,0)','     equals: false','','Test serialization of primeGenerator',
  '#251#12#1#9','     reconstructed to primeGenerator','     equals: false','','Test serialization of isaacRandomGenerator(5)',
  'el3_evalError: Cannot serialize builtin generator expression.','','Test serialization of primeGenerator.map({sqrt($x)})',
  "#251#12#1#6#251#12#1#9#251#12#4#0#1#0#2'$x'#0#30#4#5#4'sqrt'#252#255#29#252#255#3#2'$x'#0#30#252#255#0",
  '     reconstructed to primeGenerator.map({sqrt($x)})','     equals: false','',
  'Test serialization of primeGenerator.filter({isPrime($x+2)}).map({[$x, $x+2]})',
  "#251#12#1#6#251#12#1#5#251#12#1#9#251#12#4#0#1#0#2'$x'#0#30#6#5#7'isPrime'#252#255#29#252#255#3#2'$x'#0':'#252#255#0#251#4#2#252#255#30#252#255#0#251#12#4#0#1#0#2'$x'#0#30#7'!'#252#255#3#2'$x'#0')'#252#255#3#2'$x'#0':'#252#255#0#251#4#2#252#255'\"'#252#255#0",
  '     reconstructed to primeGenerator.filter({isPrime($x+2)}).map({[$x, $x+2]})','     equals: false','',
  "Test serialization of permutationIterator(['a','b','c'])","#251#12#1#4#251#24#3#1'a'#1'b'#1'c'",
  "     reconstructed to permutationIterator(['a','b','c'])",'     equals: false','',
  'Test serialization of permutationIterator(5)','#251#12#1#4#251#4#5','     reconstructed to permutationIterator(5)',
  '     equals: false','',"Test serialization of fileLineIterator('demos/testExpressionSerialization.mnh')",
  'el3_evalError: Cannot serialize builtin generator expression.'],
 'testMapFilterEquivalence'=>
 ['gen.filter.toList','gen.pFilter.toList','gen.map.toList','gen.pMap.toList','gen.toList.filter','gen.toList.pFilter',
  'gen.toList.map','gen.toList.pMap','All is good'],
 'testPackages'=>
 ['FDLinux'=>
  ['Package statistics','  mean(X:NumericList)              = -0.052631578947368423975',
   '  variance(X:NumericList)          =  2.281440443213296407','  standardVariation(X:NumericList) =  1.51044379015350862779',
   '  median(X:NumericCollection)      = -0.4000000000000000222',
   '  decils(L:NumericCollection)      = [-2,-1.8000000000000000444,-1.39999999999999991118,-1.19999999999999995559,-0.8000000000000000444,-0.4000000000000000222,0.5,1,1,2,3]',
   'Package mathUtils','::iterate                 =                   0.61805555555555555556',
   'sum(L:NumericList)        =                  -1.0000000000000000555',
   'prod(L:NumericList)       =                  -4.180377600000000457',
   'runningSum(L:NumericList) = [0,1,1.5,-0.5,2.5,3.0,4.0,5.5,7.5,10.0,9.7999999999999999889,9.3999999999999999666,8.7999999999999999889,7.9999999999999999444,6.9999999999999999444,5.7999999999999999889,4.4000000000000000777,2.7999999999999999889,0.99999999999999994448,-1.0000000000000000555]',
   '::factorial               = 2432902008176640000','::binomCoeff              =                 792',
   '::Bernoulli               =                  -0.033333333333333344434','Package generators - chunkIterator','[1,2,3]',
   '[4,5,6]','[7,8,9]','[10]','Package generators - pairGenerator','[0,3]','[1,2]','[2,1]','[3,0]','[0,4]','[1,3]','[2,2]',
   '[3,1]','[4,0]','Package interpolation',
   '  interpolatePiecewise(X:NumericList, Y:NumericList)   (0.75) = 1.49166666666666666667',
   '  interpolateLineSegments(X:NumericList, Y:NumericList)(0.75) = 1.5',
   '  interpolatePolynomial(X:NumericList, Y:NumericList)  (0.75) = 1.4968750000000000001'],
  'FDWin32'=>
  ['Package statistics','  mean(X:NumericList)              = -0.05263157894736842104',
   '  variance(X:NumericList)          =  2.2814404432132963989','  standardVariation(X:NumericList) =  1.51044379015350862508',
   '  median(X:NumericCollection)      = -0.4','  decils(L:NumericCollection)      = [-2,-1.8,-1.4,-1.2,-0.8,-0.4,0.5,1,1,2,3]',
   'Package mathUtils','::iterate                 =                   0.61805555555555555556',
   'sum(L:NumericList)        =                  -0.99999999999999999978',
   'prod(L:NumericList)       =                  -4.1803776000000000003',
   'runningSum(L:NumericList) = [0,1,1.5,-0.5,2.5,3.0,4.0,5.5,7.5,10.0,9.8,9.4000000000000000005,8.8,8.0,7.0,5.8,4.4,2.8000000000000000001,1.0000000000000000002,-0.99999999999999999978]',
   '::factorial               = 2432902008176640000','::binomCoeff              =                 792',
   '::Bernoulli               =                  -0.033333333333333333348','Package generators - chunkIterator','[1,2,3]',
   '[4,5,6]','[7,8,9]','[10]','Package generators - pairGenerator','[0,3]','[1,2]','[2,1]','[3,0]','[0,4]','[1,3]','[2,2]',
   '[3,1]','[4,0]','Package interpolation',
   '  interpolatePiecewise(X:NumericList, Y:NumericList)   (0.75) = 1.49166666666666666667',
   '  interpolateLineSegments(X:NumericList, Y:NumericList)(0.75) = 1.5',
   '  interpolatePolynomial(X:NumericList, Y:NumericList)  (0.75) = 1.4968750000000000001'],
  'FDWin64'=>
  ['Package statistics','  mean(X:NumericList)              = -0.05263157894736841',
   '  variance(X:NumericList)          =  2.2814404432132966','  standardVariation(X:NumericList) =  1.5104437901535086',
   '  median(X:NumericCollection)      = -0.4','  decils(L:NumericCollection)      = [-2,-1.8,-1.4,-1.2,-0.8,-0.4,0.5,1,1,2,3]',
   'Package mathUtils','::iterate                 =                   0.61805555555555558',
   'sum(L:NumericList)        =                  -0.99999999999999978',
   'prod(L:NumericList)       =                  -4.1803776000000008',
   'runningSum(L:NumericList) = [0,1,1.5,-0.5,2.5,3.0,4.0,5.5,7.5,10.0,9.8,9.4,8.8,8.0,7.0,5.8,4.4,2.8000000000000003,1.0000000000000002,-0.99999999999999978]',
   '::factorial               = 2432902008176640000','::binomCoeff              =                 792',
   '::Bernoulli               =                  -0.033333333333333305','Package generators - chunkIterator','[1,2,3]','[4,5,6]',
   '[7,8,9]','[10]','Package generators - pairGenerator','[0,3]','[1,2]','[2,1]','[3,0]','[0,4]','[1,3]','[2,2]','[3,1]','[4,0]',
   'Package interpolation','  interpolatePiecewise(X:NumericList, Y:NumericList)   (0.75) = 1.4916666666666663',
   '  interpolateLineSegments(X:NumericList, Y:NumericList)(0.75) = 1.5',
   '  interpolatePolynomial(X:NumericList, Y:NumericList)  (0.75) = 1.4968749999999993'],
  'FOLinux'=>
  ['Package statistics','  mean(X:NumericList)              = -0.052631578947368423975',
   '  variance(X:NumericList)          =  2.281440443213296407','  standardVariation(X:NumericList) =  1.51044379015350862779',
   '  median(X:NumericCollection)      = -0.4000000000000000222',
   '  decils(L:NumericCollection)      = [-2,-1.8000000000000000444,-1.39999999999999991118,-1.19999999999999995559,-0.8000000000000000444,-0.4000000000000000222,0.5,1,1,2,3]',
   'Package mathUtils','::iterate                 =                   0.61805555555555555556',
   'sum(L:NumericList)        =                  -1.0000000000000000555',
   'prod(L:NumericList)       =                  -4.180377600000000457',
   'runningSum(L:NumericList) = [0,1,1.5,-0.5,2.5,3.0,4.0,5.5,7.5,10.0,9.7999999999999999889,9.3999999999999999666,8.7999999999999999889,7.9999999999999999444,6.9999999999999999444,5.7999999999999999889,4.4000000000000000777,2.7999999999999999889,0.99999999999999994448,-1.0000000000000000555]',
   '::factorial               = 2432902008176640000','::binomCoeff              =                 792',
   '::Bernoulli               =                  -0.033333333333333344434','Package generators - chunkIterator','[1,2,3]',
   '[4,5,6]','[7,8,9]','[10]','Package generators - pairGenerator','[0,3]','[1,2]','[2,1]','[3,0]','[0,4]','[1,3]','[2,2]',
   '[3,1]','[4,0]','Package interpolation',
   '  interpolatePiecewise(X:NumericList, Y:NumericList)   (0.75) = 1.49166666666666666667',
   '  interpolateLineSegments(X:NumericList, Y:NumericList)(0.75) = 1.5',
   '  interpolatePolynomial(X:NumericList, Y:NumericList)  (0.75) = 1.4968750000000000001'],
  'FOWin32'=>
  ['Package statistics','  mean(X:NumericList)              = -0.05263157894736842104',
   '  variance(X:NumericList)          =  2.2814404432132963989','  standardVariation(X:NumericList) =  1.51044379015350862508',
   '  median(X:NumericCollection)      = -0.4','  decils(L:NumericCollection)      = [-2,-1.8,-1.4,-1.2,-0.8,-0.4,0.5,1,1,2,3]',
   'Package mathUtils','::iterate                 =                   0.61805555555555555556',
   'sum(L:NumericList)        =                  -0.99999999999999999978',
   'prod(L:NumericList)       =                  -4.1803776000000000003',
   'runningSum(L:NumericList) = [0,1,1.5,-0.5,2.5,3.0,4.0,5.5,7.5,10.0,9.8,9.4000000000000000005,8.8,8.0,7.0,5.8,4.4,2.8000000000000000001,1.0000000000000000002,-0.99999999999999999978]',
   '::factorial               = 2432902008176640000','::binomCoeff              =                 792',
   '::Bernoulli               =                  -0.033333333333333333348','Package generators - chunkIterator','[1,2,3]',
   '[4,5,6]','[7,8,9]','[10]','Package generators - pairGenerator','[0,3]','[1,2]','[2,1]','[3,0]','[0,4]','[1,3]','[2,2]',
   '[3,1]','[4,0]','Package interpolation',
   '  interpolatePiecewise(X:NumericList, Y:NumericList)   (0.75) = 1.49166666666666666667',
   '  interpolateLineSegments(X:NumericList, Y:NumericList)(0.75) = 1.5',
   '  interpolatePolynomial(X:NumericList, Y:NumericList)  (0.75) = 1.4968750000000000001'],
  'FOWin64'=>
  ['Package statistics','  mean(X:NumericList)              = -0.05263157894736841',
   '  variance(X:NumericList)          =  2.2814404432132966','  standardVariation(X:NumericList) =  1.5104437901535086',
   '  median(X:NumericCollection)      = -0.4','  decils(L:NumericCollection)      = [-2,-1.8,-1.4,-1.2,-0.8,-0.4,0.5,1,1,2,3]',
   'Package mathUtils','::iterate                 =                   0.61805555555555558',
   'sum(L:NumericList)        =                  -0.99999999999999978',
   'prod(L:NumericList)       =                  -4.1803776000000008',
   'runningSum(L:NumericList) = [0,1,1.5,-0.5,2.5,3.0,4.0,5.5,7.5,10.0,9.8,9.4,8.8,8.0,7.0,5.8,4.4,2.8000000000000003,1.0000000000000002,-0.99999999999999978]',
   '::factorial               = 2432902008176640000','::binomCoeff              =                 792',
   '::Bernoulli               =                  -0.033333333333333305','Package generators - chunkIterator','[1,2,3]','[4,5,6]',
   '[7,8,9]','[10]','Package generators - pairGenerator','[0,3]','[1,2]','[2,1]','[3,0]','[0,4]','[1,3]','[2,2]','[3,1]','[4,0]',
   'Package interpolation','  interpolatePiecewise(X:NumericList, Y:NumericList)   (0.75) = 1.4916666666666663',
   '  interpolateLineSegments(X:NumericList, Y:NumericList)(0.75) = 1.5',
   '  interpolatePolynomial(X:NumericList, Y:NumericList)  (0.75) = 1.4968749999999993'],
  'LDLinux'=>
  ['Package statistics','  mean(X:NumericList)              = -0.052631578947368423975',
   '  variance(X:NumericList)          =  2.281440443213296407','  standardVariation(X:NumericList) =  1.51044379015350862779',
   '  median(X:NumericCollection)      = -0.4000000000000000222',
   '  decils(L:NumericCollection)      = [-2,-1.8000000000000000444,-1.39999999999999991118,-1.19999999999999995559,-0.8000000000000000444,-0.4000000000000000222,0.5,1,1,2,3]',
   'Package mathUtils','::iterate                 =                   0.61805555555555555556',
   'sum(L:NumericList)        =                  -1.0000000000000000555',
   'prod(L:NumericList)       =                  -4.180377600000000457',
   'runningSum(L:NumericList) = [0,1,1.5,-0.5,2.5,3.0,4.0,5.5,7.5,10.0,9.7999999999999999889,9.3999999999999999666,8.7999999999999999889,7.9999999999999999444,6.9999999999999999444,5.7999999999999999889,4.4000000000000000777,2.7999999999999999889,0.99999999999999994448,-1.0000000000000000555]',
   '::factorial               = 2432902008176640000','::binomCoeff              =                 792',
   '::Bernoulli               =                  -0.033333333333333344434','Package generators - chunkIterator','[1,2,3]',
   '[4,5,6]','[7,8,9]','[10]','Package generators - pairGenerator','[0,3]','[1,2]','[2,1]','[3,0]','[0,4]','[1,3]','[2,2]',
   '[3,1]','[4,0]','Package interpolation',
   '  interpolatePiecewise(X:NumericList, Y:NumericList)   (0.75) = 1.49166666666666666667',
   '  interpolateLineSegments(X:NumericList, Y:NumericList)(0.75) = 1.5',
   '  interpolatePolynomial(X:NumericList, Y:NumericList)  (0.75) = 1.4968750000000000001'],
  'LDWin32'=>
  ['Package statistics','  mean(X:NumericList)              = -0.05263157894736842104',
   '  variance(X:NumericList)          =  2.2814404432132963989','  standardVariation(X:NumericList) =  1.51044379015350862508',
   '  median(X:NumericCollection)      = -0.4','  decils(L:NumericCollection)      = [-2,-1.8,-1.4,-1.2,-0.8,-0.4,0.5,1,1,2,3]',
   'Package mathUtils','::iterate                 =                   0.61805555555555555556',
   'sum(L:NumericList)        =                  -0.99999999999999999978',
   'prod(L:NumericList)       =                  -4.1803776000000000003',
   'runningSum(L:NumericList) = [0,1,1.5,-0.5,2.5,3.0,4.0,5.5,7.5,10.0,9.8,9.4000000000000000005,8.8,8.0,7.0,5.8,4.4,2.8000000000000000001,1.0000000000000000002,-0.99999999999999999978]',
   '::factorial               = 2432902008176640000','::binomCoeff              =                 792',
   '::Bernoulli               =                  -0.033333333333333333348','Package generators - chunkIterator','[1,2,3]',
   '[4,5,6]','[7,8,9]','[10]','Package generators - pairGenerator','[0,3]','[1,2]','[2,1]','[3,0]','[0,4]','[1,3]','[2,2]',
   '[3,1]','[4,0]','Package interpolation',
   '  interpolatePiecewise(X:NumericList, Y:NumericList)   (0.75) = 1.49166666666666666667',
   '  interpolateLineSegments(X:NumericList, Y:NumericList)(0.75) = 1.5',
   '  interpolatePolynomial(X:NumericList, Y:NumericList)  (0.75) = 1.4968750000000000001'],
  'LDWin64'=>
  ['Package statistics','  mean(X:NumericList)              = -0.05263157894736841',
   '  variance(X:NumericList)          =  2.2814404432132966','  standardVariation(X:NumericList) =  1.5104437901535086',
   '  median(X:NumericCollection)      = -0.4','  decils(L:NumericCollection)      = [-2,-1.8,-1.4,-1.2,-0.8,-0.4,0.5,1,1,2,3]',
   'Package mathUtils','::iterate                 =                   0.61805555555555558',
   'sum(L:NumericList)        =                  -0.99999999999999978',
   'prod(L:NumericList)       =                  -4.1803776000000008',
   'runningSum(L:NumericList) = [0,1,1.5,-0.5,2.5,3.0,4.0,5.5,7.5,10.0,9.8,9.4,8.8,8.0,7.0,5.8,4.4,2.8000000000000003,1.0000000000000002,-0.99999999999999978]',
   '::factorial               = 2432902008176640000','::binomCoeff              =                 792',
   '::Bernoulli               =                  -0.033333333333333305','Package generators - chunkIterator','[1,2,3]','[4,5,6]',
   '[7,8,9]','[10]','Package generators - pairGenerator','[0,3]','[1,2]','[2,1]','[3,0]','[0,4]','[1,3]','[2,2]','[3,1]','[4,0]',
   'Package interpolation','  interpolatePiecewise(X:NumericList, Y:NumericList)   (0.75) = 1.4916666666666663',
   '  interpolateLineSegments(X:NumericList, Y:NumericList)(0.75) = 1.5',
   '  interpolatePolynomial(X:NumericList, Y:NumericList)  (0.75) = 1.4968749999999993'],
  'LOLinux'=>
  ['Package statistics','  mean(X:NumericList)              = -0.052631578947368423975',
   '  variance(X:NumericList)          =  2.281440443213296407','  standardVariation(X:NumericList) =  1.51044379015350862779',
   '  median(X:NumericCollection)      = -0.4000000000000000222',
   '  decils(L:NumericCollection)      = [-2,-1.8000000000000000444,-1.39999999999999991118,-1.19999999999999995559,-0.8000000000000000444,-0.4000000000000000222,0.5,1,1,2,3]',
   'Package mathUtils','::iterate                 =                   0.61805555555555555556',
   'sum(L:NumericList)        =                  -1.0000000000000000555',
   'prod(L:NumericList)       =                  -4.180377600000000457',
   'runningSum(L:NumericList) = [0,1,1.5,-0.5,2.5,3.0,4.0,5.5,7.5,10.0,9.7999999999999999889,9.3999999999999999666,8.7999999999999999889,7.9999999999999999444,6.9999999999999999444,5.7999999999999999889,4.4000000000000000777,2.7999999999999999889,0.99999999999999994448,-1.0000000000000000555]',
   '::factorial               = 2432902008176640000','::binomCoeff              =                 792',
   '::Bernoulli               =                  -0.033333333333333344434','Package generators - chunkIterator','[1,2,3]',
   '[4,5,6]','[7,8,9]','[10]','Package generators - pairGenerator','[0,3]','[1,2]','[2,1]','[3,0]','[0,4]','[1,3]','[2,2]',
   '[3,1]','[4,0]','Package interpolation',
   '  interpolatePiecewise(X:NumericList, Y:NumericList)   (0.75) = 1.49166666666666666667',
   '  interpolateLineSegments(X:NumericList, Y:NumericList)(0.75) = 1.5',
   '  interpolatePolynomial(X:NumericList, Y:NumericList)  (0.75) = 1.4968750000000000001'],
  'LOWin32'=>
  ['Package statistics','  mean(X:NumericList)              = -0.05263157894736842104',
   '  variance(X:NumericList)          =  2.2814404432132963989','  standardVariation(X:NumericList) =  1.51044379015350862508',
   '  median(X:NumericCollection)      = -0.4','  decils(L:NumericCollection)      = [-2,-1.8,-1.4,-1.2,-0.8,-0.4,0.5,1,1,2,3]',
   'Package mathUtils','::iterate                 =                   0.61805555555555555556',
   'sum(L:NumericList)        =                  -0.99999999999999999978',
   'prod(L:NumericList)       =                  -4.1803776000000000003',
   'runningSum(L:NumericList) = [0,1,1.5,-0.5,2.5,3.0,4.0,5.5,7.5,10.0,9.8,9.4000000000000000005,8.8,8.0,7.0,5.8,4.4,2.8000000000000000001,1.0000000000000000002,-0.99999999999999999978]',
   '::factorial               = 2432902008176640000','::binomCoeff              =                 792',
   '::Bernoulli               =                  -0.033333333333333333348','Package generators - chunkIterator','[1,2,3]',
   '[4,5,6]','[7,8,9]','[10]','Package generators - pairGenerator','[0,3]','[1,2]','[2,1]','[3,0]','[0,4]','[1,3]','[2,2]',
   '[3,1]','[4,0]','Package interpolation',
   '  interpolatePiecewise(X:NumericList, Y:NumericList)   (0.75) = 1.49166666666666666667',
   '  interpolateLineSegments(X:NumericList, Y:NumericList)(0.75) = 1.5',
   '  interpolatePolynomial(X:NumericList, Y:NumericList)  (0.75) = 1.4968750000000000001'],
  'LOWin64'=>
  ['Package statistics','  mean(X:NumericList)              = -0.05263157894736841',
   '  variance(X:NumericList)          =  2.2814404432132966','  standardVariation(X:NumericList) =  1.5104437901535086',
   '  median(X:NumericCollection)      = -0.4','  decils(L:NumericCollection)      = [-2,-1.8,-1.4,-1.2,-0.8,-0.4,0.5,1,1,2,3]',
   'Package mathUtils','::iterate                 =                   0.61805555555555558',
   'sum(L:NumericList)        =                  -0.99999999999999978',
   'prod(L:NumericList)       =                  -4.1803776000000008',
   'runningSum(L:NumericList) = [0,1,1.5,-0.5,2.5,3.0,4.0,5.5,7.5,10.0,9.8,9.4,8.8,8.0,7.0,5.8,4.4,2.8000000000000003,1.0000000000000002,-0.99999999999999978]',
   '::factorial               = 2432902008176640000','::binomCoeff              =                 792',
   '::Bernoulli               =                  -0.033333333333333305','Package generators - chunkIterator','[1,2,3]','[4,5,6]',
   '[7,8,9]','[10]','Package generators - pairGenerator','[0,3]','[1,2]','[2,1]','[3,0]','[0,4]','[1,3]','[2,2]','[3,1]','[4,0]',
   'Package interpolation','  interpolatePiecewise(X:NumericList, Y:NumericList)   (0.75) = 1.4916666666666663',
   '  interpolateLineSegments(X:NumericList, Y:NumericList)(0.75) = 1.5',
   '  interpolatePolynomial(X:NumericList, Y:NumericList)  (0.75) = 1.4968749999999993']].toMap,
 'test_rationals'=>
 ['FDLinux'=>
  ['2/3 + 2/3 = 4/3','2/3 - 2/3 = 0','2/3 * 2/3 = 4/9','2/3 / 2/3 = 1','2/3 + -1/4 = 5/12','2/3 - -1/4 = 11/12',
   '2/3 * -1/4 = -1/6','2/3 / -1/4 = -8/3','2/3 + 2 = 8/3','2/3 - 2 = -4/3','2/3 * 2 = 4/3','2/3 / 2 = 1/3','2/3 + -5 = -13/3',
   '2/3 - -5 = 17/3','2/3 * -5 = -10/3','2/3 / -5 = -2/15','2/3 + -0.7 = -0.033333333333333333304',
   '2/3 - -0.7 = 1.36666666666666666667','2/3 * -0.7 = -0.46666666666666666666','2/3 / -0.7 = -0.95238095238095238099',
   '2/3 + 3.1415926535897932385 = 3.8082593202564599052','2/3 - 3.1415926535897932385 = -2.4749259869231265717',
   '2/3 * 3.1415926535897932385 = 2.0943951023931954924','2/3 / 3.1415926535897932385 = 0.21220659078919378102',
   '-1/4 + 2/3 = 5/12','-1/4 - 2/3 = -11/12','-1/4 * 2/3 = -1/6','-1/4 / 2/3 = -3/8','-1/4 + -1/4 = -1/2','-1/4 - -1/4 = 0',
   '-1/4 * -1/4 = 1/16','-1/4 / -1/4 = 1','-1/4 + 2 = 7/4','-1/4 - 2 = -9/4','-1/4 * 2 = -1/2','-1/4 / 2 = -1/8',
   '-1/4 + -5 = -21/4','-1/4 - -5 = 19/4','-1/4 * -5 = 5/4','-1/4 / -5 = 1/20','-1/4 + -0.7 = -0.95','-1/4 - -0.7 = 0.45',
   '-1/4 * -0.7 = 0.175','-1/4 / -0.7 = 0.35714285714285714287','-1/4 + 3.1415926535897932385 = 2.8915926535897932385',
   '-1/4 - 3.1415926535897932385 = -3.3915926535897932385','-1/4 * 3.1415926535897932385 = -0.78539816339744830962',
   '-1/4 / 3.1415926535897932385 = -0.079577471545947667884','2 + 2/3 = 8/3','2 - 2/3 = 4/3','2 * 2/3 = 4/3','2 / 2/3 = 3',
   '2 + -1/4 = 7/4','2 - -1/4 = 9/4','2 * -1/4 = -1/2','2 / -1/4 = -8','2 + 2 = 4','2 - 2 = 0','2 * 2 = 4','2 / 2 = 1',
   '2 + -5 = -3','2 - -5 = 7','2 * -5 = -10','2 / -5 = -2/5','2 + -0.7 = 1.3','2 - -0.7 = 2.7','2 * -0.7 = -1.4',
   '2 / -0.7 = -2.8571428571428571429','2 + 3.1415926535897932385 = 5.1415926535897932383',
   '2 - 3.1415926535897932385 = -1.1415926535897932385','2 * 3.1415926535897932385 = 6.283185307179586477',
   '2 / 3.1415926535897932385 = 0.63661977236758134307','-5 + 2/3 = -13/3','-5 - 2/3 = -17/3','-5 * 2/3 = -10/3',
   '-5 / 2/3 = -15/2','-5 + -1/4 = -21/4','-5 - -1/4 = -19/4','-5 * -1/4 = 5/4','-5 / -1/4 = 20','-5 + 2 = -3','-5 - 2 = -7',
   '-5 * 2 = -10','-5 / 2 = -5/2','-5 + -5 = -10','-5 - -5 = 0','-5 * -5 = 25','-5 / -5 = 1','-5 + -0.7 = -5.7',
   '-5 - -0.7 = -4.3','-5 * -0.7 = 3.5','-5 / -0.7 = 7.1428571428571428574',
   '-5 + 3.1415926535897932385 = -1.85840734641020676149','-5 - 3.1415926535897932385 = -8.141592653589793238',
   '-5 * 3.1415926535897932385 = -15.707963267948966192','-5 / 3.1415926535897932385 = -1.5915494309189533576',
   '-0.7 + 2/3 = -0.033333333333333333304','-0.7 - 2/3 = -1.36666666666666666667','-0.7 * 2/3 = -0.46666666666666666666',
   '-0.7 / 2/3 = -1.05','-0.7 + -1/4 = -0.95','-0.7 - -1/4 = -0.45','-0.7 * -1/4 = 0.175','-0.7 / -1/4 = 2.8','-0.7 + 2 = 1.3',
   '-0.7 - 2 = -2.7','-0.7 * 2 = -1.4','-0.7 / 2 = -0.35','-0.7 + -5 = -5.7','-0.7 - -5 = 4.3','-0.7 * -5 = 3.5',
   '-0.7 / -5 = 0.14','-0.7 + -0.7 = -1.4','-0.7 - -0.7 = 0.0','-0.7 * -0.7 = 0.48999999999999999998','-0.7 / -0.7 = 1.0',
   '-0.7 + 3.1415926535897932385 = 2.4415926535897932384','-0.7 - 3.1415926535897932385 = -3.8415926535897932385',
   '-0.7 * 3.1415926535897932385 = -2.1991148575128552668','-0.7 / 3.1415926535897932385 = -0.22281692032865347007',
   '3.1415926535897932385 + 2/3 = 3.8082593202564599052','3.1415926535897932385 - 2/3 = 2.4749259869231265717',
   '3.1415926535897932385 * 2/3 = 2.0943951023931954924','3.1415926535897932385 / 2/3 = 4.7123889803846898574',
   '3.1415926535897932385 + -1/4 = 2.8915926535897932385','3.1415926535897932385 - -1/4 = 3.3915926535897932385',
   '3.1415926535897932385 * -1/4 = -0.78539816339744830962','3.1415926535897932385 / -1/4 = -12.566370614359172954',
   '3.1415926535897932385 + 2 = 5.1415926535897932383','3.1415926535897932385 - 2 = 1.1415926535897932385',
   '3.1415926535897932385 * 2 = 6.283185307179586477','3.1415926535897932385 / 2 = 1.57079632679489661926',
   '3.1415926535897932385 + -5 = -1.85840734641020676149','3.1415926535897932385 - -5 = 8.141592653589793238',
   '3.1415926535897932385 * -5 = -15.707963267948966192','3.1415926535897932385 / -5 = -0.6283185307179586477',
   '3.1415926535897932385 + -0.7 = 2.4415926535897932384','3.1415926535897932385 - -0.7 = 3.8415926535897932385',
   '3.1415926535897932385 * -0.7 = -2.1991148575128552668','3.1415926535897932385 / -0.7 = -4.487989505128276055',
   '3.1415926535897932385 + 3.1415926535897932385 = 6.283185307179586477','3.1415926535897932385 - 3.1415926535897932385 = 0.0',
   '3.1415926535897932385 * 3.1415926535897932385 = 9.869604401089358619','3.1415926535897932385 / 3.1415926535897932385 = 1.0',
   '1/7: 0.(142857)','1/7: 0.14285714285714285714','pi : [436991388364966,139098679093749].toRational','1/6: [1,6].toRational'],
  'FDWin32'=>
  ['2/3 + 2/3 = 4/3','2/3 - 2/3 = 0','2/3 * 2/3 = 4/9','2/3 / 2/3 = 1','2/3 + -1/4 = 5/12','2/3 - -1/4 = 11/12',
   '2/3 * -1/4 = -1/6','2/3 / -1/4 = -8/3','2/3 + 2 = 8/3','2/3 - 2 = -4/3','2/3 * 2 = 4/3','2/3 / 2 = 1/3','2/3 + -5 = -13/3',
   '2/3 - -5 = 17/3','2/3 * -5 = -10/3','2/3 / -5 = -2/15','2/3 + -0.7 = -0.033333333333333333304',
   '2/3 - -0.7 = 1.36666666666666666667','2/3 * -0.7 = -0.46666666666666666666','2/3 / -0.7 = -0.95238095238095238099',
   '2/3 + 3.1415926535897932385 = 3.8082593202564599052','2/3 - 3.1415926535897932385 = -2.4749259869231265717',
   '2/3 * 3.1415926535897932385 = 2.0943951023931954924','2/3 / 3.1415926535897932385 = 0.21220659078919378102',
   '-1/4 + 2/3 = 5/12','-1/4 - 2/3 = -11/12','-1/4 * 2/3 = -1/6','-1/4 / 2/3 = -3/8','-1/4 + -1/4 = -1/2','-1/4 - -1/4 = 0',
   '-1/4 * -1/4 = 1/16','-1/4 / -1/4 = 1','-1/4 + 2 = 7/4','-1/4 - 2 = -9/4','-1/4 * 2 = -1/2','-1/4 / 2 = -1/8',
   '-1/4 + -5 = -21/4','-1/4 - -5 = 19/4','-1/4 * -5 = 5/4','-1/4 / -5 = 1/20','-1/4 + -0.7 = -0.95','-1/4 - -0.7 = 0.45',
   '-1/4 * -0.7 = 0.175','-1/4 / -0.7 = 0.35714285714285714287','-1/4 + 3.1415926535897932385 = 2.8915926535897932385',
   '-1/4 - 3.1415926535897932385 = -3.3915926535897932385','-1/4 * 3.1415926535897932385 = -0.78539816339744830962',
   '-1/4 / 3.1415926535897932385 = -0.079577471545947667884','2 + 2/3 = 8/3','2 - 2/3 = 4/3','2 * 2/3 = 4/3','2 / 2/3 = 3',
   '2 + -1/4 = 7/4','2 - -1/4 = 9/4','2 * -1/4 = -1/2','2 / -1/4 = -8','2 + 2 = 4','2 - 2 = 0','2 * 2 = 4','2 / 2 = 1',
   '2 + -5 = -3','2 - -5 = 7','2 * -5 = -10','2 / -5 = -2/5','2 + -0.7 = 1.3','2 - -0.7 = 2.7','2 * -0.7 = -1.4',
   '2 / -0.7 = -2.8571428571428571429','2 + 3.1415926535897932385 = 5.1415926535897932383',
   '2 - 3.1415926535897932385 = -1.1415926535897932385','2 * 3.1415926535897932385 = 6.283185307179586477',
   '2 / 3.1415926535897932385 = 0.63661977236758134307','-5 + 2/3 = -13/3','-5 - 2/3 = -17/3','-5 * 2/3 = -10/3',
   '-5 / 2/3 = -15/2','-5 + -1/4 = -21/4','-5 - -1/4 = -19/4','-5 * -1/4 = 5/4','-5 / -1/4 = 20','-5 + 2 = -3','-5 - 2 = -7',
   '-5 * 2 = -10','-5 / 2 = -5/2','-5 + -5 = -10','-5 - -5 = 0','-5 * -5 = 25','-5 / -5 = 1','-5 + -0.7 = -5.7',
   '-5 - -0.7 = -4.3','-5 * -0.7 = 3.5','-5 / -0.7 = 7.1428571428571428574',
   '-5 + 3.1415926535897932385 = -1.85840734641020676149','-5 - 3.1415926535897932385 = -8.141592653589793238',
   '-5 * 3.1415926535897932385 = -15.707963267948966192','-5 / 3.1415926535897932385 = -1.5915494309189533576',
   '-0.7 + 2/3 = -0.033333333333333333304','-0.7 - 2/3 = -1.36666666666666666667','-0.7 * 2/3 = -0.46666666666666666666',
   '-0.7 / 2/3 = -1.05','-0.7 + -1/4 = -0.95','-0.7 - -1/4 = -0.45','-0.7 * -1/4 = 0.175','-0.7 / -1/4 = 2.8','-0.7 + 2 = 1.3',
   '-0.7 - 2 = -2.7','-0.7 * 2 = -1.4','-0.7 / 2 = -0.35','-0.7 + -5 = -5.7','-0.7 - -5 = 4.3','-0.7 * -5 = 3.5',
   '-0.7 / -5 = 0.14','-0.7 + -0.7 = -1.4','-0.7 - -0.7 = 0.0','-0.7 * -0.7 = 0.48999999999999999998','-0.7 / -0.7 = 1.0',
   '-0.7 + 3.1415926535897932385 = 2.4415926535897932384','-0.7 - 3.1415926535897932385 = -3.8415926535897932385',
   '-0.7 * 3.1415926535897932385 = -2.1991148575128552668','-0.7 / 3.1415926535897932385 = -0.22281692032865347007',
   '3.1415926535897932385 + 2/3 = 3.8082593202564599052','3.1415926535897932385 - 2/3 = 2.4749259869231265717',
   '3.1415926535897932385 * 2/3 = 2.0943951023931954924','3.1415926535897932385 / 2/3 = 4.7123889803846898574',
   '3.1415926535897932385 + -1/4 = 2.8915926535897932385','3.1415926535897932385 - -1/4 = 3.3915926535897932385',
   '3.1415926535897932385 * -1/4 = -0.78539816339744830962','3.1415926535897932385 / -1/4 = -12.566370614359172954',
   '3.1415926535897932385 + 2 = 5.1415926535897932383','3.1415926535897932385 - 2 = 1.1415926535897932385',
   '3.1415926535897932385 * 2 = 6.283185307179586477','3.1415926535897932385 / 2 = 1.57079632679489661926',
   '3.1415926535897932385 + -5 = -1.85840734641020676149','3.1415926535897932385 - -5 = 8.141592653589793238',
   '3.1415926535897932385 * -5 = -15.707963267948966192','3.1415926535897932385 / -5 = -0.6283185307179586477',
   '3.1415926535897932385 + -0.7 = 2.4415926535897932384','3.1415926535897932385 - -0.7 = 3.8415926535897932385',
   '3.1415926535897932385 * -0.7 = -2.1991148575128552668','3.1415926535897932385 / -0.7 = -4.487989505128276055',
   '3.1415926535897932385 + 3.1415926535897932385 = 6.283185307179586477','3.1415926535897932385 - 3.1415926535897932385 = 0.0',
   '3.1415926535897932385 * 3.1415926535897932385 = 9.869604401089358619','3.1415926535897932385 / 3.1415926535897932385 = 1.0',
   '1/7: 0.(142857)','1/7: 0.14285714285714285714','pi : [436991388364966,139098679093749].toRational','1/6: [1,6].toRational'],
  'FDWin64'=>
  ['2/3 + 2/3 = 4/3','2/3 - 2/3 = 0','2/3 * 2/3 = 4/9','2/3 / 2/3 = 1','2/3 + -1/4 = 5/12','2/3 - -1/4 = 11/12',
   '2/3 * -1/4 = -1/6','2/3 / -1/4 = -8/3','2/3 + 2 = 8/3','2/3 - 2 = -4/3','2/3 * 2 = 4/3','2/3 / 2 = 1/3','2/3 + -5 = -13/3',
   '2/3 - -5 = 17/3','2/3 * -5 = -10/3','2/3 / -5 = -2/15','2/3 + -0.7 = -0.033333333333333326',
   '2/3 - -0.7 = 1.3666666666666667','2/3 * -0.7 = -0.4666666666666666','2/3 / -0.7 = -0.9523809523809524',
   '2/3 + 3.141592653589793 = 3.8082593202564596','2/3 - 3.141592653589793 = -2.4749259869231266',
   '2/3 * 3.141592653589793 = 2.0943951023931953','2/3 / 3.141592653589793 = 0.21220659078919377','-1/4 + 2/3 = 5/12',
   '-1/4 - 2/3 = -11/12','-1/4 * 2/3 = -1/6','-1/4 / 2/3 = -3/8','-1/4 + -1/4 = -1/2','-1/4 - -1/4 = 0','-1/4 * -1/4 = 1/16',
   '-1/4 / -1/4 = 1','-1/4 + 2 = 7/4','-1/4 - 2 = -9/4','-1/4 * 2 = -1/2','-1/4 / 2 = -1/8','-1/4 + -5 = -21/4',
   '-1/4 - -5 = 19/4','-1/4 * -5 = 5/4','-1/4 / -5 = 1/20','-1/4 + -0.7 = -0.95','-1/4 - -0.7 = 0.44999999999999996',
   '-1/4 * -0.7 = 0.175','-1/4 / -0.7 = 0.35714285714285715','-1/4 + 3.141592653589793 = 2.891592653589793',
   '-1/4 - 3.141592653589793 = -3.391592653589793','-1/4 * 3.141592653589793 = -0.78539816339744828',
   '-1/4 / 3.141592653589793 = -0.07957747154594767','2 + 2/3 = 8/3','2 - 2/3 = 4/3','2 * 2/3 = 4/3','2 / 2/3 = 3',
   '2 + -1/4 = 7/4','2 - -1/4 = 9/4','2 * -1/4 = -1/2','2 / -1/4 = -8','2 + 2 = 4','2 - 2 = 0','2 * 2 = 4','2 / 2 = 1',
   '2 + -5 = -3','2 - -5 = 7','2 * -5 = -10','2 / -5 = -2/5','2 + -0.7 = 1.3','2 - -0.7 = 2.7','2 * -0.7 = -1.4',
   '2 / -0.7 = -2.857142857142857','2 + 3.141592653589793 = 5.141592653589793','2 - 3.141592653589793 = -1.1415926535897931',
   '2 * 3.141592653589793 = 6.283185307179586','2 / 3.141592653589793 = 0.63661977236758138','-5 + 2/3 = -13/3',
   '-5 - 2/3 = -17/3','-5 * 2/3 = -10/3','-5 / 2/3 = -15/2','-5 + -1/4 = -21/4','-5 - -1/4 = -19/4','-5 * -1/4 = 5/4',
   '-5 / -1/4 = 20','-5 + 2 = -3','-5 - 2 = -7','-5 * 2 = -10','-5 / 2 = -5/2','-5 + -5 = -10','-5 - -5 = 0','-5 * -5 = 25',
   '-5 / -5 = 1','-5 + -0.7 = -5.7','-5 - -0.7 = -4.3','-5 * -0.7 = 3.5','-5 / -0.7 = 7.142857142857143',
   '-5 + 3.141592653589793 = -1.8584073464102069','-5 - 3.141592653589793 = -8.141592653589793',
   '-5 * 3.141592653589793 = -15.707963267948966','-5 / 3.141592653589793 = -1.5915494309189535',
   '-0.7 + 2/3 = -0.033333333333333326','-0.7 - 2/3 = -1.3666666666666667','-0.7 * 2/3 = -0.4666666666666666',
   '-0.7 / 2/3 = -1.05','-0.7 + -1/4 = -0.95','-0.7 - -1/4 = -0.44999999999999996','-0.7 * -1/4 = 0.175','-0.7 / -1/4 = 2.8',
   '-0.7 + 2 = 1.3','-0.7 - 2 = -2.7','-0.7 * 2 = -1.4','-0.7 / 2 = -0.35','-0.7 + -5 = -5.7','-0.7 - -5 = 4.3',
   '-0.7 * -5 = 3.5','-0.7 / -5 = 0.13999999999999999','-0.7 + -0.7 = -1.4','-0.7 - -0.7 = 0.0',
   '-0.7 * -0.7 = 0.48999999999999994','-0.7 / -0.7 = 1.0','-0.7 + 3.141592653589793 = 2.4415926535897929',
   '-0.7 - 3.141592653589793 = -3.8415926535897933','-0.7 * 3.141592653589793 = -2.199114857512855',
   '-0.7 / 3.141592653589793 = -0.22281692032865347','3.141592653589793 + 2/3 = 3.8082593202564596',
   '3.141592653589793 - 2/3 = 2.4749259869231266','3.141592653589793 * 2/3 = 2.0943951023931953',
   '3.141592653589793 / 2/3 = 4.71238898038469','3.141592653589793 + -1/4 = 2.891592653589793',
   '3.141592653589793 - -1/4 = 3.391592653589793','3.141592653589793 * -1/4 = -0.78539816339744828',
   '3.141592653589793 / -1/4 = -12.566370614359172','3.141592653589793 + 2 = 5.141592653589793',
   '3.141592653589793 - 2 = 1.1415926535897931','3.141592653589793 * 2 = 6.283185307179586',
   '3.141592653589793 / 2 = 1.5707963267948966','3.141592653589793 + -5 = -1.8584073464102069',
   '3.141592653589793 - -5 = 8.141592653589793','3.141592653589793 * -5 = -15.707963267948966',
   '3.141592653589793 / -5 = -0.6283185307179586','3.141592653589793 + -0.7 = 2.4415926535897929',
   '3.141592653589793 - -0.7 = 3.8415926535897933','3.141592653589793 * -0.7 = -2.199114857512855',
   '3.141592653589793 / -0.7 = -4.4879895051282759','3.141592653589793 + 3.141592653589793 = 6.283185307179586',
   '3.141592653589793 - 3.141592653589793 = 0.0','3.141592653589793 * 3.141592653589793 = 9.869604401089358',
   '3.141592653589793 / 3.141592653589793 = 1.0','1/7: 0.(142857)','1/7: 0.14285714285714285',
   'pi : [245850922,78256779].toRational','1/6: [1,6].toRational'],
  'FOLinux'=>
  ['2/3 + 2/3 = 4/3','2/3 - 2/3 = 0','2/3 * 2/3 = 4/9','2/3 / 2/3 = 1','2/3 + -1/4 = 5/12','2/3 - -1/4 = 11/12',
   '2/3 * -1/4 = -1/6','2/3 / -1/4 = -8/3','2/3 + 2 = 8/3','2/3 - 2 = -4/3','2/3 * 2 = 4/3','2/3 / 2 = 1/3','2/3 + -5 = -13/3',
   '2/3 - -5 = 17/3','2/3 * -5 = -10/3','2/3 / -5 = -2/15','2/3 + -0.7 = -0.033333333333333333304',
   '2/3 - -0.7 = 1.36666666666666666667','2/3 * -0.7 = -0.46666666666666666666','2/3 / -0.7 = -0.95238095238095238099',
   '2/3 + 3.1415926535897932385 = 3.8082593202564599052','2/3 - 3.1415926535897932385 = -2.4749259869231265717',
   '2/3 * 3.1415926535897932385 = 2.0943951023931954924','2/3 / 3.1415926535897932385 = 0.21220659078919378102',
   '-1/4 + 2/3 = 5/12','-1/4 - 2/3 = -11/12','-1/4 * 2/3 = -1/6','-1/4 / 2/3 = -3/8','-1/4 + -1/4 = -1/2','-1/4 - -1/4 = 0',
   '-1/4 * -1/4 = 1/16','-1/4 / -1/4 = 1','-1/4 + 2 = 7/4','-1/4 - 2 = -9/4','-1/4 * 2 = -1/2','-1/4 / 2 = -1/8',
   '-1/4 + -5 = -21/4','-1/4 - -5 = 19/4','-1/4 * -5 = 5/4','-1/4 / -5 = 1/20','-1/4 + -0.7 = -0.95','-1/4 - -0.7 = 0.45',
   '-1/4 * -0.7 = 0.175','-1/4 / -0.7 = 0.35714285714285714287','-1/4 + 3.1415926535897932385 = 2.8915926535897932385',
   '-1/4 - 3.1415926535897932385 = -3.3915926535897932385','-1/4 * 3.1415926535897932385 = -0.78539816339744830962',
   '-1/4 / 3.1415926535897932385 = -0.079577471545947667884','2 + 2/3 = 8/3','2 - 2/3 = 4/3','2 * 2/3 = 4/3','2 / 2/3 = 3',
   '2 + -1/4 = 7/4','2 - -1/4 = 9/4','2 * -1/4 = -1/2','2 / -1/4 = -8','2 + 2 = 4','2 - 2 = 0','2 * 2 = 4','2 / 2 = 1',
   '2 + -5 = -3','2 - -5 = 7','2 * -5 = -10','2 / -5 = -2/5','2 + -0.7 = 1.3','2 - -0.7 = 2.7','2 * -0.7 = -1.4',
   '2 / -0.7 = -2.8571428571428571429','2 + 3.1415926535897932385 = 5.1415926535897932383',
   '2 - 3.1415926535897932385 = -1.1415926535897932385','2 * 3.1415926535897932385 = 6.283185307179586477',
   '2 / 3.1415926535897932385 = 0.63661977236758134307','-5 + 2/3 = -13/3','-5 - 2/3 = -17/3','-5 * 2/3 = -10/3',
   '-5 / 2/3 = -15/2','-5 + -1/4 = -21/4','-5 - -1/4 = -19/4','-5 * -1/4 = 5/4','-5 / -1/4 = 20','-5 + 2 = -3','-5 - 2 = -7',
   '-5 * 2 = -10','-5 / 2 = -5/2','-5 + -5 = -10','-5 - -5 = 0','-5 * -5 = 25','-5 / -5 = 1','-5 + -0.7 = -5.7',
   '-5 - -0.7 = -4.3','-5 * -0.7 = 3.5','-5 / -0.7 = 7.1428571428571428574',
   '-5 + 3.1415926535897932385 = -1.85840734641020676149','-5 - 3.1415926535897932385 = -8.141592653589793238',
   '-5 * 3.1415926535897932385 = -15.707963267948966192','-5 / 3.1415926535897932385 = -1.5915494309189533576',
   '-0.7 + 2/3 = -0.033333333333333333304','-0.7 - 2/3 = -1.36666666666666666667','-0.7 * 2/3 = -0.46666666666666666666',
   '-0.7 / 2/3 = -1.05','-0.7 + -1/4 = -0.95','-0.7 - -1/4 = -0.45','-0.7 * -1/4 = 0.175','-0.7 / -1/4 = 2.8','-0.7 + 2 = 1.3',
   '-0.7 - 2 = -2.7','-0.7 * 2 = -1.4','-0.7 / 2 = -0.35','-0.7 + -5 = -5.7','-0.7 - -5 = 4.3','-0.7 * -5 = 3.5',
   '-0.7 / -5 = 0.14','-0.7 + -0.7 = -1.4','-0.7 - -0.7 = 0.0','-0.7 * -0.7 = 0.48999999999999999998','-0.7 / -0.7 = 1.0',
   '-0.7 + 3.1415926535897932385 = 2.4415926535897932384','-0.7 - 3.1415926535897932385 = -3.8415926535897932385',
   '-0.7 * 3.1415926535897932385 = -2.1991148575128552668','-0.7 / 3.1415926535897932385 = -0.22281692032865347007',
   '3.1415926535897932385 + 2/3 = 3.8082593202564599052','3.1415926535897932385 - 2/3 = 2.4749259869231265717',
   '3.1415926535897932385 * 2/3 = 2.0943951023931954924','3.1415926535897932385 / 2/3 = 4.7123889803846898574',
   '3.1415926535897932385 + -1/4 = 2.8915926535897932385','3.1415926535897932385 - -1/4 = 3.3915926535897932385',
   '3.1415926535897932385 * -1/4 = -0.78539816339744830962','3.1415926535897932385 / -1/4 = -12.566370614359172954',
   '3.1415926535897932385 + 2 = 5.1415926535897932383','3.1415926535897932385 - 2 = 1.1415926535897932385',
   '3.1415926535897932385 * 2 = 6.283185307179586477','3.1415926535897932385 / 2 = 1.57079632679489661926',
   '3.1415926535897932385 + -5 = -1.85840734641020676149','3.1415926535897932385 - -5 = 8.141592653589793238',
   '3.1415926535897932385 * -5 = -15.707963267948966192','3.1415926535897932385 / -5 = -0.6283185307179586477',
   '3.1415926535897932385 + -0.7 = 2.4415926535897932384','3.1415926535897932385 - -0.7 = 3.8415926535897932385',
   '3.1415926535897932385 * -0.7 = -2.1991148575128552668','3.1415926535897932385 / -0.7 = -4.487989505128276055',
   '3.1415926535897932385 + 3.1415926535897932385 = 6.283185307179586477','3.1415926535897932385 - 3.1415926535897932385 = 0.0',
   '3.1415926535897932385 * 3.1415926535897932385 = 9.869604401089358619','3.1415926535897932385 / 3.1415926535897932385 = 1.0',
   '1/7: 0.(142857)','1/7: 0.14285714285714285714','pi : [436991388364966,139098679093749].toRational','1/6: [1,6].toRational'],
  'FOWin32'=>
  ['2/3 + 2/3 = 4/3','2/3 - 2/3 = 0','2/3 * 2/3 = 4/9','2/3 / 2/3 = 1','2/3 + -1/4 = 5/12','2/3 - -1/4 = 11/12',
   '2/3 * -1/4 = -1/6','2/3 / -1/4 = -8/3','2/3 + 2 = 8/3','2/3 - 2 = -4/3','2/3 * 2 = 4/3','2/3 / 2 = 1/3','2/3 + -5 = -13/3',
   '2/3 - -5 = 17/3','2/3 * -5 = -10/3','2/3 / -5 = -2/15','2/3 + -0.7 = -0.033333333333333333304',
   '2/3 - -0.7 = 1.36666666666666666667','2/3 * -0.7 = -0.46666666666666666666','2/3 / -0.7 = -0.95238095238095238099',
   '2/3 + 3.1415926535897932385 = 3.8082593202564599052','2/3 - 3.1415926535897932385 = -2.4749259869231265717',
   '2/3 * 3.1415926535897932385 = 2.0943951023931954924','2/3 / 3.1415926535897932385 = 0.21220659078919378102',
   '-1/4 + 2/3 = 5/12','-1/4 - 2/3 = -11/12','-1/4 * 2/3 = -1/6','-1/4 / 2/3 = -3/8','-1/4 + -1/4 = -1/2','-1/4 - -1/4 = 0',
   '-1/4 * -1/4 = 1/16','-1/4 / -1/4 = 1','-1/4 + 2 = 7/4','-1/4 - 2 = -9/4','-1/4 * 2 = -1/2','-1/4 / 2 = -1/8',
   '-1/4 + -5 = -21/4','-1/4 - -5 = 19/4','-1/4 * -5 = 5/4','-1/4 / -5 = 1/20','-1/4 + -0.7 = -0.95','-1/4 - -0.7 = 0.45',
   '-1/4 * -0.7 = 0.175','-1/4 / -0.7 = 0.35714285714285714287','-1/4 + 3.1415926535897932385 = 2.8915926535897932385',
   '-1/4 - 3.1415926535897932385 = -3.3915926535897932385','-1/4 * 3.1415926535897932385 = -0.78539816339744830962',
   '-1/4 / 3.1415926535897932385 = -0.079577471545947667884','2 + 2/3 = 8/3','2 - 2/3 = 4/3','2 * 2/3 = 4/3','2 / 2/3 = 3',
   '2 + -1/4 = 7/4','2 - -1/4 = 9/4','2 * -1/4 = -1/2','2 / -1/4 = -8','2 + 2 = 4','2 - 2 = 0','2 * 2 = 4','2 / 2 = 1',
   '2 + -5 = -3','2 - -5 = 7','2 * -5 = -10','2 / -5 = -2/5','2 + -0.7 = 1.3','2 - -0.7 = 2.7','2 * -0.7 = -1.4',
   '2 / -0.7 = -2.8571428571428571429','2 + 3.1415926535897932385 = 5.1415926535897932383',
   '2 - 3.1415926535897932385 = -1.1415926535897932385','2 * 3.1415926535897932385 = 6.283185307179586477',
   '2 / 3.1415926535897932385 = 0.63661977236758134307','-5 + 2/3 = -13/3','-5 - 2/3 = -17/3','-5 * 2/3 = -10/3',
   '-5 / 2/3 = -15/2','-5 + -1/4 = -21/4','-5 - -1/4 = -19/4','-5 * -1/4 = 5/4','-5 / -1/4 = 20','-5 + 2 = -3','-5 - 2 = -7',
   '-5 * 2 = -10','-5 / 2 = -5/2','-5 + -5 = -10','-5 - -5 = 0','-5 * -5 = 25','-5 / -5 = 1','-5 + -0.7 = -5.7',
   '-5 - -0.7 = -4.3','-5 * -0.7 = 3.5','-5 / -0.7 = 7.1428571428571428574',
   '-5 + 3.1415926535897932385 = -1.85840734641020676149','-5 - 3.1415926535897932385 = -8.141592653589793238',
   '-5 * 3.1415926535897932385 = -15.707963267948966192','-5 / 3.1415926535897932385 = -1.5915494309189533576',
   '-0.7 + 2/3 = -0.033333333333333333304','-0.7 - 2/3 = -1.36666666666666666667','-0.7 * 2/3 = -0.46666666666666666666',
   '-0.7 / 2/3 = -1.05','-0.7 + -1/4 = -0.95','-0.7 - -1/4 = -0.45','-0.7 * -1/4 = 0.175','-0.7 / -1/4 = 2.8','-0.7 + 2 = 1.3',
   '-0.7 - 2 = -2.7','-0.7 * 2 = -1.4','-0.7 / 2 = -0.35','-0.7 + -5 = -5.7','-0.7 - -5 = 4.3','-0.7 * -5 = 3.5',
   '-0.7 / -5 = 0.14','-0.7 + -0.7 = -1.4','-0.7 - -0.7 = 0.0','-0.7 * -0.7 = 0.48999999999999999998','-0.7 / -0.7 = 1.0',
   '-0.7 + 3.1415926535897932385 = 2.4415926535897932384','-0.7 - 3.1415926535897932385 = -3.8415926535897932385',
   '-0.7 * 3.1415926535897932385 = -2.1991148575128552668','-0.7 / 3.1415926535897932385 = -0.22281692032865347007',
   '3.1415926535897932385 + 2/3 = 3.8082593202564599052','3.1415926535897932385 - 2/3 = 2.4749259869231265717',
   '3.1415926535897932385 * 2/3 = 2.0943951023931954924','3.1415926535897932385 / 2/3 = 4.7123889803846898574',
   '3.1415926535897932385 + -1/4 = 2.8915926535897932385','3.1415926535897932385 - -1/4 = 3.3915926535897932385',
   '3.1415926535897932385 * -1/4 = -0.78539816339744830962','3.1415926535897932385 / -1/4 = -12.566370614359172954',
   '3.1415926535897932385 + 2 = 5.1415926535897932383','3.1415926535897932385 - 2 = 1.1415926535897932385',
   '3.1415926535897932385 * 2 = 6.283185307179586477','3.1415926535897932385 / 2 = 1.57079632679489661926',
   '3.1415926535897932385 + -5 = -1.85840734641020676149','3.1415926535897932385 - -5 = 8.141592653589793238',
   '3.1415926535897932385 * -5 = -15.707963267948966192','3.1415926535897932385 / -5 = -0.6283185307179586477',
   '3.1415926535897932385 + -0.7 = 2.4415926535897932384','3.1415926535897932385 - -0.7 = 3.8415926535897932385',
   '3.1415926535897932385 * -0.7 = -2.1991148575128552668','3.1415926535897932385 / -0.7 = -4.487989505128276055',
   '3.1415926535897932385 + 3.1415926535897932385 = 6.283185307179586477','3.1415926535897932385 - 3.1415926535897932385 = 0.0',
   '3.1415926535897932385 * 3.1415926535897932385 = 9.869604401089358619','3.1415926535897932385 / 3.1415926535897932385 = 1.0',
   '1/7: 0.(142857)','1/7: 0.14285714285714285714','pi : [436991388364966,139098679093749].toRational','1/6: [1,6].toRational'],
  'FOWin64'=>
  ['2/3 + 2/3 = 4/3','2/3 - 2/3 = 0','2/3 * 2/3 = 4/9','2/3 / 2/3 = 1','2/3 + -1/4 = 5/12','2/3 - -1/4 = 11/12',
   '2/3 * -1/4 = -1/6','2/3 / -1/4 = -8/3','2/3 + 2 = 8/3','2/3 - 2 = -4/3','2/3 * 2 = 4/3','2/3 / 2 = 1/3','2/3 + -5 = -13/3',
   '2/3 - -5 = 17/3','2/3 * -5 = -10/3','2/3 / -5 = -2/15','2/3 + -0.7 = -0.033333333333333326',
   '2/3 - -0.7 = 1.3666666666666667','2/3 * -0.7 = -0.4666666666666666','2/3 / -0.7 = -0.9523809523809524',
   '2/3 + 3.141592653589793 = 3.8082593202564596','2/3 - 3.141592653589793 = -2.4749259869231266',
   '2/3 * 3.141592653589793 = 2.0943951023931953','2/3 / 3.141592653589793 = 0.21220659078919377','-1/4 + 2/3 = 5/12',
   '-1/4 - 2/3 = -11/12','-1/4 * 2/3 = -1/6','-1/4 / 2/3 = -3/8','-1/4 + -1/4 = -1/2','-1/4 - -1/4 = 0','-1/4 * -1/4 = 1/16',
   '-1/4 / -1/4 = 1','-1/4 + 2 = 7/4','-1/4 - 2 = -9/4','-1/4 * 2 = -1/2','-1/4 / 2 = -1/8','-1/4 + -5 = -21/4',
   '-1/4 - -5 = 19/4','-1/4 * -5 = 5/4','-1/4 / -5 = 1/20','-1/4 + -0.7 = -0.95','-1/4 - -0.7 = 0.44999999999999996',
   '-1/4 * -0.7 = 0.175','-1/4 / -0.7 = 0.35714285714285715','-1/4 + 3.141592653589793 = 2.891592653589793',
   '-1/4 - 3.141592653589793 = -3.391592653589793','-1/4 * 3.141592653589793 = -0.78539816339744828',
   '-1/4 / 3.141592653589793 = -0.07957747154594767','2 + 2/3 = 8/3','2 - 2/3 = 4/3','2 * 2/3 = 4/3','2 / 2/3 = 3',
   '2 + -1/4 = 7/4','2 - -1/4 = 9/4','2 * -1/4 = -1/2','2 / -1/4 = -8','2 + 2 = 4','2 - 2 = 0','2 * 2 = 4','2 / 2 = 1',
   '2 + -5 = -3','2 - -5 = 7','2 * -5 = -10','2 / -5 = -2/5','2 + -0.7 = 1.3','2 - -0.7 = 2.7','2 * -0.7 = -1.4',
   '2 / -0.7 = -2.857142857142857','2 + 3.141592653589793 = 5.141592653589793','2 - 3.141592653589793 = -1.1415926535897931',
   '2 * 3.141592653589793 = 6.283185307179586','2 / 3.141592653589793 = 0.63661977236758138','-5 + 2/3 = -13/3',
   '-5 - 2/3 = -17/3','-5 * 2/3 = -10/3','-5 / 2/3 = -15/2','-5 + -1/4 = -21/4','-5 - -1/4 = -19/4','-5 * -1/4 = 5/4',
   '-5 / -1/4 = 20','-5 + 2 = -3','-5 - 2 = -7','-5 * 2 = -10','-5 / 2 = -5/2','-5 + -5 = -10','-5 - -5 = 0','-5 * -5 = 25',
   '-5 / -5 = 1','-5 + -0.7 = -5.7','-5 - -0.7 = -4.3','-5 * -0.7 = 3.5','-5 / -0.7 = 7.142857142857143',
   '-5 + 3.141592653589793 = -1.8584073464102069','-5 - 3.141592653589793 = -8.141592653589793',
   '-5 * 3.141592653589793 = -15.707963267948966','-5 / 3.141592653589793 = -1.5915494309189535',
   '-0.7 + 2/3 = -0.033333333333333326','-0.7 - 2/3 = -1.3666666666666667','-0.7 * 2/3 = -0.4666666666666666',
   '-0.7 / 2/3 = -1.05','-0.7 + -1/4 = -0.95','-0.7 - -1/4 = -0.44999999999999996','-0.7 * -1/4 = 0.175','-0.7 / -1/4 = 2.8',
   '-0.7 + 2 = 1.3','-0.7 - 2 = -2.7','-0.7 * 2 = -1.4','-0.7 / 2 = -0.35','-0.7 + -5 = -5.7','-0.7 - -5 = 4.3',
   '-0.7 * -5 = 3.5','-0.7 / -5 = 0.13999999999999999','-0.7 + -0.7 = -1.4','-0.7 - -0.7 = 0.0',
   '-0.7 * -0.7 = 0.48999999999999994','-0.7 / -0.7 = 1.0','-0.7 + 3.141592653589793 = 2.4415926535897929',
   '-0.7 - 3.141592653589793 = -3.8415926535897933','-0.7 * 3.141592653589793 = -2.199114857512855',
   '-0.7 / 3.141592653589793 = -0.22281692032865347','3.141592653589793 + 2/3 = 3.8082593202564596',
   '3.141592653589793 - 2/3 = 2.4749259869231266','3.141592653589793 * 2/3 = 2.0943951023931953',
   '3.141592653589793 / 2/3 = 4.71238898038469','3.141592653589793 + -1/4 = 2.891592653589793',
   '3.141592653589793 - -1/4 = 3.391592653589793','3.141592653589793 * -1/4 = -0.78539816339744828',
   '3.141592653589793 / -1/4 = -12.566370614359172','3.141592653589793 + 2 = 5.141592653589793',
   '3.141592653589793 - 2 = 1.1415926535897931','3.141592653589793 * 2 = 6.283185307179586',
   '3.141592653589793 / 2 = 1.5707963267948966','3.141592653589793 + -5 = -1.8584073464102069',
   '3.141592653589793 - -5 = 8.141592653589793','3.141592653589793 * -5 = -15.707963267948966',
   '3.141592653589793 / -5 = -0.6283185307179586','3.141592653589793 + -0.7 = 2.4415926535897929',
   '3.141592653589793 - -0.7 = 3.8415926535897933','3.141592653589793 * -0.7 = -2.199114857512855',
   '3.141592653589793 / -0.7 = -4.4879895051282759','3.141592653589793 + 3.141592653589793 = 6.283185307179586',
   '3.141592653589793 - 3.141592653589793 = 0.0','3.141592653589793 * 3.141592653589793 = 9.869604401089358',
   '3.141592653589793 / 3.141592653589793 = 1.0','1/7: 0.(142857)','1/7: 0.14285714285714285',
   'pi : [245850922,78256779].toRational','1/6: [1,6].toRational'],
  'LDLinux'=>
  ['2/3 + 2/3 = 4/3','2/3 - 2/3 = 0','2/3 * 2/3 = 4/9','2/3 / 2/3 = 1','2/3 + -1/4 = 5/12','2/3 - -1/4 = 11/12',
   '2/3 * -1/4 = -1/6','2/3 / -1/4 = -8/3','2/3 + 2 = 8/3','2/3 - 2 = -4/3','2/3 * 2 = 4/3','2/3 / 2 = 1/3','2/3 + -5 = -13/3',
   '2/3 - -5 = 17/3','2/3 * -5 = -10/3','2/3 / -5 = -2/15','2/3 + -0.7 = -0.033333333333333333304',
   '2/3 - -0.7 = 1.36666666666666666667','2/3 * -0.7 = -0.46666666666666666666','2/3 / -0.7 = -0.95238095238095238099',
   '2/3 + 3.1415926535897932385 = 3.8082593202564599052','2/3 - 3.1415926535897932385 = -2.4749259869231265717',
   '2/3 * 3.1415926535897932385 = 2.0943951023931954924','2/3 / 3.1415926535897932385 = 0.21220659078919378102',
   '-1/4 + 2/3 = 5/12','-1/4 - 2/3 = -11/12','-1/4 * 2/3 = -1/6','-1/4 / 2/3 = -3/8','-1/4 + -1/4 = -1/2','-1/4 - -1/4 = 0',
   '-1/4 * -1/4 = 1/16','-1/4 / -1/4 = 1','-1/4 + 2 = 7/4','-1/4 - 2 = -9/4','-1/4 * 2 = -1/2','-1/4 / 2 = -1/8',
   '-1/4 + -5 = -21/4','-1/4 - -5 = 19/4','-1/4 * -5 = 5/4','-1/4 / -5 = 1/20','-1/4 + -0.7 = -0.95','-1/4 - -0.7 = 0.45',
   '-1/4 * -0.7 = 0.175','-1/4 / -0.7 = 0.35714285714285714287','-1/4 + 3.1415926535897932385 = 2.8915926535897932385',
   '-1/4 - 3.1415926535897932385 = -3.3915926535897932385','-1/4 * 3.1415926535897932385 = -0.78539816339744830962',
   '-1/4 / 3.1415926535897932385 = -0.079577471545947667884','2 + 2/3 = 8/3','2 - 2/3 = 4/3','2 * 2/3 = 4/3','2 / 2/3 = 3',
   '2 + -1/4 = 7/4','2 - -1/4 = 9/4','2 * -1/4 = -1/2','2 / -1/4 = -8','2 + 2 = 4','2 - 2 = 0','2 * 2 = 4','2 / 2 = 1',
   '2 + -5 = -3','2 - -5 = 7','2 * -5 = -10','2 / -5 = -2/5','2 + -0.7 = 1.3','2 - -0.7 = 2.7','2 * -0.7 = -1.4',
   '2 / -0.7 = -2.8571428571428571429','2 + 3.1415926535897932385 = 5.1415926535897932383',
   '2 - 3.1415926535897932385 = -1.1415926535897932385','2 * 3.1415926535897932385 = 6.283185307179586477',
   '2 / 3.1415926535897932385 = 0.63661977236758134307','-5 + 2/3 = -13/3','-5 - 2/3 = -17/3','-5 * 2/3 = -10/3',
   '-5 / 2/3 = -15/2','-5 + -1/4 = -21/4','-5 - -1/4 = -19/4','-5 * -1/4 = 5/4','-5 / -1/4 = 20','-5 + 2 = -3','-5 - 2 = -7',
   '-5 * 2 = -10','-5 / 2 = -5/2','-5 + -5 = -10','-5 - -5 = 0','-5 * -5 = 25','-5 / -5 = 1','-5 + -0.7 = -5.7',
   '-5 - -0.7 = -4.3','-5 * -0.7 = 3.5','-5 / -0.7 = 7.1428571428571428574',
   '-5 + 3.1415926535897932385 = -1.85840734641020676149','-5 - 3.1415926535897932385 = -8.141592653589793238',
   '-5 * 3.1415926535897932385 = -15.707963267948966192','-5 / 3.1415926535897932385 = -1.5915494309189533576',
   '-0.7 + 2/3 = -0.033333333333333333304','-0.7 - 2/3 = -1.36666666666666666667','-0.7 * 2/3 = -0.46666666666666666666',
   '-0.7 / 2/3 = -1.05','-0.7 + -1/4 = -0.95','-0.7 - -1/4 = -0.45','-0.7 * -1/4 = 0.175','-0.7 / -1/4 = 2.8','-0.7 + 2 = 1.3',
   '-0.7 - 2 = -2.7','-0.7 * 2 = -1.4','-0.7 / 2 = -0.35','-0.7 + -5 = -5.7','-0.7 - -5 = 4.3','-0.7 * -5 = 3.5',
   '-0.7 / -5 = 0.14','-0.7 + -0.7 = -1.4','-0.7 - -0.7 = 0.0','-0.7 * -0.7 = 0.48999999999999999998','-0.7 / -0.7 = 1.0',
   '-0.7 + 3.1415926535897932385 = 2.4415926535897932384','-0.7 - 3.1415926535897932385 = -3.8415926535897932385',
   '-0.7 * 3.1415926535897932385 = -2.1991148575128552668','-0.7 / 3.1415926535897932385 = -0.22281692032865347007',
   '3.1415926535897932385 + 2/3 = 3.8082593202564599052','3.1415926535897932385 - 2/3 = 2.4749259869231265717',
   '3.1415926535897932385 * 2/3 = 2.0943951023931954924','3.1415926535897932385 / 2/3 = 4.7123889803846898574',
   '3.1415926535897932385 + -1/4 = 2.8915926535897932385','3.1415926535897932385 - -1/4 = 3.3915926535897932385',
   '3.1415926535897932385 * -1/4 = -0.78539816339744830962','3.1415926535897932385 / -1/4 = -12.566370614359172954',
   '3.1415926535897932385 + 2 = 5.1415926535897932383','3.1415926535897932385 - 2 = 1.1415926535897932385',
   '3.1415926535897932385 * 2 = 6.283185307179586477','3.1415926535897932385 / 2 = 1.57079632679489661926',
   '3.1415926535897932385 + -5 = -1.85840734641020676149','3.1415926535897932385 - -5 = 8.141592653589793238',
   '3.1415926535897932385 * -5 = -15.707963267948966192','3.1415926535897932385 / -5 = -0.6283185307179586477',
   '3.1415926535897932385 + -0.7 = 2.4415926535897932384','3.1415926535897932385 - -0.7 = 3.8415926535897932385',
   '3.1415926535897932385 * -0.7 = -2.1991148575128552668','3.1415926535897932385 / -0.7 = -4.487989505128276055',
   '3.1415926535897932385 + 3.1415926535897932385 = 6.283185307179586477','3.1415926535897932385 - 3.1415926535897932385 = 0.0',
   '3.1415926535897932385 * 3.1415926535897932385 = 9.869604401089358619','3.1415926535897932385 / 3.1415926535897932385 = 1.0',
   '1/7: 0.(142857)','1/7: 0.14285714285714285714','pi : [436991388364966,139098679093749].toRational','1/6: [1,6].toRational'],
  'LDWin32'=>
  ['2/3 + 2/3 = 4/3','2/3 - 2/3 = 0','2/3 * 2/3 = 4/9','2/3 / 2/3 = 1','2/3 + -1/4 = 5/12','2/3 - -1/4 = 11/12',
   '2/3 * -1/4 = -1/6','2/3 / -1/4 = -8/3','2/3 + 2 = 8/3','2/3 - 2 = -4/3','2/3 * 2 = 4/3','2/3 / 2 = 1/3','2/3 + -5 = -13/3',
   '2/3 - -5 = 17/3','2/3 * -5 = -10/3','2/3 / -5 = -2/15','2/3 + -0.7 = -0.033333333333333333304',
   '2/3 - -0.7 = 1.36666666666666666667','2/3 * -0.7 = -0.46666666666666666666','2/3 / -0.7 = -0.95238095238095238099',
   '2/3 + 3.1415926535897932385 = 3.8082593202564599052','2/3 - 3.1415926535897932385 = -2.4749259869231265717',
   '2/3 * 3.1415926535897932385 = 2.0943951023931954924','2/3 / 3.1415926535897932385 = 0.21220659078919378102',
   '-1/4 + 2/3 = 5/12','-1/4 - 2/3 = -11/12','-1/4 * 2/3 = -1/6','-1/4 / 2/3 = -3/8','-1/4 + -1/4 = -1/2','-1/4 - -1/4 = 0',
   '-1/4 * -1/4 = 1/16','-1/4 / -1/4 = 1','-1/4 + 2 = 7/4','-1/4 - 2 = -9/4','-1/4 * 2 = -1/2','-1/4 / 2 = -1/8',
   '-1/4 + -5 = -21/4','-1/4 - -5 = 19/4','-1/4 * -5 = 5/4','-1/4 / -5 = 1/20','-1/4 + -0.7 = -0.95','-1/4 - -0.7 = 0.45',
   '-1/4 * -0.7 = 0.175','-1/4 / -0.7 = 0.35714285714285714287','-1/4 + 3.1415926535897932385 = 2.8915926535897932385',
   '-1/4 - 3.1415926535897932385 = -3.3915926535897932385','-1/4 * 3.1415926535897932385 = -0.78539816339744830962',
   '-1/4 / 3.1415926535897932385 = -0.079577471545947667884','2 + 2/3 = 8/3','2 - 2/3 = 4/3','2 * 2/3 = 4/3','2 / 2/3 = 3',
   '2 + -1/4 = 7/4','2 - -1/4 = 9/4','2 * -1/4 = -1/2','2 / -1/4 = -8','2 + 2 = 4','2 - 2 = 0','2 * 2 = 4','2 / 2 = 1',
   '2 + -5 = -3','2 - -5 = 7','2 * -5 = -10','2 / -5 = -2/5','2 + -0.7 = 1.3','2 - -0.7 = 2.7','2 * -0.7 = -1.4',
   '2 / -0.7 = -2.8571428571428571429','2 + 3.1415926535897932385 = 5.1415926535897932383',
   '2 - 3.1415926535897932385 = -1.1415926535897932385','2 * 3.1415926535897932385 = 6.283185307179586477',
   '2 / 3.1415926535897932385 = 0.63661977236758134307','-5 + 2/3 = -13/3','-5 - 2/3 = -17/3','-5 * 2/3 = -10/3',
   '-5 / 2/3 = -15/2','-5 + -1/4 = -21/4','-5 - -1/4 = -19/4','-5 * -1/4 = 5/4','-5 / -1/4 = 20','-5 + 2 = -3','-5 - 2 = -7',
   '-5 * 2 = -10','-5 / 2 = -5/2','-5 + -5 = -10','-5 - -5 = 0','-5 * -5 = 25','-5 / -5 = 1','-5 + -0.7 = -5.7',
   '-5 - -0.7 = -4.3','-5 * -0.7 = 3.5','-5 / -0.7 = 7.1428571428571428574',
   '-5 + 3.1415926535897932385 = -1.85840734641020676149','-5 - 3.1415926535897932385 = -8.141592653589793238',
   '-5 * 3.1415926535897932385 = -15.707963267948966192','-5 / 3.1415926535897932385 = -1.5915494309189533576',
   '-0.7 + 2/3 = -0.033333333333333333304','-0.7 - 2/3 = -1.36666666666666666667','-0.7 * 2/3 = -0.46666666666666666666',
   '-0.7 / 2/3 = -1.05','-0.7 + -1/4 = -0.95','-0.7 - -1/4 = -0.45','-0.7 * -1/4 = 0.175','-0.7 / -1/4 = 2.8','-0.7 + 2 = 1.3',
   '-0.7 - 2 = -2.7','-0.7 * 2 = -1.4','-0.7 / 2 = -0.35','-0.7 + -5 = -5.7','-0.7 - -5 = 4.3','-0.7 * -5 = 3.5',
   '-0.7 / -5 = 0.14','-0.7 + -0.7 = -1.4','-0.7 - -0.7 = 0.0','-0.7 * -0.7 = 0.48999999999999999998','-0.7 / -0.7 = 1.0',
   '-0.7 + 3.1415926535897932385 = 2.4415926535897932384','-0.7 - 3.1415926535897932385 = -3.8415926535897932385',
   '-0.7 * 3.1415926535897932385 = -2.1991148575128552668','-0.7 / 3.1415926535897932385 = -0.22281692032865347007',
   '3.1415926535897932385 + 2/3 = 3.8082593202564599052','3.1415926535897932385 - 2/3 = 2.4749259869231265717',
   '3.1415926535897932385 * 2/3 = 2.0943951023931954924','3.1415926535897932385 / 2/3 = 4.7123889803846898574',
   '3.1415926535897932385 + -1/4 = 2.8915926535897932385','3.1415926535897932385 - -1/4 = 3.3915926535897932385',
   '3.1415926535897932385 * -1/4 = -0.78539816339744830962','3.1415926535897932385 / -1/4 = -12.566370614359172954',
   '3.1415926535897932385 + 2 = 5.1415926535897932383','3.1415926535897932385 - 2 = 1.1415926535897932385',
   '3.1415926535897932385 * 2 = 6.283185307179586477','3.1415926535897932385 / 2 = 1.57079632679489661926',
   '3.1415926535897932385 + -5 = -1.85840734641020676149','3.1415926535897932385 - -5 = 8.141592653589793238',
   '3.1415926535897932385 * -5 = -15.707963267948966192','3.1415926535897932385 / -5 = -0.6283185307179586477',
   '3.1415926535897932385 + -0.7 = 2.4415926535897932384','3.1415926535897932385 - -0.7 = 3.8415926535897932385',
   '3.1415926535897932385 * -0.7 = -2.1991148575128552668','3.1415926535897932385 / -0.7 = -4.487989505128276055',
   '3.1415926535897932385 + 3.1415926535897932385 = 6.283185307179586477','3.1415926535897932385 - 3.1415926535897932385 = 0.0',
   '3.1415926535897932385 * 3.1415926535897932385 = 9.869604401089358619','3.1415926535897932385 / 3.1415926535897932385 = 1.0',
   '1/7: 0.(142857)','1/7: 0.14285714285714285714','pi : [436991388364966,139098679093749].toRational','1/6: [1,6].toRational'],
  'LDWin64'=>
  ['2/3 + 2/3 = 4/3','2/3 - 2/3 = 0','2/3 * 2/3 = 4/9','2/3 / 2/3 = 1','2/3 + -1/4 = 5/12','2/3 - -1/4 = 11/12',
   '2/3 * -1/4 = -1/6','2/3 / -1/4 = -8/3','2/3 + 2 = 8/3','2/3 - 2 = -4/3','2/3 * 2 = 4/3','2/3 / 2 = 1/3','2/3 + -5 = -13/3',
   '2/3 - -5 = 17/3','2/3 * -5 = -10/3','2/3 / -5 = -2/15','2/3 + -0.7 = -0.033333333333333326',
   '2/3 - -0.7 = 1.3666666666666667','2/3 * -0.7 = -0.4666666666666666','2/3 / -0.7 = -0.9523809523809524',
   '2/3 + 3.141592653589793 = 3.8082593202564596','2/3 - 3.141592653589793 = -2.4749259869231266',
   '2/3 * 3.141592653589793 = 2.0943951023931953','2/3 / 3.141592653589793 = 0.21220659078919377','-1/4 + 2/3 = 5/12',
   '-1/4 - 2/3 = -11/12','-1/4 * 2/3 = -1/6','-1/4 / 2/3 = -3/8','-1/4 + -1/4 = -1/2','-1/4 - -1/4 = 0','-1/4 * -1/4 = 1/16',
   '-1/4 / -1/4 = 1','-1/4 + 2 = 7/4','-1/4 - 2 = -9/4','-1/4 * 2 = -1/2','-1/4 / 2 = -1/8','-1/4 + -5 = -21/4',
   '-1/4 - -5 = 19/4','-1/4 * -5 = 5/4','-1/4 / -5 = 1/20','-1/4 + -0.7 = -0.95','-1/4 - -0.7 = 0.44999999999999996',
   '-1/4 * -0.7 = 0.175','-1/4 / -0.7 = 0.35714285714285715','-1/4 + 3.141592653589793 = 2.891592653589793',
   '-1/4 - 3.141592653589793 = -3.391592653589793','-1/4 * 3.141592653589793 = -0.78539816339744828',
   '-1/4 / 3.141592653589793 = -0.07957747154594767','2 + 2/3 = 8/3','2 - 2/3 = 4/3','2 * 2/3 = 4/3','2 / 2/3 = 3',
   '2 + -1/4 = 7/4','2 - -1/4 = 9/4','2 * -1/4 = -1/2','2 / -1/4 = -8','2 + 2 = 4','2 - 2 = 0','2 * 2 = 4','2 / 2 = 1',
   '2 + -5 = -3','2 - -5 = 7','2 * -5 = -10','2 / -5 = -2/5','2 + -0.7 = 1.3','2 - -0.7 = 2.7','2 * -0.7 = -1.4',
   '2 / -0.7 = -2.857142857142857','2 + 3.141592653589793 = 5.141592653589793','2 - 3.141592653589793 = -1.1415926535897931',
   '2 * 3.141592653589793 = 6.283185307179586','2 / 3.141592653589793 = 0.63661977236758138','-5 + 2/3 = -13/3',
   '-5 - 2/3 = -17/3','-5 * 2/3 = -10/3','-5 / 2/3 = -15/2','-5 + -1/4 = -21/4','-5 - -1/4 = -19/4','-5 * -1/4 = 5/4',
   '-5 / -1/4 = 20','-5 + 2 = -3','-5 - 2 = -7','-5 * 2 = -10','-5 / 2 = -5/2','-5 + -5 = -10','-5 - -5 = 0','-5 * -5 = 25',
   '-5 / -5 = 1','-5 + -0.7 = -5.7','-5 - -0.7 = -4.3','-5 * -0.7 = 3.5','-5 / -0.7 = 7.142857142857143',
   '-5 + 3.141592653589793 = -1.8584073464102069','-5 - 3.141592653589793 = -8.141592653589793',
   '-5 * 3.141592653589793 = -15.707963267948966','-5 / 3.141592653589793 = -1.5915494309189535',
   '-0.7 + 2/3 = -0.033333333333333326','-0.7 - 2/3 = -1.3666666666666667','-0.7 * 2/3 = -0.4666666666666666',
   '-0.7 / 2/3 = -1.05','-0.7 + -1/4 = -0.95','-0.7 - -1/4 = -0.44999999999999996','-0.7 * -1/4 = 0.175','-0.7 / -1/4 = 2.8',
   '-0.7 + 2 = 1.3','-0.7 - 2 = -2.7','-0.7 * 2 = -1.4','-0.7 / 2 = -0.35','-0.7 + -5 = -5.7','-0.7 - -5 = 4.3',
   '-0.7 * -5 = 3.5','-0.7 / -5 = 0.13999999999999999','-0.7 + -0.7 = -1.4','-0.7 - -0.7 = 0.0',
   '-0.7 * -0.7 = 0.48999999999999994','-0.7 / -0.7 = 1.0','-0.7 + 3.141592653589793 = 2.4415926535897929',
   '-0.7 - 3.141592653589793 = -3.8415926535897933','-0.7 * 3.141592653589793 = -2.199114857512855',
   '-0.7 / 3.141592653589793 = -0.22281692032865347','3.141592653589793 + 2/3 = 3.8082593202564596',
   '3.141592653589793 - 2/3 = 2.4749259869231266','3.141592653589793 * 2/3 = 2.0943951023931953',
   '3.141592653589793 / 2/3 = 4.71238898038469','3.141592653589793 + -1/4 = 2.891592653589793',
   '3.141592653589793 - -1/4 = 3.391592653589793','3.141592653589793 * -1/4 = -0.78539816339744828',
   '3.141592653589793 / -1/4 = -12.566370614359172','3.141592653589793 + 2 = 5.141592653589793',
   '3.141592653589793 - 2 = 1.1415926535897931','3.141592653589793 * 2 = 6.283185307179586',
   '3.141592653589793 / 2 = 1.5707963267948966','3.141592653589793 + -5 = -1.8584073464102069',
   '3.141592653589793 - -5 = 8.141592653589793','3.141592653589793 * -5 = -15.707963267948966',
   '3.141592653589793 / -5 = -0.6283185307179586','3.141592653589793 + -0.7 = 2.4415926535897929',
   '3.141592653589793 - -0.7 = 3.8415926535897933','3.141592653589793 * -0.7 = -2.199114857512855',
   '3.141592653589793 / -0.7 = -4.4879895051282759','3.141592653589793 + 3.141592653589793 = 6.283185307179586',
   '3.141592653589793 - 3.141592653589793 = 0.0','3.141592653589793 * 3.141592653589793 = 9.869604401089358',
   '3.141592653589793 / 3.141592653589793 = 1.0','1/7: 0.(142857)','1/7: 0.14285714285714285',
   'pi : [245850922,78256779].toRational','1/6: [1,6].toRational'],
  'LOLinux'=>
  ['2/3 + 2/3 = 4/3','2/3 - 2/3 = 0','2/3 * 2/3 = 4/9','2/3 / 2/3 = 1','2/3 + -1/4 = 5/12','2/3 - -1/4 = 11/12',
   '2/3 * -1/4 = -1/6','2/3 / -1/4 = -8/3','2/3 + 2 = 8/3','2/3 - 2 = -4/3','2/3 * 2 = 4/3','2/3 / 2 = 1/3','2/3 + -5 = -13/3',
   '2/3 - -5 = 17/3','2/3 * -5 = -10/3','2/3 / -5 = -2/15','2/3 + -0.7 = -0.033333333333333333304',
   '2/3 - -0.7 = 1.36666666666666666667','2/3 * -0.7 = -0.46666666666666666666','2/3 / -0.7 = -0.95238095238095238099',
   '2/3 + 3.1415926535897932385 = 3.8082593202564599052','2/3 - 3.1415926535897932385 = -2.4749259869231265717',
   '2/3 * 3.1415926535897932385 = 2.0943951023931954924','2/3 / 3.1415926535897932385 = 0.21220659078919378102',
   '-1/4 + 2/3 = 5/12','-1/4 - 2/3 = -11/12','-1/4 * 2/3 = -1/6','-1/4 / 2/3 = -3/8','-1/4 + -1/4 = -1/2','-1/4 - -1/4 = 0',
   '-1/4 * -1/4 = 1/16','-1/4 / -1/4 = 1','-1/4 + 2 = 7/4','-1/4 - 2 = -9/4','-1/4 * 2 = -1/2','-1/4 / 2 = -1/8',
   '-1/4 + -5 = -21/4','-1/4 - -5 = 19/4','-1/4 * -5 = 5/4','-1/4 / -5 = 1/20','-1/4 + -0.7 = -0.95','-1/4 - -0.7 = 0.45',
   '-1/4 * -0.7 = 0.175','-1/4 / -0.7 = 0.35714285714285714287','-1/4 + 3.1415926535897932385 = 2.8915926535897932385',
   '-1/4 - 3.1415926535897932385 = -3.3915926535897932385','-1/4 * 3.1415926535897932385 = -0.78539816339744830962',
   '-1/4 / 3.1415926535897932385 = -0.079577471545947667884','2 + 2/3 = 8/3','2 - 2/3 = 4/3','2 * 2/3 = 4/3','2 / 2/3 = 3',
   '2 + -1/4 = 7/4','2 - -1/4 = 9/4','2 * -1/4 = -1/2','2 / -1/4 = -8','2 + 2 = 4','2 - 2 = 0','2 * 2 = 4','2 / 2 = 1',
   '2 + -5 = -3','2 - -5 = 7','2 * -5 = -10','2 / -5 = -2/5','2 + -0.7 = 1.3','2 - -0.7 = 2.7','2 * -0.7 = -1.4',
   '2 / -0.7 = -2.8571428571428571429','2 + 3.1415926535897932385 = 5.1415926535897932383',
   '2 - 3.1415926535897932385 = -1.1415926535897932385','2 * 3.1415926535897932385 = 6.283185307179586477',
   '2 / 3.1415926535897932385 = 0.63661977236758134307','-5 + 2/3 = -13/3','-5 - 2/3 = -17/3','-5 * 2/3 = -10/3',
   '-5 / 2/3 = -15/2','-5 + -1/4 = -21/4','-5 - -1/4 = -19/4','-5 * -1/4 = 5/4','-5 / -1/4 = 20','-5 + 2 = -3','-5 - 2 = -7',
   '-5 * 2 = -10','-5 / 2 = -5/2','-5 + -5 = -10','-5 - -5 = 0','-5 * -5 = 25','-5 / -5 = 1','-5 + -0.7 = -5.7',
   '-5 - -0.7 = -4.3','-5 * -0.7 = 3.5','-5 / -0.7 = 7.1428571428571428574',
   '-5 + 3.1415926535897932385 = -1.85840734641020676149','-5 - 3.1415926535897932385 = -8.141592653589793238',
   '-5 * 3.1415926535897932385 = -15.707963267948966192','-5 / 3.1415926535897932385 = -1.5915494309189533576',
   '-0.7 + 2/3 = -0.033333333333333333304','-0.7 - 2/3 = -1.36666666666666666667','-0.7 * 2/3 = -0.46666666666666666666',
   '-0.7 / 2/3 = -1.05','-0.7 + -1/4 = -0.95','-0.7 - -1/4 = -0.45','-0.7 * -1/4 = 0.175','-0.7 / -1/4 = 2.8','-0.7 + 2 = 1.3',
   '-0.7 - 2 = -2.7','-0.7 * 2 = -1.4','-0.7 / 2 = -0.35','-0.7 + -5 = -5.7','-0.7 - -5 = 4.3','-0.7 * -5 = 3.5',
   '-0.7 / -5 = 0.14','-0.7 + -0.7 = -1.4','-0.7 - -0.7 = 0.0','-0.7 * -0.7 = 0.48999999999999999998','-0.7 / -0.7 = 1.0',
   '-0.7 + 3.1415926535897932385 = 2.4415926535897932384','-0.7 - 3.1415926535897932385 = -3.8415926535897932385',
   '-0.7 * 3.1415926535897932385 = -2.1991148575128552668','-0.7 / 3.1415926535897932385 = -0.22281692032865347007',
   '3.1415926535897932385 + 2/3 = 3.8082593202564599052','3.1415926535897932385 - 2/3 = 2.4749259869231265717',
   '3.1415926535897932385 * 2/3 = 2.0943951023931954924','3.1415926535897932385 / 2/3 = 4.7123889803846898574',
   '3.1415926535897932385 + -1/4 = 2.8915926535897932385','3.1415926535897932385 - -1/4 = 3.3915926535897932385',
   '3.1415926535897932385 * -1/4 = -0.78539816339744830962','3.1415926535897932385 / -1/4 = -12.566370614359172954',
   '3.1415926535897932385 + 2 = 5.1415926535897932383','3.1415926535897932385 - 2 = 1.1415926535897932385',
   '3.1415926535897932385 * 2 = 6.283185307179586477','3.1415926535897932385 / 2 = 1.57079632679489661926',
   '3.1415926535897932385 + -5 = -1.85840734641020676149','3.1415926535897932385 - -5 = 8.141592653589793238',
   '3.1415926535897932385 * -5 = -15.707963267948966192','3.1415926535897932385 / -5 = -0.6283185307179586477',
   '3.1415926535897932385 + -0.7 = 2.4415926535897932384','3.1415926535897932385 - -0.7 = 3.8415926535897932385',
   '3.1415926535897932385 * -0.7 = -2.1991148575128552668','3.1415926535897932385 / -0.7 = -4.487989505128276055',
   '3.1415926535897932385 + 3.1415926535897932385 = 6.283185307179586477','3.1415926535897932385 - 3.1415926535897932385 = 0.0',
   '3.1415926535897932385 * 3.1415926535897932385 = 9.869604401089358619','3.1415926535897932385 / 3.1415926535897932385 = 1.0',
   '1/7: 0.(142857)','1/7: 0.14285714285714285714','pi : [436991388364966,139098679093749].toRational','1/6: [1,6].toRational'],
  'LOWin32'=>
  ['2/3 + 2/3 = 4/3','2/3 - 2/3 = 0','2/3 * 2/3 = 4/9','2/3 / 2/3 = 1','2/3 + -1/4 = 5/12','2/3 - -1/4 = 11/12',
   '2/3 * -1/4 = -1/6','2/3 / -1/4 = -8/3','2/3 + 2 = 8/3','2/3 - 2 = -4/3','2/3 * 2 = 4/3','2/3 / 2 = 1/3','2/3 + -5 = -13/3',
   '2/3 - -5 = 17/3','2/3 * -5 = -10/3','2/3 / -5 = -2/15','2/3 + -0.7 = -0.033333333333333333304',
   '2/3 - -0.7 = 1.36666666666666666667','2/3 * -0.7 = -0.46666666666666666666','2/3 / -0.7 = -0.95238095238095238099',
   '2/3 + 3.1415926535897932385 = 3.8082593202564599052','2/3 - 3.1415926535897932385 = -2.4749259869231265717',
   '2/3 * 3.1415926535897932385 = 2.0943951023931954924','2/3 / 3.1415926535897932385 = 0.21220659078919378102',
   '-1/4 + 2/3 = 5/12','-1/4 - 2/3 = -11/12','-1/4 * 2/3 = -1/6','-1/4 / 2/3 = -3/8','-1/4 + -1/4 = -1/2','-1/4 - -1/4 = 0',
   '-1/4 * -1/4 = 1/16','-1/4 / -1/4 = 1','-1/4 + 2 = 7/4','-1/4 - 2 = -9/4','-1/4 * 2 = -1/2','-1/4 / 2 = -1/8',
   '-1/4 + -5 = -21/4','-1/4 - -5 = 19/4','-1/4 * -5 = 5/4','-1/4 / -5 = 1/20','-1/4 + -0.7 = -0.95','-1/4 - -0.7 = 0.45',
   '-1/4 * -0.7 = 0.175','-1/4 / -0.7 = 0.35714285714285714287','-1/4 + 3.1415926535897932385 = 2.8915926535897932385',
   '-1/4 - 3.1415926535897932385 = -3.3915926535897932385','-1/4 * 3.1415926535897932385 = -0.78539816339744830962',
   '-1/4 / 3.1415926535897932385 = -0.079577471545947667884','2 + 2/3 = 8/3','2 - 2/3 = 4/3','2 * 2/3 = 4/3','2 / 2/3 = 3',
   '2 + -1/4 = 7/4','2 - -1/4 = 9/4','2 * -1/4 = -1/2','2 / -1/4 = -8','2 + 2 = 4','2 - 2 = 0','2 * 2 = 4','2 / 2 = 1',
   '2 + -5 = -3','2 - -5 = 7','2 * -5 = -10','2 / -5 = -2/5','2 + -0.7 = 1.3','2 - -0.7 = 2.7','2 * -0.7 = -1.4',
   '2 / -0.7 = -2.8571428571428571429','2 + 3.1415926535897932385 = 5.1415926535897932383',
   '2 - 3.1415926535897932385 = -1.1415926535897932385','2 * 3.1415926535897932385 = 6.283185307179586477',
   '2 / 3.1415926535897932385 = 0.63661977236758134307','-5 + 2/3 = -13/3','-5 - 2/3 = -17/3','-5 * 2/3 = -10/3',
   '-5 / 2/3 = -15/2','-5 + -1/4 = -21/4','-5 - -1/4 = -19/4','-5 * -1/4 = 5/4','-5 / -1/4 = 20','-5 + 2 = -3','-5 - 2 = -7',
   '-5 * 2 = -10','-5 / 2 = -5/2','-5 + -5 = -10','-5 - -5 = 0','-5 * -5 = 25','-5 / -5 = 1','-5 + -0.7 = -5.7',
   '-5 - -0.7 = -4.3','-5 * -0.7 = 3.5','-5 / -0.7 = 7.1428571428571428574',
   '-5 + 3.1415926535897932385 = -1.85840734641020676149','-5 - 3.1415926535897932385 = -8.141592653589793238',
   '-5 * 3.1415926535897932385 = -15.707963267948966192','-5 / 3.1415926535897932385 = -1.5915494309189533576',
   '-0.7 + 2/3 = -0.033333333333333333304','-0.7 - 2/3 = -1.36666666666666666667','-0.7 * 2/3 = -0.46666666666666666666',
   '-0.7 / 2/3 = -1.05','-0.7 + -1/4 = -0.95','-0.7 - -1/4 = -0.45','-0.7 * -1/4 = 0.175','-0.7 / -1/4 = 2.8','-0.7 + 2 = 1.3',
   '-0.7 - 2 = -2.7','-0.7 * 2 = -1.4','-0.7 / 2 = -0.35','-0.7 + -5 = -5.7','-0.7 - -5 = 4.3','-0.7 * -5 = 3.5',
   '-0.7 / -5 = 0.14','-0.7 + -0.7 = -1.4','-0.7 - -0.7 = 0.0','-0.7 * -0.7 = 0.48999999999999999998','-0.7 / -0.7 = 1.0',
   '-0.7 + 3.1415926535897932385 = 2.4415926535897932384','-0.7 - 3.1415926535897932385 = -3.8415926535897932385',
   '-0.7 * 3.1415926535897932385 = -2.1991148575128552668','-0.7 / 3.1415926535897932385 = -0.22281692032865347007',
   '3.1415926535897932385 + 2/3 = 3.8082593202564599052','3.1415926535897932385 - 2/3 = 2.4749259869231265717',
   '3.1415926535897932385 * 2/3 = 2.0943951023931954924','3.1415926535897932385 / 2/3 = 4.7123889803846898574',
   '3.1415926535897932385 + -1/4 = 2.8915926535897932385','3.1415926535897932385 - -1/4 = 3.3915926535897932385',
   '3.1415926535897932385 * -1/4 = -0.78539816339744830962','3.1415926535897932385 / -1/4 = -12.566370614359172954',
   '3.1415926535897932385 + 2 = 5.1415926535897932383','3.1415926535897932385 - 2 = 1.1415926535897932385',
   '3.1415926535897932385 * 2 = 6.283185307179586477','3.1415926535897932385 / 2 = 1.57079632679489661926',
   '3.1415926535897932385 + -5 = -1.85840734641020676149','3.1415926535897932385 - -5 = 8.141592653589793238',
   '3.1415926535897932385 * -5 = -15.707963267948966192','3.1415926535897932385 / -5 = -0.6283185307179586477',
   '3.1415926535897932385 + -0.7 = 2.4415926535897932384','3.1415926535897932385 - -0.7 = 3.8415926535897932385',
   '3.1415926535897932385 * -0.7 = -2.1991148575128552668','3.1415926535897932385 / -0.7 = -4.487989505128276055',
   '3.1415926535897932385 + 3.1415926535897932385 = 6.283185307179586477','3.1415926535897932385 - 3.1415926535897932385 = 0.0',
   '3.1415926535897932385 * 3.1415926535897932385 = 9.869604401089358619','3.1415926535897932385 / 3.1415926535897932385 = 1.0',
   '1/7: 0.(142857)','1/7: 0.14285714285714285714','pi : [436991388364966,139098679093749].toRational','1/6: [1,6].toRational'],
  'LOWin64'=>
  ['2/3 + 2/3 = 4/3','2/3 - 2/3 = 0','2/3 * 2/3 = 4/9','2/3 / 2/3 = 1','2/3 + -1/4 = 5/12','2/3 - -1/4 = 11/12',
   '2/3 * -1/4 = -1/6','2/3 / -1/4 = -8/3','2/3 + 2 = 8/3','2/3 - 2 = -4/3','2/3 * 2 = 4/3','2/3 / 2 = 1/3','2/3 + -5 = -13/3',
   '2/3 - -5 = 17/3','2/3 * -5 = -10/3','2/3 / -5 = -2/15','2/3 + -0.7 = -0.033333333333333326',
   '2/3 - -0.7 = 1.3666666666666667','2/3 * -0.7 = -0.4666666666666666','2/3 / -0.7 = -0.9523809523809524',
   '2/3 + 3.141592653589793 = 3.8082593202564596','2/3 - 3.141592653589793 = -2.4749259869231266',
   '2/3 * 3.141592653589793 = 2.0943951023931953','2/3 / 3.141592653589793 = 0.21220659078919377','-1/4 + 2/3 = 5/12',
   '-1/4 - 2/3 = -11/12','-1/4 * 2/3 = -1/6','-1/4 / 2/3 = -3/8','-1/4 + -1/4 = -1/2','-1/4 - -1/4 = 0','-1/4 * -1/4 = 1/16',
   '-1/4 / -1/4 = 1','-1/4 + 2 = 7/4','-1/4 - 2 = -9/4','-1/4 * 2 = -1/2','-1/4 / 2 = -1/8','-1/4 + -5 = -21/4',
   '-1/4 - -5 = 19/4','-1/4 * -5 = 5/4','-1/4 / -5 = 1/20','-1/4 + -0.7 = -0.95','-1/4 - -0.7 = 0.44999999999999996',
   '-1/4 * -0.7 = 0.175','-1/4 / -0.7 = 0.35714285714285715','-1/4 + 3.141592653589793 = 2.891592653589793',
   '-1/4 - 3.141592653589793 = -3.391592653589793','-1/4 * 3.141592653589793 = -0.78539816339744828',
   '-1/4 / 3.141592653589793 = -0.07957747154594767','2 + 2/3 = 8/3','2 - 2/3 = 4/3','2 * 2/3 = 4/3','2 / 2/3 = 3',
   '2 + -1/4 = 7/4','2 - -1/4 = 9/4','2 * -1/4 = -1/2','2 / -1/4 = -8','2 + 2 = 4','2 - 2 = 0','2 * 2 = 4','2 / 2 = 1',
   '2 + -5 = -3','2 - -5 = 7','2 * -5 = -10','2 / -5 = -2/5','2 + -0.7 = 1.3','2 - -0.7 = 2.7','2 * -0.7 = -1.4',
   '2 / -0.7 = -2.857142857142857','2 + 3.141592653589793 = 5.141592653589793','2 - 3.141592653589793 = -1.1415926535897931',
   '2 * 3.141592653589793 = 6.283185307179586','2 / 3.141592653589793 = 0.63661977236758138','-5 + 2/3 = -13/3',
   '-5 - 2/3 = -17/3','-5 * 2/3 = -10/3','-5 / 2/3 = -15/2','-5 + -1/4 = -21/4','-5 - -1/4 = -19/4','-5 * -1/4 = 5/4',
   '-5 / -1/4 = 20','-5 + 2 = -3','-5 - 2 = -7','-5 * 2 = -10','-5 / 2 = -5/2','-5 + -5 = -10','-5 - -5 = 0','-5 * -5 = 25',
   '-5 / -5 = 1','-5 + -0.7 = -5.7','-5 - -0.7 = -4.3','-5 * -0.7 = 3.5','-5 / -0.7 = 7.142857142857143',
   '-5 + 3.141592653589793 = -1.8584073464102069','-5 - 3.141592653589793 = -8.141592653589793',
   '-5 * 3.141592653589793 = -15.707963267948966','-5 / 3.141592653589793 = -1.5915494309189535',
   '-0.7 + 2/3 = -0.033333333333333326','-0.7 - 2/3 = -1.3666666666666667','-0.7 * 2/3 = -0.4666666666666666',
   '-0.7 / 2/3 = -1.05','-0.7 + -1/4 = -0.95','-0.7 - -1/4 = -0.44999999999999996','-0.7 * -1/4 = 0.175','-0.7 / -1/4 = 2.8',
   '-0.7 + 2 = 1.3','-0.7 - 2 = -2.7','-0.7 * 2 = -1.4','-0.7 / 2 = -0.35','-0.7 + -5 = -5.7','-0.7 - -5 = 4.3',
   '-0.7 * -5 = 3.5','-0.7 / -5 = 0.13999999999999999','-0.7 + -0.7 = -1.4','-0.7 - -0.7 = 0.0',
   '-0.7 * -0.7 = 0.48999999999999994','-0.7 / -0.7 = 1.0','-0.7 + 3.141592653589793 = 2.4415926535897929',
   '-0.7 - 3.141592653589793 = -3.8415926535897933','-0.7 * 3.141592653589793 = -2.199114857512855',
   '-0.7 / 3.141592653589793 = -0.22281692032865347','3.141592653589793 + 2/3 = 3.8082593202564596',
   '3.141592653589793 - 2/3 = 2.4749259869231266','3.141592653589793 * 2/3 = 2.0943951023931953',
   '3.141592653589793 / 2/3 = 4.71238898038469','3.141592653589793 + -1/4 = 2.891592653589793',
   '3.141592653589793 - -1/4 = 3.391592653589793','3.141592653589793 * -1/4 = -0.78539816339744828',
   '3.141592653589793 / -1/4 = -12.566370614359172','3.141592653589793 + 2 = 5.141592653589793',
   '3.141592653589793 - 2 = 1.1415926535897931','3.141592653589793 * 2 = 6.283185307179586',
   '3.141592653589793 / 2 = 1.5707963267948966','3.141592653589793 + -5 = -1.8584073464102069',
   '3.141592653589793 - -5 = 8.141592653589793','3.141592653589793 * -5 = -15.707963267948966',
   '3.141592653589793 / -5 = -0.6283185307179586','3.141592653589793 + -0.7 = 2.4415926535897929',
   '3.141592653589793 - -0.7 = 3.8415926535897933','3.141592653589793 * -0.7 = -2.199114857512855',
   '3.141592653589793 / -0.7 = -4.4879895051282759','3.141592653589793 + 3.141592653589793 = 6.283185307179586',
   '3.141592653589793 - 3.141592653589793 = 0.0','3.141592653589793 * 3.141592653589793 = 9.869604401089358',
   '3.141592653589793 / 3.141592653589793 = 1.0','1/7: 0.(142857)','1/7: 0.14285714285714285',
   'pi : [245850922,78256779].toRational','1/6: [1,6].toRational']].toMap,
 'thieleInterpolation'=>
 ['FDLinux'=>
  ['Internal pi         : 3.1415926535897932385','Thiele 6*InvSin(0.5): 3.1415926535897932383',
   'Thiele 3*InvCos(0.5): 3.1415926535897932387','Thiele 4*InvTan(1)  : 3.1415926535897932378'],
  'FDWin32'=>
  ['Internal pi         : 3.1415926535897932385','Thiele 6*InvSin(0.5): 3.1415926535897932383',
   'Thiele 3*InvCos(0.5): 3.1415926535897932387','Thiele 4*InvTan(1)  : 3.1415926535897932378'],
  'FDWin64'=>
  ['Internal pi         : 3.141592653589793','Thiele 6*InvSin(0.5): 3.141592653589793','Thiele 3*InvCos(0.5): 3.141592653589793',
   'Thiele 4*InvTan(1)  : 3.1415926535897949'],
  'FOLinux'=>
  ['Internal pi         : 3.1415926535897932385','Thiele 6*InvSin(0.5): 3.1415926535897932383',
   'Thiele 3*InvCos(0.5): 3.1415926535897932387','Thiele 4*InvTan(1)  : 3.1415926535897932378'],
  'FOWin32'=>
  ['Internal pi         : 3.1415926535897932385','Thiele 6*InvSin(0.5): 3.1415926535897932383',
   'Thiele 3*InvCos(0.5): 3.1415926535897932387','Thiele 4*InvTan(1)  : 3.1415926535897932378'],
  'FOWin64'=>
  ['Internal pi         : 3.141592653589793','Thiele 6*InvSin(0.5): 3.141592653589793','Thiele 3*InvCos(0.5): 3.141592653589793',
   'Thiele 4*InvTan(1)  : 3.1415926535897949'],
  'LDLinux'=>
  ['Internal pi         : 3.1415926535897932385','Thiele 6*InvSin(0.5): 3.1415926535897932383',
   'Thiele 3*InvCos(0.5): 3.1415926535897932387','Thiele 4*InvTan(1)  : 3.1415926535897932378'],
  'LDWin32'=>
  ['Internal pi         : 3.1415926535897932385','Thiele 6*InvSin(0.5): 3.1415926535897932383',
   'Thiele 3*InvCos(0.5): 3.1415926535897932387','Thiele 4*InvTan(1)  : 3.1415926535897932378'],
  'LDWin64'=>
  ['Internal pi         : 3.141592653589793','Thiele 6*InvSin(0.5): 3.141592653589793','Thiele 3*InvCos(0.5): 3.141592653589793',
   'Thiele 4*InvTan(1)  : 3.1415926535897949'],
  'LOLinux'=>
  ['Internal pi         : 3.1415926535897932385','Thiele 6*InvSin(0.5): 3.1415926535897932383',
   'Thiele 3*InvCos(0.5): 3.1415926535897932387','Thiele 4*InvTan(1)  : 3.1415926535897932378'],
  'LOWin32'=>
  ['Internal pi         : 3.1415926535897932385','Thiele 6*InvSin(0.5): 3.1415926535897932383',
   'Thiele 3*InvCos(0.5): 3.1415926535897932387','Thiele 4*InvTan(1)  : 3.1415926535897932378'],
  'LOWin64'=>
  ['Internal pi         : 3.141592653589793','Thiele 6*InvSin(0.5): 3.141592653589793','Thiele 3*InvCos(0.5): 3.141592653589793',
   'Thiele 4*InvTan(1)  : 3.1415926535897949']].toMap,
 'threeValuedLogic'=>
 ['not(FALSE) = TRUE','not(MAYBE) = MAYBE','not(TRUE ) = FALSE','FALSE and FALSE = FALSE','FALSE and MAYBE = FALSE',
  'FALSE and TRUE  = FALSE','MAYBE and FALSE = FALSE','MAYBE and MAYBE = MAYBE','MAYBE and TRUE  = MAYBE',
  'TRUE  and FALSE = FALSE','TRUE  and MAYBE = MAYBE','TRUE  and TRUE  = TRUE','FALSE or  FALSE = FALSE',
  'FALSE or  MAYBE = MAYBE','FALSE or  TRUE  = TRUE','MAYBE or  FALSE = MAYBE','MAYBE or  MAYBE = MAYBE',
  'MAYBE or  TRUE  = TRUE','TRUE  or  FALSE = TRUE','TRUE  or  MAYBE = TRUE','TRUE  or  TRUE  = TRUE','FALSE xor FALSE = TRUE',
  'FALSE xor MAYBE = MAYBE','FALSE xor TRUE  = FALSE','MAYBE xor FALSE = MAYBE','MAYBE xor MAYBE = MAYBE',
  'MAYBE xor TRUE  = MAYBE','TRUE  xor FALSE = FALSE','TRUE  xor MAYBE = MAYBE','TRUE  xor TRUE  = TRUE'],
 'thueMorseSequence'=>
 ['0110100110010110100101100110100110010110011010010110100110010110100101100110100101101001100101100110'],
 'travellingSalesmanProblem'=>
 ['Path length after construction is 32.932','Path length after polishing is    31.713',
  'png hash: C5BB896E2BB5B8754FEE21CF6C7BDDEAF06C4680A93913E44CC4F489B892446C'],
 'treePrint'=>
 ["┐","├──1","├──2","├──┐","│  ├──3","│  │  ├──X","│  │  ├──Y",
  "│  │  └──Z","│  └──4","│     └──5","└──┐","   ├──a","   ├──b","   └──c"],
 'truncatablePrimes'=>
 ['There are 671 left truncatable primes, the largest of which is 998443',
  'There are 70 right truncatable primes, the largest of which is 739399',
  'The largest prime which is both left- and right truncatable is 739397'],
 'turtleGfx'=>
 ['png hash: 2753A05F8EC8D3FFEA0EEA60E3ECC69AEC0E18218397D23565B5F298E73B2F2C'],
 'ulam'=>
 ['          XX                                        XX          XX                      XX          XX                  ',
  '                   XX                XX          XX    XX          XX                                        XX         ',
  '    XX                XX    XX                XX          XX    XX                                                    XX',
  ' XX                XX    XX                                                                XX                XX         ',
  '                      XX    XX                XX          XX                                  XX                XX      ',
  '                                                       XX          XX    XX          XX                                 ',
  '    XX                                              XX          XX                      XX          XX    XX            ',
  ' XX                XX          XX                                  XX    XX                XX                           ',
  '    XX          XX    XX                XX    XX                XX                XX                                  XX',
  ' XX    XX                                  XX                                  XX          XX                XX    XX   ',
  '          XX                XX          XX                      XX                XX                                    ',
  '             XX          XX                            XX          XX    XX          XX    XX    XX                     ',
  '    XX    XX                      XX                XX                            XX    XX          XX                XX',
  '                   XX                XX          XX    XX                                              XX               ',
  '                                                          XX    XX                XX          XX          XX    XX      ',
  ' XX          XX          XX          XX    XX          97                      XX          XX    XX                     ',
  '                                                          61    59          XX                                          ',
  '       XX                      XX          XX    37                31    89    XX                XX    XX    XX         ',
  '          XX    XX    XX    XX    XX    XX    67    17          13                      XX                            XX',
  '                                                       _5    _3    29                                  XX               ',
  '                                        XX          19       _2 11    53    XX    XX          XX    XX    XX            ',
  '                   XX                      XX    41    _7                                                               ',
  '                                              71          23                                                            ',
  '             XX          XX    XX          XX    43          47          83    XX          XX          XX    XX         ',
  '    XX                XX          XX          73                79                XX    XX          XX                  ',
  '                                                 XX                                  XX                                 ',
  '    XX                            XX    XX                XX          XX          XX                      XX    XX      ',
  ' XX    XX                XX          XX                                  XX                      XX                XX   ',
  '          XX                XX                XX          XX    XX                                                      ',
  '                                           XX    XX          XX                XX          XX                XX         ',
  '          XX    XX    XX    XX                            XX    XX                XX                XX    XX          XX',
  '                   XX          XX                                  XX    XX                                             ',
  '    XX          XX    XX                XX                XX          XX    XX                                  XX      ',
  '       XX    XX                      XX                            XX                      XX                XX         ',
  '                                        XX    XX          XX    XX                            XX                XX      ',
  '                               XX          XX                XX                XX                            XX    XX   ',
  '                      XX    XX                XX                                                    XX                  ',
  ' XX          XX                      XX                                  XX          XX                XX               ',
  '                                                                                        XX                XX          XX',
  ' XX          XX    XX          XX                XX                                  XX                                 '],
 'unbiasedRandom'=>
 ['I biased unbiased','3 32.51% 49.79%','4 25.64% 49.91%','5 19.89% 50.59%','6 17.53% 48.53%'],
 'vampire'=>
 ["1260 is a vampire. It's fangs are: [21,60]","1395 is a vampire. It's fangs are: [15,93]",
  "1435 is a vampire. It's fangs are: [35,41]","1530 is a vampire. It's fangs are: [30,51]",
  "1827 is a vampire. It's fangs are: [21,87]","2187 is a vampire. It's fangs are: [27,81]",
  "6880 is a vampire. It's fangs are: [80,86]","102510 is a vampire. It's fangs are: [201,510]",
  "104260 is a vampire. It's fangs are: [260,401]","105210 is a vampire. It's fangs are: [210,501]",
  "105264 is a vampire. It's fangs are: [204,516]","105750 is a vampire. It's fangs are: [150,705]",
  "108135 is a vampire. It's fangs are: [135,801]","110758 is a vampire. It's fangs are: [158,701]",
  "115672 is a vampire. It's fangs are: [152,761]","116725 is a vampire. It's fangs are: [161,725]",
  "117067 is a vampire. It's fangs are: [167,701]","118440 is a vampire. It's fangs are: [141,840]",
  "120600 is a vampire. It's fangs are: [201,600]","123354 is a vampire. It's fangs are: [231,534]",
  "124483 is a vampire. It's fangs are: [281,443]","125248 is a vampire. It's fangs are: [152,824]",
  "125433 is a vampire. It's fangs are: [231,543]","125460 is a vampire. It's fangs are: [204,615] or [246,510]",
  "125500 is a vampire. It's fangs are: [251,500]"],
 'variadic'=>
 ['Example parameters: "A","B","C"','A','B','C'],
 'weasel'=>
 ['  20 SIVKMKGU BTBAT LIXKEH WFGRLM (157)','  40 LCVIHKGU FT KS LIOCAH WFGRJM ( 81)','  60 LFVIIKHU HT KS LIOCAA WFETGM ( 64)',
  '  80 LFVIIMKS HT KS LINCAA WEESGL ( 53)',' 100 LEVIIMKS HT IS LINCAA WECSGL ( 48)',' 120 LETIIMKS HT IS LIKC A WECSGL ( 10)',
  ' 140 METIIMKS HT IS LIKC A WEBSGL (  8)',' 160 METIIMKS HT IS LIKC A WEBSGL (  8)',' 180 METIINKS HT IS LIKC A WEBSEL (  5)',
  ' 200 METIINKS HT IS LIKD A WEASEL (  3)',' 220 METIINKS HT IS LIKD A WEASEL (  3)',' 240 METIINKS HT IS LIKD A WEASEL (  3)',
  ' 260 METIINKS HT IS LIKD A WEASEL (  3)',' 280 METHINKS HT IS LIKE A WEASEL (  1)',' 300 METHINKS HT IS LIKE A WEASEL (  1)',
  ' 320 METHINKS HT IS LIKE A WEASEL (  1)',' 340 METHINKS HT IS LIKE A WEASEL (  1)',' 360 METHINKS HT IS LIKE A WEASEL (  1)',
  ' 380 METHINKS HT IS LIKE A WEASEL (  1)',' 400 METHINKS HT IS LIKE A WEASEL (  1)',' 420 METHINKS IT IS LIKE A WEASEL (  0)',
  ' 420 METHINKS IT IS LIKE A WEASEL'],
 'wordCount'=>
 ['Words total:    794914','Distinct words: 12892','Most frequent:','word   count %','the    64204 8.08','and    51764 6.51',
  'of     34789 4.38','to     13660 1.72','that   12927 1.63','in     12725 1.6','he     10422 1.31','shall   9840 1.24',
  'for     8997 1.13','unto    8997 1.13','i       8854 1.11','his     8473 1.07','a       8235 1.04','lord    7964 1.0',
  'they    7379 0.93','be      7032 0.88','is      7015 0.88','him     6659 0.84','not     6617 0.83','them    6430 0.81',
  'it      6144 0.77','with    6059 0.76','all     5638 0.71','thou    5474 0.69','thy     4600 0.58','was     4524 0.57',
  'god     4472 0.56','which   4420 0.56','my      4368 0.55','me      4096 0.52','said    3999 0.5','but     3997 0.5',
  'ye      3983 0.5','their   3942 0.5','have    3909 0.49','will    3843 0.48','thee    3827 0.48','from    3657 0.46',
  'as      3531 0.44','are     2970 0.37','when    2835 0.36','this    2833 0.36','out     2776 0.35','were    2772 0.35',
  'upon    2750 0.35','man     2735 0.34','you     2687 0.34','by      2644 0.33','israel  2575 0.32','king    2548 0.32'],
 'y'=>
 [' 0                   1     1',' 1                   1     1',' 2                   2     2',' 3                   6     3',
  ' 4                  24     5',' 5                 120     8',' 6                 720    13',' 7                5040    21',
  ' 8               40320    34',' 9              362880    55','10             3628800    89','11            39916800   144',
  '12           479001600   233','13          6227020800   377','14         87178291200   610','15       1307674368000   987',
  '16      20922789888000  1597','17     355687428096000  2584','18    6402373705728000  4181','19  121645100408832000  6765',
  '20 2432902008176640000 10946'],
 'zeckendorf'=>
 [' decimal   binary   Zeckendorf','       1        1            1','       2       10           10',
  '       3       11          100','       4      100          101','       5      101         1000',
  '      17    10001       100101','     100  1100100   1000010100','     255 11111111 100001000001','','    bits rel. overhead',
  ' 1  1.00        1.0000',' 2  2.50        1.2500',' 3  3.75        1.2500',' 4  5.38        1.3438',' 5  6.69        1.3375',
  ' 6  8.22        1.3698',' 7  9.61        1.3728',' 8 11.05        1.3818',' 9 12.53        1.3919','10 13.88        1.3881',
  '11 15.44        1.4037','12 16.74        1.3949']].toMap
