expectations:=
['100doors'=>
 ['1,4,9,16,25,36,49,64,81,100'],
 '12_statements'=>
 [' 1. "This is a numbered list of twelve statements."                  is true',
  ' 2. "Exactly 3 of the last 6 statements are true."                   is false',
  ' 3. "Exactly 2 of the even-numbered statements are true."            is true',
  ' 4. "If statement 5 is true, then statements 6 and 7 are both true." is true',
  ' 5. "The 3 preceding statements are all false."                      is false',
  ' 6. "Exactly 4 of the odd-numbered statements are true."             is true',
  ' 7. "Either statement 2 or 3 is true, but not both."                 is true',
  ' 8. "If statement 7 is true, then 5 and 6 are both true."            is false',
  ' 9. "Exactly 3 of the first 6 statements are true."                  is false',
  '10. "The next two statements are both true."                         is false',
  '11. "Exactly 1 of statements 7, 8 and 9 are true."                   is true',
  '12. "Exactly 4 of the preceding statements are true."                is false'],
 '24'=>
 ['This is a demo - start without argument to play.',' ?> Find an expression to calculate 24 from the numbers [1,5,6,7].',
  ' !> ((5*6)+1)-7','The solution is valid.',' ?> Another round?',' !> no'],
 '99bottles'=>
 ['99 bottles of beer on the wall','99 bottles of beer.','Take one down, pass it around','98 bottles of beer on the wall.','',
  '98 bottles of beer on the wall','98 bottles of beer.','Take one down, pass it around','97 bottles of beer on the wall.','',
  '97 bottles of beer on the wall','97 bottles of beer.','Take one down, pass it around','96 bottles of beer on the wall.','',
  '96 bottles of beer on the wall','96 bottles of beer.','Take one down, pass it around','95 bottles of beer on the wall.','',
  '95 bottles of beer on the wall','95 bottles of beer.','Take one down, pass it around','94 bottles of beer on the wall.','',
  '94 bottles of beer on the wall','94 bottles of beer.','Take one down, pass it around','93 bottles of beer on the wall.','',
  '93 bottles of beer on the wall','93 bottles of beer.','Take one down, pass it around','92 bottles of beer on the wall.','',
  '92 bottles of beer on the wall','92 bottles of beer.','Take one down, pass it around','91 bottles of beer on the wall.','',
  '91 bottles of beer on the wall','91 bottles of beer.','Take one down, pass it around','90 bottles of beer on the wall.','',
  '90 bottles of beer on the wall','90 bottles of beer.','Take one down, pass it around','89 bottles of beer on the wall.','',
  '89 bottles of beer on the wall','89 bottles of beer.','Take one down, pass it around','88 bottles of beer on the wall.','',
  '88 bottles of beer on the wall','88 bottles of beer.','Take one down, pass it around','87 bottles of beer on the wall.','',
  '87 bottles of beer on the wall','87 bottles of beer.','Take one down, pass it around','86 bottles of beer on the wall.','',
  '86 bottles of beer on the wall','86 bottles of beer.','Take one down, pass it around','85 bottles of beer on the wall.','',
  '85 bottles of beer on the wall','85 bottles of beer.','Take one down, pass it around','84 bottles of beer on the wall.','',
  '84 bottles of beer on the wall','84 bottles of beer.','Take one down, pass it around','83 bottles of beer on the wall.','',
  '83 bottles of beer on the wall','83 bottles of beer.','Take one down, pass it around','82 bottles of beer on the wall.','',
  '82 bottles of beer on the wall','82 bottles of beer.','Take one down, pass it around','81 bottles of beer on the wall.','',
  '81 bottles of beer on the wall','81 bottles of beer.','Take one down, pass it around','80 bottles of beer on the wall.','',
  '80 bottles of beer on the wall','80 bottles of beer.','Take one down, pass it around','79 bottles of beer on the wall.','',
  '79 bottles of beer on the wall','79 bottles of beer.','Take one down, pass it around','78 bottles of beer on the wall.','',
  '78 bottles of beer on the wall','78 bottles of beer.','Take one down, pass it around','77 bottles of beer on the wall.','',
  '77 bottles of beer on the wall','77 bottles of beer.','Take one down, pass it around','76 bottles of beer on the wall.','',
  '76 bottles of beer on the wall','76 bottles of beer.','Take one down, pass it around','75 bottles of beer on the wall.','',
  '75 bottles of beer on the wall','75 bottles of beer.','Take one down, pass it around','74 bottles of beer on the wall.','',
  '74 bottles of beer on the wall','74 bottles of beer.','Take one down, pass it around','73 bottles of beer on the wall.','',
  '73 bottles of beer on the wall','73 bottles of beer.','Take one down, pass it around','72 bottles of beer on the wall.','',
  '72 bottles of beer on the wall','72 bottles of beer.','Take one down, pass it around','71 bottles of beer on the wall.','',
  '71 bottles of beer on the wall','71 bottles of beer.','Take one down, pass it around','70 bottles of beer on the wall.','',
  '70 bottles of beer on the wall','70 bottles of beer.','Take one down, pass it around','69 bottles of beer on the wall.','',
  '69 bottles of beer on the wall','69 bottles of beer.','Take one down, pass it around','68 bottles of beer on the wall.','',
  '68 bottles of beer on the wall','68 bottles of beer.','Take one down, pass it around','67 bottles of beer on the wall.','',
  '67 bottles of beer on the wall','67 bottles of beer.','Take one down, pass it around','66 bottles of beer on the wall.','',
  '66 bottles of beer on the wall','66 bottles of beer.','Take one down, pass it around','65 bottles of beer on the wall.','',
  '65 bottles of beer on the wall','65 bottles of beer.','Take one down, pass it around','64 bottles of beer on the wall.','',
  '64 bottles of beer on the wall','64 bottles of beer.','Take one down, pass it around','63 bottles of beer on the wall.','',
  '63 bottles of beer on the wall','63 bottles of beer.','Take one down, pass it around','62 bottles of beer on the wall.','',
  '62 bottles of beer on the wall','62 bottles of beer.','Take one down, pass it around','61 bottles of beer on the wall.','',
  '61 bottles of beer on the wall','61 bottles of beer.','Take one down, pass it around','60 bottles of beer on the wall.','',
  '60 bottles of beer on the wall','60 bottles of beer.','Take one down, pass it around','59 bottles of beer on the wall.','',
  '59 bottles of beer on the wall','59 bottles of beer.','Take one down, pass it around','58 bottles of beer on the wall.','',
  '58 bottles of beer on the wall','58 bottles of beer.','Take one down, pass it around','57 bottles of beer on the wall.','',
  '57 bottles of beer on the wall','57 bottles of beer.','Take one down, pass it around','56 bottles of beer on the wall.','',
  '56 bottles of beer on the wall','56 bottles of beer.','Take one down, pass it around','55 bottles of beer on the wall.','',
  '55 bottles of beer on the wall','55 bottles of beer.','Take one down, pass it around','54 bottles of beer on the wall.','',
  '54 bottles of beer on the wall','54 bottles of beer.','Take one down, pass it around','53 bottles of beer on the wall.','',
  '53 bottles of beer on the wall','53 bottles of beer.','Take one down, pass it around','52 bottles of beer on the wall.','',
  '52 bottles of beer on the wall','52 bottles of beer.','Take one down, pass it around','51 bottles of beer on the wall.','',
  '51 bottles of beer on the wall','51 bottles of beer.','Take one down, pass it around','50 bottles of beer on the wall.','',
  '50 bottles of beer on the wall','50 bottles of beer.','Take one down, pass it around','49 bottles of beer on the wall.','',
  '49 bottles of beer on the wall','49 bottles of beer.','Take one down, pass it around','48 bottles of beer on the wall.','',
  '48 bottles of beer on the wall','48 bottles of beer.','Take one down, pass it around','47 bottles of beer on the wall.','',
  '47 bottles of beer on the wall','47 bottles of beer.','Take one down, pass it around','46 bottles of beer on the wall.','',
  '46 bottles of beer on the wall','46 bottles of beer.','Take one down, pass it around','45 bottles of beer on the wall.','',
  '45 bottles of beer on the wall','45 bottles of beer.','Take one down, pass it around','44 bottles of beer on the wall.','',
  '44 bottles of beer on the wall','44 bottles of beer.','Take one down, pass it around','43 bottles of beer on the wall.','',
  '43 bottles of beer on the wall','43 bottles of beer.','Take one down, pass it around','42 bottles of beer on the wall.','',
  '42 bottles of beer on the wall','42 bottles of beer.','Take one down, pass it around','41 bottles of beer on the wall.','',
  '41 bottles of beer on the wall','41 bottles of beer.','Take one down, pass it around','40 bottles of beer on the wall.','',
  '40 bottles of beer on the wall','40 bottles of beer.','Take one down, pass it around','39 bottles of beer on the wall.','',
  '39 bottles of beer on the wall','39 bottles of beer.','Take one down, pass it around','38 bottles of beer on the wall.','',
  '38 bottles of beer on the wall','38 bottles of beer.','Take one down, pass it around','37 bottles of beer on the wall.','',
  '37 bottles of beer on the wall','37 bottles of beer.','Take one down, pass it around','36 bottles of beer on the wall.','',
  '36 bottles of beer on the wall','36 bottles of beer.','Take one down, pass it around','35 bottles of beer on the wall.','',
  '35 bottles of beer on the wall','35 bottles of beer.','Take one down, pass it around','34 bottles of beer on the wall.','',
  '34 bottles of beer on the wall','34 bottles of beer.','Take one down, pass it around','33 bottles of beer on the wall.','',
  '33 bottles of beer on the wall','33 bottles of beer.','Take one down, pass it around','32 bottles of beer on the wall.','',
  '32 bottles of beer on the wall','32 bottles of beer.','Take one down, pass it around','31 bottles of beer on the wall.','',
  '31 bottles of beer on the wall','31 bottles of beer.','Take one down, pass it around','30 bottles of beer on the wall.','',
  '30 bottles of beer on the wall','30 bottles of beer.','Take one down, pass it around','29 bottles of beer on the wall.','',
  '29 bottles of beer on the wall','29 bottles of beer.','Take one down, pass it around','28 bottles of beer on the wall.','',
  '28 bottles of beer on the wall','28 bottles of beer.','Take one down, pass it around','27 bottles of beer on the wall.','',
  '27 bottles of beer on the wall','27 bottles of beer.','Take one down, pass it around','26 bottles of beer on the wall.','',
  '26 bottles of beer on the wall','26 bottles of beer.','Take one down, pass it around','25 bottles of beer on the wall.','',
  '25 bottles of beer on the wall','25 bottles of beer.','Take one down, pass it around','24 bottles of beer on the wall.','',
  '24 bottles of beer on the wall','24 bottles of beer.','Take one down, pass it around','23 bottles of beer on the wall.','',
  '23 bottles of beer on the wall','23 bottles of beer.','Take one down, pass it around','22 bottles of beer on the wall.','',
  '22 bottles of beer on the wall','22 bottles of beer.','Take one down, pass it around','21 bottles of beer on the wall.','',
  '21 bottles of beer on the wall','21 bottles of beer.','Take one down, pass it around','20 bottles of beer on the wall.','',
  '20 bottles of beer on the wall','20 bottles of beer.','Take one down, pass it around','19 bottles of beer on the wall.','',
  '19 bottles of beer on the wall','19 bottles of beer.','Take one down, pass it around','18 bottles of beer on the wall.','',
  '18 bottles of beer on the wall','18 bottles of beer.','Take one down, pass it around','17 bottles of beer on the wall.','',
  '17 bottles of beer on the wall','17 bottles of beer.','Take one down, pass it around','16 bottles of beer on the wall.','',
  '16 bottles of beer on the wall','16 bottles of beer.','Take one down, pass it around','15 bottles of beer on the wall.','',
  '15 bottles of beer on the wall','15 bottles of beer.','Take one down, pass it around','14 bottles of beer on the wall.','',
  '14 bottles of beer on the wall','14 bottles of beer.','Take one down, pass it around','13 bottles of beer on the wall.','',
  '13 bottles of beer on the wall','13 bottles of beer.','Take one down, pass it around','12 bottles of beer on the wall.','',
  '12 bottles of beer on the wall','12 bottles of beer.','Take one down, pass it around','11 bottles of beer on the wall.','',
  '11 bottles of beer on the wall','11 bottles of beer.','Take one down, pass it around','10 bottles of beer on the wall.','',
  '10 bottles of beer on the wall','10 bottles of beer.','Take one down, pass it around','9 bottles of beer on the wall.','',
  '9 bottles of beer on the wall','9 bottles of beer.','Take one down, pass it around','8 bottles of beer on the wall.','',
  '8 bottles of beer on the wall','8 bottles of beer.','Take one down, pass it around','7 bottles of beer on the wall.','',
  '7 bottles of beer on the wall','7 bottles of beer.','Take one down, pass it around','6 bottles of beer on the wall.','',
  '6 bottles of beer on the wall','6 bottles of beer.','Take one down, pass it around','5 bottles of beer on the wall.','',
  '5 bottles of beer on the wall','5 bottles of beer.','Take one down, pass it around','4 bottles of beer on the wall.','',
  '4 bottles of beer on the wall','4 bottles of beer.','Take one down, pass it around','3 bottles of beer on the wall.','',
  '3 bottles of beer on the wall','3 bottles of beer.','Take one down, pass it around','2 bottles of beer on the wall.','',
  '2 bottles of beer on the wall','2 bottles of beer.','Take one down, pass it around','1 bottle of beer on the wall.','',
  '1 bottle of beer on the wall','1 bottle of beer.','Take one down, pass it around','no more bottles of beer on the wall.','',
  'Go to the store, buy some more.'],
 'accumulatorFactory'=>
 ['8.3'],
 'ackermann'=>
 ['See http://rosettacode.org/wiki/Ackermann_function','ackermann(3,0)=5','ackermann(3,1)=13','ackermann(3,2)=29',
  'ackermann(3,3)=61','ackermann(3,4)=125','ackermann(3,5)=253','ackermann(3,6)=509','ackermann(3,7)=1021','ackermann(3,8)=2045',
  'ackermann(3,9)=4093','ackermann(3,10)=8189','ackermann(3,11)=16381','ackermann(3,12)=32765','ackermann(3,13)=65533',
  'ackermann(3,14)=131069'],
 'aks'=>
 ['Polynomial expansions:','(x-1)^0 = 1','(x-1)^1 = x-1','(x-1)^2 = x^2-2x+1','(x-1)^3 = x^3-3x^2+3x-1',
  '(x-1)^4 = x^4-4x^3+6x^2-4x+1','(x-1)^5 = x^5-5x^4+10x^3-10x^2+5x-1','(x-1)^6 = x^6-6x^5+15x^4-20x^3+15x^2-6x+1',
  '(x-1)^7 = x^7-7x^6+21x^5-35x^4+35x^3-21x^2+7x-1','','Primes <= 66 are : [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61]'],
 'aliquotSequence'=>
 ["start @ ┃ classification  ┃ sequence",
  "━━━━━━━━╋━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
  "     11 ┃ terminating     ┃ [11,1,0]","     12 ┃ terminating     ┃ [12,16,15,9,4,3,1,0]",
  "     28 ┃ perfect         ┃ [28]","    496 ┃ perfect         ┃ [496]","    220 ┃ amicable        ┃ [220,284]",
  "   1184 ┃ amicable        ┃ [1184,1210]","  12496 ┃ social          ┃ [12496,14288,15472,14536,14264]",
  "1264460 ┃ social          ┃ [1264460,1547860,1727636,1305184]","    790 ┃ aspiring        ┃ [790,650,652,496]",
  "    909 ┃ aspiring        ┃ [909,417,143,25,6]","    562 ┃ cyclic          ┃ [562,284,220]",
  "   1064 ┃ cyclic          ┃ [1064,1336,1184,1210]",
  "   1488 ┃ non-terminating ┃ [1488,2480,3472,4464,8432,9424,10416,21328,22320,55056,95728,96720,236592,459792,881392,882384,1474608]"
 ],
 'anagram'=>
 ['aster, rates, stare, tares, taser, tears','caret, cater, crate, react, recta, trace',
  'drapes, padres, parsed, rasped, spared, spread','keats, skate, stake, steak, takes, teaks',
  'lapse, leaps, pales, peals, pleas, sepal','opts, post, pots, spot, stop, tops',
  'palest, pastel, petals, plates, pleats, staple','carets, caster, caters, crates, reacts, recast, traces',
  'pares, parse, pears, rapes, reaps, spare, spear','least, slate, stael, stale, steal, tales, teals, tesla'],
 'approximateInverseFunctions'=>
 ['               Absolute approximation errors','t    arcsin(t) linear    Spline    BSpline',
  '0.00 0.0000000 0.0000000 0.0000000 0.0000000','0.05 0.0500209 0.0000306 0.0000000 0.0001548',
  '0.10 0.1001674 0.0000692 0.0000001 0.0003107','0.15 0.1505683 0.0000303 0.0000000 0.0004692',
  '0.20 0.2013579 0.0001522 0.0000002 0.0006311','0.25 0.2526803 0.0001440 0.0000001 0.0007984',
  '0.30 0.3046927 0.0000955 0.0000000 0.0009726','0.35 0.3575711 0.0002824 0.0000004 0.0011553',
  '0.40 0.4115168 0.0002552 0.0000003 0.0013497','0.45 0.4667653 0.0000783 0.0000000 0.0015590',
  '0.50 0.5235988 0.0003869 0.0000006 0.0017860','0.55 0.5823642 0.0004987 0.0000009 0.0020372',
  '0.60 0.6435011 0.0003753 0.0000008 0.0023212','0.65 0.7075844 0.0000258 0.0000000 0.0026488',
  '0.70 0.7753975 0.0003202 0.0000007 0.0030368','0.75 0.8480621 0.0005420 0.0000046 0.0035147',
  '0.80 0.9272952 0.0006140 0.0000111 0.0041371','0.85 1.0159853 0.0002789 0.0000158 0.0050165',
  '0.90 1.1197695 0.0012750 0.0002692 0.0064292','0.95 1.2532359 0.0003479 0.0002791 0.0095932',
  '1.00 1.5707963 0.0000000 0.0000000 0.0698643'],
 'asciiCalendar'=>
 ['+-------------------------------------------------------------------------------------------+',
  '|                                    #   ###   ###   ###                                    |',
  '|                                   ##  #   # #     #                                       |',
  '|                                  # #   #### ####  ####                                    |',
  '|                                    #      # #   # #   #                                   |',
  '|                                   ###  ###   ###   ###                                    |',
  '+----------------------+----------------------+----------------------+----------------------+',
  '| Januar               | Februar              | Maerz                | April                |',
  '| Mo Di Mi Do Fr Sa So | Mo Di Mi Do Fr Sa So | Mo Di Mi Do Fr Sa So | Mo Di Mi Do Fr Sa So |',
  '|                 1  2 |     1  2  3  4  5  6 |     1  2  3  4  5  6 |              1  2  3 |',
  '|  3  4  5  6  7  8  9 |  7  8  9 10 11 12 13 |  7  8  9 10 11 12 13 |  4  5  6  7  8  9 10 |',
  '| 10 11 12 13 14 15 16 | 14 15 16 17 18 19 20 | 14 15 16 17 18 19 20 | 11 12 13 14 15 16 17 |',
  '| 17 18 19 20 21 22 23 | 21 22 23 24 25 26 27 | 21 22 23 24 25 26 27 | 18 19 20 21 22 23 24 |',
  '| 24 25 26 27 28 29 30 | 28                   | 28 29 30 31          | 25 26 27 28 29 30    |',
  '| 31                   |                      |                      |                      |',
  '+----------------------+----------------------+----------------------+----------------------+',
  '| Mai                  | Juni                 | Juli                 | August               |',
  '| Mo Di Mi Do Fr Sa So | Mo Di Mi Do Fr Sa So | Mo Di Mi Do Fr Sa So | Mo Di Mi Do Fr Sa So |',
  '|                    1 |        1  2  3  4  5 |              1  2  3 |  1  2  3  4  5  6  7 |',
  '|  2  3  4  5  6  7  8 |  6  7  8  9 10 11 12 |  4  5  6  7  8  9 10 |  8  9 10 11 12 13 14 |',
  '|  9 10 11 12 13 14 15 | 13 14 15 16 17 18 19 | 11 12 13 14 15 16 17 | 15 16 17 18 19 20 21 |',
  '| 16 17 18 19 20 21 22 | 20 21 22 23 24 25 26 | 18 19 20 21 22 23 24 | 22 23 24 25 26 27 28 |',
  '| 23 24 25 26 27 28 29 | 27 28 29 30          | 25 26 27 28 29 30 31 | 29 30 31             |',
  '| 30 31                |                      |                      |                      |',
  '+----------------------+----------------------+----------------------+----------------------+',
  '| September            | Oktober              | November             | Dezember             |',
  '| Mo Di Mi Do Fr Sa So | Mo Di Mi Do Fr Sa So | Mo Di Mi Do Fr Sa So | Mo Di Mi Do Fr Sa So |',
  '|           1  2  3  4 |                 1  2 |     1  2  3  4  5  6 |           1  2  3  4 |',
  '|  5  6  7  8  9 10 11 |  3  4  5  6  7  8  9 |  7  8  9 10 11 12 13 |  5  6  7  8  9 10 11 |',
  '| 12 13 14 15 16 17 18 | 10 11 12 13 14 15 16 | 14 15 16 17 18 19 20 | 12 13 14 15 16 17 18 |',
  '| 19 20 21 22 23 24 25 | 17 18 19 20 21 22 23 | 21 22 23 24 25 26 27 | 19 20 21 22 23 24 25 |',
  '| 26 27 28 29 30       | 24 25 26 27 28 29 30 | 28 29 30             | 26 27 28 29 30 31    |',
  '|                      | 31                   |                      |                      |',
  '+----------------------+----------------------+----------------------+----------------------+'],
 'babbage'=>
 ['25264'],
 'balancedBrackets'=>
 ['[]               o.k.','][][             NOT o.k.','][][][           NOT o.k.',']][][][[         NOT o.k.',
  '][[[]]][][       NOT o.k.','[][][][]]][[     NOT o.k.','][]][][[][[[]]   NOT o.k.','[[]]]][[][]][[][ NOT o.k.'],
 'barnsleyFern'=>
 ['png hash: E944CBD3F180F2222E13800058D8A824A6F24BB93F0A7914D322B70B5DDDA8D0'],
 'benford'=>
 ['actual expected','   300   301.03','   177   176.09','   125   124.94','    96    96.91','    80    79.18','    67    66.95',
  '    57    57.99','    53    51.15','    45    45.76'],
 'bestShuffle'=>
 ['abracadabra, baabacadrar, (0)','seesaw     , assewe     , (0)','elk        , kel        , (0)',
  'grrrrrr    , rgrrrrr    , (5)','up         , pu         , (0)','a          , a          , (1)'],
 'boxTheCompass'=>
 ['  0.0   1 North              Tramontana',' 16.87  2 North by east      Quarto di Tramontana verso Greco',
  ' 16.88  3 North-northeast    Greco-Tramontana',' 33.75  4 Northeast by north Quarto di Greco verso Tramontana',
  ' 50.62  5 Northeast          Greco',' 50.63  6 Northeast by east  Quarto di Greco verso Levante',
  ' 67.5   7 East-northeast     Greco-Levante',' 84.37  8 East by north      Quarto di Levante verso Greco',
  ' 84.38  9 East               Levante','101.25 10 East by south      Quarto di Levante verso Scirocco',
  '118.12 11 East-southeast     Levante-Scirocco','118.13 12 Southeast by east  Quarto di Scirocco verso Levante',
  '135.0  13 Southeast          Scirocco','151.87 14 Southeast by south Quarto di Scirocco verso Ostro',
  '151.88 15 South-southeast    Ostro-Scirocco','168.75 16 South by east      Quarto di Ostro verso Scirocco',
  '185.62 17 South              Ostro','185.63 18 South by west      Quarto di Ostro verso Libeccio',
  '202.5  19 South-southwest    Ostro-Libeccio','219.37 20 Southwest by south Quarto di Libeccio verso Ostro',
  '219.38 21 Southwest          Libeccio','236.25 22 Southwest by west  Quarto di Libeccio verso Ponente',
  '253.12 23 West-southwest     Ponente-Libeccio','253.13 24 West by south      Quarto di Ponente verso Libeccio',
  '270.0  25 West               Ponente','286.87 26 West by north      Quarto di Ponente verso Maestro',
  '286.88 27 West-northwest     Maestro-Ponente','303.75 28 Northwest by west  Quarto di Maestro verso Ponente',
  '320.62 29 Northwest          Maestro','320.63 30 Northwest by north Quarto di Maestro verso Tramontana',
  '337.5  31 North-northwest    Maestro-Tramontana','354.37 32 North by west      Quarto di Tramontana verso Maestro',
  '354.38  1 North              Tramontana'],
 'cauchy'=>
 ['FDLinux'=>
  ['(1+1/n)^n','...seems to converge against 2.7181459132335902967',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε",
   "N=   0 ε=1","N=  11 ε=0.1","N= 132 ε=0.01","N=1194 ε=0.001","N=5759 ε=0.0001",'','1 + 1/2 + 1/3 + 1/4 + ...',
   '...seems to diverge',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=3677 ε=1",'',
   '1 + 1/2^2 + 1/3^2 + 1/4^2 + ...','...seems to converge against 1.64483406184705953899',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   8 ε=0.1","N=  97 ε=0.01","N= 907 ε=0.001",
   "N=4998 ε=0.0001",'','1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 ...','...seems to converge against 0.78540316239748583597',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   3 ε=0.1","N=  48 ε=0.01","N= 498 ε=0.001",
   "N=4998 ε=0.0001"],
  'FDWin64'=>
  ['(1+1/n)^n','...seems to converge against 2.718145913232938',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε",
   "N=   0 ε=1","N=  11 ε=0.1","N= 132 ε=0.01","N=1194 ε=0.001","N=5759 ε=0.0001",'','1 + 1/2 + 1/3 + 1/4 + ...',
   '...seems to diverge',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=3677 ε=1",'',
   '1 + 1/2^2 + 1/3^2 + 1/4^2 + ...','...seems to converge against 1.6448340618470652',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   8 ε=0.1","N=  97 ε=0.01","N= 907 ε=0.001",
   "N=4998 ε=0.0001",'','1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 ...','...seems to converge against 0.7854031623974836',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   3 ε=0.1","N=  48 ε=0.01","N= 498 ε=0.001",
   "N=4998 ε=0.0001"],
  'FOLinux'=>
  ['(1+1/n)^n','...seems to converge against 2.7181459132335902967',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε",
   "N=   0 ε=1","N=  11 ε=0.1","N= 132 ε=0.01","N=1194 ε=0.001","N=5759 ε=0.0001",'','1 + 1/2 + 1/3 + 1/4 + ...',
   '...seems to diverge',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=3677 ε=1",'',
   '1 + 1/2^2 + 1/3^2 + 1/4^2 + ...','...seems to converge against 1.64483406184705953899',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   8 ε=0.1","N=  97 ε=0.01","N= 907 ε=0.001",
   "N=4998 ε=0.0001",'','1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 ...','...seems to converge against 0.78540316239748583597',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   3 ε=0.1","N=  48 ε=0.01","N= 498 ε=0.001",
   "N=4998 ε=0.0001"],
  'FOWin64'=>
  ['(1+1/n)^n','...seems to converge against 2.718145913232938',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε",
   "N=   0 ε=1","N=  11 ε=0.1","N= 132 ε=0.01","N=1194 ε=0.001","N=5759 ε=0.0001",'','1 + 1/2 + 1/3 + 1/4 + ...',
   '...seems to diverge',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=3677 ε=1",'',
   '1 + 1/2^2 + 1/3^2 + 1/4^2 + ...','...seems to converge against 1.6448340618470652',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   8 ε=0.1","N=  97 ε=0.01","N= 907 ε=0.001",
   "N=4998 ε=0.0001",'','1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 ...','...seems to converge against 0.7854031623974836',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   3 ε=0.1","N=  48 ε=0.01","N= 498 ε=0.001",
   "N=4998 ε=0.0001"],
  'LDLinux'=>
  ['(1+1/n)^n','...seems to converge against 2.7181459132335902967',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε",
   "N=   0 ε=1","N=  11 ε=0.1","N= 132 ε=0.01","N=1194 ε=0.001","N=5759 ε=0.0001",'','1 + 1/2 + 1/3 + 1/4 + ...',
   '...seems to diverge',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=3677 ε=1",'',
   '1 + 1/2^2 + 1/3^2 + 1/4^2 + ...','...seems to converge against 1.64483406184705953899',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   8 ε=0.1","N=  97 ε=0.01","N= 907 ε=0.001",
   "N=4998 ε=0.0001",'','1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 ...','...seems to converge against 0.78540316239748583597',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   3 ε=0.1","N=  48 ε=0.01","N= 498 ε=0.001",
   "N=4998 ε=0.0001"],
  'LDWin64'=>
  ['(1+1/n)^n','...seems to converge against 2.718145913232938',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε",
   "N=   0 ε=1","N=  11 ε=0.1","N= 132 ε=0.01","N=1194 ε=0.001","N=5759 ε=0.0001",'','1 + 1/2 + 1/3 + 1/4 + ...',
   '...seems to diverge',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=3677 ε=1",'',
   '1 + 1/2^2 + 1/3^2 + 1/4^2 + ...','...seems to converge against 1.6448340618470652',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   8 ε=0.1","N=  97 ε=0.01","N= 907 ε=0.001",
   "N=4998 ε=0.0001",'','1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 ...','...seems to converge against 0.7854031623974836',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   3 ε=0.1","N=  48 ε=0.01","N= 498 ε=0.001",
   "N=4998 ε=0.0001"],
  'LOLinux'=>
  ['(1+1/n)^n','...seems to converge against 2.7181459132335902967',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε",
   "N=   0 ε=1","N=  11 ε=0.1","N= 132 ε=0.01","N=1194 ε=0.001","N=5759 ε=0.0001",'','1 + 1/2 + 1/3 + 1/4 + ...',
   '...seems to diverge',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=3677 ε=1",'',
   '1 + 1/2^2 + 1/3^2 + 1/4^2 + ...','...seems to converge against 1.64483406184705953899',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   8 ε=0.1","N=  97 ε=0.01","N= 907 ε=0.001",
   "N=4998 ε=0.0001",'','1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 ...','...seems to converge against 0.78540316239748583597',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   3 ε=0.1","N=  48 ε=0.01","N= 498 ε=0.001",
   "N=4998 ε=0.0001"],
  'LOWin64'=>
  ['(1+1/n)^n','...seems to converge against 2.718145913232938',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε",
   "N=   0 ε=1","N=  11 ε=0.1","N= 132 ε=0.01","N=1194 ε=0.001","N=5759 ε=0.0001",'','1 + 1/2 + 1/3 + 1/4 + ...',
   '...seems to diverge',"Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=3677 ε=1",'',
   '1 + 1/2^2 + 1/3^2 + 1/4^2 + ...','...seems to converge against 1.6448340618470652',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   8 ε=0.1","N=  97 ε=0.01","N= 907 ε=0.001",
   "N=4998 ε=0.0001",'','1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 ...','...seems to converge against 0.7854031623974836',
   "Cauchy: ∀ ε>0 : ∃ N : ∀ n,m>N : |x[n]-x[m]|<ε","N=   0 ε=1","N=   3 ε=0.1","N=  48 ε=0.01","N= 498 ε=0.001",
   "N=4998 ε=0.0001"]].toMap,
 'combinations'=>
 ['[1,2,3]','[1,2,4]','[1,2,5]','[1,3,4]','[1,3,5]','[1,4,5]','[2,3,4]','[2,3,5]','[2,4,5]','[3,4,5]'],
 'commaQuibble'=>
 ['{}','{ABC}','{ABC and DEF}','{ABC, DEF, G and H}'],
 'concatInts'=>
 ['998764543431','6054854654'],
 'continuedFractions'=>
 ['FDLinux'=>
  ['1+1/(1+1/(1+1/(1+1/(1+1/(1+...)))))    = 1.6180339887498948483',
   '1+1/(2+1/(2+1/(2+1/(2+1/(2+...)))))    = 1.41421356237309504876',
   '2+1/(1+1/(2+2/(3+3/(4+4/(5+...)))))    = 2.7182818284590452354',
   '3+1/(6+9/(6+25/(6+49/(6+81/(6+...))))) = 3.141592653558605674'],
  'FDWin64'=>
  ['1+1/(1+1/(1+1/(1+1/(1+1/(1+...)))))    = 1.6180339887498949','1+1/(2+1/(2+1/(2+1/(2+1/(2+...)))))    = 1.4142135623730951',
   '2+1/(1+1/(2+2/(3+3/(4+4/(5+...)))))    = 2.7182818284590455','3+1/(6+9/(6+25/(6+49/(6+81/(6+...))))) = 3.1415926535586056'],
  'FOLinux'=>
  ['1+1/(1+1/(1+1/(1+1/(1+1/(1+...)))))    = 1.6180339887498948483',
   '1+1/(2+1/(2+1/(2+1/(2+1/(2+...)))))    = 1.41421356237309504876',
   '2+1/(1+1/(2+2/(3+3/(4+4/(5+...)))))    = 2.7182818284590452354',
   '3+1/(6+9/(6+25/(6+49/(6+81/(6+...))))) = 3.141592653558605674'],
  'FOWin64'=>
  ['1+1/(1+1/(1+1/(1+1/(1+1/(1+...)))))    = 1.6180339887498949','1+1/(2+1/(2+1/(2+1/(2+1/(2+...)))))    = 1.4142135623730951',
   '2+1/(1+1/(2+2/(3+3/(4+4/(5+...)))))    = 2.7182818284590455','3+1/(6+9/(6+25/(6+49/(6+81/(6+...))))) = 3.1415926535586056'],
  'LDLinux'=>
  ['1+1/(1+1/(1+1/(1+1/(1+1/(1+...)))))    = 1.6180339887498948483',
   '1+1/(2+1/(2+1/(2+1/(2+1/(2+...)))))    = 1.41421356237309504876',
   '2+1/(1+1/(2+2/(3+3/(4+4/(5+...)))))    = 2.7182818284590452354',
   '3+1/(6+9/(6+25/(6+49/(6+81/(6+...))))) = 3.141592653558605674'],
  'LDWin64'=>
  ['1+1/(1+1/(1+1/(1+1/(1+1/(1+...)))))    = 1.6180339887498949','1+1/(2+1/(2+1/(2+1/(2+1/(2+...)))))    = 1.4142135623730951',
   '2+1/(1+1/(2+2/(3+3/(4+4/(5+...)))))    = 2.7182818284590455','3+1/(6+9/(6+25/(6+49/(6+81/(6+...))))) = 3.1415926535586056'],
  'LOLinux'=>
  ['1+1/(1+1/(1+1/(1+1/(1+1/(1+...)))))    = 1.6180339887498948483',
   '1+1/(2+1/(2+1/(2+1/(2+1/(2+...)))))    = 1.41421356237309504876',
   '2+1/(1+1/(2+2/(3+3/(4+4/(5+...)))))    = 2.7182818284590452354',
   '3+1/(6+9/(6+25/(6+49/(6+81/(6+...))))) = 3.141592653558605674'],
  'LOWin64'=>
  ['1+1/(1+1/(1+1/(1+1/(1+1/(1+...)))))    = 1.6180339887498949','1+1/(2+1/(2+1/(2+1/(2+1/(2+...)))))    = 1.4142135623730951',
   '2+1/(1+1/(2+2/(3+3/(4+4/(5+...)))))    = 2.7182818284590455','3+1/(6+9/(6+25/(6+49/(6+81/(6+...))))) = 3.1415926535586056']
 ].toMap,
 'copyOnWriteDemo'=>
 ['initial list: [0,1,2,3]',"after adding element X the list is: [0,1,2,3,'X']",'after removing element #0 the list is: [1,2,3]',
  'list still is: [0,1,2,3]',"after adding element X the list is: [0,1,2,3,'X']",
  "after removing element #0 the list is: [1,2,3,'X']","Now my list is: [1,2,3,'X']",
  '(1) A==B = true //A=[1,2,3] and B=[1,2,3] point to the same value object',
  '(2) A==B = false //B=[1,4,3] points to another value object after copy-on-write',
  '(3) A==B = true //B=[1,2,3] still points to another value which is equal to A'],
 'countInFactors'=>
 ['1','2','3','2*2','5','2*3','7','2*2*2','3*3','2*5','11','2*2*3','13','2*7','3*5','2*2*2*2','17','2*3*3','19','2*2*5','3*7',
  '2*11','23','2*2*2*3','5*5'],
 'countTheCoins'=>
 ['There are 293 ways to make a dollar from coins','  and 4563 ways to make a euro from coins.'],
 'deBruijn'=>
 ['01','0011','00010111','0000100110101111','00000100011001010011101011011111',
  '0000001000011000101000111001001011001101001111010101110110111111',
  '00000001000001100001010000111000100100010110001101000111100100110010101001011100110110011101001111101010110101111011011101111111'
 ],
 'departmentNumbers'=>
 ['[2,3,7]','[2,4,6]','[2,6,4]','[2,7,3]','[4,1,7]','[4,3,5]','[4,5,3]','[4,7,1]','[6,1,5]','[6,5,1]'],
 'dice7fromDice5'=>
 ['Distribution of seven sided dice (100000 samples): ','  0.14168','  0.14199','  0.14217','  0.14234','  0.14370','  0.14402',
  '  0.14410'],
 'diff'=>
 ['--- <#>/demos/inputs/unixdict.txt','+++ <#>/demos/inputs/unixdict2.txt','@@ -20,13 +20,4 @@',"  Abby's",'  Abdul',"- Abdul's",
  '- Abe',"- Abe's",'- Abel',"- Abel's",'- Abelard',"- Abelard's",'- Abelson',"- Abelson's",'  Aberdeen',"  Aberdeen's",
  '@@ -101,5 +92,5 @@',"  Adan's",'  Adana',"- Adana's",'+ insertion','  Adar',"  Adar's"],
 'digitSquareSum'=>
 ['85623'],
 'eratosthenes'=>
 ['   2,   3,   5,   7,  11,  13,  17,  19,  23,  29,  31,  37,  41,  43,  47,  53,  59,  61,  67,  71',
  '  73,  79,  83,  89,  97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173',
  ' 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281',
  ' 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409',
  ' 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541',
  ' 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659',
  ' 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809',
  ' 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941',
  ' 947, 953, 967, 971, 977, 983, 991, 997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069',
  '1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223',
  '1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373',
  '1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511',
  '1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657',
  '1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811',
  '1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987',
  '1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129',
  '2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287',
  '2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423',
  '2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617',
  '2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741',
  '2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897'],
 'ethiopian'=>
 ['   17      34','    8  [   68]','    4  [  136]','    2  [  272]','    1     544','       =======','          578'],
 'eulersSumOfPowers'=>
 ['27^5 + 84^5 + 110^5 + 133^5 = 144^5'],
 'examples_from_file'=>
 ['FDWin64'=>
  ["in> [2=>'A', 4=>'B'].toMap.map2list('-');","out> ['-','-','A','-','B'];",'in> x :=3;',"in> (x and 1)=0 ?'even' :'odd';",
   "out> 'odd';","in> false ?'o.k.' : void;",'out> void;','in> f(a, b, c)->a ? b : c;','in> :: f;','out> (a, b, c)->a ? b : c;',
   'in> begin local L:=[5..1]; while L.size<10 do L|=0; L; end;','out> [5,4,3,2,1,0,0,0,0,0];',
   'in> begin local x:=0; while(x+=pi)<10; x; end;','out> 12.566370614359172;',
   'in> begin local x:=10; repeat print(x+=1)until x>0; end;','11','out> void;',
   'in> begin local output:=[]; local x:=10; repeat output|=x; x-=1; until x<=0; output; end;','out> [10,9,8,7,6,5,4,3,2,1];',
   "in> for x in ['A'..'C'] do print(x);",'A','B','C','out> [];','in> for x in [1..4] do 0|x do x|0;',
   'out> [[0,1],[1,0],[0,2],[2,0],[0,3],[3,0],[0,4],[4,0]];',"in> for i in [1..10000] do parallel 1/i²aggregator(+);",
   'out> 1.6448340718480652;','in> cross([1..3],[1..3]).each(x,x-0.5, x+0.5);',
   'out> [[0.5,0.5],[1.5,1.5],[0.5,1.5],[1.5,2.5],[0.5,2.5],[1.5,3.5],[1.5,0.5],[2.5,1.5],[1.5,1.5],[2.5,2.5],[1.5,2.5],[2.5,3.5],[2.5,0.5],[3.5,1.5],[2.5,1.5],[3.5,2.5],[2.5,2.5],[3.5,3.5]];',
   'in> [1..10].each(v,cos(v),+);','out> -1.4174477464559059;','in> random(3).each(y,sqr(y), aggregator((x)->print(x)));',
   '0.0031703627893842068','0.23019735941063235','0.16996533208954645','out> void;',
   'in> random(100).each(t,sin(t), aggregator((x, y)->max(x, y)/y));','out> 1.2332433624605673E43;',
   'in> counter->begin local c:=0; save; c+=1; end;','in> counter();','out> 1;','in> counter();','out> 2;','in> counter();',
   'out> 3;','in> 3=3.0;','out> true;','in> Nan=Nan;','out> false;','in> {$x}=3;','out> {$x=3};','in> [1, 2, 3]=[3, 1, 3];',
   'out> [false,false,true];','in> arity({3});','out> 0;','in> arity({sin($x)/$x});','out> 1;','in> [1..2].isIntList;',
   'out> true;',"in> extractFileDirectory('folder/subFolder/file.extension');","out> 'folder/subFolder';",
   "in> runScript(['name'=>'hello.mnh','source'=>[\"main->print('Hello world');\"],'side effects'=>['alter package state','output']].toMap).filter({$message.head=='printline'}).map(:: trailing);",
   "out> ['Hello world'];",'in> arity({sin($x)/$y});','out> 2;',"in> arity({printf('%s%s', $a,...)});",'out> 1;',
   "in> toExpression('$x-$x^2+$x^3');",'out> {$x-$x^2+$x^3};',"in> toExpression('');",
   'Error @?:1,1 The parsed expression appears to be empty','in> parameterNames({3});','out> [];',
   'in> parameterNames({sin($x)/$x});',"out> ['$x'];",'in> groupToList([1, 2, 3, 4, 5, 6],[1, 2, 3, 1, 2, 3], Nan, ::*);',
   'out> [Nan,4,10,18];',"in> parameterNames({printf('%s%s', $a,...)});","out> ['$a'];",'in> ord(3);','out> 3;','in> ord(true);',
   'out> 1;','in> ord(false);','out> 0;',"in> ord('A');",'out> 65;',"in> ord('abc');",'out> -1;','in> ord(2.1);',
   'Error @?:1,1 ord can only be applied to booleans, ints and strings',"in> softCast('A');","out> 'A';",
   'in> softCast(''"B"'');',"out> 'B';",'in> softCast(3);','out> 3;',"in> softCast([1,'2','true',\"'TEXT'\",'1.5','2,6']);",
   "out> [1,2,true,'TEXT',1.5,'2,6'];","in> toString('a');","out> 'a';",'in> toString(234);',"out> '234';",
   "in> toString([1, 2.6,'a', true,{$x}]);",'out> "[1,2.6,''a'',true,{$x}]";','in> abs(-0.92);','out> 0.92;','in> abs(3);',
   'out> 3;','in> abs({1+$x});','out> {abs(1+$x)};','in> arccos(-0.92);','out> 2.7388768120091318;','in> arccos(3);','out> Nan;',
   'in> arccos({1+$x});','out> {arccos(1+$x)};','in> arcsin(-0.92);','out> -1.1680804852142352;','in> arcsin(3);','out> Nan;',
   'in> arcsin({1+$x});','out> {arcsin(1+$x)};','in> tan(-0.92);','out> -1.313263699320248;','in> tan(3);',
   'out> -0.1425465430742778;','in> tan({1+$x});','out> {tan(1+$x)};','in> tan(pi/2);','out> 1.6331778728383844E16;',
   'in> arctan(-0.92);','out> -0.7437555842988599;','in> arctan({$x});','out> {arctan($x)};','in> argMax(sin([0..10]));',
   'out> 8;','in> argMax([1, 3, 3, 0, 2]);','out> 1;','in> argMin(sin([0..10]));','out> 5;','in> argMin([1, 3, 3, 0, 2]);',
   'out> 3;','in> ceil(20/3);','out> 7;','in> ceil([0..3]/3);','out> [0,1,1,1];','in> ceil([0..3]/3, 2);',
   'out> [0,0.34,0.67,1];','in> floor(20/3);','out> 6;','in> floor([0..3]/3);','out> [0,0,0,1];','in> floor([0..3]/3, 2);',
   'out> [0,0.33,0.66,1];','in> round(20/3);','out> 7;','in> round([0.5, 1.5, 2.5, 3.5]);','out> [0,2,2,4];',
   'in> round([0..3]/3, 2);','out> [0,0.33,0.67,1];','in> isInfinite(Nan);','out> false;','in> isInfinite(+Inf);','out> true;',
   'in> isInfinite(-Inf);','out> true;','in> isInfinite([-3.4344, Nan,+Inf]);','out> [false,false,true];','in> isNan(Nan);',
   'out> true;','in> isNan(+Inf);','out> false;','in> isNan(-Inf);','out> false;','in> isNan([-3.4344, Nan,+Inf]);',
   'out> [false,true,false];','in> cos(-0.92);','out> 0.60582015664346289;','in> cos(3);','out> -0.9899924966004454;',
   'in> cos({1+$x});','out> {cos(1+$x)};','in> exp(-0.92);','out> 0.39851904108451419;','in> exp(3);','out> 20.085536923187668;',
   'in> exp({1+$x});','out> {exp(1+$x)};','in> ln(-0.92);','out> Nan;','in> ln({1+$x});','out> {ln(1+$x)};','in> sin(3);',
   'out> 0.1411200080598672;','in> sin({1+$x});','out> {sin(1+$x)};','in> sqr(-0.92);','out> 0.8464;','in> sqr(3);','out> 9;',
   'in> sqr({1+$x});','out> {sqr(1+$x)};','in> sqrt(-0.92);','out> Nan;','in> sqrt(3);','out> 1.7320508075688772;',
   'in> sqrt({1+$x});','out> {sqrt(1+$x)};','in> isqrt(121);','out> [11,true];','in> isqrt(255, 1);','out> [16,false];',
   'in> sign(-0.92);','out> -1;','in> sign(3);','out> 1;','in> sign({1+$x});','out> {sign(1+$x)};',"in> max(['a'..'z']);",
   "out> 'z';",'in> max([0..9]/2);','out> 4.5;','in> max(true, false);','out> true;',"in> min(['a'..'z']);","out> 'a';",
   'in> min([0..9]/2);','out> 0;','in> min(true, false);','out> false;',"in> copy('abcde', 1, 3);","out> 'bcd';",
   "in> copy('abcde', 2);","out> 'cde';","in> escape('a');",'out> "''a''";','in> escape(#9);',"out> '#9';",
   'in> group([1..10],[1..10] mod 3=0);','out> [false => [1,2,4,5,7,8,10],true=>[3,6,9]].toMap;','in> fail;',
   'Error(Usr) @?:1,1 Fail','in> fail("Told you this wouldn''t work!");',"Error(Usr) @?:1,1 Told you this wouldn't work!",
   'in> hash(1);','out> 1;','in> hash([1..3]);','out> 90399;',"in> hash('a');",'out> 128;',
   "in> listBuiltin.filter({$s.matches('^mnh\\.')}).sort.trailing(10);",
   "out> ['mnh.listBuiltin','mnh.listSideEffects','mnh.mnhInfo','mnh.myPath','mnh.ord','mnh.parameterNames','mnh.runScript','mnh.sandBoxExecute','mnh.sleep','mnh.sleepUntil'];",
   'in> abs(3);','out> 3;','in> abs(-3);','out> 3;','in> abs([-2..2]/2);','out> [1,0.5,0,0.5,1];',
   "in> chars('This is a test.');","out> ['T','h','i','s',' ','i','s',' ','a',' ','t','e','s','t','.'];",'in> chars.get(100);',
   "out> 'd';","in> clean('+21/232/2116-11',['0'..'9'],' ');","out> ' 21 232 2116 11';","in> join(['a','b','c']);","out> 'abc';",
   "in> join([1..5],' ');","out> '1 2 3 4 5';","in> length(\"Test öäü\");",'out> 8;',"in> byteLength(\"Test öäü\");",
   'out> 11;',"in> length(['Text','AbC']);",'out> [4,3];',"in> lower('Test');","out> 'test';","in> lower(['Text','AbC']);",
   "out> ['text','abc'];","in> upper('Test');","out> 'TEST';","in> upper(['Text','AbC']);","out> ['TEXT','ABC'];",
   'in> t :=[0..1000]*2*pi/1000;','in> plot(t, sin(t));','out> void;',"in> plot.renderToFile('plotDemo1.png', 600, 300);",
   'out> void;','in> abs({$x});','out> {abs($x)};',"in> chars('Test');","out> ['T','e','s','t'];","in> pos('o','Hello World');",
   'out> 4;',"in> pos(',',['Hello','Test','1,2,3']);",'out> [Inf,Inf,1];',"in> pos(['a','b'],'cdb');",'out> [Inf,2];',
   "in> repeatString('-', 10);","out> '----------';","in> replace('[[][]][]][][','[]','');","out> '][';",
   "in> replace('aba','b','bb');","out> 'abba';","in> replaceOne('[[][]][]][][','[]','');","out> '[[]][]][][';",
   "in> replaceOne('1:.-.; 2:.-.; 3:.-.','.',['a'..'e']);","out> '1:a-b; 2:c-d; 3:e-.';","in> split('1,2,3;4,5,6',',');",
   "out> ['1','2','3;4','5','6'];","in> split('1,2,3;4,5,6',';');","out> ['1,2,3','4,5,6'];",
   "in> split('1,2,3;4,5,6',[';',',']);","out> ['1','2','3','4','5','6'];",
   "in> tokenSplit('f(x)->x+1; //Stupid, but just an example...','mnh');",
   "out> ['f','(','x',')','->','x','+','1',';',' ','//Stupid, but just an example...'];",'in> trim(" \tA B C\t ");',
   "out> 'A B C';",'in> trimLeft(" \tA B C\t ");','out> "A B C\t ";','in> trimRight(" \tA B C\t ");','out> " \tA B C";',
   "in> unbrace('3');","out> '3';","in> unbrace('(3)');","out> '3';","in> unbrace('(3]');","out> '(3]';",'in> unbrace(''"3"'');',
   'out> ''"3"'';',"in> chars('Testtext').elementFrequency;","out> ['e' => 2,'s'=>1,'T'=>1,'t'=>3,'x'=>1].toMap;",
   "in> chars('Testtext').agg(elementFrequency);","out> ['e' => 2,'s'=>1,'T'=>1,'t'=>3,'x'=>1].toMap;",
   'in> flatten([1,[2,[3, 4],[5]], 6]);','out> [1,2,3,4,5,6];',"in> head(['A'..'Z']);","out> 'A';","in> head(['A'..'Z'], 3);",
   "out> ['A','B','C'];","in> ['A'..'Z'].toSet.head(3);","out> ['A','Q','B'];","in> tail(['A'..'Z']);",
   "out> ['B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];",
   "in> tail(['A'..'Z'], 3);",
   "out> ['D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];",
   'in> rangeGenerator(1, 10).tail(3);','out> rangeGenerator(4,10);',"in> leading(['A'..'Z']);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y'];",
   "in> leading(['A'..'Z'], 3);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W'];",
   'in> rangeGenerator(1, 10).leading(3);','out> [1,2,3,4,5,6,7];',"in> trailing(['A'..'Z']);","out> 'Z';",
   "in> trailing(['A'..'Z'], 3);","out> ['X','Y','Z'];","in> ['A'..'Z'].toSet.trailing(3);","out> ['N','O','P'];",
   'in> rangeGenerator(1, 10).trailing(3);','out> [8,9,10];',"in> minus([1..10]², 2*[0..50]);",'out> [1,9,25,49,81].toSet;',
   "in> rangeGenerator(1, 20).chunkMap(5,(x)->format('%2s', x)).toList;",
   "out> [[' 1',' 2',' 3',' 4',' 5'],[' 6',' 7',' 8',' 9','10'],['11','12','13','14','15'],['16','17','18','19','20']];",
   "in> [1,[2, 3],[4, 5, 6]].flatMap((x)->x³).toList;",'out> [1,8,27,64,125,216];','in> sort(intRandom(10, 5));',
   'out> [1,2,4,5,8];',"in> sort(['01','10','100','1','010'],(x, y)->softCast(x)<=softCast(y));",
   "out> ['01','1','10','010','100'];","in> sort(['01','10','100','1','010'], :: length);","out> ['1','01','10','100','010'];",
   'in> sortPerm(random(10));','out> [0,7,3,4,2,1,5,9,6,8];',"in> sortPerm(['a'..'c'..'a']);",'out> [0,4,1,3,2];',
   'in> intersect([0..1000]^2,[0..1000]^3);','out> [0,4096,262144,1,64,46656,1000000,729,15625,117649,531441].toSet;',
   'in> union(1/[1..5], 2/[2..6]);','out> [0.5,0.25,1,0.3333333333333333,0.6666666666666666,0.2,0.4].toSet;',
   "in> deleteFile('plotDemo1.png');",'out> true;',"in> get(['a'..'f'], 3);","out> 'd';","in> get(['a'..'f'],[3, 1, 2]);",
   "out> ['d','b','c'];",'in> get([0..4],[2..6] mod 3=0);','out> [1,4];',"in> get([['A', 1],['B', 2],['C', 0]],'B');",'out> 2;',
   'in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]], 1);','out> [2,5,8];','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[1, 0]);',
   'out> [[2,1],[5,4],[8,7]];','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[true, false, true]);','out> [[1,3],[4,6],[7,9]];',
   'in> indexOf([1..6]^2 mod 3=0);','out> [2,5];','in> reverseList([1..5]);','out> [5,4,3,2,1];','in> size([0.5, 0.1, 0.2]);',
   'out> 3;',"in> toMap([['A', 1],['B', 2],['C', 0],['B', 4]]);","out> ['A' => 1,'C'=>0,'B'=>4].toMap;",
   'in> trueCount(10<[0..10]^2<50);','out> 4;','in> unique([3, 1, 2, 1, 4, 1, 5]);','out> [1,2,3,4,5];',"in> compress('Test');",
   "out> 'Test';","in> compress('Test').decompress;","out> 'Test';",
   "in> compress('This text is long enough to give deflate a little edge. So deflate will be used.');",
   "out> '%P]'#181't'#149#221'mZ'#157't'#188'6!'#130#191#181'!'#129#176'9'#182#148#201#133'k'#174'p'#173'.'#197'q'#233'm'#180#14'm'#165'1\\w'#200'6'#134#187#4;",
   "in> compress('This text is long enough to give deflate a little edge. So deflate will be used.').decompress;",
   "out> 'This text is long enough to give deflate a little edge. So deflate will be used.';",
   "in> relativeFileName('~/folder/','~/other/example.txt');","out> '../other/example.txt';",'in> primes(20);',
   'out> [2,3,5,7,11,13,17,19];','in> subSets([1, 2, 1]);','out> [[],[2],[1],[1,2],[1,1],[1,1,2]];',
   "in> diff('encode','decode');",
   "out> ['adds' => 1,'matches'=>5,'modifies'=>0,'edit'=>[['+',-1,0],[' ',0,1],['-',1,1],[' ',2,2],[' ',3,3],[' ',4,4],[' ',5,5]],'deletes'=>1].toMap;",
   "in> diffStats('encode','decode');","out> ['adds' => 1,'matches'=>5,'modifies'=>0,'deletes'=>1].toMap;",
   "in> format('%s is a string, %3.3d is a number','X', 7);","out> 'X is a string, 007 is a number';","in> format('%6.3f', 3);",
   "out> ' 3.000';","in> format('%6.3e', 3);","out> '3.00E+000';","in> format('%6.3g', 3);","out> '     3';",
   "in> format('%6.6x', 1234);","out> '0004D2';","in> formatTime('mm.dd.yyyy', 43210);","out> '04.20.2018';",
   'in> formatTime(12424.245);',"out> '05.01.1934 05:52:48';","in> isAscii('xyz');",'out> true;',
   "in> isAscii('xyz'&chars[180]);",'out> false;',"in> isAscii(\"Läuft\");",'out> false;',"in> isUtf8('xyz');",'out> true;',
   "in> isUtf8('xyz'&chars[180]);",'out> false;',"in> isUtf8(\"Schräg\");",'out> true;',
   "in> parseTime('yyyy-mm-dd hh:nn','2000-01-01 03:43');",'out> 36526.154861111114;',"in> reverseString('Test');",
   "out> 'tseT';","in> regex.matches('This is a test','[T|t]est');",'out> true;',
   "in> regex.matchComposite('This is a test','[T|t]est');","out> [['test',11,4]];",
   "in> regex.replace('A Test is a test','[T|t]est','rose');","out> 'A rose is a rose';",
   "in> regex.split('A Test is a test','[e| ]');","out> ['A','T','st','is','a','t','st'];",'in> toBoolean(0);','out> false;',
   'in> toBoolean(1.0);','out> true;',"in> toBoolean('true');",'out> true;','in> toBoolean(3);',
   'Error @?:1,1 3 cannot be cast to boolean',"in> toInt('32');",'out> 32;','in> toInt(3.0);','out> 3;','in> toInt(3.1);',
   'Error @?:1,1 3.1 cannot be cast to int','in> toInt(false);','out> 0;',"in> toReal('3.212');",'out> 3.212;',
   'in> toReal(true);','out> 1;','in> toReal(3);','out> 3.0;','in> getOptions;',
   "out> ['fontsize' => 10.0,'autoscaleY'=>true,'y0'=>-1.0,'logscaleX'=>false,'x0'=>-1.0,'y1'=>1.0,'preserveAspect'=>true,'logscaleY'=>false,'axisStyleX'=>7,'x1'=>1.0,'autoscaleFactor'=>1.0,'axisStyleY'=>7,'autoscaleX'=>true].toMap;",
   'in> executor;','out> ''<#>\target\Win64\mnh_debug.exe'';','in> print("1\n2.0\n03.45");','1','2.0','03.45','out> void;',
   'in> print("1\n2.0\n03,45\t");',' 1',' 2.0','03,45','out> void;','in> print("1\tone\t|\n2.0\ttwo\t|\n03.45\tthree\t|");',
   ' 1    one   |',' 2.0  two   |','03.45 three |','out> void;','in> print("1\vone\v|\n2.0\vtwo\v|\n03.45\vthree\v|");',
   ' 1   one  |',' 2.0 two  |','03.45three|','out> void;',"in> printf('%x is %d in hexadecimal form', 123, 123);",
   '7B is 123 in hexadecimal form','out> void;',"in> printf('%{$0}x is %{$0}d in hexadecimal form', 123);",
   '7B is 123 in hexadecimal form','out> void;',"in> printf('sin(%{$0}s)=%{sin($0)}4.4g', 1);",'sin(1)=0.8415','out> void;',
   'in> permutations([1, 1, 2]);','out> [[1,1,2],[1,2,1],[2,1,1]].toSet;','in> permutations([1..3]);',
   'out> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]].toSet;',"in> input :=[[1..10], random,'test', random(9)];",
   'in> serialized :=input.serialize;',"in> print(input.toString.byteLength,' > ', serialized.byteLength);",'228 > 92',
   'out> void;','in> input==serialized.deserialize;','out> true;','in> factorize(18447422338071909869);',
   'out> [2642257,2642287,2642291];','in> formatTabs("\v-2\n3\t4.3");',"out> ['  -2','3  4.3'];",'in> typeOf(3);',"out> 'Int';",
   'in> typeOf([1..5, 7.5]);',"out> 'NumericList(6)';",'in> typeOf({$x^2+$y});',"out> 'Expression(2)';",
   'in> x :=transpose([1,[1, 2, 3],[1, 2]], 0);','in> x;','out> [[1,1,1],[0,2,2],[0,3,0]];','in> x.transpose(0);',
   'out> [[1,0,0],[1,2,3],[1,2,0]];','in> resetRandom(12157);','out> void;','in> resetRandom;','out> void;','in> intRandom(7);',
   'out> 3;','in> intRandom(7, 10);','out> [3,0,4,4,4,2,0,6,5,3];','in> random;','out> 0.056305974721908569;','in> random(3);',
   'out> [0.056305974721908569,0.4797888696193695,0.41226851940155029];',"in> log('This should be logged...');",
   'log> This should be logged...;','out> void;',"in> note('Note that this is a note');",
   'Note(Usr) @?:1,1 Note that this is a note','out> void;',"in> warn('Warning: I intend to say something important here');",
   'Warning(Usr) @?:1,1 Warning: I intend to say something important here','out> void;','in> isScalar(1);','out> true;',
   'in> isBoolean(false);','out> true;','in> isBoolean(1);','out> false;','in> isInt(false);','out> false;','in> isInt(1);',
   'out> true;','in> isInt(1.0);','out> false;','in> isReal(false);','out> false;','in> isReal(1);','out> false;',
   'in> isReal(1.0);','out> true;','in> isNumeric(false);','out> false;','in> isNumeric(1);','out> true;','in> isNumeric(1.0);',
   'out> true;','in> isList([]);','out> true;','in> isList([], 0);','out> true;','in> isList([], 1);','out> false;',
   "in> isList(['x'], 1);",'out> true;',"in> isString('Test');",'out> true;','in> isString(true);','out> false;',
   'in> isExpression(:: sin);','out> true;','in> isExpression(:: sin, 1);','out> true;','in> isExpression(:: sin, 2);',
   'out> false;','in> digits(123);','out> [1,2,3];','in> digits(123, 3);','out> [1,1,1,2,0];','in> arctan2(1, 1);',
   'out> 0.78539816339744828;',"in> charSet('abcba');","out> ['a','b','c'].toSet;","in> bytes(\"ö\").ord;",'out> [195,182];',
   "in> base64encode('Test');","out> 'VGVzdA==';","in> base64decode('VGVzdA==');","out> 'Test';",
   "in> base92encode('bla bla bla ');","out> ']En_)]En_)]En_)';","in> base92decode('PgsC.?d@t^');","out> '12345';",
   'in> listSideEffects;',
   "out> ['input','output','sound','sleep','detaching','server','read package state','alter package state','read context state','alter context state','read GUI state','alter GUI state','read IDE state','alter IDE state','read file','write file','http','ipc','executing external'];",
   "in> changeFileExt('file.extension','.newExtension');","out> 'file.newExtension';",
   "in> changeFileExt('file.2.extension','.newExtension');","out> 'file.2.newExtension';",'in> httpError;',
   'out> "HTTP/1.0 404\r\n";','in> isBooleanList([true, false]);','out> true;','in> isBooleanList(true);','out> false;',
   'in> isIntList([1..3]);','out> true;','in> isIntList([1, 2.0]);','out> false;','in> isRealList([1, 2, 3]);','out> false;',
   'in> isRealList([1.0, 2.0, 3.0, Nan]);','out> true;',"in> isStringList(['a'..'z']);",'out> true;',
   'in> isNumericList([1, 2, 3]);','out> true;','in> isNumericList([1.0, 2, 3, Inf]);','out> true;','in> isVoid();','out> true;',
   'in> isVoid(void);','out> true;','in> isVoid(3);','out> false;',"in> escapePascal('Test');",'out> "''Test''";',
   "in> escapeJava('Test');",'out> ''"Test"'';',"in> extractFileNameOnly('/home/user/file.ext');","out> 'file';",
   "in> extractFileDirectory('/home/user/file.ext');","out> '/home/user';","in> extractFileName('/home/user/file.ext');",
   "out> 'file.ext';","in> extractFileExt('/home/user/file.ext');","out> '.ext';","in> extractPath('/index.html?x=0&y=3%2Ax');",
   "out> '/index.html';","in> extractParameters('/index.html?x=0&y=3%2Ax');","out> ['x' => 0,'y'=>'3*x'].toMap;",
   "in> extractRawParameters('/index.html?x=0&y=3%2Ax');","out> 'x=0&y=3%2Ax';",
   "in> encodeRequest('127.0.0.1:3126','rest',[['user','anonymous'],['request','3*&7']].toMap);",
   "out> '127.0.0.1:3126/rest?user=anonymous&request=3%2A%267';","in> cross(['1'..'3'],['A'..'C']);",
   "out> [['1','A'],['1','B'],['1','C'],['2','A'],['2','B'],['2','C'],['3','A'],['3','B'],['3','C']];",'in> [1, 2, 1].toSet;',
   'out> [2,1].toSet;','in> [1.2, 3.0].isRealCollection;','out> true;','in> [1.2, 3.0].toSet.isRealCollection;','out> true;',
   'in> [1.2, 3].isRealCollection;','out> false;','in> [1.2, 3.0].isRealCollection(2);','out> true;',
   'in> [1.2, 3.0].isRealCollection(3);','out> false;','in> [true].isBooleanCollection;','out> true;',
   'in> [true, false, true].toSet.isBooleanCollection(2);','out> true;','in> [true, false, true].toSet.isBooleanSet;',
   'out> true;','in> [1, 2, 3].isIntCollection;','out> true;','in> [].isIntCollection;','out> true;',
   'in> [1.2, 3].isNumericCollection;','out> true;',"in> ['a','b'].toSet.isStringSet;",'out> true;',
   "in> ['a','b'].isStringCollection;",'out> true;','in> [1, 2, 3].isIntSet;','out> false;','in> [1, 2, 3].toSet.isIntSet;',
   'out> true;',"in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap;",'out> true;',"in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(2);",
   'out> true;',"in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(3);",'out> false;',"in> [1,'a', false].isSet;",'out> false;',
   "in> [1,'a', false].isCollection;",'out> true;',"in> utf8ToAnsi(\"öµ\").bytes.ord;",'out> [246,181];',
   'in> chars[214].ansiToUtf8;',"out> \"Ö\";",'in> [1.2, 3.4].toSet.isRealSet;','out> true;','in> toList(3);','out> [3];',
   'in> toList([2, 3, 6].toSet);','out> [2,6,3];','in> [1.2, 3.4].toSet.isNumericSet;','out> true;',
   "in> [[1,'one'],[3,'three'],[5,'five']].toMap.getAll([1, 5, 6],['-','-','-']);","out> ['one','five','-'];",
   "in> HEX :=[0..15].map((i)->format('%x', i)=>i).toMap;",
   'in> parseHex(s:String)->HEX.getAll(s.chars.upper).composeDigits(16);',"in> parseHex('DeadBeef');",'out> 3735928559;',
   'in> [1, 3, 5].getAll([0, 2])==[1, 3, 5].get([0, 2]);','out> true;','in> [1..20].filter({$x mod 2<>0<>$x mod 3});',
   'out> [1,5,7,11,13,17,19];','in> rangeGenerator(1, 20).filter({$x mod 2<>0<>$x mod 3});',
   'out> rangeGenerator(1,20).filter({$x mod 2<>0<>$x mod 3});',"in> ['a'..'f'].pMap(:: upper);",
   "out> ['A','B','C','D','E','F'];",'in> primeGenerator.head(10);','out> [2,3,5,7,11,13,17,19,23,29];',
   'in> [-1, 1,-1, 1,-2, 2].agg(head);','out> -1;','in> [-1, 1,-1, 1,-2, 2].agg(trailing);','out> 2;',
   'in> [-1, 1,-1, 1,-2, 2].agg(toSet);','out> [-2,2,-1,1].toSet;','in> [-1, 1,-1, 1,-2, 2].agg(max);','out> 2;',
   'in> [-1, 1,-1, 1,-2, 2].agg(min);','out> -2;','in> [-1, 1,-1, 1,-2, 2].agg(&);',"out> '-11-11-22';",
   'in> [-1, 1,-1, 1,-2, 2].agg(*);','out> -4;','in> [-1, 1,-1, 1,-2, 2].agg(+);','out> 0;',
   'in> permutationIterator([3, 1, 2]).map(:: print).toList;','[1,2,3]','[1,3,2]','[2,1,3]','[2,3,1]','[3,1,2]','[3,2,1]',
   'out> [];',"in> ['a'..'f'].map(:: upper);","out> ['A','B','C','D','E','F'];",'in> rangeGenerator(1, 100).map({$x^2});',
   'out> rangeGenerator(1,100).map({$x^2});','in> zip([1..10],[10..1]*2).map((x, y)->x+y).toList;',
   'out> [21,20,19,18,17,16,15,14,13,12];',"in> mergeMaps([['A', 1],['B', 2]].toMap,[['A', 7],['C', 3]].toMap, ::+);",
   "out> ['A' => 8,'B'=>2,'C'=>3].toMap;","in> try({deserialize('x')});",'out> void;',"in> try({deserialize('x')}, :: print);",
   "[['el3_evalError','@?:24,6','Invalid literal encoding: 120'],['el3_trace','@?:24,6',\"... deserialize('x')},::print);\"]]",
   'out> void;',"in> try({deserialize('x')}, 0);",'out> 0;',"in> try({deserialize('x')},{warn($x.head.trailing)});",
   'Warning(Usr) @?:3,25 Invalid literal encoding: 120','out> void;',"in> interpret('3+4');",'out> 7;','in> shiftRight(7, 1);',
   'out> 3;','in> shiftRight(5,-2);','out> 20;','in> type FiniteRealList(L:List)->L.each(x,!x.isNan,!x.isInfinite, AND);',
   'in> x :=[1, 5, 0.4, 1/7].toFiniteRealList;','in> x;','out> [1,5,0.4,0.14285714285714285].toFiniteRealList;','in> x.typeOf;',
   "out> 'FiniteRealList';",'in> x.toBuiltin;','out> [1,5,0.4,0.14285714285714285];','in> x.toBuiltin.typeOf;',
   "out> 'NumericList(4)';","in> interpret({print('Hello world')},[]);",
   'Error @?:2,12 Cannot apply print because of side effect(s): [output]',
   'Trace @?:2,12 ... print("Hello world")},[]); //interpret with no side effects allowed','in> composeDigits([1, 0, 1], 2);',
   'out> 5;','in> composeDigits([1, 0, 2]);','out> 102;','in> composeDigits([1, 0, 2], 10, 2);','out> 1.02;',
   "in> sandBoxExecute('f(x)->3*x+1; f(f(f(1)))',['alter package state']);",
   "out> [['echo_declaration','@?:1,1','f(x)->3*x+1;'],['echo_input','@?:1,14','f(f(f(1)));'],['echo_output','@?:1,10',40],['exitCode','',0]];",
   "in> begin local x:=async({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   '1: true','start','2: end','out> void;',
   "in> begin local x:=future({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   'start','1: false','2: end','out> void;',"in> validateRegex('(3+.*');",'out> false;',"in> validateRegex('\\(3+.*');",
   'out> true;','in> [1..100].pFilter({$x mod 2=$x mod 3=$x mod 5});','out> [1,30,31,60,61,90,91];','in> pi;',
   'out> 3.141592653589793;','in> isStatefulExpression(:: sin);','out> false;','in> isStatefulExpression(future(:: sin,[3]));',
   'out> true;','in> isStatelessExpression(:: sin);','out> true;','in> isStatelessExpression(future(:: sin,[3]));','out> false;',
   'in> isIterable(future(:: sin,[3]));','out> false;','in> isIterable(primeGenerator);','out> true;','in> isIterable([1..10]);',
   'out> true;','in> isIterableExpression(primeGenerator);','out> true;','in> isIterableExpression([1..10]);','out> false;',
   "in> begin resetRandom; local gen:={begin local last:=0; save; last+=random; end}; print('gen.isIterable= ', gen.isIterable,'; ', gen.head(3)); gen:=gen.toIterableExpression; print('gen.isIterable= ', gen.isIterable,'; ', gen.head(3)); end;",
   'gen.isIterable= false; {begin local last:=0; save; last+=random; end}',
   'gen.isIterable= true; [0.69890123605728149,1.5846346616744995,2.5055105686187744]','out> void;',
   'in> toIterableExpression(:: sqr);','Error @?:4,1 Only nullary stateful expressions may be iterable.',
   'in> toIterableExpression({begin local i:=2; save; i+=i-1; end});','out> {begin local i:=2; save; i+=i-1; end};',
   'in> euklideanNorm([1, 2]);','out> 2.23606797749979;','in> assert(1=1.0);','out> void;',
   "in> assert('bla'.isInt,'Invalid integer given');",'Error(Usr) @?:6,1 Invalid integer given',
   "in> md5('Test input. Could be anything really.');",'out> 337964223705814058127798532806512273013;',
   "in> sha256('Test input. Could be anything really.');",
   'out> 60429211283715320795241587111266756812669288936868807314606704811653259384943;','in> hammingWeight(17213);','out> 8;',
   'in> gcd(1231512, 143543);','out> 23;',
   'in> powMod(2988348162058574136915891421498819466320163312926952423791023078876139, 2351399303373464486466122544523690094744975233415544072992656881240319, 10^40);',
   'out> 1527229998585248450016808958343740453059;','in> randomGenerator(123).head(10);',
   'out> [0.88808047771453857,0.033595457673072815,0.07375691086053848,0.073728755116462708,0.4090341329574585,0.7116715908050537,0.46069467067718506,0.5966716408729553,0.8116149306297302,0.498393714427948];',
   'in> intRandomGenerator(123, 5).head(10);','out> [2,0,0,1,3,4,0,0,1,2];','in> isaacRandomGenerator(123, 5).head(10);',
   'out> [3,3,1,4,4,2,2,0,4,3];','in> modularInverse(3, 32);','out> 11;','in> byteToChar(100);',"out> 'd';",
   'in> byteToChar([10, 12, 97, 45]);',"out> [#10,#12,'a','-'];","in> systemSpecificFilename('..\\test/filename.txt');",
   'out> ''..\test\filename.txt'';',"in> stringIterator(['a','b','c'], 1, 3).head(10);",
   "out> ['a','b','c','aa','ab','ac','ba','bb','bc','ca'];",'in> vanDerCorputGenerator(2).head(10);',
   'out> [0.0,0.5,0.25,0.75,0.125,0.625,0.375,0.875,0.0625,0.5625];','in> primeGenerator.head(1000).trailing(5);',
   'out> [7879,7883,7901,7907,7919];','in> rangeGenerator(0, 5).head(10);','out> [0,1,2,3,4,5];',
   'in> rangeGenerator(100,-100).head(10);','out> [100,99,98,97,96,95,94,93,92,91];','in> divMod(10, 7);','out> [1,3];',
   "in> 'abba'.hasPrefix('ab');",'out> true;','in> isPrime(47531677974672740279381824573269878221106369761817);','out> true;',
   'in> 3==3.0;','out> false;','in> [1, 2, 3]==[3, 1, 3];','out> false;','in> 3<=3.0;','out> true;','in> [1, 2, 3]<=[3, 1, 3];',
   'out> [true,false,true];','in> 3>=3.0;','out> true;','in> [1, 2, 3]>=[3, 1, 3];','out> [false,true,true];','in> 3<3.0;',
   'out> false;','in> [1, 2, 3]<[3, 1, 3];','out> [true,false,false];','in> 3>3.0;','out> false;','in> [1, 2, 3]>[3, 1, 3];',
   'out> [false,true,false];','in> 3<>3.0;','out> false;','in> [1, 2, 3]<>[3, 1, 3];','out> [true,true,false];',
   'in> true AND false;','out> false;','in> true AND 3;','out> 3;','in> false AND 3;','out> false;','in> true and false;',
   'out> false;','in> [true, false, true, false] and[true, true, false, false];','out> [true,false,false,false];',
   'in> 7 and 252;','out> 4;','in> true OR false;','out> true;','in> true OR 3;','out> true;','in> false OR 3;','out> 3;',
   'in> true or false;','out> true;','in> [true, false, true, false] or[true, true, false, false];',
   'out> [true,true,true,false];','in> 7 or 252;','out> 255;','in> true xor false;','out> true;',
   'in> [true, false, true, false] xor[true, true, false, false];','out> [false,true,true,false];','in> 7 xor 252;','out> 251;',
   "in> +'a';","out> 'a';",'in> -3;','out> -3;','in> -[1, 2.0, Inf, Nan];','out> [-1,-2.0,-Inf,Nan];','in> !true;','out> false;',
   'in> 3 in[1..5];','out> true;','in> 3.0 in[1..5];','out> false;','in> 3 not in[1..5];','out> false;','in> 3.0 not in[1..5];',
   'out> true;','in> 1|2;','out> [1,2];','in> [1]|[2];','out> [1,2];','in> [1]|2;','out> [1,2];','in> [1]|[[2]];',
   'out> [1,[2]];','in> [1]||2;','out> [1,2];','in> [1]||[2];','out> [1,[2]];','in> 10 div 3;','out> 3;','in> 10/3;',
   'out> 3.3333333333333335;','in> 10/5;','out> 2;','in> 10.0/5;','out> 2.0;','in> void orElse 42;','out> 42;',
   'in> 3 orElse fail;','out> 3;','in> 3-pi;','out> -0.14159265358979312;','in> 32459378562983 mod 2342832;','out> 1139831;',
   'in> 7 mod 3;','out> 1;','in> -7 mod 3;','out> -1;','in> 7 mod-3;','out> 1;','in> -7 mod-3;','out> -1;','in> 2*3;','out> 6;',
   'in> 2.0*3;','out> 6.0;','in> 4+5;','out> 9;',"in> 'a'+'b';","out> 'ab';",'in> 5^7;','out> 78125;','in> -3.5^3;',
   'out> -42.875;','in> 3&4;',"out> '34';",'in> isSubsetOf([1, 2, 3],[1, 2, 3]);','out> true;','in> isSubsetOf(1,[1, 2, 3]);',
   'out> false;','in> isSubsetOf([1],[1, 2, 3]);','out> true;','in> isSubsetOf([1, 4],[1, 2, 3]);','out> false;',
   'in> x :=1/[0..3];','in> vectorIfThenElse(x.isInfinite, 0, x);','out> [0,1,0.5,0.3333333333333333];',
   'in> zip(rangeGenerator(0), primeGenerator).head(10);',
   'out> [[0,2],[1,3],[2,5],[3,7],[4,11],[5,13],[6,17],[7,19],[8,23],[9,29]];','in> kMeans([1..100].map((i)->random(3)), 3);',
   "out> ['class' => [1,2,2,0,1,2,1,1,1,2,2,1,2,2,0,2,2,2,2,0,1,2,2,0,0,2,2,0,0,1,1,1,2,1,1,0,0,1,2,1,0,0,1,1,0,2,0,0,2,0,2,1,0,2,2,2,2,0,0,0,0,2,0,2,1,1,2,1,2,1,1,2,1,1,2,1,2,2,1,1,1,0,0,1,0,2,1,0,0,0,2,1,2,0,2,0,0,0,2,1],'centers'=>[[0.6665325193635879,0.7556999787207572,0.5613454227005281],[0.2443210948840715,0.5534931165166199,0.26881193567533046],[0.4166380661866955,0.39474816192444917,0.81587936104954906]]].toMap;",
   'in> kMeans([1..100].map((i)->random(3)),[[0, 0, 1],[0, 1, 0],[1, 0, 0]]);',
   "out> ['class' => [0,0,0,0,1,1,2,1,1,0,1,2,0,1,1,2,0,1,2,0,2,0,1,2,0,1,2,2,0,0,2,0,0,1,2,1,2,0,2,0,0,0,2,0,2,0,0,0,2,2,0,0,1,1,1,1,0,0,0,0,2,2,0,0,0,2,2,2,1,2,1,0,2,1,0,2,0,2,2,0,1,0,1,1,2,0,1,2,1,1,1,1,1,1,1,0,2,0,1,0],'centers'=>[[0.39514006246463396,0.37581241712905467,0.76517500355839729],[0.30430735578580248,0.79431195316776149,0.44410747202533868],[0.74462707083800739,0.4206992971614517,0.38883330364679469]]].toMap;"
  ],
  'FOWin64'=>
  ["in> [2=>'A', 4=>'B'].toMap.map2list('-');","out> ['-','-','A','-','B'];",'in> x :=3;',"in> (x and 1)=0 ?'even' :'odd';",
   "out> 'odd';","in> false ?'o.k.' : void;",'out> void;','in> f(a, b, c)->a ? b : c;','in> :: f;','out> (a, b, c)->a ? b : c;',
   'in> begin local L:=[5..1]; while L.size<10 do L|=0; L; end;','out> [5,4,3,2,1,0,0,0,0,0];',
   'in> begin local x:=0; while(x+=pi)<10; x; end;','out> 12.566370614359172;',
   'in> begin local x:=10; repeat print(x+=1)until x>0; end;','11','out> void;',
   'in> begin local output:=[]; local x:=10; repeat output|=x; x-=1; until x<=0; output; end;','out> [10,9,8,7,6,5,4,3,2,1];',
   "in> for x in ['A'..'C'] do print(x);",'A','B','C','out> [];','in> for x in [1..4] do 0|x do x|0;',
   'out> [[0,1],[1,0],[0,2],[2,0],[0,3],[3,0],[0,4],[4,0]];',"in> for i in [1..10000] do parallel 1/i²aggregator(+);",
   'out> 1.6448340718480652;','in> cross([1..3],[1..3]).each(x,x-0.5, x+0.5);',
   'out> [[0.5,0.5],[1.5,1.5],[0.5,1.5],[1.5,2.5],[0.5,2.5],[1.5,3.5],[1.5,0.5],[2.5,1.5],[1.5,1.5],[2.5,2.5],[1.5,2.5],[2.5,3.5],[2.5,0.5],[3.5,1.5],[2.5,1.5],[3.5,2.5],[2.5,2.5],[3.5,3.5]];',
   'in> [1..10].each(v,cos(v),+);','out> -1.4174477464559059;','in> random(3).each(y,sqr(y), aggregator((x)->print(x)));',
   '0.0031703627893842068','0.23019735941063235','0.16996533208954645','out> void;',
   'in> random(100).each(t,sin(t), aggregator((x, y)->max(x, y)/y));','out> 1.2332433624605673E43;',
   'in> counter->begin local c:=0; save; c+=1; end;','in> counter();','out> 1;','in> counter();','out> 2;','in> counter();',
   'out> 3;','in> 3=3.0;','out> true;','in> Nan=Nan;','out> false;','in> {$x}=3;','out> {$x=3};','in> [1, 2, 3]=[3, 1, 3];',
   'out> [false,false,true];','in> arity({3});','out> 0;','in> arity({sin($x)/$x});','out> 1;','in> [1..2].isIntList;',
   'out> true;',"in> extractFileDirectory('folder/subFolder/file.extension');","out> 'folder/subFolder';",
   "in> runScript(['name'=>'hello.mnh','source'=>[\"main->print('Hello world');\"],'side effects'=>['alter package state','output']].toMap).filter({$message.head=='printline'}).map(:: trailing);",
   "out> ['Hello world'];",'in> arity({sin($x)/$y});','out> 2;',"in> arity({printf('%s%s', $a,...)});",'out> 1;',
   "in> toExpression('$x-$x^2+$x^3');",'out> {$x-$x^2+$x^3};',"in> toExpression('');",
   'Error @?:1,1 The parsed expression appears to be empty','in> parameterNames({3});','out> [];',
   'in> parameterNames({sin($x)/$x});',"out> ['$x'];",'in> groupToList([1, 2, 3, 4, 5, 6],[1, 2, 3, 1, 2, 3], Nan, ::*);',
   'out> [Nan,4,10,18];',"in> parameterNames({printf('%s%s', $a,...)});","out> ['$a'];",'in> ord(3);','out> 3;','in> ord(true);',
   'out> 1;','in> ord(false);','out> 0;',"in> ord('A');",'out> 65;',"in> ord('abc');",'out> -1;','in> ord(2.1);',
   'Error @?:1,1 ord can only be applied to booleans, ints and strings',"in> softCast('A');","out> 'A';",
   'in> softCast(''"B"'');',"out> 'B';",'in> softCast(3);','out> 3;',"in> softCast([1,'2','true',\"'TEXT'\",'1.5','2,6']);",
   "out> [1,2,true,'TEXT',1.5,'2,6'];","in> toString('a');","out> 'a';",'in> toString(234);',"out> '234';",
   "in> toString([1, 2.6,'a', true,{$x}]);",'out> "[1,2.6,''a'',true,{$x}]";','in> abs(-0.92);','out> 0.92;','in> abs(3);',
   'out> 3;','in> abs({1+$x});','out> {abs(1+$x)};','in> arccos(-0.92);','out> 2.7388768120091318;','in> arccos(3);','out> Nan;',
   'in> arccos({1+$x});','out> {arccos(1+$x)};','in> arcsin(-0.92);','out> -1.1680804852142352;','in> arcsin(3);','out> Nan;',
   'in> arcsin({1+$x});','out> {arcsin(1+$x)};','in> tan(-0.92);','out> -1.313263699320248;','in> tan(3);',
   'out> -0.1425465430742778;','in> tan({1+$x});','out> {tan(1+$x)};','in> tan(pi/2);','out> 1.6331778728383844E16;',
   'in> arctan(-0.92);','out> -0.7437555842988599;','in> arctan({$x});','out> {arctan($x)};','in> argMax(sin([0..10]));',
   'out> 8;','in> argMax([1, 3, 3, 0, 2]);','out> 1;','in> argMin(sin([0..10]));','out> 5;','in> argMin([1, 3, 3, 0, 2]);',
   'out> 3;','in> ceil(20/3);','out> 7;','in> ceil([0..3]/3);','out> [0,1,1,1];','in> ceil([0..3]/3, 2);',
   'out> [0,0.34,0.67,1];','in> floor(20/3);','out> 6;','in> floor([0..3]/3);','out> [0,0,0,1];','in> floor([0..3]/3, 2);',
   'out> [0,0.33,0.66,1];','in> round(20/3);','out> 7;','in> round([0.5, 1.5, 2.5, 3.5]);','out> [0,2,2,4];',
   'in> round([0..3]/3, 2);','out> [0,0.33,0.67,1];','in> isInfinite(Nan);','out> false;','in> isInfinite(+Inf);','out> true;',
   'in> isInfinite(-Inf);','out> true;','in> isInfinite([-3.4344, Nan,+Inf]);','out> [false,false,true];','in> isNan(Nan);',
   'out> true;','in> isNan(+Inf);','out> false;','in> isNan(-Inf);','out> false;','in> isNan([-3.4344, Nan,+Inf]);',
   'out> [false,true,false];','in> cos(-0.92);','out> 0.60582015664346289;','in> cos(3);','out> -0.9899924966004454;',
   'in> cos({1+$x});','out> {cos(1+$x)};','in> exp(-0.92);','out> 0.39851904108451419;','in> exp(3);','out> 20.085536923187668;',
   'in> exp({1+$x});','out> {exp(1+$x)};','in> ln(-0.92);','out> Nan;','in> ln({1+$x});','out> {ln(1+$x)};','in> sin(3);',
   'out> 0.1411200080598672;','in> sin({1+$x});','out> {sin(1+$x)};','in> sqr(-0.92);','out> 0.8464;','in> sqr(3);','out> 9;',
   'in> sqr({1+$x});','out> {sqr(1+$x)};','in> sqrt(-0.92);','out> Nan;','in> sqrt(3);','out> 1.7320508075688772;',
   'in> sqrt({1+$x});','out> {sqrt(1+$x)};','in> isqrt(121);','out> [11,true];','in> isqrt(255, 1);','out> [16,false];',
   'in> sign(-0.92);','out> -1;','in> sign(3);','out> 1;','in> sign({1+$x});','out> {sign(1+$x)};',"in> max(['a'..'z']);",
   "out> 'z';",'in> max([0..9]/2);','out> 4.5;','in> max(true, false);','out> true;',"in> min(['a'..'z']);","out> 'a';",
   'in> min([0..9]/2);','out> 0;','in> min(true, false);','out> false;',"in> copy('abcde', 1, 3);","out> 'bcd';",
   "in> copy('abcde', 2);","out> 'cde';","in> escape('a');",'out> "''a''";','in> escape(#9);',"out> '#9';",
   'in> group([1..10],[1..10] mod 3=0);','out> [false => [1,2,4,5,7,8,10],true=>[3,6,9]].toMap;','in> fail;',
   'Error(Usr) @?:1,1 Fail','in> fail("Told you this wouldn''t work!");',"Error(Usr) @?:1,1 Told you this wouldn't work!",
   'in> hash(1);','out> 1;','in> hash([1..3]);','out> 90399;',"in> hash('a');",'out> 128;',
   "in> listBuiltin.filter({$s.matches('^mnh\\.')}).sort.trailing(10);",
   "out> ['mnh.listBuiltin','mnh.listSideEffects','mnh.mnhInfo','mnh.myPath','mnh.ord','mnh.parameterNames','mnh.runScript','mnh.sandBoxExecute','mnh.sleep','mnh.sleepUntil'];",
   'in> abs(3);','out> 3;','in> abs(-3);','out> 3;','in> abs([-2..2]/2);','out> [1,0.5,0,0.5,1];',
   "in> chars('This is a test.');","out> ['T','h','i','s',' ','i','s',' ','a',' ','t','e','s','t','.'];",'in> chars.get(100);',
   "out> 'd';","in> clean('+21/232/2116-11',['0'..'9'],' ');","out> ' 21 232 2116 11';","in> join(['a','b','c']);","out> 'abc';",
   "in> join([1..5],' ');","out> '1 2 3 4 5';","in> length(\"Test öäü\");",'out> 8;',"in> byteLength(\"Test öäü\");",
   'out> 11;',"in> length(['Text','AbC']);",'out> [4,3];',"in> lower('Test');","out> 'test';","in> lower(['Text','AbC']);",
   "out> ['text','abc'];","in> upper('Test');","out> 'TEST';","in> upper(['Text','AbC']);","out> ['TEXT','ABC'];",
   'in> t :=[0..1000]*2*pi/1000;','in> plot(t, sin(t));','out> void;',"in> plot.renderToFile('plotDemo1.png', 600, 300);",
   'out> void;','in> abs({$x});','out> {abs($x)};',"in> chars('Test');","out> ['T','e','s','t'];","in> pos('o','Hello World');",
   'out> 4;',"in> pos(',',['Hello','Test','1,2,3']);",'out> [Inf,Inf,1];',"in> pos(['a','b'],'cdb');",'out> [Inf,2];',
   "in> repeatString('-', 10);","out> '----------';","in> replace('[[][]][]][][','[]','');","out> '][';",
   "in> replace('aba','b','bb');","out> 'abba';","in> replaceOne('[[][]][]][][','[]','');","out> '[[]][]][][';",
   "in> replaceOne('1:.-.; 2:.-.; 3:.-.','.',['a'..'e']);","out> '1:a-b; 2:c-d; 3:e-.';","in> split('1,2,3;4,5,6',',');",
   "out> ['1','2','3;4','5','6'];","in> split('1,2,3;4,5,6',';');","out> ['1,2,3','4,5,6'];",
   "in> split('1,2,3;4,5,6',[';',',']);","out> ['1','2','3','4','5','6'];",
   "in> tokenSplit('f(x)->x+1; //Stupid, but just an example...','mnh');",
   "out> ['f','(','x',')','->','x','+','1',';',' ','//Stupid, but just an example...'];",'in> trim(" \tA B C\t ");',
   "out> 'A B C';",'in> trimLeft(" \tA B C\t ");','out> "A B C\t ";','in> trimRight(" \tA B C\t ");','out> " \tA B C";',
   "in> unbrace('3');","out> '3';","in> unbrace('(3)');","out> '3';","in> unbrace('(3]');","out> '(3]';",'in> unbrace(''"3"'');',
   'out> ''"3"'';',"in> chars('Testtext').elementFrequency;","out> ['e' => 2,'s'=>1,'T'=>1,'t'=>3,'x'=>1].toMap;",
   "in> chars('Testtext').agg(elementFrequency);","out> ['e' => 2,'s'=>1,'T'=>1,'t'=>3,'x'=>1].toMap;",
   'in> flatten([1,[2,[3, 4],[5]], 6]);','out> [1,2,3,4,5,6];',"in> head(['A'..'Z']);","out> 'A';","in> head(['A'..'Z'], 3);",
   "out> ['A','B','C'];","in> ['A'..'Z'].toSet.head(3);","out> ['A','Q','B'];","in> tail(['A'..'Z']);",
   "out> ['B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];",
   "in> tail(['A'..'Z'], 3);",
   "out> ['D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];",
   'in> rangeGenerator(1, 10).tail(3);','out> rangeGenerator(4,10);',"in> leading(['A'..'Z']);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y'];",
   "in> leading(['A'..'Z'], 3);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W'];",
   'in> rangeGenerator(1, 10).leading(3);','out> [1,2,3,4,5,6,7];',"in> trailing(['A'..'Z']);","out> 'Z';",
   "in> trailing(['A'..'Z'], 3);","out> ['X','Y','Z'];","in> ['A'..'Z'].toSet.trailing(3);","out> ['N','O','P'];",
   'in> rangeGenerator(1, 10).trailing(3);','out> [8,9,10];',"in> minus([1..10]², 2*[0..50]);",'out> [1,9,25,49,81].toSet;',
   "in> rangeGenerator(1, 20).chunkMap(5,(x)->format('%2s', x)).toList;",
   "out> [[' 1',' 2',' 3',' 4',' 5'],[' 6',' 7',' 8',' 9','10'],['11','12','13','14','15'],['16','17','18','19','20']];",
   "in> [1,[2, 3],[4, 5, 6]].flatMap((x)->x³).toList;",'out> [1,8,27,64,125,216];','in> sort(intRandom(10, 5));',
   'out> [1,2,4,5,8];',"in> sort(['01','10','100','1','010'],(x, y)->softCast(x)<=softCast(y));",
   "out> ['01','1','10','010','100'];","in> sort(['01','10','100','1','010'], :: length);","out> ['1','01','10','100','010'];",
   'in> sortPerm(random(10));','out> [0,7,3,4,2,1,5,9,6,8];',"in> sortPerm(['a'..'c'..'a']);",'out> [0,4,1,3,2];',
   'in> intersect([0..1000]^2,[0..1000]^3);','out> [0,4096,262144,1,64,46656,1000000,729,15625,117649,531441].toSet;',
   'in> union(1/[1..5], 2/[2..6]);','out> [0.5,0.25,1,0.3333333333333333,0.6666666666666666,0.2,0.4].toSet;',
   "in> deleteFile('plotDemo1.png');",'out> true;',"in> get(['a'..'f'], 3);","out> 'd';","in> get(['a'..'f'],[3, 1, 2]);",
   "out> ['d','b','c'];",'in> get([0..4],[2..6] mod 3=0);','out> [1,4];',"in> get([['A', 1],['B', 2],['C', 0]],'B');",'out> 2;',
   'in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]], 1);','out> [2,5,8];','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[1, 0]);',
   'out> [[2,1],[5,4],[8,7]];','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[true, false, true]);','out> [[1,3],[4,6],[7,9]];',
   'in> indexOf([1..6]^2 mod 3=0);','out> [2,5];','in> reverseList([1..5]);','out> [5,4,3,2,1];','in> size([0.5, 0.1, 0.2]);',
   'out> 3;',"in> toMap([['A', 1],['B', 2],['C', 0],['B', 4]]);","out> ['A' => 1,'C'=>0,'B'=>4].toMap;",
   'in> trueCount(10<[0..10]^2<50);','out> 4;','in> unique([3, 1, 2, 1, 4, 1, 5]);','out> [1,2,3,4,5];',"in> compress('Test');",
   "out> 'Test';","in> compress('Test').decompress;","out> 'Test';",
   "in> compress('This text is long enough to give deflate a little edge. So deflate will be used.');",
   "out> '%P]'#181't'#149#221'mZ'#157't'#188'6!'#130#191#181'!'#129#176'9'#182#148#201#133'k'#174'p'#173'.'#197'q'#233'm'#180#14'm'#165'1\\w'#200'6'#134#187#4;",
   "in> compress('This text is long enough to give deflate a little edge. So deflate will be used.').decompress;",
   "out> 'This text is long enough to give deflate a little edge. So deflate will be used.';",
   "in> relativeFileName('~/folder/','~/other/example.txt');","out> '../other/example.txt';",'in> primes(20);',
   'out> [2,3,5,7,11,13,17,19];','in> subSets([1, 2, 1]);','out> [[],[2],[1],[1,2],[1,1],[1,1,2]];',
   "in> diff('encode','decode');",
   "out> ['adds' => 1,'matches'=>5,'modifies'=>0,'edit'=>[['+',-1,0],[' ',0,1],['-',1,1],[' ',2,2],[' ',3,3],[' ',4,4],[' ',5,5]],'deletes'=>1].toMap;",
   "in> diffStats('encode','decode');","out> ['adds' => 1,'matches'=>5,'modifies'=>0,'deletes'=>1].toMap;",
   "in> format('%s is a string, %3.3d is a number','X', 7);","out> 'X is a string, 007 is a number';","in> format('%6.3f', 3);",
   "out> ' 3.000';","in> format('%6.3e', 3);","out> '3.00E+000';","in> format('%6.3g', 3);","out> '     3';",
   "in> format('%6.6x', 1234);","out> '0004D2';","in> formatTime('mm.dd.yyyy', 43210);","out> '04.20.2018';",
   'in> formatTime(12424.245);',"out> '05.01.1934 05:52:48';","in> isAscii('xyz');",'out> true;',
   "in> isAscii('xyz'&chars[180]);",'out> false;',"in> isAscii(\"Läuft\");",'out> false;',"in> isUtf8('xyz');",'out> true;',
   "in> isUtf8('xyz'&chars[180]);",'out> false;',"in> isUtf8(\"Schräg\");",'out> true;',
   "in> parseTime('yyyy-mm-dd hh:nn','2000-01-01 03:43');",'out> 36526.154861111114;',"in> reverseString('Test');",
   "out> 'tseT';","in> regex.matches('This is a test','[T|t]est');",'out> true;',
   "in> regex.matchComposite('This is a test','[T|t]est');","out> [['test',11,4]];",
   "in> regex.replace('A Test is a test','[T|t]est','rose');","out> 'A rose is a rose';",
   "in> regex.split('A Test is a test','[e| ]');","out> ['A','T','st','is','a','t','st'];",'in> toBoolean(0);','out> false;',
   'in> toBoolean(1.0);','out> true;',"in> toBoolean('true');",'out> true;','in> toBoolean(3);',
   'Error @?:1,1 3 cannot be cast to boolean',"in> toInt('32');",'out> 32;','in> toInt(3.0);','out> 3;','in> toInt(3.1);',
   'Error @?:1,1 3.1 cannot be cast to int','in> toInt(false);','out> 0;',"in> toReal('3.212');",'out> 3.212;',
   'in> toReal(true);','out> 1;','in> toReal(3);','out> 3.0;','in> getOptions;',
   "out> ['fontsize' => 10.0,'autoscaleY'=>true,'y0'=>-1.0,'logscaleX'=>false,'x0'=>-1.0,'y1'=>1.0,'preserveAspect'=>true,'logscaleY'=>false,'axisStyleX'=>7,'x1'=>1.0,'autoscaleFactor'=>1.0,'axisStyleY'=>7,'autoscaleX'=>true].toMap;",
   'in> executor;','out> ''<#>\target\Win64\mnh.exe'';','in> print("1\n2.0\n03.45");','1','2.0','03.45','out> void;',
   'in> print("1\n2.0\n03,45\t");',' 1',' 2.0','03,45','out> void;','in> print("1\tone\t|\n2.0\ttwo\t|\n03.45\tthree\t|");',
   ' 1    one   |',' 2.0  two   |','03.45 three |','out> void;','in> print("1\vone\v|\n2.0\vtwo\v|\n03.45\vthree\v|");',
   ' 1   one  |',' 2.0 two  |','03.45three|','out> void;',"in> printf('%x is %d in hexadecimal form', 123, 123);",
   '7B is 123 in hexadecimal form','out> void;',"in> printf('%{$0}x is %{$0}d in hexadecimal form', 123);",
   '7B is 123 in hexadecimal form','out> void;',"in> printf('sin(%{$0}s)=%{sin($0)}4.4g', 1);",'sin(1)=0.8415','out> void;',
   'in> permutations([1, 1, 2]);','out> [[1,1,2],[1,2,1],[2,1,1]].toSet;','in> permutations([1..3]);',
   'out> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]].toSet;',"in> input :=[[1..10], random,'test', random(9)];",
   'in> serialized :=input.serialize;',"in> print(input.toString.byteLength,' > ', serialized.byteLength);",'228 > 92',
   'out> void;','in> input==serialized.deserialize;','out> true;','in> factorize(18447422338071909869);',
   'out> [2642257,2642287,2642291];','in> formatTabs("\v-2\n3\t4.3");',"out> ['  -2','3  4.3'];",'in> typeOf(3);',"out> 'Int';",
   'in> typeOf([1..5, 7.5]);',"out> 'NumericList(6)';",'in> typeOf({$x^2+$y});',"out> 'Expression(2)';",
   'in> x :=transpose([1,[1, 2, 3],[1, 2]], 0);','in> x;','out> [[1,1,1],[0,2,2],[0,3,0]];','in> x.transpose(0);',
   'out> [[1,0,0],[1,2,3],[1,2,0]];','in> resetRandom(12157);','out> void;','in> resetRandom;','out> void;','in> intRandom(7);',
   'out> 3;','in> intRandom(7, 10);','out> [3,0,4,4,4,2,0,6,5,3];','in> random;','out> 0.056305974721908569;','in> random(3);',
   'out> [0.056305974721908569,0.4797888696193695,0.41226851940155029];',"in> log('This should be logged...');",
   'log> This should be logged...;','out> void;',"in> note('Note that this is a note');",
   'Note(Usr) @?:1,1 Note that this is a note','out> void;',"in> warn('Warning: I intend to say something important here');",
   'Warning(Usr) @?:1,1 Warning: I intend to say something important here','out> void;','in> isScalar(1);','out> true;',
   'in> isBoolean(false);','out> true;','in> isBoolean(1);','out> false;','in> isInt(false);','out> false;','in> isInt(1);',
   'out> true;','in> isInt(1.0);','out> false;','in> isReal(false);','out> false;','in> isReal(1);','out> false;',
   'in> isReal(1.0);','out> true;','in> isNumeric(false);','out> false;','in> isNumeric(1);','out> true;','in> isNumeric(1.0);',
   'out> true;','in> isList([]);','out> true;','in> isList([], 0);','out> true;','in> isList([], 1);','out> false;',
   "in> isList(['x'], 1);",'out> true;',"in> isString('Test');",'out> true;','in> isString(true);','out> false;',
   'in> isExpression(:: sin);','out> true;','in> isExpression(:: sin, 1);','out> true;','in> isExpression(:: sin, 2);',
   'out> false;','in> digits(123);','out> [1,2,3];','in> digits(123, 3);','out> [1,1,1,2,0];','in> arctan2(1, 1);',
   'out> 0.78539816339744828;',"in> charSet('abcba');","out> ['a','b','c'].toSet;","in> bytes(\"ö\").ord;",'out> [195,182];',
   "in> base64encode('Test');","out> 'VGVzdA==';","in> base64decode('VGVzdA==');","out> 'Test';",
   "in> base92encode('bla bla bla ');","out> ']En_)]En_)]En_)';","in> base92decode('PgsC.?d@t^');","out> '12345';",
   'in> listSideEffects;',
   "out> ['input','output','sound','sleep','detaching','server','read package state','alter package state','read context state','alter context state','read GUI state','alter GUI state','read IDE state','alter IDE state','read file','write file','http','ipc','executing external'];",
   "in> changeFileExt('file.extension','.newExtension');","out> 'file.newExtension';",
   "in> changeFileExt('file.2.extension','.newExtension');","out> 'file.2.newExtension';",'in> httpError;',
   'out> "HTTP/1.0 404\r\n";','in> isBooleanList([true, false]);','out> true;','in> isBooleanList(true);','out> false;',
   'in> isIntList([1..3]);','out> true;','in> isIntList([1, 2.0]);','out> false;','in> isRealList([1, 2, 3]);','out> false;',
   'in> isRealList([1.0, 2.0, 3.0, Nan]);','out> true;',"in> isStringList(['a'..'z']);",'out> true;',
   'in> isNumericList([1, 2, 3]);','out> true;','in> isNumericList([1.0, 2, 3, Inf]);','out> true;','in> isVoid();','out> true;',
   'in> isVoid(void);','out> true;','in> isVoid(3);','out> false;',"in> escapePascal('Test');",'out> "''Test''";',
   "in> escapeJava('Test');",'out> ''"Test"'';',"in> extractFileNameOnly('/home/user/file.ext');","out> 'file';",
   "in> extractFileDirectory('/home/user/file.ext');","out> '/home/user';","in> extractFileName('/home/user/file.ext');",
   "out> 'file.ext';","in> extractFileExt('/home/user/file.ext');","out> '.ext';","in> extractPath('/index.html?x=0&y=3%2Ax');",
   "out> '/index.html';","in> extractParameters('/index.html?x=0&y=3%2Ax');","out> ['x' => 0,'y'=>'3*x'].toMap;",
   "in> extractRawParameters('/index.html?x=0&y=3%2Ax');","out> 'x=0&y=3%2Ax';",
   "in> encodeRequest('127.0.0.1:3126','rest',[['user','anonymous'],['request','3*&7']].toMap);",
   "out> '127.0.0.1:3126/rest?user=anonymous&request=3%2A%267';","in> cross(['1'..'3'],['A'..'C']);",
   "out> [['1','A'],['1','B'],['1','C'],['2','A'],['2','B'],['2','C'],['3','A'],['3','B'],['3','C']];",'in> [1, 2, 1].toSet;',
   'out> [2,1].toSet;','in> [1.2, 3.0].isRealCollection;','out> true;','in> [1.2, 3.0].toSet.isRealCollection;','out> true;',
   'in> [1.2, 3].isRealCollection;','out> false;','in> [1.2, 3.0].isRealCollection(2);','out> true;',
   'in> [1.2, 3.0].isRealCollection(3);','out> false;','in> [true].isBooleanCollection;','out> true;',
   'in> [true, false, true].toSet.isBooleanCollection(2);','out> true;','in> [true, false, true].toSet.isBooleanSet;',
   'out> true;','in> [1, 2, 3].isIntCollection;','out> true;','in> [].isIntCollection;','out> true;',
   'in> [1.2, 3].isNumericCollection;','out> true;',"in> ['a','b'].toSet.isStringSet;",'out> true;',
   "in> ['a','b'].isStringCollection;",'out> true;','in> [1, 2, 3].isIntSet;','out> false;','in> [1, 2, 3].toSet.isIntSet;',
   'out> true;',"in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap;",'out> true;',"in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(2);",
   'out> true;',"in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(3);",'out> false;',"in> [1,'a', false].isSet;",'out> false;',
   "in> [1,'a', false].isCollection;",'out> true;',"in> utf8ToAnsi(\"öµ\").bytes.ord;",'out> [246,181];',
   'in> chars[214].ansiToUtf8;',"out> \"Ö\";",'in> [1.2, 3.4].toSet.isRealSet;','out> true;','in> toList(3);','out> [3];',
   'in> toList([2, 3, 6].toSet);','out> [2,6,3];','in> [1.2, 3.4].toSet.isNumericSet;','out> true;',
   "in> [[1,'one'],[3,'three'],[5,'five']].toMap.getAll([1, 5, 6],['-','-','-']);","out> ['one','five','-'];",
   "in> HEX :=[0..15].map((i)->format('%x', i)=>i).toMap;",
   'in> parseHex(s:String)->HEX.getAll(s.chars.upper).composeDigits(16);',"in> parseHex('DeadBeef');",'out> 3735928559;',
   'in> [1, 3, 5].getAll([0, 2])==[1, 3, 5].get([0, 2]);','out> true;','in> [1..20].filter({$x mod 2<>0<>$x mod 3});',
   'out> [1,5,7,11,13,17,19];','in> rangeGenerator(1, 20).filter({$x mod 2<>0<>$x mod 3});',
   'out> rangeGenerator(1,20).filter({$x mod 2<>0<>$x mod 3});',"in> ['a'..'f'].pMap(:: upper);",
   "out> ['A','B','C','D','E','F'];",'in> primeGenerator.head(10);','out> [2,3,5,7,11,13,17,19,23,29];',
   'in> [-1, 1,-1, 1,-2, 2].agg(head);','out> -1;','in> [-1, 1,-1, 1,-2, 2].agg(trailing);','out> 2;',
   'in> [-1, 1,-1, 1,-2, 2].agg(toSet);','out> [-2,2,-1,1].toSet;','in> [-1, 1,-1, 1,-2, 2].agg(max);','out> 2;',
   'in> [-1, 1,-1, 1,-2, 2].agg(min);','out> -2;','in> [-1, 1,-1, 1,-2, 2].agg(&);',"out> '-11-11-22';",
   'in> [-1, 1,-1, 1,-2, 2].agg(*);','out> -4;','in> [-1, 1,-1, 1,-2, 2].agg(+);','out> 0;',
   'in> permutationIterator([3, 1, 2]).map(:: print).toList;','[1,2,3]','[1,3,2]','[2,1,3]','[2,3,1]','[3,1,2]','[3,2,1]',
   'out> [];',"in> ['a'..'f'].map(:: upper);","out> ['A','B','C','D','E','F'];",'in> rangeGenerator(1, 100).map({$x^2});',
   'out> rangeGenerator(1,100).map({$x^2});','in> zip([1..10],[10..1]*2).map((x, y)->x+y).toList;',
   'out> [21,20,19,18,17,16,15,14,13,12];',"in> mergeMaps([['A', 1],['B', 2]].toMap,[['A', 7],['C', 3]].toMap, ::+);",
   "out> ['A' => 8,'B'=>2,'C'=>3].toMap;","in> try({deserialize('x')});",'out> void;',"in> try({deserialize('x')}, :: print);",
   "[['el3_evalError','@?:24,6','Invalid literal encoding: 120'],['el3_trace','@?:24,6',\"... deserialize('x')},::print);\"]]",
   'out> void;',"in> try({deserialize('x')}, 0);",'out> 0;',"in> try({deserialize('x')},{warn($x.head.trailing)});",
   'Warning(Usr) @?:3,25 Invalid literal encoding: 120','out> void;',"in> interpret('3+4');",'out> 7;','in> shiftRight(7, 1);',
   'out> 3;','in> shiftRight(5,-2);','out> 20;','in> type FiniteRealList(L:List)->L.each(x,!x.isNan,!x.isInfinite, AND);',
   'in> x :=[1, 5, 0.4, 1/7].toFiniteRealList;','in> x;','out> [1,5,0.4,0.14285714285714285].toFiniteRealList;','in> x.typeOf;',
   "out> 'FiniteRealList';",'in> x.toBuiltin;','out> [1,5,0.4,0.14285714285714285];','in> x.toBuiltin.typeOf;',
   "out> 'NumericList(4)';","in> interpret({print('Hello world')},[]);",
   'Error @?:2,12 Cannot apply print because of side effect(s): [output]',
   'Trace @?:2,12 ... print("Hello world")},[]); //interpret with no side effects allowed','in> composeDigits([1, 0, 1], 2);',
   'out> 5;','in> composeDigits([1, 0, 2]);','out> 102;','in> composeDigits([1, 0, 2], 10, 2);','out> 1.02;',
   "in> sandBoxExecute('f(x)->3*x+1; f(f(f(1)))',['alter package state']);",
   "out> [['echo_declaration','@?:1,1','f(x)->3*x+1;'],['echo_input','@?:1,14','f(f(f(1)));'],['echo_output','@?:1,10',40],['exitCode','',0]];",
   "in> begin local x:=async({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   '1: true','start','2: end','out> void;',
   "in> begin local x:=future({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   'start','1: false','2: end','out> void;',"in> validateRegex('(3+.*');",'out> false;',"in> validateRegex('\\(3+.*');",
   'out> true;','in> [1..100].pFilter({$x mod 2=$x mod 3=$x mod 5});','out> [1,30,31,60,61,90,91];','in> pi;',
   'out> 3.141592653589793;','in> isStatefulExpression(:: sin);','out> false;','in> isStatefulExpression(future(:: sin,[3]));',
   'out> true;','in> isStatelessExpression(:: sin);','out> true;','in> isStatelessExpression(future(:: sin,[3]));','out> false;',
   'in> isIterable(future(:: sin,[3]));','out> false;','in> isIterable(primeGenerator);','out> true;','in> isIterable([1..10]);',
   'out> true;','in> isIterableExpression(primeGenerator);','out> true;','in> isIterableExpression([1..10]);','out> false;',
   "in> begin resetRandom; local gen:={begin local last:=0; save; last+=random; end}; print('gen.isIterable= ', gen.isIterable,'; ', gen.head(3)); gen:=gen.toIterableExpression; print('gen.isIterable= ', gen.isIterable,'; ', gen.head(3)); end;",
   'gen.isIterable= false; {begin local last:=0; save; last+=random; end}',
   'gen.isIterable= true; [0.69890123605728149,1.5846346616744995,2.5055105686187744]','out> void;',
   'in> toIterableExpression(:: sqr);','Error @?:4,1 Only nullary stateful expressions may be iterable.',
   'in> toIterableExpression({begin local i:=2; save; i+=i-1; end});','out> {begin local i:=2; save; i+=i-1; end};',
   'in> euklideanNorm([1, 2]);','out> 2.23606797749979;','in> assert(1=1.0);','out> void;',
   "in> assert('bla'.isInt,'Invalid integer given');",'Error(Usr) @?:6,1 Invalid integer given',
   "in> md5('Test input. Could be anything really.');",'out> 337964223705814058127798532806512273013;',
   "in> sha256('Test input. Could be anything really.');",
   'out> 60429211283715320795241587111266756812669288936868807314606704811653259384943;','in> hammingWeight(17213);','out> 8;',
   'in> gcd(1231512, 143543);','out> 23;',
   'in> powMod(2988348162058574136915891421498819466320163312926952423791023078876139, 2351399303373464486466122544523690094744975233415544072992656881240319, 10^40);',
   'out> 1527229998585248450016808958343740453059;','in> randomGenerator(123).head(10);',
   'out> [0.88808047771453857,0.033595457673072815,0.07375691086053848,0.073728755116462708,0.4090341329574585,0.7116715908050537,0.46069467067718506,0.5966716408729553,0.8116149306297302,0.498393714427948];',
   'in> intRandomGenerator(123, 5).head(10);','out> [2,0,0,1,3,4,0,0,1,2];','in> isaacRandomGenerator(123, 5).head(10);',
   'out> [3,3,1,4,4,2,2,0,4,3];','in> modularInverse(3, 32);','out> 11;','in> byteToChar(100);',"out> 'd';",
   'in> byteToChar([10, 12, 97, 45]);',"out> [#10,#12,'a','-'];","in> systemSpecificFilename('..\\test/filename.txt');",
   'out> ''..\test\filename.txt'';',"in> stringIterator(['a','b','c'], 1, 3).head(10);",
   "out> ['a','b','c','aa','ab','ac','ba','bb','bc','ca'];",'in> vanDerCorputGenerator(2).head(10);',
   'out> [0.0,0.5,0.25,0.75,0.125,0.625,0.375,0.875,0.0625,0.5625];','in> primeGenerator.head(1000).trailing(5);',
   'out> [7879,7883,7901,7907,7919];','in> rangeGenerator(0, 5).head(10);','out> [0,1,2,3,4,5];',
   'in> rangeGenerator(100,-100).head(10);','out> [100,99,98,97,96,95,94,93,92,91];','in> divMod(10, 7);','out> [1,3];',
   "in> 'abba'.hasPrefix('ab');",'out> true;','in> isPrime(47531677974672740279381824573269878221106369761817);','out> true;',
   'in> 3==3.0;','out> false;','in> [1, 2, 3]==[3, 1, 3];','out> false;','in> 3<=3.0;','out> true;','in> [1, 2, 3]<=[3, 1, 3];',
   'out> [true,false,true];','in> 3>=3.0;','out> true;','in> [1, 2, 3]>=[3, 1, 3];','out> [false,true,true];','in> 3<3.0;',
   'out> false;','in> [1, 2, 3]<[3, 1, 3];','out> [true,false,false];','in> 3>3.0;','out> false;','in> [1, 2, 3]>[3, 1, 3];',
   'out> [false,true,false];','in> 3<>3.0;','out> false;','in> [1, 2, 3]<>[3, 1, 3];','out> [true,true,false];',
   'in> true AND false;','out> false;','in> true AND 3;','out> 3;','in> false AND 3;','out> false;','in> true and false;',
   'out> false;','in> [true, false, true, false] and[true, true, false, false];','out> [true,false,false,false];',
   'in> 7 and 252;','out> 4;','in> true OR false;','out> true;','in> true OR 3;','out> true;','in> false OR 3;','out> 3;',
   'in> true or false;','out> true;','in> [true, false, true, false] or[true, true, false, false];',
   'out> [true,true,true,false];','in> 7 or 252;','out> 255;','in> true xor false;','out> true;',
   'in> [true, false, true, false] xor[true, true, false, false];','out> [false,true,true,false];','in> 7 xor 252;','out> 251;',
   "in> +'a';","out> 'a';",'in> -3;','out> -3;','in> -[1, 2.0, Inf, Nan];','out> [-1,-2.0,-Inf,Nan];','in> !true;','out> false;',
   'in> 3 in[1..5];','out> true;','in> 3.0 in[1..5];','out> false;','in> 3 not in[1..5];','out> false;','in> 3.0 not in[1..5];',
   'out> true;','in> 1|2;','out> [1,2];','in> [1]|[2];','out> [1,2];','in> [1]|2;','out> [1,2];','in> [1]|[[2]];',
   'out> [1,[2]];','in> [1]||2;','out> [1,2];','in> [1]||[2];','out> [1,[2]];','in> 10 div 3;','out> 3;','in> 10/3;',
   'out> 3.3333333333333335;','in> 10/5;','out> 2;','in> 10.0/5;','out> 2.0;','in> void orElse 42;','out> 42;',
   'in> 3 orElse fail;','out> 3;','in> 3-pi;','out> -0.14159265358979312;','in> 32459378562983 mod 2342832;','out> 1139831;',
   'in> 7 mod 3;','out> 1;','in> -7 mod 3;','out> -1;','in> 7 mod-3;','out> 1;','in> -7 mod-3;','out> -1;','in> 2*3;','out> 6;',
   'in> 2.0*3;','out> 6.0;','in> 4+5;','out> 9;',"in> 'a'+'b';","out> 'ab';",'in> 5^7;','out> 78125;','in> -3.5^3;',
   'out> -42.875;','in> 3&4;',"out> '34';",'in> isSubsetOf([1, 2, 3],[1, 2, 3]);','out> true;','in> isSubsetOf(1,[1, 2, 3]);',
   'out> false;','in> isSubsetOf([1],[1, 2, 3]);','out> true;','in> isSubsetOf([1, 4],[1, 2, 3]);','out> false;',
   'in> x :=1/[0..3];','in> vectorIfThenElse(x.isInfinite, 0, x);','out> [0,1,0.5,0.3333333333333333];',
   'in> zip(rangeGenerator(0), primeGenerator).head(10);',
   'out> [[0,2],[1,3],[2,5],[3,7],[4,11],[5,13],[6,17],[7,19],[8,23],[9,29]];','in> kMeans([1..100].map((i)->random(3)), 3);',
   "out> ['class' => [1,2,2,0,1,2,1,1,1,2,2,1,2,2,0,2,2,2,2,0,1,2,2,0,0,2,2,0,0,1,1,1,2,1,1,0,0,1,2,1,0,0,1,1,0,2,0,0,2,0,2,1,0,2,2,2,2,0,0,0,0,2,0,2,1,1,2,1,2,1,1,2,1,1,2,1,2,2,1,1,1,0,0,1,0,2,1,0,0,0,2,1,2,0,2,0,0,0,2,1],'centers'=>[[0.6665325193635879,0.7556999787207572,0.5613454227005281],[0.2443210948840715,0.5534931165166199,0.26881193567533046],[0.4166380661866955,0.39474816192444917,0.81587936104954906]]].toMap;",
   'in> kMeans([1..100].map((i)->random(3)),[[0, 0, 1],[0, 1, 0],[1, 0, 0]]);',
   "out> ['class' => [0,0,0,0,1,1,2,1,1,0,1,2,0,1,1,2,0,1,2,0,2,0,1,2,0,1,2,2,0,0,2,0,0,1,2,1,2,0,2,0,0,0,2,0,2,0,0,0,2,2,0,0,1,1,1,1,0,0,0,0,2,2,0,0,0,2,2,2,1,2,1,0,2,1,0,2,0,2,2,0,1,0,1,1,2,0,1,2,1,1,1,1,1,1,1,0,2,0,1,0],'centers'=>[[0.39514006246463396,0.37581241712905467,0.76517500355839729],[0.30430735578580248,0.79431195316776149,0.44410747202533868],[0.74462707083800739,0.4206992971614517,0.38883330364679469]]].toMap;"
  ],
  'LDWin64'=>
  ["in> [2=>'A', 4=>'B'].toMap.map2list('-');","out> ['-','-','A','-','B'];",'in> x :=3;',"in> (x and 1)=0 ?'even' :'odd';",
   "out> 'odd';","in> false ?'o.k.' : void;",'out> void;','in> f(a, b, c)->a ? b : c;','in> :: f;','out> (a, b, c)->a ? b : c;',
   'in> begin local L:=[5..1]; while L.size<10 do L|=0; L; end;','out> [5,4,3,2,1,0,0,0,0,0];',
   'in> begin local x:=0; while(x+=pi)<10; x; end;','out> 12.566370614359172;',
   'in> begin local x:=10; repeat print(x+=1)until x>0; end;','11','out> void;',
   'in> begin local output:=[]; local x:=10; repeat output|=x; x-=1; until x<=0; output; end;','out> [10,9,8,7,6,5,4,3,2,1];',
   "in> for x in ['A'..'C'] do print(x);",'A','B','C','out> [];','in> for x in [1..4] do 0|x do x|0;',
   'out> [[0,1],[1,0],[0,2],[2,0],[0,3],[3,0],[0,4],[4,0]];',"in> for i in [1..10000] do parallel 1/i²aggregator(+);",
   'out> 1.6448340718480652;','in> cross([1..3],[1..3]).each(x,x-0.5, x+0.5);',
   'out> [[0.5,0.5],[1.5,1.5],[0.5,1.5],[1.5,2.5],[0.5,2.5],[1.5,3.5],[1.5,0.5],[2.5,1.5],[1.5,1.5],[2.5,2.5],[1.5,2.5],[2.5,3.5],[2.5,0.5],[3.5,1.5],[2.5,1.5],[3.5,2.5],[2.5,2.5],[3.5,3.5]];',
   'in> [1..10].each(v,cos(v),+);','out> -1.4174477464559059;','in> random(3).each(y,sqr(y), aggregator((x)->print(x)));',
   '0.0031703627893842068','0.23019735941063235','0.16996533208954645','out> void;',
   'in> random(100).each(t,sin(t), aggregator((x, y)->max(x, y)/y));','out> 1.2332433624605673E43;',
   'in> counter->begin local c:=0; save; c+=1; end;','in> counter();','out> 1;','in> counter();','out> 2;','in> counter();',
   'out> 3;','in> 3=3.0;','out> true;','in> Nan=Nan;','out> false;','in> {$x}=3;','out> {$x=3};','in> [1, 2, 3]=[3, 1, 3];',
   'out> [false,false,true];','in> arity({3});','out> 0;','in> arity({sin($x)/$x});','out> 1;','in> [1..2].isIntList;',
   'out> true;',"in> extractFileDirectory('folder/subFolder/file.extension');","out> 'folder/subFolder';",
   "in> runScript(['name'=>'hello.mnh','source'=>[\"main->print('Hello world');\"],'side effects'=>['alter package state','output']].toMap).filter({$message.head=='printline'}).map(:: trailing);",
   "out> ['Hello world'];",'in> arity({sin($x)/$y});','out> 2;',"in> arity({printf('%s%s', $a,...)});",'out> 1;',
   "in> toExpression('$x-$x^2+$x^3');",'out> {$x-$x^2+$x^3};',"in> toExpression('');",
   'Error @?:1,1 The parsed expression appears to be empty','in> parameterNames({3});','out> [];',
   'in> parameterNames({sin($x)/$x});',"out> ['$x'];",'in> groupToList([1, 2, 3, 4, 5, 6],[1, 2, 3, 1, 2, 3], Nan, ::*);',
   'out> [Nan,4,10,18];',"in> parameterNames({printf('%s%s', $a,...)});","out> ['$a'];",'in> ord(3);','out> 3;','in> ord(true);',
   'out> 1;','in> ord(false);','out> 0;',"in> ord('A');",'out> 65;',"in> ord('abc');",'out> -1;','in> ord(2.1);',
   'Error @?:1,1 ord can only be applied to booleans, ints and strings',"in> softCast('A');","out> 'A';",
   'in> softCast(''"B"'');',"out> 'B';",'in> softCast(3);','out> 3;',"in> softCast([1,'2','true',\"'TEXT'\",'1.5','2,6']);",
   "out> [1,2,true,'TEXT',1.5,'2,6'];","in> toString('a');","out> 'a';",'in> toString(234);',"out> '234';",
   "in> toString([1, 2.6,'a', true,{$x}]);",'out> "[1,2.6,''a'',true,{$x}]";','in> abs(-0.92);','out> 0.92;','in> abs(3);',
   'out> 3;','in> abs({1+$x});','out> {abs(1+$x)};','in> arccos(-0.92);','out> 2.7388768120091318;','in> arccos(3);','out> Nan;',
   'in> arccos({1+$x});','out> {arccos(1+$x)};','in> arcsin(-0.92);','out> -1.1680804852142352;','in> arcsin(3);','out> Nan;',
   'in> arcsin({1+$x});','out> {arcsin(1+$x)};','in> tan(-0.92);','out> -1.313263699320248;','in> tan(3);',
   'out> -0.1425465430742778;','in> tan({1+$x});','out> {tan(1+$x)};','in> tan(pi/2);','out> 1.6331778728383844E16;',
   'in> arctan(-0.92);','out> -0.7437555842988599;','in> arctan({$x});','out> {arctan($x)};','in> argMax(sin([0..10]));',
   'out> 8;','in> argMax([1, 3, 3, 0, 2]);','out> 1;','in> argMin(sin([0..10]));','out> 5;','in> argMin([1, 3, 3, 0, 2]);',
   'out> 3;','in> ceil(20/3);','out> 7;','in> ceil([0..3]/3);','out> [0,1,1,1];','in> ceil([0..3]/3, 2);',
   'out> [0,0.34,0.67,1];','in> floor(20/3);','out> 6;','in> floor([0..3]/3);','out> [0,0,0,1];','in> floor([0..3]/3, 2);',
   'out> [0,0.33,0.66,1];','in> round(20/3);','out> 7;','in> round([0.5, 1.5, 2.5, 3.5]);','out> [0,2,2,4];',
   'in> round([0..3]/3, 2);','out> [0,0.33,0.67,1];','in> isInfinite(Nan);','out> false;','in> isInfinite(+Inf);','out> true;',
   'in> isInfinite(-Inf);','out> true;','in> isInfinite([-3.4344, Nan,+Inf]);','out> [false,false,true];','in> isNan(Nan);',
   'out> true;','in> isNan(+Inf);','out> false;','in> isNan(-Inf);','out> false;','in> isNan([-3.4344, Nan,+Inf]);',
   'out> [false,true,false];','in> cos(-0.92);','out> 0.60582015664346289;','in> cos(3);','out> -0.9899924966004454;',
   'in> cos({1+$x});','out> {cos(1+$x)};','in> exp(-0.92);','out> 0.39851904108451419;','in> exp(3);','out> 20.085536923187668;',
   'in> exp({1+$x});','out> {exp(1+$x)};','in> ln(-0.92);','out> Nan;','in> ln({1+$x});','out> {ln(1+$x)};','in> sin(3);',
   'out> 0.1411200080598672;','in> sin({1+$x});','out> {sin(1+$x)};','in> sqr(-0.92);','out> 0.8464;','in> sqr(3);','out> 9;',
   'in> sqr({1+$x});','out> {sqr(1+$x)};','in> sqrt(-0.92);','out> Nan;','in> sqrt(3);','out> 1.7320508075688772;',
   'in> sqrt({1+$x});','out> {sqrt(1+$x)};','in> isqrt(121);','out> [11,true];','in> isqrt(255, 1);','out> [16,false];',
   'in> sign(-0.92);','out> -1;','in> sign(3);','out> 1;','in> sign({1+$x});','out> {sign(1+$x)};',"in> max(['a'..'z']);",
   "out> 'z';",'in> max([0..9]/2);','out> 4.5;','in> max(true, false);','out> true;',"in> min(['a'..'z']);","out> 'a';",
   'in> min([0..9]/2);','out> 0;','in> min(true, false);','out> false;',"in> copy('abcde', 1, 3);","out> 'bcd';",
   "in> copy('abcde', 2);","out> 'cde';","in> escape('a');",'out> "''a''";','in> escape(#9);',"out> '#9';",
   'in> group([1..10],[1..10] mod 3=0);','out> [false => [1,2,4,5,7,8,10],true=>[3,6,9]].toMap;','in> fail;',
   'Error(Usr) @?:1,1 Fail','in> fail("Told you this wouldn''t work!");',"Error(Usr) @?:1,1 Told you this wouldn't work!",
   'in> hash(1);','out> 1;','in> hash([1..3]);','out> 90399;',"in> hash('a');",'out> 128;',
   "in> listBuiltin.filter({$s.matches('^mnh\\.')}).sort.trailing(10);",
   "out> ['mnh.listBuiltin','mnh.listSideEffects','mnh.mnhInfo','mnh.myPath','mnh.ord','mnh.parameterNames','mnh.runScript','mnh.sandBoxExecute','mnh.sleep','mnh.sleepUntil'];",
   'in> abs(3);','out> 3;','in> abs(-3);','out> 3;','in> abs([-2..2]/2);','out> [1,0.5,0,0.5,1];',
   "in> chars('This is a test.');","out> ['T','h','i','s',' ','i','s',' ','a',' ','t','e','s','t','.'];",'in> chars.get(100);',
   "out> 'd';","in> clean('+21/232/2116-11',['0'..'9'],' ');","out> ' 21 232 2116 11';","in> join(['a','b','c']);","out> 'abc';",
   "in> join([1..5],' ');","out> '1 2 3 4 5';","in> length(\"Test öäü\");",'out> 8;',"in> byteLength(\"Test öäü\");",
   'out> 11;',"in> length(['Text','AbC']);",'out> [4,3];',"in> lower('Test');","out> 'test';","in> lower(['Text','AbC']);",
   "out> ['text','abc'];","in> upper('Test');","out> 'TEST';","in> upper(['Text','AbC']);","out> ['TEXT','ABC'];",
   'in> t :=[0..1000]*2*pi/1000;','in> plot(t, sin(t));',"in> chars('Test');","out> ['T','e','s','t'];",
   "in> pos('o','Hello World');",'out> 4;',"in> pos(',',['Hello','Test','1,2,3']);",'out> [Inf,Inf,1];',
   "in> pos(['a','b'],'cdb');",'out> [Inf,2];',"in> repeatString('-', 10);","out> '----------';",
   "in> replace('[[][]][]][][','[]','');","out> '][';","in> replace('aba','b','bb');","out> 'abba';",
   "in> replaceOne('[[][]][]][][','[]','');","out> '[[]][]][][';","in> replaceOne('1:.-.; 2:.-.; 3:.-.','.',['a'..'e']);",
   "out> '1:a-b; 2:c-d; 3:e-.';","in> split('1,2,3;4,5,6',',');","out> ['1','2','3;4','5','6'];","in> split('1,2,3;4,5,6',';');",
   "out> ['1,2,3','4,5,6'];","in> split('1,2,3;4,5,6',[';',',']);","out> ['1','2','3','4','5','6'];",
   "in> tokenSplit('f(x)->x+1; //Stupid, but just an example...','mnh');",
   "out> ['f','(','x',')','->','x','+','1',';',' ','//Stupid, but just an example...'];",'in> trim(" \tA B C\t ");',
   "out> 'A B C';",'in> trimLeft(" \tA B C\t ");','out> "A B C\t ";','in> trimRight(" \tA B C\t ");','out> " \tA B C";',
   "in> unbrace('3');","out> '3';","in> unbrace('(3)');","out> '3';","in> unbrace('(3]');","out> '(3]';",'in> unbrace(''"3"'');',
   'out> ''"3"'';',"in> chars('Testtext').elementFrequency;","out> ['e' => 2,'s'=>1,'T'=>1,'t'=>3,'x'=>1].toMap;",
   "in> chars('Testtext').agg(elementFrequency);","out> ['e' => 2,'s'=>1,'T'=>1,'t'=>3,'x'=>1].toMap;",
   'in> flatten([1,[2,[3, 4],[5]], 6]);','out> [1,2,3,4,5,6];',"in> head(['A'..'Z']);","out> 'A';","in> head(['A'..'Z'], 3);",
   "out> ['A','B','C'];","in> ['A'..'Z'].toSet.head(3);","out> ['A','Q','B'];","in> tail(['A'..'Z']);",
   "out> ['B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];",
   "in> tail(['A'..'Z'], 3);",
   "out> ['D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];",
   'in> rangeGenerator(1, 10).tail(3);','out> rangeGenerator(4,10);',"in> leading(['A'..'Z']);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y'];",
   "in> leading(['A'..'Z'], 3);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W'];",
   'in> rangeGenerator(1, 10).leading(3);','out> [1,2,3,4,5,6,7];',"in> trailing(['A'..'Z']);","out> 'Z';",
   "in> trailing(['A'..'Z'], 3);","out> ['X','Y','Z'];","in> ['A'..'Z'].toSet.trailing(3);","out> ['N','O','P'];",
   'in> rangeGenerator(1, 10).trailing(3);','out> [8,9,10];',"in> minus([1..10]², 2*[0..50]);",'out> [1,9,25,49,81].toSet;',
   "in> rangeGenerator(1, 20).chunkMap(5,(x)->format('%2s', x)).toList;",
   "out> [[' 1',' 2',' 3',' 4',' 5'],[' 6',' 7',' 8',' 9','10'],['11','12','13','14','15'],['16','17','18','19','20']];",
   "in> [1,[2, 3],[4, 5, 6]].flatMap((x)->x³).toList;",'out> [1,8,27,64,125,216];','in> sort(intRandom(10, 5));',
   'out> [1,2,4,5,8];',"in> sort(['01','10','100','1','010'],(x, y)->softCast(x)<=softCast(y));",
   "out> ['01','1','10','010','100'];","in> sort(['01','10','100','1','010'], :: length);","out> ['1','01','10','100','010'];",
   'in> sortPerm(random(10));','out> [0,7,3,4,2,1,5,9,6,8];',"in> sortPerm(['a'..'c'..'a']);",'out> [0,4,1,3,2];',
   'in> intersect([0..1000]^2,[0..1000]^3);','out> [0,4096,262144,1,64,46656,1000000,729,15625,117649,531441].toSet;',
   'in> union(1/[1..5], 2/[2..6]);','out> [0.5,0.25,1,0.3333333333333333,0.6666666666666666,0.2,0.4].toSet;',
   "in> deleteFile('plotDemo1.png');",'out> false;',"in> get(['a'..'f'], 3);","out> 'd';","in> get(['a'..'f'],[3, 1, 2]);",
   "out> ['d','b','c'];",'in> get([0..4],[2..6] mod 3=0);','out> [1,4];',"in> get([['A', 1],['B', 2],['C', 0]],'B');",'out> 2;',
   'in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]], 1);','out> [2,5,8];','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[1, 0]);',
   'out> [[2,1],[5,4],[8,7]];','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[true, false, true]);','out> [[1,3],[4,6],[7,9]];',
   'in> indexOf([1..6]^2 mod 3=0);','out> [2,5];','in> reverseList([1..5]);','out> [5,4,3,2,1];','in> size([0.5, 0.1, 0.2]);',
   'out> 3;',"in> toMap([['A', 1],['B', 2],['C', 0],['B', 4]]);","out> ['A' => 1,'C'=>0,'B'=>4].toMap;",
   'in> trueCount(10<[0..10]^2<50);','out> 4;','in> unique([3, 1, 2, 1, 4, 1, 5]);','out> [1,2,3,4,5];',"in> compress('Test');",
   "out> 'Test';","in> compress('Test').decompress;","out> 'Test';",
   "in> compress('This text is long enough to give deflate a little edge. So deflate will be used.');",
   "out> '%P]'#181't'#149#221'mZ'#157't'#188'6!'#130#191#181'!'#129#176'9'#182#148#201#133'k'#174'p'#173'.'#197'q'#233'm'#180#14'm'#165'1\\w'#200'6'#134#187#4;",
   "in> compress('This text is long enough to give deflate a little edge. So deflate will be used.').decompress;",
   "out> 'This text is long enough to give deflate a little edge. So deflate will be used.';",
   "in> relativeFileName('~/folder/','~/other/example.txt');","out> '../other/example.txt';",'in> primes(20);',
   'out> [2,3,5,7,11,13,17,19];','in> subSets([1, 2, 1]);','out> [[],[2],[1],[1,2],[1,1],[1,1,2]];',
   "in> diff('encode','decode');",
   "out> ['adds' => 1,'matches'=>5,'modifies'=>0,'edit'=>[['+',-1,0],[' ',0,1],['-',1,1],[' ',2,2],[' ',3,3],[' ',4,4],[' ',5,5]],'deletes'=>1].toMap;",
   "in> diffStats('encode','decode');","out> ['adds' => 1,'matches'=>5,'modifies'=>0,'deletes'=>1].toMap;",
   "in> format('%s is a string, %3.3d is a number','X', 7);","out> 'X is a string, 007 is a number';","in> format('%6.3f', 3);",
   "out> ' 3.000';","in> format('%6.3e', 3);","out> '3.00E+000';","in> format('%6.3g', 3);","out> '     3';",
   "in> format('%6.6x', 1234);","out> '0004D2';","in> formatTime('mm.dd.yyyy', 43210);","out> '04.20.2018';",
   'in> formatTime(12424.245);',"out> '05.01.1934 05:52:48';","in> isAscii('xyz');",'out> true;',
   "in> isAscii('xyz'&chars[180]);",'out> false;',"in> isAscii(\"Läuft\");",'out> false;',"in> isUtf8('xyz');",'out> true;',
   "in> isUtf8('xyz'&chars[180]);",'out> false;',"in> isUtf8(\"Schräg\");",'out> true;',
   "in> parseTime('yyyy-mm-dd hh:nn','2000-01-01 03:43');",'out> 36526.154861111114;',"in> reverseString('Test');",
   "out> 'tseT';","in> regex.matches('This is a test','[T|t]est');",'out> true;',
   "in> regex.matchComposite('This is a test','[T|t]est');","out> [['test',11,4]];",
   "in> regex.replace('A Test is a test','[T|t]est','rose');","out> 'A rose is a rose';",
   "in> regex.split('A Test is a test','[e| ]');","out> ['A','T','st','is','a','t','st'];",'in> toBoolean(0);','out> false;',
   'in> toBoolean(1.0);','out> true;',"in> toBoolean('true');",'out> true;','in> toBoolean(3);',
   'Error @?:1,1 3 cannot be cast to boolean',"in> toInt('32');",'out> 32;','in> toInt(3.0);','out> 3;','in> toInt(3.1);',
   'Error @?:1,1 3.1 cannot be cast to int','in> toInt(false);','out> 0;',"in> toReal('3.212');",'out> 3.212;',
   'in> toReal(true);','out> 1;','in> toReal(3);','out> 3.0;','in> getOptions;','in> executor;',
   'out> ''<#>\target\Win64\mnh_light_debug.exe'';','in> print("1\n2.0\n03.45");','1','2.0','03.45','out> void;',
   'in> print("1\n2.0\n03,45\t");',' 1',' 2.0','03,45','out> void;','in> print("1\tone\t|\n2.0\ttwo\t|\n03.45\tthree\t|");',
   ' 1    one   |',' 2.0  two   |','03.45 three |','out> void;','in> print("1\vone\v|\n2.0\vtwo\v|\n03.45\vthree\v|");',
   ' 1   one  |',' 2.0 two  |','03.45three|','out> void;',"in> printf('%x is %d in hexadecimal form', 123, 123);",
   '7B is 123 in hexadecimal form','out> void;',"in> printf('%{$0}x is %{$0}d in hexadecimal form', 123);",
   '7B is 123 in hexadecimal form','out> void;',"in> printf('sin(%{$0}s)=%{sin($0)}4.4g', 1);",'sin(1)=0.8415','out> void;',
   'in> permutations([1, 1, 2]);','out> [[1,1,2],[1,2,1],[2,1,1]].toSet;','in> permutations([1..3]);',
   'out> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]].toSet;',"in> input :=[[1..10], random,'test', random(9)];",
   'in> serialized :=input.serialize;',"in> print(input.toString.byteLength,' > ', serialized.byteLength);",'228 > 92',
   'out> void;','in> input==serialized.deserialize;','out> true;','in> factorize(18447422338071909869);',
   'out> [2642257,2642287,2642291];','in> formatTabs("\v-2\n3\t4.3");',"out> ['  -2','3  4.3'];",'in> typeOf(3);',"out> 'Int';",
   'in> typeOf([1..5, 7.5]);',"out> 'NumericList(6)';",'in> typeOf({$x^2+$y});',"out> 'Expression(2)';",
   'in> x :=transpose([1,[1, 2, 3],[1, 2]], 0);','in> x;','out> [[1,1,1],[0,2,2],[0,3,0]];','in> x.transpose(0);',
   'out> [[1,0,0],[1,2,3],[1,2,0]];','in> resetRandom(12157);','out> void;','in> resetRandom;','out> void;','in> intRandom(7);',
   'out> 3;','in> intRandom(7, 10);','out> [3,0,4,4,4,2,0,6,5,3];','in> random;','out> 0.056305974721908569;','in> random(3);',
   'out> [0.056305974721908569,0.4797888696193695,0.41226851940155029];',"in> log('This should be logged...');",
   'log> This should be logged...;','out> void;',"in> note('Note that this is a note');",
   'Note(Usr) @?:1,1 Note that this is a note','out> void;',"in> warn('Warning: I intend to say something important here');",
   'Warning(Usr) @?:1,1 Warning: I intend to say something important here','out> void;','in> isScalar(1);','out> true;',
   'in> isBoolean(false);','out> true;','in> isBoolean(1);','out> false;','in> isInt(false);','out> false;','in> isInt(1);',
   'out> true;','in> isInt(1.0);','out> false;','in> isReal(false);','out> false;','in> isReal(1);','out> false;',
   'in> isReal(1.0);','out> true;','in> isNumeric(false);','out> false;','in> isNumeric(1);','out> true;','in> isNumeric(1.0);',
   'out> true;','in> isList([]);','out> true;','in> isList([], 0);','out> true;','in> isList([], 1);','out> false;',
   "in> isList(['x'], 1);",'out> true;',"in> isString('Test');",'out> true;','in> isString(true);','out> false;',
   'in> isExpression(:: sin);','out> true;','in> isExpression(:: sin, 1);','out> true;','in> isExpression(:: sin, 2);',
   'out> false;','in> digits(123);','out> [1,2,3];','in> digits(123, 3);','out> [1,1,1,2,0];','in> arctan2(1, 1);',
   'out> 0.78539816339744828;',"in> charSet('abcba');","out> ['a','b','c'].toSet;","in> bytes(\"ö\").ord;",'out> [195,182];',
   "in> base64encode('Test');","out> 'VGVzdA==';","in> base64decode('VGVzdA==');","out> 'Test';",
   "in> base92encode('bla bla bla ');","out> ']En_)]En_)]En_)';","in> base92decode('PgsC.?d@t^');","out> '12345';",
   'in> listSideEffects;',
   "out> ['input','output','sound','sleep','detaching','server','read package state','alter package state','read context state','alter context state','read GUI state','alter GUI state','read IDE state','alter IDE state','read file','write file','http','ipc','executing external'];",
   "in> changeFileExt('file.extension','.newExtension');","out> 'file.newExtension';",
   "in> changeFileExt('file.2.extension','.newExtension');","out> 'file.2.newExtension';",'in> httpError;',
   'out> "HTTP/1.0 404\r\n";','in> isBooleanList([true, false]);','out> true;','in> isBooleanList(true);','out> false;',
   'in> isIntList([1..3]);','out> true;','in> isIntList([1, 2.0]);','out> false;','in> isRealList([1, 2, 3]);','out> false;',
   'in> isRealList([1.0, 2.0, 3.0, Nan]);','out> true;',"in> isStringList(['a'..'z']);",'out> true;',
   'in> isNumericList([1, 2, 3]);','out> true;','in> isNumericList([1.0, 2, 3, Inf]);','out> true;','in> isVoid();','out> true;',
   'in> isVoid(void);','out> true;','in> isVoid(3);','out> false;',"in> escapePascal('Test');",'out> "''Test''";',
   "in> escapeJava('Test');",'out> ''"Test"'';',"in> extractFileNameOnly('/home/user/file.ext');","out> 'file';",
   "in> extractFileDirectory('/home/user/file.ext');","out> '/home/user';","in> extractFileName('/home/user/file.ext');",
   "out> 'file.ext';","in> extractFileExt('/home/user/file.ext');","out> '.ext';","in> extractPath('/index.html?x=0&y=3%2Ax');",
   "out> '/index.html';","in> extractParameters('/index.html?x=0&y=3%2Ax');","out> ['x' => 0,'y'=>'3*x'].toMap;",
   "in> extractRawParameters('/index.html?x=0&y=3%2Ax');","out> 'x=0&y=3%2Ax';",
   "in> encodeRequest('127.0.0.1:3126','rest',[['user','anonymous'],['request','3*&7']].toMap);",
   "out> '127.0.0.1:3126/rest?user=anonymous&request=3%2A%267';","in> cross(['1'..'3'],['A'..'C']);",
   "out> [['1','A'],['1','B'],['1','C'],['2','A'],['2','B'],['2','C'],['3','A'],['3','B'],['3','C']];",'in> [1, 2, 1].toSet;',
   'out> [2,1].toSet;','in> [1.2, 3.0].isRealCollection;','out> true;','in> [1.2, 3.0].toSet.isRealCollection;','out> true;',
   'in> [1.2, 3].isRealCollection;','out> false;','in> [1.2, 3.0].isRealCollection(2);','out> true;',
   'in> [1.2, 3.0].isRealCollection(3);','out> false;','in> [true].isBooleanCollection;','out> true;',
   'in> [true, false, true].toSet.isBooleanCollection(2);','out> true;','in> [true, false, true].toSet.isBooleanSet;',
   'out> true;','in> [1, 2, 3].isIntCollection;','out> true;','in> [].isIntCollection;','out> true;',
   'in> [1.2, 3].isNumericCollection;','out> true;',"in> ['a','b'].toSet.isStringSet;",'out> true;',
   "in> ['a','b'].isStringCollection;",'out> true;','in> [1, 2, 3].isIntSet;','out> false;','in> [1, 2, 3].toSet.isIntSet;',
   'out> true;',"in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap;",'out> true;',"in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(2);",
   'out> true;',"in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(3);",'out> false;',"in> [1,'a', false].isSet;",'out> false;',
   "in> [1,'a', false].isCollection;",'out> true;',"in> utf8ToAnsi(\"öµ\").bytes.ord;",'out> [246,181];',
   'in> chars[214].ansiToUtf8;',"out> \"Ö\";",'in> [1.2, 3.4].toSet.isRealSet;','out> true;','in> toList(3);','out> [3];',
   'in> toList([2, 3, 6].toSet);','out> [2,6,3];','in> [1.2, 3.4].toSet.isNumericSet;','out> true;',
   "in> [[1,'one'],[3,'three'],[5,'five']].toMap.getAll([1, 5, 6],['-','-','-']);","out> ['one','five','-'];",
   "in> HEX :=[0..15].map((i)->format('%x', i)=>i).toMap;",
   'in> parseHex(s:String)->HEX.getAll(s.chars.upper).composeDigits(16);',"in> parseHex('DeadBeef');",'out> 3735928559;',
   'in> [1, 3, 5].getAll([0, 2])==[1, 3, 5].get([0, 2]);','out> true;','in> [1..20].filter({$x mod 2<>0<>$x mod 3});',
   'out> [1,5,7,11,13,17,19];','in> rangeGenerator(1, 20).filter({$x mod 2<>0<>$x mod 3});',
   'out> rangeGenerator(1,20).filter({$x mod 2<>0<>$x mod 3});',"in> ['a'..'f'].pMap(:: upper);",
   "out> ['A','B','C','D','E','F'];",'in> primeGenerator.head(10);','out> [2,3,5,7,11,13,17,19,23,29];',
   'in> [-1, 1,-1, 1,-2, 2].agg(head);','out> -1;','in> [-1, 1,-1, 1,-2, 2].agg(trailing);','out> 2;',
   'in> [-1, 1,-1, 1,-2, 2].agg(toSet);','out> [-2,2,-1,1].toSet;','in> [-1, 1,-1, 1,-2, 2].agg(max);','out> 2;',
   'in> [-1, 1,-1, 1,-2, 2].agg(min);','out> -2;','in> [-1, 1,-1, 1,-2, 2].agg(&);',"out> '-11-11-22';",
   'in> [-1, 1,-1, 1,-2, 2].agg(*);','out> -4;','in> [-1, 1,-1, 1,-2, 2].agg(+);','out> 0;',
   'in> permutationIterator([3, 1, 2]).map(:: print).toList;','[1,2,3]','[1,3,2]','[2,1,3]','[2,3,1]','[3,1,2]','[3,2,1]',
   'out> [];',"in> ['a'..'f'].map(:: upper);","out> ['A','B','C','D','E','F'];",'in> rangeGenerator(1, 100).map({$x^2});',
   'out> rangeGenerator(1,100).map({$x^2});','in> zip([1..10],[10..1]*2).map((x, y)->x+y).toList;',
   'out> [21,20,19,18,17,16,15,14,13,12];',"in> mergeMaps([['A', 1],['B', 2]].toMap,[['A', 7],['C', 3]].toMap, ::+);",
   "out> ['A' => 8,'B'=>2,'C'=>3].toMap;","in> try({deserialize('x')});",'out> void;',"in> try({deserialize('x')}, :: print);",
   "[['el3_evalError','@?:24,6','Invalid literal encoding: 120'],['el3_trace','@?:24,6',\"... deserialize('x')},::print);\"]]",
   'out> void;',"in> try({deserialize('x')}, 0);",'out> 0;',"in> try({deserialize('x')},{warn($x.head.trailing)});",
   'Warning(Usr) @?:3,25 Invalid literal encoding: 120','out> void;',"in> interpret('3+4');",'out> 7;','in> shiftRight(7, 1);',
   'out> 3;','in> shiftRight(5,-2);','out> 20;','in> type FiniteRealList(L:List)->L.each(x,!x.isNan,!x.isInfinite, AND);',
   'in> x :=[1, 5, 0.4, 1/7].toFiniteRealList;','in> x;','out> [1,5,0.4,0.14285714285714285].toFiniteRealList;','in> x.typeOf;',
   "out> 'FiniteRealList';",'in> x.toBuiltin;','out> [1,5,0.4,0.14285714285714285];','in> x.toBuiltin.typeOf;',
   "out> 'NumericList(4)';","in> interpret({print('Hello world')},[]);",
   'Error @?:2,12 Cannot apply print because of side effect(s): [output]',
   'Trace @?:2,12 ... print("Hello world")},[]); //interpret with no side effects allowed','in> composeDigits([1, 0, 1], 2);',
   'out> 5;','in> composeDigits([1, 0, 2]);','out> 102;','in> composeDigits([1, 0, 2], 10, 2);','out> 1.02;',
   "in> sandBoxExecute('f(x)->3*x+1; f(f(f(1)))',['alter package state']);",
   "out> [['echo_declaration','@?:1,1','f(x)->3*x+1;'],['echo_input','@?:1,14','f(f(f(1)));'],['echo_output','@?:1,10',40],['exitCode','',0]];",
   "in> begin local x:=async({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   '1: true','start','2: end','out> void;',
   "in> begin local x:=future({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   'start','1: false','2: end','out> void;',"in> validateRegex('(3+.*');",'out> false;',"in> validateRegex('\\(3+.*');",
   'out> true;','in> [1..100].pFilter({$x mod 2=$x mod 3=$x mod 5});','out> [1,30,31,60,61,90,91];','in> pi;',
   'out> 3.141592653589793;','in> isStatefulExpression(:: sin);','out> false;','in> isStatefulExpression(future(:: sin,[3]));',
   'out> true;','in> isStatelessExpression(:: sin);','out> true;','in> isStatelessExpression(future(:: sin,[3]));','out> false;',
   'in> isIterable(future(:: sin,[3]));','out> false;','in> isIterable(primeGenerator);','out> true;','in> isIterable([1..10]);',
   'out> true;','in> isIterableExpression(primeGenerator);','out> true;','in> isIterableExpression([1..10]);','out> false;',
   "in> begin resetRandom; local gen:={begin local last:=0; save; last+=random; end}; print('gen.isIterable= ', gen.isIterable,'; ', gen.head(3)); gen:=gen.toIterableExpression; print('gen.isIterable= ', gen.isIterable,'; ', gen.head(3)); end;",
   'gen.isIterable= false; {begin local last:=0; save; last+=random; end}',
   'gen.isIterable= true; [0.69890123605728149,1.5846346616744995,2.5055105686187744]','out> void;',
   'in> toIterableExpression(:: sqr);','Error @?:4,1 Only nullary stateful expressions may be iterable.',
   'in> toIterableExpression({begin local i:=2; save; i+=i-1; end});','out> {begin local i:=2; save; i+=i-1; end};',
   'in> euklideanNorm([1, 2]);','out> 2.23606797749979;','in> assert(1=1.0);','out> void;',
   "in> assert('bla'.isInt,'Invalid integer given');",'Error(Usr) @?:6,1 Invalid integer given',
   "in> md5('Test input. Could be anything really.');",'out> 337964223705814058127798532806512273013;',
   "in> sha256('Test input. Could be anything really.');",
   'out> 60429211283715320795241587111266756812669288936868807314606704811653259384943;','in> hammingWeight(17213);','out> 8;',
   'in> gcd(1231512, 143543);','out> 23;',
   'in> powMod(2988348162058574136915891421498819466320163312926952423791023078876139, 2351399303373464486466122544523690094744975233415544072992656881240319, 10^40);',
   'out> 1527229998585248450016808958343740453059;','in> randomGenerator(123).head(10);',
   'out> [0.88808047771453857,0.033595457673072815,0.07375691086053848,0.073728755116462708,0.4090341329574585,0.7116715908050537,0.46069467067718506,0.5966716408729553,0.8116149306297302,0.498393714427948];',
   'in> intRandomGenerator(123, 5).head(10);','out> [2,0,0,1,3,4,0,0,1,2];','in> isaacRandomGenerator(123, 5).head(10);',
   'out> [3,3,1,4,4,2,2,0,4,3];','in> modularInverse(3, 32);','out> 11;','in> byteToChar(100);',"out> 'd';",
   'in> byteToChar([10, 12, 97, 45]);',"out> [#10,#12,'a','-'];","in> systemSpecificFilename('..\\test/filename.txt');",
   'out> ''..\test\filename.txt'';',"in> stringIterator(['a','b','c'], 1, 3).head(10);",
   "out> ['a','b','c','aa','ab','ac','ba','bb','bc','ca'];",'in> vanDerCorputGenerator(2).head(10);',
   'out> [0.0,0.5,0.25,0.75,0.125,0.625,0.375,0.875,0.0625,0.5625];','in> primeGenerator.head(1000).trailing(5);',
   'out> [7879,7883,7901,7907,7919];','in> rangeGenerator(0, 5).head(10);','out> [0,1,2,3,4,5];',
   'in> rangeGenerator(100,-100).head(10);','out> [100,99,98,97,96,95,94,93,92,91];','in> divMod(10, 7);','out> [1,3];',
   "in> 'abba'.hasPrefix('ab');",'out> true;','in> isPrime(47531677974672740279381824573269878221106369761817);','out> true;',
   'in> 3==3.0;','out> false;','in> [1, 2, 3]==[3, 1, 3];','out> false;','in> 3<=3.0;','out> true;','in> [1, 2, 3]<=[3, 1, 3];',
   'out> [true,false,true];','in> 3>=3.0;','out> true;','in> [1, 2, 3]>=[3, 1, 3];','out> [false,true,true];','in> 3<3.0;',
   'out> false;','in> [1, 2, 3]<[3, 1, 3];','out> [true,false,false];','in> 3>3.0;','out> false;','in> [1, 2, 3]>[3, 1, 3];',
   'out> [false,true,false];','in> 3<>3.0;','out> false;','in> [1, 2, 3]<>[3, 1, 3];','out> [true,true,false];',
   'in> true AND false;','out> false;','in> true AND 3;','out> 3;','in> false AND 3;','out> false;','in> true and false;',
   'out> false;','in> [true, false, true, false] and[true, true, false, false];','out> [true,false,false,false];',
   'in> 7 and 252;','out> 4;','in> true OR false;','out> true;','in> true OR 3;','out> true;','in> false OR 3;','out> 3;',
   'in> true or false;','out> true;','in> [true, false, true, false] or[true, true, false, false];',
   'out> [true,true,true,false];','in> 7 or 252;','out> 255;','in> true xor false;','out> true;',
   'in> [true, false, true, false] xor[true, true, false, false];','out> [false,true,true,false];','in> 7 xor 252;','out> 251;',
   "in> +'a';","out> 'a';",'in> -3;','out> -3;','in> -[1, 2.0, Inf, Nan];','out> [-1,-2.0,-Inf,Nan];','in> !true;','out> false;',
   'in> 3 in[1..5];','out> true;','in> 3.0 in[1..5];','out> false;','in> 3 not in[1..5];','out> false;','in> 3.0 not in[1..5];',
   'out> true;','in> 1|2;','out> [1,2];','in> [1]|[2];','out> [1,2];','in> [1]|2;','out> [1,2];','in> [1]|[[2]];',
   'out> [1,[2]];','in> [1]||2;','out> [1,2];','in> [1]||[2];','out> [1,[2]];','in> 10 div 3;','out> 3;','in> 10/3;',
   'out> 3.3333333333333335;','in> 10/5;','out> 2;','in> 10.0/5;','out> 2.0;','in> void orElse 42;','out> 42;',
   'in> 3 orElse fail;','out> 3;','in> 3-pi;','out> -0.14159265358979312;','in> 32459378562983 mod 2342832;','out> 1139831;',
   'in> 7 mod 3;','out> 1;','in> -7 mod 3;','out> -1;','in> 7 mod-3;','out> 1;','in> -7 mod-3;','out> -1;','in> 2*3;','out> 6;',
   'in> 2.0*3;','out> 6.0;','in> 4+5;','out> 9;',"in> 'a'+'b';","out> 'ab';",'in> 5^7;','out> 78125;','in> -3.5^3;',
   'out> -42.875;','in> 3&4;',"out> '34';",'in> isSubsetOf([1, 2, 3],[1, 2, 3]);','out> true;','in> isSubsetOf(1,[1, 2, 3]);',
   'out> false;','in> isSubsetOf([1],[1, 2, 3]);','out> true;','in> isSubsetOf([1, 4],[1, 2, 3]);','out> false;',
   'in> x :=1/[0..3];','in> vectorIfThenElse(x.isInfinite, 0, x);','out> [0,1,0.5,0.3333333333333333];',
   'in> zip(rangeGenerator(0), primeGenerator).head(10);',
   'out> [[0,2],[1,3],[2,5],[3,7],[4,11],[5,13],[6,17],[7,19],[8,23],[9,29]];','in> kMeans([1..100].map((i)->random(3)), 3);',
   "out> ['class' => [1,2,2,0,1,2,1,1,1,2,2,1,2,2,0,2,2,2,2,0,1,2,2,0,0,2,2,0,0,1,1,1,2,1,1,0,0,1,2,1,0,0,1,1,0,2,0,0,2,0,2,1,0,2,2,2,2,0,0,0,0,2,0,2,1,1,2,1,2,1,1,2,1,1,2,1,2,2,1,1,1,0,0,1,0,2,1,0,0,0,2,1,2,0,2,0,0,0,2,1],'centers'=>[[0.6665325193635879,0.7556999787207572,0.5613454227005281],[0.2443210948840715,0.5534931165166199,0.26881193567533046],[0.4166380661866955,0.39474816192444917,0.81587936104954906]]].toMap;",
   'in> kMeans([1..100].map((i)->random(3)),[[0, 0, 1],[0, 1, 0],[1, 0, 0]]);',
   "out> ['class' => [0,0,0,0,1,1,2,1,1,0,1,2,0,1,1,2,0,1,2,0,2,0,1,2,0,1,2,2,0,0,2,0,0,1,2,1,2,0,2,0,0,0,2,0,2,0,0,0,2,2,0,0,1,1,1,1,0,0,0,0,2,2,0,0,0,2,2,2,1,2,1,0,2,1,0,2,0,2,2,0,1,0,1,1,2,0,1,2,1,1,1,1,1,1,1,0,2,0,1,0],'centers'=>[[0.39514006246463396,0.37581241712905467,0.76517500355839729],[0.30430735578580248,0.79431195316776149,0.44410747202533868],[0.74462707083800739,0.4206992971614517,0.38883330364679469]]].toMap;"
  ],
  'LOWin64'=>
  ["in> [2=>'A', 4=>'B'].toMap.map2list('-');","out> ['-','-','A','-','B'];",'in> x :=3;',"in> (x and 1)=0 ?'even' :'odd';",
   "out> 'odd';","in> false ?'o.k.' : void;",'out> void;','in> f(a, b, c)->a ? b : c;','in> :: f;','out> (a, b, c)->a ? b : c;',
   'in> begin local L:=[5..1]; while L.size<10 do L|=0; L; end;','out> [5,4,3,2,1,0,0,0,0,0];',
   'in> begin local x:=0; while(x+=pi)<10; x; end;','out> 12.566370614359172;',
   'in> begin local x:=10; repeat print(x+=1)until x>0; end;','11','out> void;',
   'in> begin local output:=[]; local x:=10; repeat output|=x; x-=1; until x<=0; output; end;','out> [10,9,8,7,6,5,4,3,2,1];',
   "in> for x in ['A'..'C'] do print(x);",'A','B','C','out> [];','in> for x in [1..4] do 0|x do x|0;',
   'out> [[0,1],[1,0],[0,2],[2,0],[0,3],[3,0],[0,4],[4,0]];',"in> for i in [1..10000] do parallel 1/i²aggregator(+);",
   'out> 1.6448340718480652;','in> cross([1..3],[1..3]).each(x,x-0.5, x+0.5);',
   'out> [[0.5,0.5],[1.5,1.5],[0.5,1.5],[1.5,2.5],[0.5,2.5],[1.5,3.5],[1.5,0.5],[2.5,1.5],[1.5,1.5],[2.5,2.5],[1.5,2.5],[2.5,3.5],[2.5,0.5],[3.5,1.5],[2.5,1.5],[3.5,2.5],[2.5,2.5],[3.5,3.5]];',
   'in> [1..10].each(v,cos(v),+);','out> -1.4174477464559059;','in> random(3).each(y,sqr(y), aggregator((x)->print(x)));',
   '0.0031703627893842068','0.23019735941063235','0.16996533208954645','out> void;',
   'in> random(100).each(t,sin(t), aggregator((x, y)->max(x, y)/y));','out> 1.2332433624605673E43;',
   'in> counter->begin local c:=0; save; c+=1; end;','in> counter();','out> 1;','in> counter();','out> 2;','in> counter();',
   'out> 3;','in> 3=3.0;','out> true;','in> Nan=Nan;','out> false;','in> {$x}=3;','out> {$x=3};','in> [1, 2, 3]=[3, 1, 3];',
   'out> [false,false,true];','in> arity({3});','out> 0;','in> arity({sin($x)/$x});','out> 1;','in> [1..2].isIntList;',
   'out> true;',"in> extractFileDirectory('folder/subFolder/file.extension');","out> 'folder/subFolder';",
   "in> runScript(['name'=>'hello.mnh','source'=>[\"main->print('Hello world');\"],'side effects'=>['alter package state','output']].toMap).filter({$message.head=='printline'}).map(:: trailing);",
   "out> ['Hello world'];",'in> arity({sin($x)/$y});','out> 2;',"in> arity({printf('%s%s', $a,...)});",'out> 1;',
   "in> toExpression('$x-$x^2+$x^3');",'out> {$x-$x^2+$x^3};',"in> toExpression('');",
   'Error @?:1,1 The parsed expression appears to be empty','in> parameterNames({3});','out> [];',
   'in> parameterNames({sin($x)/$x});',"out> ['$x'];",'in> groupToList([1, 2, 3, 4, 5, 6],[1, 2, 3, 1, 2, 3], Nan, ::*);',
   'out> [Nan,4,10,18];',"in> parameterNames({printf('%s%s', $a,...)});","out> ['$a'];",'in> ord(3);','out> 3;','in> ord(true);',
   'out> 1;','in> ord(false);','out> 0;',"in> ord('A');",'out> 65;',"in> ord('abc');",'out> -1;','in> ord(2.1);',
   'Error @?:1,1 ord can only be applied to booleans, ints and strings',"in> softCast('A');","out> 'A';",
   'in> softCast(''"B"'');',"out> 'B';",'in> softCast(3);','out> 3;',"in> softCast([1,'2','true',\"'TEXT'\",'1.5','2,6']);",
   "out> [1,2,true,'TEXT',1.5,'2,6'];","in> toString('a');","out> 'a';",'in> toString(234);',"out> '234';",
   "in> toString([1, 2.6,'a', true,{$x}]);",'out> "[1,2.6,''a'',true,{$x}]";','in> abs(-0.92);','out> 0.92;','in> abs(3);',
   'out> 3;','in> abs({1+$x});','out> {abs(1+$x)};','in> arccos(-0.92);','out> 2.7388768120091318;','in> arccos(3);','out> Nan;',
   'in> arccos({1+$x});','out> {arccos(1+$x)};','in> arcsin(-0.92);','out> -1.1680804852142352;','in> arcsin(3);','out> Nan;',
   'in> arcsin({1+$x});','out> {arcsin(1+$x)};','in> tan(-0.92);','out> -1.313263699320248;','in> tan(3);',
   'out> -0.1425465430742778;','in> tan({1+$x});','out> {tan(1+$x)};','in> tan(pi/2);','out> 1.6331778728383844E16;',
   'in> arctan(-0.92);','out> -0.7437555842988599;','in> arctan({$x});','out> {arctan($x)};','in> argMax(sin([0..10]));',
   'out> 8;','in> argMax([1, 3, 3, 0, 2]);','out> 1;','in> argMin(sin([0..10]));','out> 5;','in> argMin([1, 3, 3, 0, 2]);',
   'out> 3;','in> ceil(20/3);','out> 7;','in> ceil([0..3]/3);','out> [0,1,1,1];','in> ceil([0..3]/3, 2);',
   'out> [0,0.34,0.67,1];','in> floor(20/3);','out> 6;','in> floor([0..3]/3);','out> [0,0,0,1];','in> floor([0..3]/3, 2);',
   'out> [0,0.33,0.66,1];','in> round(20/3);','out> 7;','in> round([0.5, 1.5, 2.5, 3.5]);','out> [0,2,2,4];',
   'in> round([0..3]/3, 2);','out> [0,0.33,0.67,1];','in> isInfinite(Nan);','out> false;','in> isInfinite(+Inf);','out> true;',
   'in> isInfinite(-Inf);','out> true;','in> isInfinite([-3.4344, Nan,+Inf]);','out> [false,false,true];','in> isNan(Nan);',
   'out> true;','in> isNan(+Inf);','out> false;','in> isNan(-Inf);','out> false;','in> isNan([-3.4344, Nan,+Inf]);',
   'out> [false,true,false];','in> cos(-0.92);','out> 0.60582015664346289;','in> cos(3);','out> -0.9899924966004454;',
   'in> cos({1+$x});','out> {cos(1+$x)};','in> exp(-0.92);','out> 0.39851904108451419;','in> exp(3);','out> 20.085536923187668;',
   'in> exp({1+$x});','out> {exp(1+$x)};','in> ln(-0.92);','out> Nan;','in> ln({1+$x});','out> {ln(1+$x)};','in> sin(3);',
   'out> 0.1411200080598672;','in> sin({1+$x});','out> {sin(1+$x)};','in> sqr(-0.92);','out> 0.8464;','in> sqr(3);','out> 9;',
   'in> sqr({1+$x});','out> {sqr(1+$x)};','in> sqrt(-0.92);','out> Nan;','in> sqrt(3);','out> 1.7320508075688772;',
   'in> sqrt({1+$x});','out> {sqrt(1+$x)};','in> isqrt(121);','out> [11,true];','in> isqrt(255, 1);','out> [16,false];',
   'in> sign(-0.92);','out> -1;','in> sign(3);','out> 1;','in> sign({1+$x});','out> {sign(1+$x)};',"in> max(['a'..'z']);",
   "out> 'z';",'in> max([0..9]/2);','out> 4.5;','in> max(true, false);','out> true;',"in> min(['a'..'z']);","out> 'a';",
   'in> min([0..9]/2);','out> 0;','in> min(true, false);','out> false;',"in> copy('abcde', 1, 3);","out> 'bcd';",
   "in> copy('abcde', 2);","out> 'cde';","in> escape('a');",'out> "''a''";','in> escape(#9);',"out> '#9';",
   'in> group([1..10],[1..10] mod 3=0);','out> [false => [1,2,4,5,7,8,10],true=>[3,6,9]].toMap;','in> fail;',
   'Error(Usr) @?:1,1 Fail','in> fail("Told you this wouldn''t work!");',"Error(Usr) @?:1,1 Told you this wouldn't work!",
   'in> hash(1);','out> 1;','in> hash([1..3]);','out> 90399;',"in> hash('a');",'out> 128;',
   "in> listBuiltin.filter({$s.matches('^mnh\\.')}).sort.trailing(10);",
   "out> ['mnh.listBuiltin','mnh.listSideEffects','mnh.mnhInfo','mnh.myPath','mnh.ord','mnh.parameterNames','mnh.runScript','mnh.sandBoxExecute','mnh.sleep','mnh.sleepUntil'];",
   'in> abs(3);','out> 3;','in> abs(-3);','out> 3;','in> abs([-2..2]/2);','out> [1,0.5,0,0.5,1];',
   "in> chars('This is a test.');","out> ['T','h','i','s',' ','i','s',' ','a',' ','t','e','s','t','.'];",'in> chars.get(100);',
   "out> 'd';","in> clean('+21/232/2116-11',['0'..'9'],' ');","out> ' 21 232 2116 11';","in> join(['a','b','c']);","out> 'abc';",
   "in> join([1..5],' ');","out> '1 2 3 4 5';","in> length(\"Test öäü\");",'out> 8;',"in> byteLength(\"Test öäü\");",
   'out> 11;',"in> length(['Text','AbC']);",'out> [4,3];',"in> lower('Test');","out> 'test';","in> lower(['Text','AbC']);",
   "out> ['text','abc'];","in> upper('Test');","out> 'TEST';","in> upper(['Text','AbC']);","out> ['TEXT','ABC'];",
   'in> t :=[0..1000]*2*pi/1000;','in> plot(t, sin(t));',"in> chars('Test');","out> ['T','e','s','t'];",
   "in> pos('o','Hello World');",'out> 4;',"in> pos(',',['Hello','Test','1,2,3']);",'out> [Inf,Inf,1];',
   "in> pos(['a','b'],'cdb');",'out> [Inf,2];',"in> repeatString('-', 10);","out> '----------';",
   "in> replace('[[][]][]][][','[]','');","out> '][';","in> replace('aba','b','bb');","out> 'abba';",
   "in> replaceOne('[[][]][]][][','[]','');","out> '[[]][]][][';","in> replaceOne('1:.-.; 2:.-.; 3:.-.','.',['a'..'e']);",
   "out> '1:a-b; 2:c-d; 3:e-.';","in> split('1,2,3;4,5,6',',');","out> ['1','2','3;4','5','6'];","in> split('1,2,3;4,5,6',';');",
   "out> ['1,2,3','4,5,6'];","in> split('1,2,3;4,5,6',[';',',']);","out> ['1','2','3','4','5','6'];",
   "in> tokenSplit('f(x)->x+1; //Stupid, but just an example...','mnh');",
   "out> ['f','(','x',')','->','x','+','1',';',' ','//Stupid, but just an example...'];",'in> trim(" \tA B C\t ");',
   "out> 'A B C';",'in> trimLeft(" \tA B C\t ");','out> "A B C\t ";','in> trimRight(" \tA B C\t ");','out> " \tA B C";',
   "in> unbrace('3');","out> '3';","in> unbrace('(3)');","out> '3';","in> unbrace('(3]');","out> '(3]';",'in> unbrace(''"3"'');',
   'out> ''"3"'';',"in> chars('Testtext').elementFrequency;","out> ['e' => 2,'s'=>1,'T'=>1,'t'=>3,'x'=>1].toMap;",
   "in> chars('Testtext').agg(elementFrequency);","out> ['e' => 2,'s'=>1,'T'=>1,'t'=>3,'x'=>1].toMap;",
   'in> flatten([1,[2,[3, 4],[5]], 6]);','out> [1,2,3,4,5,6];',"in> head(['A'..'Z']);","out> 'A';","in> head(['A'..'Z'], 3);",
   "out> ['A','B','C'];","in> ['A'..'Z'].toSet.head(3);","out> ['A','Q','B'];","in> tail(['A'..'Z']);",
   "out> ['B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];",
   "in> tail(['A'..'Z'], 3);",
   "out> ['D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];",
   'in> rangeGenerator(1, 10).tail(3);','out> rangeGenerator(4,10);',"in> leading(['A'..'Z']);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y'];",
   "in> leading(['A'..'Z'], 3);",
   "out> ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W'];",
   'in> rangeGenerator(1, 10).leading(3);','out> [1,2,3,4,5,6,7];',"in> trailing(['A'..'Z']);","out> 'Z';",
   "in> trailing(['A'..'Z'], 3);","out> ['X','Y','Z'];","in> ['A'..'Z'].toSet.trailing(3);","out> ['N','O','P'];",
   'in> rangeGenerator(1, 10).trailing(3);','out> [8,9,10];',"in> minus([1..10]², 2*[0..50]);",'out> [1,9,25,49,81].toSet;',
   "in> rangeGenerator(1, 20).chunkMap(5,(x)->format('%2s', x)).toList;",
   "out> [[' 1',' 2',' 3',' 4',' 5'],[' 6',' 7',' 8',' 9','10'],['11','12','13','14','15'],['16','17','18','19','20']];",
   "in> [1,[2, 3],[4, 5, 6]].flatMap((x)->x³).toList;",'out> [1,8,27,64,125,216];','in> sort(intRandom(10, 5));',
   'out> [1,2,4,5,8];',"in> sort(['01','10','100','1','010'],(x, y)->softCast(x)<=softCast(y));",
   "out> ['01','1','10','010','100'];","in> sort(['01','10','100','1','010'], :: length);","out> ['1','01','10','100','010'];",
   'in> sortPerm(random(10));','out> [0,7,3,4,2,1,5,9,6,8];',"in> sortPerm(['a'..'c'..'a']);",'out> [0,4,1,3,2];',
   'in> intersect([0..1000]^2,[0..1000]^3);','out> [0,4096,262144,1,64,46656,1000000,729,15625,117649,531441].toSet;',
   'in> union(1/[1..5], 2/[2..6]);','out> [0.5,0.25,1,0.3333333333333333,0.6666666666666666,0.2,0.4].toSet;',
   "in> deleteFile('plotDemo1.png');",'out> false;',"in> get(['a'..'f'], 3);","out> 'd';","in> get(['a'..'f'],[3, 1, 2]);",
   "out> ['d','b','c'];",'in> get([0..4],[2..6] mod 3=0);','out> [1,4];',"in> get([['A', 1],['B', 2],['C', 0]],'B');",'out> 2;',
   'in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]], 1);','out> [2,5,8];','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[1, 0]);',
   'out> [[2,1],[5,4],[8,7]];','in> getInner([[1, 2, 3],[4, 5, 6],[7, 8, 9]],[true, false, true]);','out> [[1,3],[4,6],[7,9]];',
   'in> indexOf([1..6]^2 mod 3=0);','out> [2,5];','in> reverseList([1..5]);','out> [5,4,3,2,1];','in> size([0.5, 0.1, 0.2]);',
   'out> 3;',"in> toMap([['A', 1],['B', 2],['C', 0],['B', 4]]);","out> ['A' => 1,'C'=>0,'B'=>4].toMap;",
   'in> trueCount(10<[0..10]^2<50);','out> 4;','in> unique([3, 1, 2, 1, 4, 1, 5]);','out> [1,2,3,4,5];',"in> compress('Test');",
   "out> 'Test';","in> compress('Test').decompress;","out> 'Test';",
   "in> compress('This text is long enough to give deflate a little edge. So deflate will be used.');",
   "out> '%P]'#181't'#149#221'mZ'#157't'#188'6!'#130#191#181'!'#129#176'9'#182#148#201#133'k'#174'p'#173'.'#197'q'#233'm'#180#14'm'#165'1\\w'#200'6'#134#187#4;",
   "in> compress('This text is long enough to give deflate a little edge. So deflate will be used.').decompress;",
   "out> 'This text is long enough to give deflate a little edge. So deflate will be used.';",
   "in> relativeFileName('~/folder/','~/other/example.txt');","out> '../other/example.txt';",'in> primes(20);',
   'out> [2,3,5,7,11,13,17,19];','in> subSets([1, 2, 1]);','out> [[],[2],[1],[1,2],[1,1],[1,1,2]];',
   "in> diff('encode','decode');",
   "out> ['adds' => 1,'matches'=>5,'modifies'=>0,'edit'=>[['+',-1,0],[' ',0,1],['-',1,1],[' ',2,2],[' ',3,3],[' ',4,4],[' ',5,5]],'deletes'=>1].toMap;",
   "in> diffStats('encode','decode');","out> ['adds' => 1,'matches'=>5,'modifies'=>0,'deletes'=>1].toMap;",
   "in> format('%s is a string, %3.3d is a number','X', 7);","out> 'X is a string, 007 is a number';","in> format('%6.3f', 3);",
   "out> ' 3.000';","in> format('%6.3e', 3);","out> '3.00E+000';","in> format('%6.3g', 3);","out> '     3';",
   "in> format('%6.6x', 1234);","out> '0004D2';","in> formatTime('mm.dd.yyyy', 43210);","out> '04.20.2018';",
   'in> formatTime(12424.245);',"out> '05.01.1934 05:52:48';","in> isAscii('xyz');",'out> true;',
   "in> isAscii('xyz'&chars[180]);",'out> false;',"in> isAscii(\"Läuft\");",'out> false;',"in> isUtf8('xyz');",'out> true;',
   "in> isUtf8('xyz'&chars[180]);",'out> false;',"in> isUtf8(\"Schräg\");",'out> true;',
   "in> parseTime('yyyy-mm-dd hh:nn','2000-01-01 03:43');",'out> 36526.154861111114;',"in> reverseString('Test');",
   "out> 'tseT';","in> regex.matches('This is a test','[T|t]est');",'out> true;',
   "in> regex.matchComposite('This is a test','[T|t]est');","out> [['test',11,4]];",
   "in> regex.replace('A Test is a test','[T|t]est','rose');","out> 'A rose is a rose';",
   "in> regex.split('A Test is a test','[e| ]');","out> ['A','T','st','is','a','t','st'];",'in> toBoolean(0);','out> false;',
   'in> toBoolean(1.0);','out> true;',"in> toBoolean('true');",'out> true;','in> toBoolean(3);',
   'Error @?:1,1 3 cannot be cast to boolean',"in> toInt('32');",'out> 32;','in> toInt(3.0);','out> 3;','in> toInt(3.1);',
   'Error @?:1,1 3.1 cannot be cast to int','in> toInt(false);','out> 0;',"in> toReal('3.212');",'out> 3.212;',
   'in> toReal(true);','out> 1;','in> toReal(3);','out> 3.0;','in> getOptions;','in> executor;',
   'out> ''<#>\target\Win64\mnh_light.exe'';','in> print("1\n2.0\n03.45");','1','2.0','03.45','out> void;',
   'in> print("1\n2.0\n03,45\t");',' 1',' 2.0','03,45','out> void;','in> print("1\tone\t|\n2.0\ttwo\t|\n03.45\tthree\t|");',
   ' 1    one   |',' 2.0  two   |','03.45 three |','out> void;','in> print("1\vone\v|\n2.0\vtwo\v|\n03.45\vthree\v|");',
   ' 1   one  |',' 2.0 two  |','03.45three|','out> void;',"in> printf('%x is %d in hexadecimal form', 123, 123);",
   '7B is 123 in hexadecimal form','out> void;',"in> printf('%{$0}x is %{$0}d in hexadecimal form', 123);",
   '7B is 123 in hexadecimal form','out> void;',"in> printf('sin(%{$0}s)=%{sin($0)}4.4g', 1);",'sin(1)=0.8415','out> void;',
   'in> permutations([1, 1, 2]);','out> [[1,1,2],[1,2,1],[2,1,1]].toSet;','in> permutations([1..3]);',
   'out> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]].toSet;',"in> input :=[[1..10], random,'test', random(9)];",
   'in> serialized :=input.serialize;',"in> print(input.toString.byteLength,' > ', serialized.byteLength);",'228 > 92',
   'out> void;','in> input==serialized.deserialize;','out> true;','in> factorize(18447422338071909869);',
   'out> [2642257,2642287,2642291];','in> formatTabs("\v-2\n3\t4.3");',"out> ['  -2','3  4.3'];",'in> typeOf(3);',"out> 'Int';",
   'in> typeOf([1..5, 7.5]);',"out> 'NumericList(6)';",'in> typeOf({$x^2+$y});',"out> 'Expression(2)';",
   'in> x :=transpose([1,[1, 2, 3],[1, 2]], 0);','in> x;','out> [[1,1,1],[0,2,2],[0,3,0]];','in> x.transpose(0);',
   'out> [[1,0,0],[1,2,3],[1,2,0]];','in> resetRandom(12157);','out> void;','in> resetRandom;','out> void;','in> intRandom(7);',
   'out> 3;','in> intRandom(7, 10);','out> [3,0,4,4,4,2,0,6,5,3];','in> random;','out> 0.056305974721908569;','in> random(3);',
   'out> [0.056305974721908569,0.4797888696193695,0.41226851940155029];',"in> log('This should be logged...');",
   'log> This should be logged...;','out> void;',"in> note('Note that this is a note');",
   'Note(Usr) @?:1,1 Note that this is a note','out> void;',"in> warn('Warning: I intend to say something important here');",
   'Warning(Usr) @?:1,1 Warning: I intend to say something important here','out> void;','in> isScalar(1);','out> true;',
   'in> isBoolean(false);','out> true;','in> isBoolean(1);','out> false;','in> isInt(false);','out> false;','in> isInt(1);',
   'out> true;','in> isInt(1.0);','out> false;','in> isReal(false);','out> false;','in> isReal(1);','out> false;',
   'in> isReal(1.0);','out> true;','in> isNumeric(false);','out> false;','in> isNumeric(1);','out> true;','in> isNumeric(1.0);',
   'out> true;','in> isList([]);','out> true;','in> isList([], 0);','out> true;','in> isList([], 1);','out> false;',
   "in> isList(['x'], 1);",'out> true;',"in> isString('Test');",'out> true;','in> isString(true);','out> false;',
   'in> isExpression(:: sin);','out> true;','in> isExpression(:: sin, 1);','out> true;','in> isExpression(:: sin, 2);',
   'out> false;','in> digits(123);','out> [1,2,3];','in> digits(123, 3);','out> [1,1,1,2,0];','in> arctan2(1, 1);',
   'out> 0.78539816339744828;',"in> charSet('abcba');","out> ['a','b','c'].toSet;","in> bytes(\"ö\").ord;",'out> [195,182];',
   "in> base64encode('Test');","out> 'VGVzdA==';","in> base64decode('VGVzdA==');","out> 'Test';",
   "in> base92encode('bla bla bla ');","out> ']En_)]En_)]En_)';","in> base92decode('PgsC.?d@t^');","out> '12345';",
   'in> listSideEffects;',
   "out> ['input','output','sound','sleep','detaching','server','read package state','alter package state','read context state','alter context state','read GUI state','alter GUI state','read IDE state','alter IDE state','read file','write file','http','ipc','executing external'];",
   "in> changeFileExt('file.extension','.newExtension');","out> 'file.newExtension';",
   "in> changeFileExt('file.2.extension','.newExtension');","out> 'file.2.newExtension';",'in> httpError;',
   'out> "HTTP/1.0 404\r\n";','in> isBooleanList([true, false]);','out> true;','in> isBooleanList(true);','out> false;',
   'in> isIntList([1..3]);','out> true;','in> isIntList([1, 2.0]);','out> false;','in> isRealList([1, 2, 3]);','out> false;',
   'in> isRealList([1.0, 2.0, 3.0, Nan]);','out> true;',"in> isStringList(['a'..'z']);",'out> true;',
   'in> isNumericList([1, 2, 3]);','out> true;','in> isNumericList([1.0, 2, 3, Inf]);','out> true;','in> isVoid();','out> true;',
   'in> isVoid(void);','out> true;','in> isVoid(3);','out> false;',"in> escapePascal('Test');",'out> "''Test''";',
   "in> escapeJava('Test');",'out> ''"Test"'';',"in> extractFileNameOnly('/home/user/file.ext');","out> 'file';",
   "in> extractFileDirectory('/home/user/file.ext');","out> '/home/user';","in> extractFileName('/home/user/file.ext');",
   "out> 'file.ext';","in> extractFileExt('/home/user/file.ext');","out> '.ext';","in> extractPath('/index.html?x=0&y=3%2Ax');",
   "out> '/index.html';","in> extractParameters('/index.html?x=0&y=3%2Ax');","out> ['x' => 0,'y'=>'3*x'].toMap;",
   "in> extractRawParameters('/index.html?x=0&y=3%2Ax');","out> 'x=0&y=3%2Ax';",
   "in> encodeRequest('127.0.0.1:3126','rest',[['user','anonymous'],['request','3*&7']].toMap);",
   "out> '127.0.0.1:3126/rest?user=anonymous&request=3%2A%267';","in> cross(['1'..'3'],['A'..'C']);",
   "out> [['1','A'],['1','B'],['1','C'],['2','A'],['2','B'],['2','C'],['3','A'],['3','B'],['3','C']];",'in> [1, 2, 1].toSet;',
   'out> [2,1].toSet;','in> [1.2, 3.0].isRealCollection;','out> true;','in> [1.2, 3.0].toSet.isRealCollection;','out> true;',
   'in> [1.2, 3].isRealCollection;','out> false;','in> [1.2, 3.0].isRealCollection(2);','out> true;',
   'in> [1.2, 3.0].isRealCollection(3);','out> false;','in> [true].isBooleanCollection;','out> true;',
   'in> [true, false, true].toSet.isBooleanCollection(2);','out> true;','in> [true, false, true].toSet.isBooleanSet;',
   'out> true;','in> [1, 2, 3].isIntCollection;','out> true;','in> [].isIntCollection;','out> true;',
   'in> [1.2, 3].isNumericCollection;','out> true;',"in> ['a','b'].toSet.isStringSet;",'out> true;',
   "in> ['a','b'].isStringCollection;",'out> true;','in> [1, 2, 3].isIntSet;','out> false;','in> [1, 2, 3].toSet.isIntSet;',
   'out> true;',"in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap;",'out> true;',"in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(2);",
   'out> true;',"in> [[1,'1'],[2,'2'],[1,'3']].toMap.isMap(3);",'out> false;',"in> [1,'a', false].isSet;",'out> false;',
   "in> [1,'a', false].isCollection;",'out> true;',"in> utf8ToAnsi(\"öµ\").bytes.ord;",'out> [246,181];',
   'in> chars[214].ansiToUtf8;',"out> \"Ö\";",'in> [1.2, 3.4].toSet.isRealSet;','out> true;','in> toList(3);','out> [3];',
   'in> toList([2, 3, 6].toSet);','out> [2,6,3];','in> [1.2, 3.4].toSet.isNumericSet;','out> true;',
   "in> [[1,'one'],[3,'three'],[5,'five']].toMap.getAll([1, 5, 6],['-','-','-']);","out> ['one','five','-'];",
   "in> HEX :=[0..15].map((i)->format('%x', i)=>i).toMap;",
   'in> parseHex(s:String)->HEX.getAll(s.chars.upper).composeDigits(16);',"in> parseHex('DeadBeef');",'out> 3735928559;',
   'in> [1, 3, 5].getAll([0, 2])==[1, 3, 5].get([0, 2]);','out> true;','in> [1..20].filter({$x mod 2<>0<>$x mod 3});',
   'out> [1,5,7,11,13,17,19];','in> rangeGenerator(1, 20).filter({$x mod 2<>0<>$x mod 3});',
   'out> rangeGenerator(1,20).filter({$x mod 2<>0<>$x mod 3});',"in> ['a'..'f'].pMap(:: upper);",
   "out> ['A','B','C','D','E','F'];",'in> primeGenerator.head(10);','out> [2,3,5,7,11,13,17,19,23,29];',
   'in> [-1, 1,-1, 1,-2, 2].agg(head);','out> -1;','in> [-1, 1,-1, 1,-2, 2].agg(trailing);','out> 2;',
   'in> [-1, 1,-1, 1,-2, 2].agg(toSet);','out> [-2,2,-1,1].toSet;','in> [-1, 1,-1, 1,-2, 2].agg(max);','out> 2;',
   'in> [-1, 1,-1, 1,-2, 2].agg(min);','out> -2;','in> [-1, 1,-1, 1,-2, 2].agg(&);',"out> '-11-11-22';",
   'in> [-1, 1,-1, 1,-2, 2].agg(*);','out> -4;','in> [-1, 1,-1, 1,-2, 2].agg(+);','out> 0;',
   'in> permutationIterator([3, 1, 2]).map(:: print).toList;','[1,2,3]','[1,3,2]','[2,1,3]','[2,3,1]','[3,1,2]','[3,2,1]',
   'out> [];',"in> ['a'..'f'].map(:: upper);","out> ['A','B','C','D','E','F'];",'in> rangeGenerator(1, 100).map({$x^2});',
   'out> rangeGenerator(1,100).map({$x^2});','in> zip([1..10],[10..1]*2).map((x, y)->x+y).toList;',
   'out> [21,20,19,18,17,16,15,14,13,12];',"in> mergeMaps([['A', 1],['B', 2]].toMap,[['A', 7],['C', 3]].toMap, ::+);",
   "out> ['A' => 8,'B'=>2,'C'=>3].toMap;","in> try({deserialize('x')});",'out> void;',"in> try({deserialize('x')}, :: print);",
   "[['el3_evalError','@?:24,6','Invalid literal encoding: 120'],['el3_trace','@?:24,6',\"... deserialize('x')},::print);\"]]",
   'out> void;',"in> try({deserialize('x')}, 0);",'out> 0;',"in> try({deserialize('x')},{warn($x.head.trailing)});",
   'Warning(Usr) @?:3,25 Invalid literal encoding: 120','out> void;',"in> interpret('3+4');",'out> 7;','in> shiftRight(7, 1);',
   'out> 3;','in> shiftRight(5,-2);','out> 20;','in> type FiniteRealList(L:List)->L.each(x,!x.isNan,!x.isInfinite, AND);',
   'in> x :=[1, 5, 0.4, 1/7].toFiniteRealList;','in> x;','out> [1,5,0.4,0.14285714285714285].toFiniteRealList;','in> x.typeOf;',
   "out> 'FiniteRealList';",'in> x.toBuiltin;','out> [1,5,0.4,0.14285714285714285];','in> x.toBuiltin.typeOf;',
   "out> 'NumericList(4)';","in> interpret({print('Hello world')},[]);",
   'Error @?:2,12 Cannot apply print because of side effect(s): [output]',
   'Trace @?:2,12 ... print("Hello world")},[]); //interpret with no side effects allowed','in> composeDigits([1, 0, 1], 2);',
   'out> 5;','in> composeDigits([1, 0, 2]);','out> 102;','in> composeDigits([1, 0, 2], 10, 2);','out> 1.02;',
   "in> sandBoxExecute('f(x)->3*x+1; f(f(f(1)))',['alter package state']);",
   "out> [['echo_declaration','@?:1,1','f(x)->3*x+1;'],['echo_input','@?:1,14','f(f(f(1)));'],['echo_output','@?:1,10',40],['exitCode','',0]];",
   "in> begin local x:=async({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   '1: true','start','2: end','out> void;',
   "in> begin local x:=future({print('start') orElse sleep(0.1) orElse'end'}); print('1: ', x().isVoid); sleep(0.2); print('2: ', x()); end;",
   'start','1: false','2: end','out> void;',"in> validateRegex('(3+.*');",'out> false;',"in> validateRegex('\\(3+.*');",
   'out> true;','in> [1..100].pFilter({$x mod 2=$x mod 3=$x mod 5});','out> [1,30,31,60,61,90,91];','in> pi;',
   'out> 3.141592653589793;','in> isStatefulExpression(:: sin);','out> false;','in> isStatefulExpression(future(:: sin,[3]));',
   'out> true;','in> isStatelessExpression(:: sin);','out> true;','in> isStatelessExpression(future(:: sin,[3]));','out> false;',
   'in> isIterable(future(:: sin,[3]));','out> false;','in> isIterable(primeGenerator);','out> true;','in> isIterable([1..10]);',
   'out> true;','in> isIterableExpression(primeGenerator);','out> true;','in> isIterableExpression([1..10]);','out> false;',
   "in> begin resetRandom; local gen:={begin local last:=0; save; last+=random; end}; print('gen.isIterable= ', gen.isIterable,'; ', gen.head(3)); gen:=gen.toIterableExpression; print('gen.isIterable= ', gen.isIterable,'; ', gen.head(3)); end;",
   'gen.isIterable= false; {begin local last:=0; save; last+=random; end}',
   'gen.isIterable= true; [0.69890123605728149,1.5846346616744995,2.5055105686187744]','out> void;',
   'in> toIterableExpression(:: sqr);','Error @?:4,1 Only nullary stateful expressions may be iterable.',
   'in> toIterableExpression({begin local i:=2; save; i+=i-1; end});','out> {begin local i:=2; save; i+=i-1; end};',
   'in> euklideanNorm([1, 2]);','out> 2.23606797749979;','in> assert(1=1.0);','out> void;',
   "in> assert('bla'.isInt,'Invalid integer given');",'Error(Usr) @?:6,1 Invalid integer given',
   "in> md5('Test input. Could be anything really.');",'out> 337964223705814058127798532806512273013;',
   "in> sha256('Test input. Could be anything really.');",
   'out> 60429211283715320795241587111266756812669288936868807314606704811653259384943;','in> hammingWeight(17213);','out> 8;',
   'in> gcd(1231512, 143543);','out> 23;',
   'in> powMod(2988348162058574136915891421498819466320163312926952423791023078876139, 2351399303373464486466122544523690094744975233415544072992656881240319, 10^40);',
   'out> 1527229998585248450016808958343740453059;','in> randomGenerator(123).head(10);',
   'out> [0.88808047771453857,0.033595457673072815,0.07375691086053848,0.073728755116462708,0.4090341329574585,0.7116715908050537,0.46069467067718506,0.5966716408729553,0.8116149306297302,0.498393714427948];',
   'in> intRandomGenerator(123, 5).head(10);','out> [2,0,0,1,3,4,0,0,1,2];','in> isaacRandomGenerator(123, 5).head(10);',
   'out> [3,3,1,4,4,2,2,0,4,3];','in> modularInverse(3, 32);','out> 11;','in> byteToChar(100);',"out> 'd';",
   'in> byteToChar([10, 12, 97, 45]);',"out> [#10,#12,'a','-'];","in> systemSpecificFilename('..\\test/filename.txt');",
   'out> ''..\test\filename.txt'';',"in> stringIterator(['a','b','c'], 1, 3).head(10);",
   "out> ['a','b','c','aa','ab','ac','ba','bb','bc','ca'];",'in> vanDerCorputGenerator(2).head(10);',
   'out> [0.0,0.5,0.25,0.75,0.125,0.625,0.375,0.875,0.0625,0.5625];','in> primeGenerator.head(1000).trailing(5);',
   'out> [7879,7883,7901,7907,7919];','in> rangeGenerator(0, 5).head(10);','out> [0,1,2,3,4,5];',
   'in> rangeGenerator(100,-100).head(10);','out> [100,99,98,97,96,95,94,93,92,91];','in> divMod(10, 7);','out> [1,3];',
   "in> 'abba'.hasPrefix('ab');",'out> true;','in> isPrime(47531677974672740279381824573269878221106369761817);','out> true;',
   'in> 3==3.0;','out> false;','in> [1, 2, 3]==[3, 1, 3];','out> false;','in> 3<=3.0;','out> true;','in> [1, 2, 3]<=[3, 1, 3];',
   'out> [true,false,true];','in> 3>=3.0;','out> true;','in> [1, 2, 3]>=[3, 1, 3];','out> [false,true,true];','in> 3<3.0;',
   'out> false;','in> [1, 2, 3]<[3, 1, 3];','out> [true,false,false];','in> 3>3.0;','out> false;','in> [1, 2, 3]>[3, 1, 3];',
   'out> [false,true,false];','in> 3<>3.0;','out> false;','in> [1, 2, 3]<>[3, 1, 3];','out> [true,true,false];',
   'in> true AND false;','out> false;','in> true AND 3;','out> 3;','in> false AND 3;','out> false;','in> true and false;',
   'out> false;','in> [true, false, true, false] and[true, true, false, false];','out> [true,false,false,false];',
   'in> 7 and 252;','out> 4;','in> true OR false;','out> true;','in> true OR 3;','out> true;','in> false OR 3;','out> 3;',
   'in> true or false;','out> true;','in> [true, false, true, false] or[true, true, false, false];',
   'out> [true,true,true,false];','in> 7 or 252;','out> 255;','in> true xor false;','out> true;',
   'in> [true, false, true, false] xor[true, true, false, false];','out> [false,true,true,false];','in> 7 xor 252;','out> 251;',
   "in> +'a';","out> 'a';",'in> -3;','out> -3;','in> -[1, 2.0, Inf, Nan];','out> [-1,-2.0,-Inf,Nan];','in> !true;','out> false;',
   'in> 3 in[1..5];','out> true;','in> 3.0 in[1..5];','out> false;','in> 3 not in[1..5];','out> false;','in> 3.0 not in[1..5];',
   'out> true;','in> 1|2;','out> [1,2];','in> [1]|[2];','out> [1,2];','in> [1]|2;','out> [1,2];','in> [1]|[[2]];',
   'out> [1,[2]];','in> [1]||2;','out> [1,2];','in> [1]||[2];','out> [1,[2]];','in> 10 div 3;','out> 3;','in> 10/3;',
   'out> 3.3333333333333335;','in> 10/5;','out> 2;','in> 10.0/5;','out> 2.0;','in> void orElse 42;','out> 42;',
   'in> 3 orElse fail;','out> 3;','in> 3-pi;','out> -0.14159265358979312;','in> 32459378562983 mod 2342832;','out> 1139831;',
   'in> 7 mod 3;','out> 1;','in> -7 mod 3;','out> -1;','in> 7 mod-3;','out> 1;','in> -7 mod-3;','out> -1;','in> 2*3;','out> 6;',
   'in> 2.0*3;','out> 6.0;','in> 4+5;','out> 9;',"in> 'a'+'b';","out> 'ab';",'in> 5^7;','out> 78125;','in> -3.5^3;',
   'out> -42.875;','in> 3&4;',"out> '34';",'in> isSubsetOf([1, 2, 3],[1, 2, 3]);','out> true;','in> isSubsetOf(1,[1, 2, 3]);',
   'out> false;','in> isSubsetOf([1],[1, 2, 3]);','out> true;','in> isSubsetOf([1, 4],[1, 2, 3]);','out> false;',
   'in> x :=1/[0..3];','in> vectorIfThenElse(x.isInfinite, 0, x);','out> [0,1,0.5,0.3333333333333333];',
   'in> zip(rangeGenerator(0), primeGenerator).head(10);',
   'out> [[0,2],[1,3],[2,5],[3,7],[4,11],[5,13],[6,17],[7,19],[8,23],[9,29]];','in> kMeans([1..100].map((i)->random(3)), 3);',
   "out> ['class' => [1,2,2,0,1,2,1,1,1,2,2,1,2,2,0,2,2,2,2,0,1,2,2,0,0,2,2,0,0,1,1,1,2,1,1,0,0,1,2,1,0,0,1,1,0,2,0,0,2,0,2,1,0,2,2,2,2,0,0,0,0,2,0,2,1,1,2,1,2,1,1,2,1,1,2,1,2,2,1,1,1,0,0,1,0,2,1,0,0,0,2,1,2,0,2,0,0,0,2,1],'centers'=>[[0.6665325193635879,0.7556999787207572,0.5613454227005281],[0.2443210948840715,0.5534931165166199,0.26881193567533046],[0.4166380661866955,0.39474816192444917,0.81587936104954906]]].toMap;",
   'in> kMeans([1..100].map((i)->random(3)),[[0, 0, 1],[0, 1, 0],[1, 0, 0]]);',
   "out> ['class' => [0,0,0,0,1,1,2,1,1,0,1,2,0,1,1,2,0,1,2,0,2,0,1,2,0,1,2,2,0,0,2,0,0,1,2,1,2,0,2,0,0,0,2,0,2,0,0,0,2,2,0,0,1,1,1,1,0,0,0,0,2,2,0,0,0,2,2,2,1,2,1,0,2,1,0,2,0,2,2,0,1,0,1,1,2,0,1,2,1,1,1,1,1,1,1,0,2,0,1,0],'centers'=>[[0.39514006246463396,0.37581241712905467,0.76517500355839729],[0.30430735578580248,0.79431195316776149,0.44410747202533868],[0.74462707083800739,0.4206992971614517,0.38883330364679469]]].toMap;"
  ]].toMap,
 'fannkuch'=>
 ['16'],
 'fibonacci'=>
 ['See http://rosettacode.org/wiki/Fibonacci_n-step_number_sequences','Fibonacci n-step sequence',' n | values',
  '---+-----------------------------------------------------------------------------------------------------',
  ' 1 | 1 1  1  1  1   1   1   1    1    1    1    1     1     1     1      1      1      1       1       1',
  ' 2 | 1 1  2  3  5   8  13  21   34   55   89  144   233   377   610    987   1597   2584    4181    6765',
  ' 3 | 1 1  3  5  9  17  31  57  105  193  355  653  1201  2209  4063   7473  13745  25281   46499   85525',
  ' 4 | 1 1  4  7 13  25  49  94  181  349  673 1297  2500  4819  9289  17905  34513  66526  128233  247177',
  ' 5 | 1 1  5  9 17  33  65 129  253  497  977 1921  3777  7425 14597  28697  56417 110913  218049  428673',
  ' 6 | 1 1  6 11 21  41  81 161  321  636 1261 2501  4961  9841 19521  38721  76806 152351  302201  599441',
  ' 7 | 1 1  7 13 25  49  97 193  385  769 1531 3049  6073 12097 24097  48001  95617 190465  379399  755749',
  ' 8 | 1 1  8 15 29  57 113 225  449  897 1793 3578  7141 14253 28449  56785 113345 226241  451585  901377',
  ' 9 | 1 1  9 17 33  65 129 257  513 1025 2049 4097  8185 16353 32673  65281 130433 260609  520705 1040385',
  '10 | 1 1 10 19 37  73 145 289  577 1153 2305 4609  9217 18424 36829  73621 147169 294193  588097 1175617',
  '11 | 1 1 11 21 41  81 161 321  641 1281 2561 5121 10241 20481 40951  81881 163721 327361  654561 1308801',
  '12 | 1 1 12 23 45  89 177 353  705 1409 2817 5633 11265 22529 45057  90102 180181 360317  720545 1440913',
  '13 | 1 1 13 25 49  97 193 385  769 1537 3073 6145 12289 24577 49153  98305 196597 393169  786289 1572481',
  '14 | 1 1 14 27 53 105 209 417  833 1665 3329 6657 13313 26625 53249 106497 212993 425972  851917 1703781',
  '15 | 1 1 15 29 57 113 225 449  897 1793 3585 7169 14337 28673 57345 114689 229377 458753  917491 1834953',
  '16 | 1 1 16 31 61 121 241 481  961 1921 3841 7681 15361 30721 61441 122881 245761 491521  983041 1966066',
  '17 | 1 1 17 33 65 129 257 513 1025 2049 4097 8193 16385 32769 65537 131073 262145 524289 1048577 2097153',
  '18 | 1 1 18 35 69 137 273 545 1089 2177 4353 8705 17409 34817 69633 139265 278529 557057 1114113 2228225',
  '19 | 1 1 19 37 73 145 289 577 1153 2305 4609 9217 18433 36865 73729 147457 294913 589825 1179649 2359297',
  '20 | 1 1 20 39 77 153 305 609 1217 2433 4865 9729 19457 38913 77825 155649 311297 622593 1245185 2490369'],
 'fibonacciWord'=>
 ['N Length Entropy Word','',' 1         1 0.0000000000000 1',' 2         1 0.0000000000000 0',' 3         2 1.0000000000000 01',
  ' 4         3 0.9182958340545 010',' 5         5 0.9709505944547 01001',' 6         8 0.9544340029250 01001010',
  ' 7        13 0.9612366047229 0100101001001',' 8        21 0.9587118829771 010010100100101001010',
  ' 9        34 0.9596868937742 0100101001001010010100100101001001','10        55 0.9593160320544',
  '11        89 0.9594579158387','12       144 0.9594037542210','13       233 0.9594244469560','14       377 0.9594165437404',
  '15       610 0.9594195626031','16       987 0.9594184095152','17      1597 0.9594188499578','18      2584 0.9594186817240',
  '19      4181 0.9594187459837','20      6765 0.9594187214387','21     10946 0.9594187308140','22     17711 0.9594187272330',
  '23     28657 0.9594187286008','24     46368 0.9594187280783','25     75025 0.9594187282779','26    121393 0.9594187282017',
  '27    196418 0.9594187282308','28    317811 0.9594187282197','29    514229 0.9594187282239','30    832040 0.9594187282223',
  '31   1346269 0.9594187282229','32   2178309 0.9594187282227','33   3524578 0.9594187282228','34   5702887 0.9594187282227',
  '35   9227465 0.9594187282227','36  14930352 0.9594187282227','37  24157817 0.9594187282227'],
 'fourRings'=>
 ['Four rings:','     ___   ___   ___   ___','    /   \ /   \ /   \ /   \','   /     X     X     X     \',
  '  (   A (B) C (D) E (F) G   )','   \     X     X     X     /','    \___/ \___/ \___/ \___/',
  'The solutions for 1..7 (unique) are: ','  [3,7,2,1,5,4,6]','  [4,5,3,1,6,2,7]','  [4,7,1,3,2,6,5]','  [5,6,2,3,1,7,4]',
  '  [6,4,1,5,2,3,7]','  [6,4,5,1,2,7,3]','  [7,2,6,1,3,5,4]','  [7,3,2,5,1,4,6]','The solutions for 3..9 (unique) are: ',
  '  [7,8,3,4,5,6,9]','  [8,7,3,5,4,6,9]','  [9,6,4,5,3,7,8]','  [9,6,5,4,3,8,7]',
  'The number of solutions for 0..9 (nonunique) is: 2860'],
 'fourierDemo'=>
 ['FDLinux'=>
  ['log> Series               1.00*sin(1*t)-0.500*cos(2*t)+0.100*sin(5*t)',
   'was reconstructed as -0.0960*cos(0*t)+0.0381*cos(1*t)+0.604*sin(1*t)-0.524*cos(2*t)+0.118*sin(2*t);'],
  'FDWin64'=>
  ['log> Series               1.00*sin(1*t)-0.500*cos(2*t)+0.100*sin(5*t)',
   'was reconstructed as -0.104*cos(0*t)-0.158*cos(1*t)+0.656*sin(1*t)-0.696*cos(2*t)+0.143*sin(2*t);'],
  'FOLinux'=>
  ['log> Series               1.00*sin(1*t)-0.500*cos(2*t)+0.100*sin(5*t)',
   'was reconstructed as -0.0960*cos(0*t)+0.0381*cos(1*t)+0.604*sin(1*t)-0.524*cos(2*t)+0.118*sin(2*t);'],
  'FOWin64'=>
  ['log> Series               1.00*sin(1*t)-0.500*cos(2*t)+0.100*sin(5*t)',
   'was reconstructed as -0.104*cos(0*t)-0.158*cos(1*t)+0.656*sin(1*t)-0.696*cos(2*t)+0.143*sin(2*t);'],
  'LDLinux'=>
  ['log> Series               1.00*sin(1*t)-0.500*cos(2*t)+0.100*sin(5*t)',
   'was reconstructed as -0.0960*cos(0*t)+0.0381*cos(1*t)+0.604*sin(1*t)-0.524*cos(2*t)+0.118*sin(2*t);'],
  'LDWin64'=>
  ['log> Series               1.00*sin(1*t)-0.500*cos(2*t)+0.100*sin(5*t)',
   'was reconstructed as -0.104*cos(0*t)-0.158*cos(1*t)+0.656*sin(1*t)-0.696*cos(2*t)+0.143*sin(2*t);'],
  'LOLinux'=>
  ['log> Series               1.00*sin(1*t)-0.500*cos(2*t)+0.100*sin(5*t)',
   'was reconstructed as -0.0960*cos(0*t)+0.0381*cos(1*t)+0.604*sin(1*t)-0.524*cos(2*t)+0.118*sin(2*t);'],
  'LOWin64'=>
  ['log> Series               1.00*sin(1*t)-0.500*cos(2*t)+0.100*sin(5*t)',
   'was reconstructed as -0.104*cos(0*t)-0.158*cos(1*t)+0.656*sin(1*t)-0.696*cos(2*t)+0.143*sin(2*t);']].toMap,
 'fractalPlant'=>
 ['png hash: 7FCF082F1A2A06908E6F2D65F5BD60B9C824C0088706B125D07901BF0E17C8C9'],
 'fractran'=>
 ['0: 2^1 = 2','1: 3^1*5^1 = 15','2: 3^1*5^2*11^1 = 825','3: 5^2*29^1 = 725','4: 5^2*7^1*11^1 = 1925','5: 5^2*7^1*13^1 = 2275',
  '6: 5^2*17^1 = 425','7: 2^1*3^1*5^1*13^1 = 390','8: 2^1*3^1*5^1*11^1 = 330','9: 2^1*5^1*29^1 = 290',
  '10: 2^1*5^1*7^1*11^1 = 770','11: 2^1*5^1*7^1*13^1 = 910','12: 2^1*5^1*17^1 = 170','13: 2^2*3^1*13^1 = 156',
  '14: 2^2*3^1*11^1 = 132','15: 2^2*29^1 = 116','16: 2^2*7^1*11^1 = 308','17: 2^2*7^1*13^1 = 364','18: 2^2*17^1 = 68',
  '19: 2^2 = 4','20: 2^1*3^1*5^1 = 30','21: 3^2*5^2 = 225','22: 3^2*5^3*11^1 = 12375','23: 3^1*5^3*29^1 = 10875',
  '24: 3^1*5^3*7^1*11^1 = 28875','25: 5^3*7^1*29^1 = 25375','26: 5^3*7^2*11^1 = 67375','27: 5^3*7^2*13^1 = 79625',
  '28: 5^3*7^1*17^1 = 14875','29: 2^1*3^1*5^2*7^1*13^1 = 13650','30: 2^1*3^1*5^2*17^1 = 2550'],
 'generator'=>
 ['[529,576,625,676,784,841,900,961,1024,1089]'],
 'gol'=>
 [#12," █ ▀▄█▀▄▄█▀ ▄██▄▄▄▀█▄▀█ █  ▄▀▄█▀▀▄ █▀▄▀▀",
  "▀▄██▄█    ▀█▄▀▀█▄▄█   ▄█▄▄▄ █ ▄▄█▀▄▀▄█▄█",
  "█ █ ▀██▀▀█ ▄█▀▀██▄▀▀█ ▀▄█▀█ ▄▀███▀ ▀██▀ ",
  "  █▄    █▀▀ ▀█  █ ▀▄██▄█▄ ▀ ▀  ▀▄█▀▄█▀▀▀",
  "▄███▀▄██▀ ▀▀ █▄▄▀█ ▀█ ▀▀ ▄▀ █ ▀█▄█▄▀  ▀▀",
  " █▄█▀▄▀█▄▄█ ▀ ██ ▀▄██ ▀▄ ▀██ ▄█▄ ▀▄ ▀█ ▄",
  "▀█ █  ▀█   ▀  █▄  ▄  ▄ ▄▄▀█▄█ ▄█ █▀   ▄▄",
  "▀▀▀█▄ ▄ ▀▀▄▄ ▀▀▄ ▄▀ ▄▄▄▀█  █▄▄ ▄██  ▀█ ▀",
  "█▀ ▀▄▄██▄▄▄ ▄ ▀▄ ▄▄▀▄  ▄▀▄▀  ▀▀ ▀▀▀▄█▀██",
  " ▀▄█▀▄▀ ▄▄▀▀▄ ▀▀█▀ ▀ ▄▀ ▄▀██▀█▀  ▄█▄█  ▀",
  "█▄  ▄ ▀▄▀▀▄ ▄█▀█▀▄█▀▄ █ ▀ ▄ █████▀▄▄█▀▀▄",
  "▀█▀    ▄▄ ▀█ █▄▄▄▄▀▀██▄█▀▀██▀▀▀██ ██  █ ",
  "▀ █ ▄█▄▄█ ██▄ █▄ ▄ ▄▄█▀▀█▄ █▄██▄▀▄ ▀██▀█",
  "▀█▀█ █ ▄▀▄▀█▄▄▄█ ▄▄█ ▄▀█▄  ▀ ▄▀█ ▄▄█▄ ▀▄",
  "██ ▀ ▄ ▀▄▀ ▄▀█▄█▀█▄█▄ ▀▄▄▀▄▀█▀▄▀▄▀▄▀▄▄█▀",
  "▄▀ █▀▀█▀█▄ ▀▀ █▄▀ ▀▄█▄▄▄▀ ▀▄▀ ▄▄██▄  ██▄",
  " █ █▄▄ ███▀▄ ▀ ▄▀█ ▄▄▄▀▀▄▀  █ █ ██ ▀ ▄██",
  "██▄▄▄  ▄ █▀▄ █▄▄█  ███▄▄ ▄▀ ▀██  █▀▄   ▄",
  "▀ ▄▄█▀ ▀▀▀█▄▀███▄▄█▀█▀█████▄▄ ▀██▀▄█▄█  ",
  "█▀▄  ▀ ▀▀▄█▄▀▄▀▄▀  ██ █▀▀█▄▄█ ▀ ▄█▄█ ▀▀▀",#12,
  " █ ▀ ▀▀█▄       ▄█  ▄ █ █  ▄  █  ▄ ▄ █▀▀",
  "       ▄██▀          █▄   █ █      ▀   ▀",
  "█ ▄ ▄  ▀▀▀          ▀ ▀   ▄ █     ▀     ",
  "▄ ▀ ▄  ▀▀ ▀  ██▄▄ ▀     ▄▄   ██   ▀   ▀▀",
  "        ▀█▄  ▀   █    ▄▄▄█ ▀▄▀▀    ██▄▄█",
  "     ▄   ▄█▀    ▄▀▄ ▄▄  █▀   ▄ ▄  ▄████ ",
  "   █▄ ▄▄ ▀▀  ▀ ▄  ▀ ▀ ██    ▄▄▄▄ ▀▀  ▄▄ ",
  " ▀  ▄▄▄▀███  █ ▄▀▀███▄▄ ▄ ▄▄ ▄    ▀▄▀▀ ▀",
  " ▀▀▀    ▄▄▄  ▄▀▀ █ ▀▄ ▀▄▀ ▀▀ ▀▀▄  ▀     ",
  "▄█▄▄ ▄▄ ▄  ▄█▀▀    ████▀▄    ▀▀  ▀    ██",
  "▀ █▀▀▀▀▄▄ █▀   ▄  ▀▀▀ █   █           ▀ ",
  "  ▀    ██▀▀  ▄ ▄▄▄▄     ▀            ▀▀ ",
  "▀ ▀▀▀▀  ▄   ▄▄▄▄▄▀██     ▄ ▄      ▄     ",
  "   ▄   ▄ ▄       █ ▄ ▄  ▄▀██ ▄ ▄ █  ▄▄▀ ",
  "   ▄ ▄ ▀ █▄▄        ▄█▀▄▄▀█▀  ▄▀  ▄▄▄   ",
  " █ █      ▀██ ▄ ▀ ▄▄▄   ▀▄█▄█ █    ▀▄   ",
  " █ █▄▀▄▄   ▄▄ ▄▄ █ ▄   ▄▄▄ ▀█ █     ▀▄  ",
  "  ▄▄▄███   █ ▀  ▄█     ▀▀▀ ██      ▄▄  ▄",
  "▀ ▄▄ ▀▀▀                    █        ▀▀▀",
  "▀ ▄ █▄ ▄▀      ▄          ▄ ▄ ▄      ▀▀▀",#12,
  "▀▀▄▀ ▀          ▄█   ▀▄  █ █ ▄▀▀  ▄ ▀█▀▄",
  "          ▀         █ ▄▀ ▀▀ ██    ▀ ▀   ","▄▀ ▄   ▀ ▀            ▀    ▄█▀          ",
  "█      ▄    ▄▀ ▄▄▄      ▄█▄ ▀ ▀▄   ▄  ▄▀",
  "▀       █▀▀▄ ▀ ▀▄█▄    ▄    ▄▄▀   ▄▀   █",
  "           ▀    ▀▀█ ▄██ ▄▄       ▄    ▄ ",
  "  ▄█▄▀█▄▀▀▀   ▄ ▄▀  █ ▄▄▀   ▀▄▄▀▀██▄▄▄▄ ",
  "▄▄ █▄▄▄   █  ▄ █▀▀    ▄   ▄█ ▄▄   ▄██▀  ",
  "▄▄▀▀▀▀ ▀ ▄  ▄▀ █▄▀    ▀ █ ▀▀▄▀▀▄        ",
  " ▀    ▄█▀ █   ▀   ▀     ▀     ▀      ▄▀ ",
  "▀ ▄ ▄▄  ▀ ▀ ▀     ▀▄ ▄▀▄ █           ▄█▄",
  " ▄▄ ▄ █▄  ▀   ▀▀▄▀ ▄                    ",
  "   ██  ▀▀   ▀▄▄▄▄  ▄     ▄ ▄            ",
  "        ▀    ▀▀▀ ▀▄▀█▄▄ █     ▄ ▀▀▀  █  ",
  "  ▄ █ ▀ ▄█  ▄       ▄▄ ▄▄   ▀▄▄█▀ █▄▄▀  ",
  "▄▄ █     ▀▄ ▄█   ▄▄▄ ▀ ▀▀▄  ▀ ██  ▀▄▄   ",
  "▀▀ █ ▀▀▄   ▄▄▄█▀▀█  ▀  ▄ ▄    ▀▀    ▀▀  ",
  "▄  ▄    █ ▀▀▄▀▀▀▄█     ▀▄▀▄  ▄      █▄ ▄",
  "▀█ ▄▄▄▄█                    ▀▀      ▀▀▀▀",
  " ██ ▀▀ ▄▄                  ▀ █        ▀▀",#12,
  "█▄▄▀            ██   ▄▄  ▄ ▄ █▀     ▀▀▀█",
  "                      ██▀▀▀   █    ▀    ","▄▄                   ▀     ▄           ▄",
  "▀█      ▄▄  ▄▄ ▄▀▄      ██▄ ▀█▄▄      ▄ ",
  "█      ▀█▀▀██ ▀█      ▄ ▀▀   █▀   ▀▀  ▀▄",
  "         ▄▄     █ ▄ █ ▄ █▄       ▄▄     ",
  "  █▀ ▀█▄█▀▄      ▀  ▀▄ ▄▀▀  ▄███    ▀ █ ",
  " █    ▄▀       ▄ █   ▀▀█ ▄▀▀ ▄▄  ▀▄  ▄▀ ",
  "▄▄ ▄▄ ▄▄ ▄  ▀█ █▄▄      ▄ ▀▄▄  █   ▀    ",
  "▀▀    █▀▀ █▀   ▀                     ▄▄▄",
  "     █▀▀ █ █      ▄   █ █            ▄▄▄",
  " ▀█ █ █▀▄      ██ ▀ ▀                 ▀ ",
  "   ▄▄ ▀██   ▄▀▀ █ ▄▄▄            ▄      ",
  "             ▀▄  ▀▄ ▄▄ █▀▀       ▀▄ ▄▄▄ ",
  "   ▀▄█  ██▄        ▀▄▄ ▄█   ▄   ▀▀█ ▄▀  ",
  "▄█ █▀   ▀▀▀▀▄█ ▄ ▄██▄▀ ▀▄▀      █ ▀▄▄▄  ",
  "▀▀▄▀▄ █▄  ▄▄   ▀ ▄▄▀    ▀     ▀▀   ▀██  ",
  " ▄     ███▀▄▄▄▄█▄█▀    ▀▄█▀ ▄▄     ▄▀▀  ",
  " ▀ █ ▀ █▀                   ▀█      ▀   ","     ▄▄ ▀                 ▄ ▀▄          ",#12,
  " ▄█             ██   ▄▄  ▄▀ ▄█▀     ▄█▀ ",
  "▀▀                   ▄   █▀  ▀▀         ","▀▄                    ▀     ▄          ▄",
  " ▄▀    ▄    ▄▄ ▄▀      ▄▀ ▄▀▀▀ ▄        ",
  "█▀     █▄   ▄▄▄█▄      ██▄▀ ▀▄▄▀      ▀▄",
  "        ▄██▀   ▀█▀ ▀▄   ▀▀    ▄         ",
  " ▄██ █▀          ▀ ▀█▄▀▄ █▄▄█  ██    ▀▄▄",
  " ▀▀     ▀     ▄ ▀    ▀ █▄▄▀█  ▄▀  ▄  ▀▀ ",
  "███  ██▀ ▄▄▄▀█ █ ▀      ▀▀▀█▀▀ ▀        ",
  "▄▀▀     ▀ ▀▀  ▀▀                      █▄",
  "    ▄▀ ▀▀▀ ▀     ▄ ▄ ▄               ▄▄▄",
  " ██ ▀ ▀▀█      ▀▀  ▀                 ▀▀▀",
  "    ▀ █ ▄▀  ▄▀█▄█ ▄█    ▄               ",
  "             ▀   ▀▄▄▄▀██▀▄      ▄▀█▄▄█▄ ",
  "  ▄  █ ▄▀ ▀▄      ▄▀ ▄ ▄▀▄      ▄ █   ▀ ",
  "▀▀ █ ▀  ▀▄▄█▄█▀ ▄█   ▀ █▄█      ▄▄█  █  ",
  "▀▄▄█▀██▀  ▄█▀ ▀  ▄ ▄▀   ▄▄     ▀      █ ",
  "  ▄        ▄▄█▄█ ▄▄     ▄██▄▄▄     █ █  ",
  "  ▄ █ ▄▄ ▀  ▀▀▀▀▀            ▄▀         ","      ▀▀                    ██▄      ▄▄▄",
  #12,"▄▀█             ██       ▄ █▄       ▄▄▄▀",
  "██▀                  ▀▀ ▀██ ▀▀▀         ","█▄                         ▄▄▄          ",
  "███           ▄▄▄      ▄  ▄▀▀█▄         ",
  "▄█    ▀█▄▄▄▄▄▄   ▄    ▀   █▀ █▄▀       ▄",
  "       ▀▄  █▀▀ ▄ ▀  ▄▄ ▀▄█   ▀▀▄        ",
  "▄▀ ▀ ██  ▀         █  ▀▄▀█  █▀█ ▀     ▀▄",
  "█▀ ▀  ▄▄     ▄▄▄▄   ▀▀▄█     ▄██▀    ▀▀▀",
  "▀ ▀▄ █ ▀▄▄▀▀▀█ █▀      ▀ ▄ ▄ ▀▀        ▄",
  "▄▄▀    ▄   █▀ ▀▀                      █▄","█  ▄▄   ▀▄      ▄ ▄ ▄                █ ▄",
  "▄██  ▀▄▀█▄    ▄ █ ▀ ▀                ▀▄▀",
  "     █ ▄▀▀  ▄▀▀ █▀██▄ ▄ ▄               ",
  "             ▀▀▀▀▀▄▄▄▀   █       ▀▀ ▄▀█ ",
  " ▄▄  ▄▀▄▄▄▄▄▄     ▄ ▄▀ ▄ █        █▄▀ ▀ ",
  "▄█ █  ▀▄██   ▀▀▄██▀   ▄█ █▀     █▄█▀ ▄▄▄",
  " █▄▄   █ ▀▄▄ ▄▄ ▀▀▀    ▀▄▄▄     ▀▀   ███",
  " ▀ ▀      ▀▄ ▀ ▀ █      ▄  ▄█▄       ▀▀ ",
  "   ▄ ▀▄▄▄  ▀ ▄▄▄▀▀       ▀▀▀▄▄█         ",
  "     ▀▀▀                   ▄         ▄▀▄",#12,
  " ▀▀▄            ██      ▄▄ ▀        ▀▄▄▀","  █                     █ ▄▄▀█       ▀ ▄",
  "  ▄                       ▀█▀▄         █","               █          █            ▀",
  "▄▄    ▀▀ ██▀▀█▀▀▀        ███   █       ▀",
  "▀     ▄█▄ ▄▄ ▀▀ ▀   ▄▄▄  ▀█ ▄▀ █        ",
  "▀   ▀██▀           █ █▀▄ ▄▀ █ ▀ ▄    ▄ ▀",
  " ▀▄  ▀▄█   ▄ ▄▀▀▄   ▀█ █▄       █     █ ",
  "▀█▄▄█▀▄▀▄█▀▀          ▀▀▀   ▀▀ ▀       █",
  "▄█▀     ▀ ▀██▀▀▀                     ▄█ ",
  "  ▄▄▄  ▄▀▄                          ▄█ ▄",
  "▄ ▄ ▀██▀     ▄▄ █                    ▀▄▄",
  " ▀   ▀▄ ▄▀  ▄▀▀ ▀   █▄                  ",
  "             ▀███▄▄▄▄█  ██▄      ▄▄ ▄▀█▄",
  " ▄▄  ▄▀▀▀▀██▄▄    █▄ ▀▄  █▀       ▀ █   ",
  " ▄ ▀▀ █   ▄▀▀▀█   ▀▀  ▄█ ██    ▄▀  ▄█▄▀▀",
  " ▄ █  ▀▀▄█▄▄▄▄█▄  █   ▀▀▄▄▀     ▀ ▀ █   ",
  "▀▀ ▀      █▄▄▀  ▀▄▄     ▀▄▀ ▀█       ▀ ▀",
  "    ▄ ▀▀▄   ▀ ███▀       ▀█▄▄▄█         ",
  "▄    ▀▄ ▀     ▀             ▀▀        ▀▄",#12,
  " █▀▄            ██      ▄▄  ▄       ▄█▄▀",
  "  ▀▀                   ▀▀ █▀▀█       ▀▄ ","█                        ▀   ▀        ██",
  "          ▄▄▄▄            ▀▀            ",
  "█▄    ▄▄▀█ ▀▀▀ ▀█       ▄   ▄  ▄▄      ▄",
  "█▀    ▀▀▄  ▀▀▀▀     ▄▀▄   ▄ █  █▀      ▄",
  "▄   ▀   ▀          █   █▄▀▀▄▀▄ █      ▄▄",
  "  ▄ ▄▀ █   ▄▄ ██    ▄█ ▀       ██▀   ▀█ ",
  "    █ ▄  ▀ ▀▀▄▄       ▀▄▀             ██",
  "▄▄▄    ▀▀▄█  ▀█                      ██▄",
  "▀▀▀█▄  ▄▀                           ▄▄ ▀",
  "██▀    █▀    ▄▄▀▄▄                  ▀▀▄▄",
  "▀▀   ▀ ▀    █ ▀ ▄   ██                 ▀",
  "       ▄▄▄▄  █    █▄ ▄█ ▀ ▀      ▄▄ ▄▀██",
  "  ▄▄▄▄▀▀█▀   ▀█▀▀▄  ▄▀█          ▀▀ █   ",
  "▀▀▄██ █   ▄▄▄ █▄  ██   ▀   ▄   ▄▄▄    █ ",
  " ▄ ▄▄ ▀█▄  ▄█  ▄ ▄    ▀ ▄ █▄       ▄▄▄  ",
  "█▀        ▄ ▄ ▄▀▀ █     █ ▀▄██▄         ",
  "     ▄▄▀▄   ▀ ▀  ▄▀      █▄   █         ","▄▄   ▀ ▀      ▀             ▄ ▀       ▄█",
  #12,"▄▄ ▄            ██     ▄▄▄▄ ▄▄      █   ",
  "  ▀▀                   ▀█ █  █▄     ▀▄▄ ","█                         ▄          ▀▄ ",
  "         ▄▄▀▀▄▄                        ▀","▀▀    ▄▀▀█   ▀▀▀█              ▄▄      █",
  "▄▄    ▀ ▄   ██      ▄█▄  ▄▄ ███▄       ▄",
  "                   ▀█ ▀█ ██▄█▀ █▀    ▄█▄",
  "   ▄▄▄█ ▄ ▄▄▄▀██    ▄█ █▀      ▄ █   ▀  ",
  "    ▀▄ ▄▄▄██  ▄▀     ▀▀█             ▀  ",
  " ▀ ▄   █▀ █  ▄▄▀                     ▄  ","    █  ▄▀▀                          █▄▄▄",
  "  ▀▀  ▀█▀    ▄█▀█                   ▀▄▄ ",
  " ▀    ▀     █ ▀ ▀▀ ▄█▀▄               ▀ ",
  "      ▄ ▀▀▄ ██ ▄ ██▄▄ ▀▀         ▄▄ ▄▀ █",
  " ▄▄▀▀▀▀ ▄▄▀  ▀ ▀████▄ ▄█         ▀▀▄▀▄  ",
  " █▄ ▄ █▀   █▄ █▄ ▀▄▄▀           █    ▀ █",
  "▄▄▄   █▄█ ▀▄▄ ▀█▀▄▀    ▄ ▀█ ▄   ▀   █▀  ",
  "██▀        ▄▀▀█▀▀ █▄   ▀█ █▄  █     ▀   ",
  "     ▄▀▀▄  ▀ ▄   ▀▀     ▀█▄▀▀▄██        ",
  " ▄▄  ▀ ▀                     ▀        ▀▀",#12,
  "▀▄ ▄            ██     ▄▀▀▄▄▄▄     ▄▄▄  ",
  " ▀▀▀                   ▄▄ ▀  ▄▄     █▄▄ ","▄                        ▀           ▀▄ ",
  "         ▄██▀▀                         █","▀     ▄▀ ▄  ▄▀  █            ▄▄▄       █",
  "▄      ▀    ██     ▄▀▀▀▄▄▄▄▀▀   █      █",
  "              ▄    █▄  ▀    ▄▄▄▄▀    █ ▄",
  "   ▄█ ██ ▄▄▀█▀ ▀▄   ▄▀ ▀ ▀▀▀    ▄    ▀  ",
  "   ▀  ▄▄     ▀▄█    ▀▀ █▀               ","       ▄  ▄  ▀▄▀                        ",
  "   ▀█▄▄▀▀█     ▄                   ▄█ ▄ ",
  "  ▄▀  ▀ █    ▀▀ ▀                   ▀▄▄▀",
  "           ▄█ ▀ █▀ ██▀▄▄             ▀█ ",
  "    ▄ ▄▄ ▀▄   ▀▄▀▀  ▄ ██         ▄▄ ▄▄█ ",
  "▄▄███▀▀▀▄▄█▀▀▀▄▀    ▄███         █▄▄▀█▄ ",
  " ▄▄▀ ▀█▀▀ ███▀▀   ▄▄▀▀         ▄▄▄  █▄  ",
  "▄ ▄▀  █ ██▀▄▄     █▀   ▄ ▀█▀       ▄█▀  ",
  "▄ ▄    ▀   ▄  ▄ █ ▀█   ▀▀ ▀ ▄▀▄        ▀",
  "     ▄▀▀▄   ▀    ▀▀▀    █▄▄▄▀  ▄        ","      ▀                      ▀          "],
 'grayCode'=>
 ["decimal ┃ binary ┃ Gray code","━━━━━━━━╋━━━━━━━━╋━━━━━━━━━━",
  " 0      ┃     0  ┃     0"," 1      ┃     1  ┃     1"," 2      ┃    10  ┃    11"," 3      ┃    11  ┃    10",
  " 4      ┃   100  ┃   110"," 5      ┃   101  ┃   111"," 6      ┃   110  ┃   101"," 7      ┃   111  ┃   100",
  " 8      ┃  1000  ┃  1100"," 9      ┃  1001  ┃  1101","10      ┃  1010  ┃  1111","11      ┃  1011  ┃  1110",
  "12      ┃  1100  ┃  1010","13      ┃  1101  ┃  1011","14      ┃  1110  ┃  1001","15      ┃  1111  ┃  1000",
  "16      ┃ 10000  ┃ 11000"],
 'grep'=>
 ['FDLinux'=>
  ['Usage: <#>/demos/grep.mnh pattern [options] [filePattern1,[filePattern2,...]]','if no file pattern is given, * is assumed',
   'Options: -i  case insensitive matching','         -n# show # additional lines before and after',
   '         -l  only list files','         -r  recurse subdirectories'],
  'FDWin64'=>
  ['Usage: <#>\demos\grep.mnh pattern [options] [filePattern1,[filePattern2,...]]','if no file pattern is given, * is assumed',
   'Options: -i  case insensitive matching','         -n# show # additional lines before and after',
   '         -l  only list files','         -r  recurse subdirectories'],
  'FOLinux'=>
  ['Usage: <#>/demos/grep.mnh pattern [options] [filePattern1,[filePattern2,...]]','if no file pattern is given, * is assumed',
   'Options: -i  case insensitive matching','         -n# show # additional lines before and after',
   '         -l  only list files','         -r  recurse subdirectories'],
  'FOWin64'=>
  ['Usage: <#>\demos\grep.mnh pattern [options] [filePattern1,[filePattern2,...]]','if no file pattern is given, * is assumed',
   'Options: -i  case insensitive matching','         -n# show # additional lines before and after',
   '         -l  only list files','         -r  recurse subdirectories'],
  'LDLinux'=>
  ['Usage: <#>/demos/grep.mnh pattern [options] [filePattern1,[filePattern2,...]]','if no file pattern is given, * is assumed',
   'Options: -i  case insensitive matching','         -n# show # additional lines before and after',
   '         -l  only list files','         -r  recurse subdirectories'],
  'LDWin64'=>
  ['Usage: <#>\demos\grep.mnh pattern [options] [filePattern1,[filePattern2,...]]','if no file pattern is given, * is assumed',
   'Options: -i  case insensitive matching','         -n# show # additional lines before and after',
   '         -l  only list files','         -r  recurse subdirectories'],
  'LOLinux'=>
  ['Usage: <#>/demos/grep.mnh pattern [options] [filePattern1,[filePattern2,...]]','if no file pattern is given, * is assumed',
   'Options: -i  case insensitive matching','         -n# show # additional lines before and after',
   '         -l  only list files','         -r  recurse subdirectories'],
  'LOWin64'=>
  ['Usage: <#>\demos\grep.mnh pattern [options] [filePattern1,[filePattern2,...]]','if no file pattern is given, * is assumed',
   'Options: -i  case insensitive matching','         -n# show # additional lines before and after',
   '         -l  only list files','         -r  recurse subdirectories']].toMap,
 'hailstone'=>
 ['See http://rosettacode.org/wiki/Hailstone_sequence','Series starting @27 has 112 elements',
  'Starting with: [27,82,41,124] and','  ending with: [8,4,2,1]','Max length=351 for starting value 77031'],
 'hamming'=>
 ['The first 20 Hamming numbers are: [1,2,3,4,5,6,8,9,10,12,15,16,18,20,24,25,27,30,32,36]',
  'The 1691st Hamming number is    : 2125764000'],
 'happyNumbers'=>
 ['[1,7,10,13,19,23,28,31,32,44]'],
 'harshad'=>
 [' 1',' 2',' 3',' 4',' 5',' 6',' 7',' 8',' 9','10','12','18','20','21','24','27','30','36','40','42',
  'The first Harshad Number >1000 is 1002'],
 'hashJoin'=>
 ['Table A:',"Age ┃ Name","━━━━╋━━━━━━━","27  ┃ Jonah","18  ┃ Alan","28  ┃ Glory",
  "18  ┃ Popeye","28  ┃ Alan",'','Table B:',"Character ┃ Nemesis",
  "━━━━━━━━━━╋━━━━━━━━","Jonah     ┃ Whales","Jonah     ┃ Spiders",
  "Alan      ┃ Ghosts","Alan      ┃ Zombies","Glory     ┃ Buffy","Me        ┃ Things",'','Inner join:',
  "A.Age ┃ A.Name ┃ B.Character ┃ B.Nemesis",
  "━━━━━━╋━━━━━━━━╋━━━━━━━━━━━━━╋━━━━━━━━━━",
  "27    ┃ Jonah  ┃ Jonah       ┃ Whales","27    ┃ Jonah  ┃ Jonah       ┃ Spiders",
  "18    ┃ Alan   ┃ Alan        ┃ Ghosts","18    ┃ Alan   ┃ Alan        ┃ Zombies",
  "28    ┃ Glory  ┃ Glory       ┃ Buffy","28    ┃ Alan   ┃ Alan        ┃ Ghosts",
  "28    ┃ Alan   ┃ Alan        ┃ Zombies",'','Outer join:',"A.Age ┃ A.Name ┃ B.Character ┃ B.Nemesis",
  "━━━━━━╋━━━━━━━━╋━━━━━━━━━━━━━╋━━━━━━━━━━",
  "27    ┃ Jonah  ┃ Jonah       ┃ Whales","27    ┃ Jonah  ┃ Jonah       ┃ Spiders",
  "18    ┃ Alan   ┃ Alan        ┃ Ghosts","18    ┃ Alan   ┃ Alan        ┃ Zombies",
  "28    ┃ Glory  ┃ Glory       ┃ Buffy","18    ┃ Popeye ┃             ┃",
  "28    ┃ Alan   ┃ Alan        ┃ Ghosts","28    ┃ Alan   ┃ Alan        ┃ Zombies",
  "      ┃        ┃ Me          ┃ Things"],
 'heart'=>
 ['FDWin64'=>
  ['png hash: D72D27ADDF709EAB92523C740DE9D69DFF937E02E773219AAB5D331D52ABBDF5'],
  'FOWin64'=>
  ['png hash: D72D27ADDF709EAB92523C740DE9D69DFF937E02E773219AAB5D331D52ABBDF5']].toMap,
 'helloWorld'=>
 ['Hello world'],
 'helloWorldHttp'=>
 ['Server responded with code: 200',
  'Hello world.<br><br>protocol: HTTP/1.1<br>method: GET<br>path: /page.html<br><br>Host: 127.0.0.1:65432<br>Connection: close'],
 'hereDoc'=>
 ['','  This is a simple text...','       with a \ which would have to be escaped otherwise.','    And indentations of course.'],
 'hofstadterConway'=>
 ['range 2^ 0..2^ 1 max. a(n)/n= 1.00000000000000 @i=      1','range 2^ 1..2^ 2 max. a(n)/n= 0.66666666666667 @i=      3',
  'range 2^ 2..2^ 3 max. a(n)/n= 0.66666666666667 @i=      6','range 2^ 3..2^ 4 max. a(n)/n= 0.63636363636364 @i=     11',
  'range 2^ 4..2^ 5 max. a(n)/n= 0.60869565217391 @i=     23','range 2^ 5..2^ 6 max. a(n)/n= 0.59090909090909 @i=     44',
  'range 2^ 6..2^ 7 max. a(n)/n= 0.57608695652174 @i=     92','range 2^ 7..2^ 8 max. a(n)/n= 0.56741573033708 @i=    178',
  'range 2^ 8..2^ 9 max. a(n)/n= 0.55945945945946 @i=    370','range 2^ 9..2^10 max. a(n)/n= 0.55493741307371 @i=    719',
  'range 2^10..2^11 max. a(n)/n= 0.55010087424344 @i=   1487','range 2^11..2^12 max. a(n)/n= 0.54746289264757 @i=   2897',
  'range 2^12..2^13 max. a(n)/n= 0.54414474786396 @i=   5969','range 2^13..2^14 max. a(n)/n= 0.54244270878036 @i=  11651',
  'range 2^14..2^15 max. a(n)/n= 0.54007109751159 @i=  22223','range 2^15..2^16 max. a(n)/n= 0.53878402058426 @i=  45083',
  'range 2^16..2^17 max. a(n)/n= 0.53704365699987 @i=  89516','Mallows Number: 1489'],
 'hofstadter_sequences'=>
 ['(OEIS A005228) R: 1, 3, 7, 12, 18, 26, 35, 45, 56, 69, 83, 98, 114, 131, 150, 170, 191, 213, 236, 260',
  '(OEIS A030124) S: 2, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25',
  '(OEIS A005206) G: 0, 1, 1, 2, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 9, 10, 11, 11, 12',
  '(OEIS A005374) H: 0, 1, 1, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8, 9, 10, 10, 11, 12, 13, 13',
  '(OEIS A005378) F: 1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 11, 11, 12',
  '(OEIS A005379) M: 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10, 11, 11, 12',
  '(OEIS A005185) Q: 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 6, 8, 8, 8, 10, 9, 10, 11, 11, 12'],
 'huffmann'=>
 ['See http://rosettacode.org/wiki/Huffman_coding',' code                char'," 1101010100010000110 \"Å\"",
  " 1101010100010000111 \"í\""," 1101010100010011010 \"ô\""," 1101010100010011011 \"å\"","  110101010001000010 \"û\"",
  "  110101010001001100 \"ç\"","   11010101000001000 \"â\"","   11010101000001001 \"ê\"","   11010101000100000 \"ä\"",
  "   11010101000100100 \"ñ\"","   11010101000100101 \"ó\"","   11010101000100111 \"á\"","    1101010100000101 \"ü\"",
  "    1101010100010001 \"ö\"","     110101010000011 \"è\"","      11010101000000 'X'","      11010101000101 'Q'",
  "       1101010100001 'U'","       1101010100011 \"é\"","       1101010111000 'Y'","       1101010111001 'Z'",
  "        110101011101 'V'","         00110010000 'I'","         00110010001 'O'","         11010101001 'W'",
  "         11010101010 'F'","         11010101011 'J'","         11010101100 'N'","         11010101101 'E'",
  "         11010101111 'K'","          0011001001 'R'","          0111100010 'D'","          0111100011 'G'",
  "          0111100110 'T'","          0111100111 'H'","          1101010000 'L'","          1101010001 'P'",
  "           001100000 'A'","           001100001 'B'","           001100010 'j'","           001100011 'q'",
  "           001100101 'C'","           011110000 'S'","           011110010 'M'","           110101001 'x'",
  "            00110011 'z'","             0111101 'w'","             1101000 'v'","             1101001 'k'",
  "             1101011 'f'","              001101 'y'","              011111 'b'","              110110 'h'",
  "              110111 'm'","              111010 'p'","              111011 'g'","               00111 'u'",
  "               01110 'd'",'               10100 "''"',"               10101 'c'","               11100 'l'",
  "                0010 'o'","                0110 't'","                1000 'r'","                1001 'n'",
  "                1011 'a'","                1100 'i'","                1111 'e'","                 000 's'",
  '                 010 #10'],
 'integerPartitionFunction'=>
 ['   1                                                                1',
  '   2                                                              1   1',
  '   3                                                            1   1   1',
  '   5                                                         1    2   1   1',
  '   7                                                       1    2   2   1   1',
  '  11                                                    1    3    3   2   1   1',
  '  15                                                 1     3    4   3   2   1   1',
  '  22                                              1     4    5    5   3   2   1   1',
  '  30                                           1     4     7    6   5   3   2   1   1',
  '  42                                        1     5     8    9    7   5   3   2   1   1',
  '  56                                     1     5    10    11   10   7   5   3   2   1   1',
  '  77                                  1     6    12    15   13   11   7   5   3   2   1   1',
  ' 101                               1     6    14    18    18   14  11   7   5   3   2   1   1',
  ' 135                            1     7    16    23    23   20   15  11   7   5   3   2   1  1',
  ' 176                         1     7    19    27    30    26   21  15  11   7   5   3   2   1 1',
  ' 231                      1     8    21    34    37    35   28   22  15  11   7   5   3   2  1 1',
  ' 297                   1     8    24    39    47    44    38   29  22  15  11   7   5   3   2 1 1',
  ' 385                1     9    27    47    57    58    49   40   30  22  15  11   7   5   3  2 1 1',
  ' 490             1     9    30    54    70    71    65    52   41  30  22  15  11   7   5   3 2 1 1',
  ' 627          1    10    33    64    84    90    82    70   54   42  30  22  15  11   7   5  3 2 1 1',
  ' 792        1   10    37    72   101   110   105    89    73   55  42  30  22  15  11   7   5 3 2 1 1',
  '1002      1  11    40    84   119   136   131   116    94   75   56  42  30  22  15  11   7  5 3 2 1 1',
  '1255    1  11   44    94   141   163   164   146   123    97   76  56  42  30  22  15  11   7 5 3 2 1 1',
  '1575  1  12  48   108   164   199   201   186   157   128   99   77  56  42  30  22  15  11  7 5 3 2 1 1',
  '1958 1 12  52  120   192   235   248   230   201   164   131  100  77  56  42  30  22  15  11 7 5 3 2 1 1'],
 'ipcTest'=>
 ['[2,3,7,11,13,83,28297]','?','[2,5,97,569,13901,1513651]'],
 'isaac'=>
 ['cx8OW1Z3GUIwLXegL2g=','This is a test'],
 'jaro'=>
 ["The Jaro distance of 'MARTHA'","                 and 'MARHTA' is 0.94444","The Jaro distance of 'DIXON'",
  "                 and 'DICKSONX' is 0.76667","The Jaro distance of 'JELLYFISH'","                 and 'SMELLYFISH' is 0.89630"
 ],
 'josephus'=>
 ['Prisoners: 41','Step size: 3','Survivors: [30]'],
 'json'=>
 ["['Reiten','Golfen','Lesen']",'2000000.0',
  '{"Herausgeber":"Xema","Nummer":"1234-5678-9012-3456","Deckung":2000000.0,"Waehrung":"EURO"}'],
 'kaprekar'=>
 ['The Kaprekar numbers up to 10000 are [1,9,45,55,99,297,703,999,2223,2728,4879,4950,5050,5292,7272,7777,9999]'],
 'knightsTour'=>
 ['16 31 12 33 36 49 10 63 ','13 34 15 50 11 64 37 48 ','30 17 32 35 54 47 62  9 ','23 14 51 28 61 38 53 46 ',
  '18 29 22 39 52 55  8 59 ',' 3 24 27 56 21 60 45 42 ','26 19  2  5 40 43 58  7 ',' 1  4 25 20 57  6 41 44 '],
 'kochCurve'=>
 ['png hash: 36F25FBA2E254E5D50F88800CFBF27654F2A3A4BECFDF36B16307669E1B6AD78'],
 'lastSundays'=>
 ['25.01.2015','22.02.2015','29.03.2015','26.04.2015','31.05.2015','28.06.2015','26.07.2015','30.08.2015','27.09.2015',
  '25.10.2015','29.11.2015','27.12.2015'],
 'levenshtein'=>
 ['3'],
 'lindenmayer'=>
 [
  '[[0,0],[0.0,1.0],[1.0,1.0],[1.0,0.0],[3.0,0.0],[3.0,1.0],[2.0,1.0],[2.0,2.0],[3.0,2.0],[3.0,3.0],[1.0,3.0],[1.0,2.0],[0.0,2.0],[0.0,4.0],[1.0,4.0],[1.0,5.0],[0.0,5.0],[0.0,7.0],[1.0,7.0],[1.0,6.0],[2.0,6.0],[2.0,7.0],[3.0,7.0],[3.0,5.0],[2.0,5.0],[2.0,4.0],[4.0,4.0],[5.0,4.0],[5.0,5.0],[4.0,5.0],[4.0,7.0],[5.0,7.0],[5.0,6.0],[6.0,6.0],[6.0,7.0],[7.0,7.0],[7.0,5.0],[6.0,5.0],[6.0,4.0],[7.0,4.0],[7.0,2.0],[6.0,2.0],[6.0,3.0],[4.0,3.0],[4.0,2.0],[5.0,2.0],[5.0,1.0],[4.0,1.0],[4.0,0.0],[6.0,0.0],[6.0,1.0],[7.0,1.0],[7.0,0.0]]'
 ],
 'listAllBuiltinFunctions'=>
 ['files.allFiles','files.allFolders','files.appendFileLines','files.byteStreamIterator','files.changeFileExt','files.copyFile',
  'files.deleteDir','files.deleteFile','files.exec','files.execAsync','files.execPipeless','files.expandedFileName',
  'files.extractFileDirectory','files.extractFileExt','files.extractFileName','files.extractFileNameOnly','files.fileContents',
  'files.fileExists','files.fileInfo','files.fileLineIterator','files.fileLines','files.fileStats','files.files',
  'files.folderExists','files.folders','files.formatJson','files.moveFile','files.newFileOutputStream','files.parseJson',
  'files.readDatastore','files.readXml','files.readXmlFile','files.relativeFileName','files.setFileDate',
  'files.systemSpecificFilename','files.teeExec','files.writeFile','files.writeFileLines','ftp.ftpConnect','ftp.ftpDeleteDir',
  'ftp.ftpDeleteFile','ftp.ftpDownload','ftp.ftpMakeDir','ftp.ftpUpload','ftp.getListing','ftp.setLogging','ftp.setTimeout',
  'gui.anyFormShowing','gui.showDialog','gui.showTable','gui.showVariable','http.encodeRequest','http.extractParameters',
  'http.extractPath','http.extractRawParameters','http.formatHtmlPage','http.httpDelete','http.httpError','http.httpGet',
  'http.httpPost','http.httpPut','http.isServerRunning','http.openUrl','http.startHttpServer','http.wrapTextInHttp',
  'imig.calculateThumbnail','imig.closeImage','imig.displayImage','imig.executeTodo','imig.executeWorkflow',
  'imig.expandImageGeneration','imig.getScreenSize','imig.imageDisplayClosedByUser','imig.imageDisplaySize',
  'imig.imageJpgRawData','imig.imageRawData','imig.imageSize','imig.listManipulations','imig.loadImage','imig.randomIfs',
  'imig.renderPlotToCurrentImage','imig.resizeImage','imig.saveImage','imig.validateWorkflow','ipc.assertUniqueInstance',
  'ipc.isIpcServerRunning','ipc.sendIpcRequest','ipc.startIpcServer','lists.chunkMap','lists.cross','lists.elementFrequency',
  'lists.filter','lists.flatMap','lists.flatten','lists.get','lists.getAll','lists.getInner','lists.head','lists.indexOf',
  'lists.intersect','lists.isSubsetOf','lists.leading','lists.map','lists.map2list','lists.mergeMaps','lists.minus',
  'lists.pFilter','lists.pMap','lists.reverseList','lists.size','lists.sort','lists.sortPerm','lists.tail','lists.trailing',
  'lists.transpose','lists.trueCount','lists.union','lists.unique','lists.vectorIfThenElse','lists.zip','math.DFT','math.FFT',
  'math.abs','math.arccos','math.arcsin','math.arctan','math.arctan2','math.argMax','math.argMin','math.bitXor',
  'math.calculateFourierCoefficients','math.ceil','math.composeDigits','math.convolve1D','math.cos','math.digits','math.divMod',
  'math.euklideanNorm','math.exp','math.factorize','math.floor','math.gcd','math.hammingWeight','math.iDFT','math.iFFT',
  'math.integrate','math.isInfinite','math.isNan','math.isPrime','math.isqrt','math.kMeans','math.ln','math.max','math.min',
  'math.modularInverse','math.newBSpline','math.newFourierSeries','math.newLinearInterpolator','math.newLocalInterpolator',
  'math.newSplineInterpolator','math.permutationIterator','math.permutations','math.pi','math.powMod','math.primeGenerator',
  'math.primes','math.rangeGenerator','math.round','math.shiftRight','math.sign','math.sin','math.sqr','math.sqrt',
  'math.subSets','math.tan','mnh.COMPARATOR_EQ','mnh.COMPARATOR_GEQ','mnh.COMPARATOR_GRT','mnh.COMPARATOR_LEQ',
  'mnh.COMPARATOR_LISTEQ','mnh.COMPARATOR_LSS','mnh.COMPARATOR_NEQ','mnh.OPERATOR_AND','mnh.OPERATOR_CONCAT',
  'mnh.OPERATOR_CONCATALT','mnh.OPERATOR_DIVINT','mnh.OPERATOR_DIVREAL','mnh.OPERATOR_IN','mnh.OPERATOR_LAZYAND',
  'mnh.OPERATOR_LAZYOR','mnh.OPERATOR_MINUS','mnh.OPERATOR_MOD','mnh.OPERATOR_MULT','mnh.OPERATOR_NEGATE_ARITHMETIC',
  'mnh.OPERATOR_NEGATE_LOGICAL','mnh.OPERATOR_NOT_IN','mnh.OPERATOR_OR','mnh.OPERATOR_ORELSE','mnh.OPERATOR_PLUS',
  'mnh.OPERATOR_POT','mnh.OPERATOR_STRCONCAT','mnh.OPERATOR_UNARY_PLUS','mnh.OPERATOR_XOR','mnh.arity','mnh.executor',
  'mnh.group','mnh.groupToList','mnh.hash','mnh.helpOnMain','mnh.inspect','mnh.inspectAll','mnh.interpret','mnh.listBuiltin',
  'mnh.listSideEffects','mnh.mnhInfo','mnh.myPath','mnh.ord','mnh.parameterNames','mnh.runScript','mnh.sandBoxExecute',
  'mnh.sleep','mnh.sleepUntil','plot.addAnimationFrame','plot.addPlot','plot.clearAnimation','plot.display','plot.drawText',
  'plot.drawTextAbsolute','plot.getOptions','plot.plot','plot.plotClosed','plot.plotImageSize','plot.plotRasterImage',
  'plot.postDisplay','plot.removePlot','plot.renderToFile','plot.renderToRawData','plot.renderToString','plot.resetOptions',
  'plot.setOptions','regex.matchComposite','regex.matches','regex.replace','regex.split','regex.validateRegex',
  'strings.ansiToUtf8','strings.base64decode','strings.base64encode','strings.base92decode','strings.base92encode',
  'strings.byteLength','strings.byteToChar','strings.bytes','strings.charSet','strings.chars','strings.clean','strings.compress',
  'strings.copy','strings.decompress','strings.diff','strings.diffStats','strings.escape','strings.escapeJava',
  'strings.escapePascal','strings.format','strings.formatTabs','strings.formatTime','strings.hasPrefix','strings.isAscii',
  'strings.isUtf8','strings.join','strings.length','strings.lower','strings.md5','strings.parseTime','strings.pos',
  'strings.repeatString','strings.replace','strings.replaceOne','strings.reverseString','strings.sha256','strings.split',
  'strings.stringIterator','strings.tokenSplit','strings.trim','strings.trimLeft','strings.trimRight','strings.unbrace',
  'strings.upper','strings.utf8ToAnsi','system.ask','system.assert','system.assertGuiStarted','system.async','system.beep',
  'system.callMemoryCleaner','system.changeDirectory','system.clearPrint','system.closeQueue','system.deserialize',
  'system.driveInfo','system.fail','system.freeConsole','system.future','system.getCPULoadPercentage','system.getEnv',
  'system.getTaskInfo','system.halt','system.hideConsole','system.intRandom','system.intRandomGenerator','system.isGuiStarted',
  'system.isaacRandomGenerator','system.localAsync','system.log','system.newQueue','system.note','system.peekFuture',
  'system.print','system.printDirect','system.printf','system.put','system.random','system.randomGenerator','system.resetRandom',
  'system.scriptTime','system.serialize','system.setExitCode','system.showConsole','system.systime','system.time','system.try',
  'system.vanDerCorputGenerator','system.warn','system.writeAllDataStores','system.writeDataStores','typecast.isBoolean',
  'typecast.isBooleanCollection','typecast.isBooleanList','typecast.isBooleanSet','typecast.isCollection',
  'typecast.isExpression','typecast.isInt','typecast.isIntCollection','typecast.isIntList','typecast.isIntSet',
  'typecast.isIterable','typecast.isIterableExpression','typecast.isList','typecast.isMap','typecast.isNumeric',
  'typecast.isNumericCollection','typecast.isNumericList','typecast.isNumericSet','typecast.isReal','typecast.isRealCollection',
  'typecast.isRealList','typecast.isRealSet','typecast.isScalar','typecast.isSet','typecast.isStatefulExpression',
  'typecast.isStatelessExpression','typecast.isString','typecast.isStringCollection','typecast.isStringList',
  'typecast.isStringSet','typecast.isVoid','typecast.softCast','typecast.toBoolean','typecast.toBuiltin','typecast.toExpression',
  'typecast.toGenerator','typecast.toInt','typecast.toIterableExpression','typecast.toList','typecast.toMap','typecast.toReal',
  'typecast.toSet','typecast.toString','typecast.typeOf'],
 'listRanking'=>
 ['List    : [1,6,1,4597,0]',
  'Rank    : 48942005486434827502806092006992560781726279940833240076824944099191814613366392386749511713434763839793302473069661829226469896255790152457173827842149281794599962607711210340276836500958930839473641144547780511809293095348639369721180460366414928804153948429166448151958340494749681812924530523361965128764932548323245565136986888584661354008705906617999366517351362086853543501906890988915157219711079820671912621909921395047344253197344657112755544702382729250669883310119301973836036251701710800552207368446803570537665178627003469484124786697014978833113893077356259143350219361001048384654470892585488086106944426818972239932713163354332014247560961130990241654849746236810643616383737149888816110076880093749904546441612910808259658574531716957005765890635376913364756146085740404821899425000897252572399977426713810869444077314341344145099171077329565437023340658785522450074057565221878954859960225238545160197314588850398422579241830323957893112028168676670519808656913218321781100341612223629062853317111157815024828973363574089650706601192225459515817614531841525757233033436342958238413758336341786786387933176955177949155980995936866788985585614664711170625337826033350471542591061371141124998467242260938236283646889611877716229550846620347986690447316267985993469720696664345697846169830501273004573947392636552548343809724870107046640208347311365203189121778629713330174',
  'Unranked: [1,6,1,4597,0]',' 0 -> []        ->  0',' 1 -> [0]       ->  1',' 2 -> [0,0]     ->  2',' 3 -> [1]       ->  3',
  ' 4 -> [0,0,0]   ->  4',' 5 -> [0,1]     ->  5',' 6 -> [1,0]     ->  6',' 7 -> [2]       ->  7',' 8 -> [0,0,0,0] ->  8',
  ' 9 -> [0,0,1]   ->  9','10 -> [0,1,0]   -> 10'],
 'logTest'=>
 ['[1]','[2]','[3]','[2,2]','[5]','[2,3]','[7]','[2,2,2]','[3,3]','[2,5]','[11]','[2,2,3]','[13]','[2,7]','[3,5]','[2,2,2,2]',
  '[17]','[2,3,3]','[19]','[2,2,5]','[3,7]','[2,11]','[23]','[2,2,2,3]','[5,5]','[2,13]','[3,3,3]','[2,2,7]','[29]','[2,3,5]',
  '[31]','[2,2,2,2,2]','[3,11]','[2,17]','[5,7]','[2,2,3,3]','[37]','[2,19]','[3,13]','[2,2,2,5]','[41]','[2,3,7]','[43]',
  '[2,2,11]','[3,3,5]','[2,23]','[47]','[2,2,2,2,3]','[7,7]','[2,5,5]','[3,17]','[2,2,13]','[53]','[2,3,3,3]','[5,11]',
  '[2,2,2,7]','[3,19]','[2,29]','[59]','[2,2,3,5]','[61]','[2,31]','[3,3,7]','[2,2,2,2,2,2]','[5,13]','[2,3,11]','[67]',
  '[2,2,17]','[3,23]','[2,5,7]','[71]','[2,2,2,3,3]','[73]','[2,37]','[3,5,5]','[2,2,19]','[7,11]','[2,3,13]','[79]',
  '[2,2,2,2,5]','[3,3,3,3]','[2,41]','[83]','[2,2,3,7]','[5,17]','[2,43]','[3,29]','[2,2,2,11]','[89]','[2,3,3,5]','[7,13]',
  '[2,2,23]','[3,31]','[2,47]','[5,19]','[2,2,2,2,2,3]','[97]','[2,7,7]','[3,3,11]','[2,2,5,5]','[101]','[2,3,17]','[103]',
  '[2,2,2,13]','[3,5,7]','[2,53]','[107]','[2,2,3,3,3]','[109]','[2,5,11]','[3,37]','[2,2,2,2,7]','[113]','[2,3,19]','[5,23]',
  '[2,2,29]','[3,3,13]','[2,59]','[7,17]','[2,2,2,3,5]','[11,11]','[2,61]','[3,41]','[2,2,31]','[5,5,5]','[2,3,3,7]','[127]',
  '[2,2,2,2,2,2,2]','[3,43]','[2,5,13]','[131]','[2,2,3,11]','[7,19]','[2,67]','[3,3,3,5]','[2,2,2,17]','[137]','[2,3,23]',
  '[139]','[2,2,5,7]','[3,47]','[2,71]','[11,13]','[2,2,2,2,3,3]','[5,29]','[2,73]','[3,7,7]','[2,2,37]','[149]','[2,3,5,5]',
  '[151]','[2,2,2,19]','[3,3,17]','[2,7,11]','[5,31]','[2,2,3,13]','[157]','[2,79]','[3,53]','[2,2,2,2,2,5]','[7,23]',
  '[2,3,3,3,3]','[163]','[2,2,41]','[3,5,11]','[2,83]','[167]','[2,2,2,3,7]','[13,13]','[2,5,17]','[3,3,19]','[2,2,43]','[173]',
  '[2,3,29]','[5,5,7]','[2,2,2,2,11]','[3,59]','[2,89]','[179]','[2,2,3,3,5]','[181]','[2,7,13]','[3,61]','[2,2,2,23]','[5,37]',
  '[2,3,31]','[11,17]','[2,2,47]','[3,3,3,7]','[2,5,19]','[191]','[2,2,2,2,2,2,3]','[193]','[2,97]','[3,5,13]','[2,2,7,7]',
  '[197]','[2,3,3,11]','[199]','[2,2,2,5,5]','[3,67]','[2,101]','[7,29]','[2,2,3,17]','[5,41]','[2,103]','[3,3,23]',
  '[2,2,2,2,13]','[11,19]','[2,3,5,7]','[211]','[2,2,53]','[3,71]','[2,107]','[5,43]','[2,2,2,3,3,3]','[7,31]','[2,109]',
  '[3,73]','[2,2,5,11]','[13,17]','[2,3,37]','[223]','[2,2,2,2,2,7]','[3,3,5,5]','[2,113]','[227]','[2,2,3,19]','[229]',
  '[2,5,23]','[3,7,11]','[2,2,2,29]','[233]','[2,3,3,13]','[5,47]','[2,2,59]','[3,79]','[2,7,17]','[239]','[2,2,2,2,3,5]',
  '[241]','[2,11,11]','[3,3,3,3,3]','[2,2,61]','[5,7,7]','[2,3,41]','[13,19]','[2,2,2,31]','[3,83]','[2,5,5,5]','[251]',
  '[2,2,3,3,7]','[11,23]','[2,127]','[3,5,17]','[2,2,2,2,2,2,2,2]','[257]','[2,3,43]','[7,37]','[2,2,5,13]','[3,3,29]','[2,131]',
  '[263]','[2,2,2,3,11]','[5,53]','[2,7,19]','[3,89]','[2,2,67]','[269]','[2,3,3,3,5]','[271]','[2,2,2,2,17]','[3,7,13]',
  '[2,137]','[5,5,11]','[2,2,3,23]','[277]','[2,139]','[3,3,31]','[2,2,2,5,7]','[281]','[2,3,47]','[283]','[2,2,71]','[3,5,19]',
  '[2,11,13]','[7,41]','[2,2,2,2,2,3,3]','[17,17]','[2,5,29]','[3,97]','[2,2,73]','[293]','[2,3,7,7]','[5,59]','[2,2,2,37]',
  '[3,3,3,11]','[2,149]','[13,23]','[2,2,3,5,5]','[7,43]','[2,151]','[3,101]','[2,2,2,2,19]','[5,61]','[2,3,3,17]','[307]',
  '[2,2,7,11]','[3,103]','[2,5,31]','[311]','[2,2,2,3,13]','[313]','[2,157]','[3,3,5,7]','[2,2,79]','[317]','[2,3,53]','[11,29]',
  '[2,2,2,2,2,2,5]','[3,107]','[2,7,23]','[17,19]','[2,2,3,3,3,3]','[5,5,13]','[2,163]','[3,109]','[2,2,2,41]','[7,47]',
  '[2,3,5,11]','[331]','[2,2,83]','[3,3,37]','[2,167]','[5,67]','[2,2,2,2,3,7]','[337]','[2,13,13]','[3,113]','[2,2,5,17]',
  '[11,31]','[2,3,3,19]','[7,7,7]','[2,2,2,43]','[3,5,23]','[2,173]','[347]','[2,2,3,29]','[349]','[2,5,5,7]','[3,3,3,13]',
  '[2,2,2,2,2,11]','[353]','[2,3,59]','[5,71]','[2,2,89]','[3,7,17]','[2,179]','[359]','[2,2,2,3,3,5]','[19,19]','[2,181]',
  '[3,11,11]','[2,2,7,13]','[5,73]','[2,3,61]','[367]','[2,2,2,2,23]','[3,3,41]','[2,5,37]','[7,53]','[2,2,3,31]','[373]',
  '[2,11,17]','[3,5,5,5]','[2,2,2,47]','[13,29]','[2,3,3,3,7]','[379]','[2,2,5,19]','[3,127]','[2,191]','[383]',
  '[2,2,2,2,2,2,2,3]','[5,7,11]','[2,193]','[3,3,43]','[2,2,97]','[389]','[2,3,5,13]','[17,23]','[2,2,2,7,7]','[3,131]',
  '[2,197]','[5,79]','[2,2,3,3,11]','[397]','[2,199]','[3,7,19]','[2,2,2,2,5,5]','[401]','[2,3,67]','[13,31]','[2,2,101]',
  '[3,3,3,3,5]','[2,7,29]','[11,37]','[2,2,2,3,17]','[409]','[2,5,41]','[3,137]','[2,2,103]','[7,59]','[2,3,3,23]','[5,83]',
  '[2,2,2,2,2,13]','[3,139]','[2,11,19]','[419]','[2,2,3,5,7]','[421]','[2,211]','[3,3,47]','[2,2,2,53]','[5,5,17]','[2,3,71]',
  '[7,61]','[2,2,107]','[3,11,13]','[2,5,43]','[431]','[2,2,2,2,3,3,3]','[433]','[2,7,31]','[3,5,29]','[2,2,109]','[19,23]',
  '[2,3,73]','[439]','[2,2,2,5,11]','[3,3,7,7]','[2,13,17]','[443]','[2,2,3,37]','[5,89]','[2,223]','[3,149]','[2,2,2,2,2,2,7]',
  '[449]','[2,3,3,5,5]','[11,41]','[2,2,113]','[3,151]','[2,227]','[5,7,13]','[2,2,2,3,19]','[457]','[2,229]','[3,3,3,17]',
  '[2,2,5,23]','[461]','[2,3,7,11]','[463]','[2,2,2,2,29]','[3,5,31]','[2,233]','[467]','[2,2,3,3,13]','[7,67]','[2,5,47]',
  '[3,157]','[2,2,2,59]','[11,43]','[2,3,79]','[5,5,19]','[2,2,7,17]','[3,3,53]','[2,239]','[479]','[2,2,2,2,2,3,5]','[13,37]',
  '[2,241]','[3,7,23]','[2,2,11,11]','[5,97]','[2,3,3,3,3,3]','[487]','[2,2,2,61]','[3,163]','[2,5,7,7]','[491]','[2,2,3,41]',
  '[17,29]','[2,13,19]','[3,3,5,11]','[2,2,2,2,31]','[7,71]','[2,3,83]','[499]','[2,2,5,5,5]','[3,167]','[2,251]','[503]',
  '[2,2,2,3,3,7]','[5,101]','[2,11,23]','[3,13,13]','[2,2,127]','[509]','[2,3,5,17]','[7,73]','[2,2,2,2,2,2,2,2,2]','[3,3,3,19]',
  '[2,257]','[5,103]','[2,2,3,43]','[11,47]','[2,7,37]','[3,173]','[2,2,2,5,13]','[521]','[2,3,3,29]','[523]','[2,2,131]',
  '[3,5,5,7]','[2,263]','[17,31]','[2,2,2,2,3,11]','[23,23]','[2,5,53]','[3,3,59]','[2,2,7,19]','[13,41]','[2,3,89]','[5,107]',
  '[2,2,2,67]','[3,179]','[2,269]','[7,7,11]','[2,2,3,3,3,5]','[541]','[2,271]','[3,181]','[2,2,2,2,2,17]','[5,109]',
  '[2,3,7,13]','[547]','[2,2,137]','[3,3,61]','[2,5,5,11]','[19,29]','[2,2,2,3,23]','[7,79]','[2,277]','[3,5,37]','[2,2,139]',
  '[557]','[2,3,3,31]','[13,43]','[2,2,2,2,5,7]','[3,11,17]','[2,281]','[563]','[2,2,3,47]','[5,113]','[2,283]','[3,3,3,3,7]',
  '[2,2,2,71]','[569]','[2,3,5,19]','[571]','[2,2,11,13]','[3,191]','[2,7,41]','[5,5,23]','[2,2,2,2,2,2,3,3]','[577]',
  '[2,17,17]','[3,193]','[2,2,5,29]','[7,83]','[2,3,97]','[11,53]','[2,2,2,73]','[3,3,5,13]','[2,293]','[587]','[2,2,3,7,7]',
  '[19,31]','[2,5,59]','[3,197]','[2,2,2,2,37]','[593]','[2,3,3,3,11]','[5,7,17]','[2,2,149]','[3,199]','[2,13,23]','[599]',
  '[2,2,2,3,5,5]','[601]','[2,7,43]','[3,3,67]','[2,2,151]','[5,11,11]','[2,3,101]','[607]','[2,2,2,2,2,19]','[3,7,29]',
  '[2,5,61]','[13,47]','[2,2,3,3,17]','[613]','[2,307]','[3,5,41]','[2,2,2,7,11]','[617]','[2,3,103]','[619]','[2,2,5,31]',
  '[3,3,3,23]','[2,311]','[7,89]','[2,2,2,2,3,13]','[5,5,5,5]','[2,313]','[3,11,19]','[2,2,157]','[17,37]','[2,3,3,5,7]','[631]',
  '[2,2,2,79]','[3,211]','[2,317]','[5,127]','[2,2,3,53]','[7,7,13]','[2,11,29]','[3,3,71]','[2,2,2,2,2,2,2,5]','[641]',
  '[2,3,107]','[643]','[2,2,7,23]','[3,5,43]','[2,17,19]','[647]','[2,2,2,3,3,3,3]','[11,59]','[2,5,5,13]','[3,7,31]',
  '[2,2,163]','[653]','[2,3,109]','[5,131]','[2,2,2,2,41]','[3,3,73]','[2,7,47]','[659]','[2,2,3,5,11]','[661]','[2,331]',
  '[3,13,17]','[2,2,2,83]','[5,7,19]','[2,3,3,37]','[23,29]','[2,2,167]','[3,223]','[2,5,67]','[11,61]','[2,2,2,2,2,3,7]',
  '[673]','[2,337]','[3,3,3,5,5]','[2,2,13,13]','[677]','[2,3,113]','[7,97]','[2,2,2,5,17]','[3,227]','[2,11,31]','[683]',
  '[2,2,3,3,19]','[5,137]','[2,7,7,7]','[3,229]','[2,2,2,2,43]','[13,53]','[2,3,5,23]','[691]','[2,2,173]','[3,3,7,11]',
  '[2,347]','[5,139]','[2,2,2,3,29]','[17,41]','[2,349]','[3,233]','[2,2,5,5,7]','[701]','[2,3,3,3,13]','[19,37]',
  '[2,2,2,2,2,2,11]','[3,5,47]','[2,353]','[7,101]','[2,2,3,59]','[709]','[2,5,71]','[3,3,79]','[2,2,2,89]','[23,31]',
  '[2,3,7,17]','[5,11,13]','[2,2,179]','[3,239]','[2,359]','[719]','[2,2,2,2,3,3,5]','[7,103]','[2,19,19]','[3,241]','[2,2,181]',
  '[5,5,29]','[2,3,11,11]','[727]','[2,2,2,7,13]','[3,3,3,3,3,3]','[2,5,73]','[17,43]','[2,2,3,61]','[733]','[2,367]',
  '[3,5,7,7]','[2,2,2,2,2,23]','[11,67]','[2,3,3,41]','[739]','[2,2,5,37]','[3,13,19]','[2,7,53]','[743]','[2,2,2,3,31]',
  '[5,149]','[2,373]','[3,3,83]','[2,2,11,17]','[7,107]','[2,3,5,5,5]','[751]','[2,2,2,2,47]','[3,251]','[2,13,29]','[5,151]',
  '[2,2,3,3,3,7]','[757]','[2,379]','[3,11,23]','[2,2,2,5,19]','[761]','[2,3,127]','[7,109]','[2,2,191]','[3,3,5,17]','[2,383]',
  '[13,59]','[2,2,2,2,2,2,2,2,3]','[769]','[2,5,7,11]','[3,257]','[2,2,193]','[773]','[2,3,3,43]','[5,5,31]','[2,2,2,97]',
  '[3,7,37]','[2,389]','[19,41]','[2,2,3,5,13]','[11,71]','[2,17,23]','[3,3,3,29]','[2,2,2,2,7,7]','[5,157]','[2,3,131]','[787]',
  '[2,2,197]','[3,263]','[2,5,79]','[7,113]','[2,2,2,3,3,11]','[13,61]','[2,397]','[3,5,53]','[2,2,199]','[797]','[2,3,7,19]',
  '[17,47]','[2,2,2,2,2,5,5]','[3,3,89]','[2,401]','[11,73]','[2,2,3,67]','[5,7,23]','[2,13,31]','[3,269]','[2,2,2,101]','[809]',
  '[2,3,3,3,3,5]','[811]','[2,2,7,29]','[3,271]','[2,11,37]','[5,163]','[2,2,2,2,3,17]','[19,43]','[2,409]','[3,3,7,13]',
  '[2,2,5,41]','[821]','[2,3,137]','[823]','[2,2,2,103]','[3,5,5,11]','[2,7,59]','[827]','[2,2,3,3,23]','[829]','[2,5,83]',
  '[3,277]','[2,2,2,2,2,2,13]','[7,7,17]','[2,3,139]','[5,167]','[2,2,11,19]','[3,3,3,31]','[2,419]','[839]','[2,2,2,3,5,7]',
  '[29,29]','[2,421]','[3,281]','[2,2,211]','[5,13,13]','[2,3,3,47]','[7,11,11]','[2,2,2,2,53]','[3,283]','[2,5,5,17]','[23,37]',
  '[2,2,3,71]','[853]','[2,7,61]','[3,3,5,19]','[2,2,2,107]','[857]','[2,3,11,13]','[859]','[2,2,5,43]','[3,7,41]','[2,431]',
  '[863]','[2,2,2,2,2,3,3,3]','[5,173]','[2,433]','[3,17,17]','[2,2,7,31]','[11,79]','[2,3,5,29]','[13,67]','[2,2,2,109]',
  '[3,3,97]','[2,19,23]','[5,5,5,7]','[2,2,3,73]','[877]','[2,439]','[3,293]','[2,2,2,2,5,11]','[881]','[2,3,3,7,7]','[883]',
  '[2,2,13,17]','[3,5,59]','[2,443]','[887]','[2,2,2,3,37]','[7,127]','[2,5,89]','[3,3,3,3,11]','[2,2,223]','[19,47]',
  '[2,3,149]','[5,179]','[2,2,2,2,2,2,2,7]','[3,13,23]','[2,449]','[29,31]','[2,2,3,3,5,5]','[17,53]','[2,11,41]','[3,7,43]',
  '[2,2,2,113]','[5,181]','[2,3,151]','[907]','[2,2,227]','[3,3,101]','[2,5,7,13]','[911]','[2,2,2,2,3,19]','[11,83]','[2,457]',
  '[3,5,61]','[2,2,229]','[7,131]','[2,3,3,3,17]','[919]','[2,2,2,5,23]','[3,307]','[2,461]','[13,71]','[2,2,3,7,11]','[5,5,37]',
  '[2,463]','[3,3,103]','[2,2,2,2,2,29]','[929]','[2,3,5,31]','[7,7,19]','[2,2,233]','[3,311]','[2,467]','[5,11,17]',
  '[2,2,2,3,3,13]','[937]','[2,7,67]','[3,313]','[2,2,5,47]','[941]','[2,3,157]','[23,41]','[2,2,2,2,59]','[3,3,3,5,7]',
  '[2,11,43]','[947]','[2,2,3,79]','[13,73]','[2,5,5,19]','[3,317]','[2,2,2,7,17]','[953]','[2,3,3,53]','[5,191]','[2,2,239]',
  '[3,11,29]','[2,479]','[7,137]','[2,2,2,2,2,2,3,5]','[31,31]','[2,13,37]','[3,3,107]','[2,2,241]','[5,193]','[2,3,7,23]',
  '[967]','[2,2,2,11,11]','[3,17,19]','[2,5,97]','[971]','[2,2,3,3,3,3,3]','[7,139]','[2,487]','[3,5,5,13]','[2,2,2,2,61]',
  '[977]','[2,3,163]','[11,89]','[2,2,5,7,7]','[3,3,109]','[2,491]','[983]','[2,2,2,3,41]','[5,197]','[2,17,29]','[3,7,47]',
  '[2,2,13,19]','[23,43]','[2,3,3,5,11]','[991]','[2,2,2,2,2,31]','[3,331]','[2,7,71]','[5,199]','[2,2,3,83]','[997]','[2,499]',
  '[3,3,3,37]','[2,2,2,5,5,5]','Exit code is okay'],
 'longestCommonSubsequence'=>
 ['The longest common subsequence',"of  'thisisatest'","and 'testing123testing'","is  'tsitest'"],
 'longestIncreasingSubseq'=>
 ['[3,4,5]','[0,4,6,9,13,15]'],
 'ludic'=>
 ['Ludic Numbers','  The first 25 are: [1,2,3,5,7,11,13,17,23,25,29,37,41,43,47,53,61,67,71,77,83,89,91,97,107].',
  '  There are 142 lesser or equal to 1000.','  The 2000..2005th are [21475,21481,21487,21493,21503,21511].',
  '  The triplets below 250 are (1,3,7),(5,7,11),(11,13,17),(23,25,29),(41,43,47),(173,175,179),(221,223,227),(233,235,239)'],
 'lychrelNumbers'=>
 ['Found 4 seed Lychrels below 10000','   196 with 141 related Lychrels','   879 with 100 related Lychrels',
  '  1997 with  58 related Lychrels','  7059 with  61 related Lychrels','Total       244 related Lychrels',
  'Found 3 palindromic Lychrel numbers: 4994, 8778, 9999'],
 'magicSquare'=>
 ['233 256 279 302 325 348 371 394 417 440   1  24  47  70  93 116 139 162 185 208 231',
  '255 278 301 324 347 370 393 416 439  21  23  46  69  92 115 138 161 184 207 230 232',
  '277 300 323 346 369 392 415 438  20  22  45  68  91 114 137 160 183 206 229 252 254',
  '299 322 345 368 391 414 437  19  42  44  67  90 113 136 159 182 205 228 251 253 276',
  '321 344 367 390 413 436  18  41  43  66  89 112 135 158 181 204 227 250 273 275 298',
  '343 366 389 412 435  17  40  63  65  88 111 134 157 180 203 226 249 272 274 297 320',
  '365 388 411 434  16  39  62  64  87 110 133 156 179 202 225 248 271 294 296 319 342',
  '387 410 433  15  38  61  84  86 109 132 155 178 201 224 247 270 293 295 318 341 364',
  '409 432  14  37  60  83  85 108 131 154 177 200 223 246 269 292 315 317 340 363 386',
  '431  13  36  59  82 105 107 130 153 176 199 222 245 268 291 314 316 339 362 385 408',
  ' 12  35  58  81 104 106 129 152 175 198 221 244 267 290 313 336 338 361 384 407 430',
  ' 34  57  80 103 126 128 151 174 197 220 243 266 289 312 335 337 360 383 406 429  11',
  ' 56  79 102 125 127 150 173 196 219 242 265 288 311 334 357 359 382 405 428  10  33',
  ' 78 101 124 147 149 172 195 218 241 264 287 310 333 356 358 381 404 427   9  32  55',
  '100 123 146 148 171 194 217 240 263 286 309 332 355 378 380 403 426   8  31  54  77',
  '122 145 168 170 193 216 239 262 285 308 331 354 377 379 402 425   7  30  53  76  99',
  '144 167 169 192 215 238 261 284 307 330 353 376 399 401 424   6  29  52  75  98 121',
  '166 189 191 214 237 260 283 306 329 352 375 398 400 423   5  28  51  74  97 120 143',
  '188 190 213 236 259 282 305 328 351 374 397 420 422   4  27  50  73  96 119 142 165',
  '210 212 235 258 281 304 327 350 373 396 419 421   3  26  49  72  95 118 141 164 187',
  '211 234 257 280 303 326 349 372 395 418 441   2  25  48  71  94 117 140 163 186 209','The magic number is 4641'],
 'maze'=>
 [
  "┌───┬───────────────────────────────────────┬───────────┬───────────────┬───────┐",
  "│   │                                       │           │               │       │   ",
  "│   │   ┌────   ┌───────────┬────────────   │   ┌────   │   │   ────┐   │   ────┤",
  "│       │       │           │                   │       │   │       │   │       │   ",
  "│   ┌───┤   ────┤   ────┐   └───────────────┬───┴───────┘   ├────   │   │   │   │",
  "│   │   │       │       │                   │               │       │   │   │   │   ",
  "│   │   ├────   └───┐   ├───────┬────────   │   ┌───┬───────┘   ┌───┤   └───┘   │",
  "│       │           │   │       │           │   │   │           │   │           │   ",
  "│   ┌───┘   ┌───────┤   │   ────┤   ────────┘   │   │   ┌───────┘   ├────────   │",
  "│   │       │       │   │       │               │   │   │           │           │   ",
  "├───┘   │   │   │   │   │   │   └───────────────┘   │   └───┐   │   │   ────────┤",
  "│       │   │   │   │   │   │                       │       │   │               │   ",
  "│   │   ├───┘   │   │   │   ├───┬────────────   │   └───┐   │   ├───────────────┤",
  "│   │   │       │       │   │   │               │       │   │   │               │   ",
  "│   └───┤   ┌───┴───────┤   │   │   ────────┐   ├───────┤   └───┘   ┌───────┐   │",
  "│       │   │           │       │           │   │       │           │       │   │   ",
  "│   │   │   │   ────┐   └───┐   ├───────┐   └───┘   │   └───────────┘   │   │   │",
  "│   │       │       │       │   │       │           │                   │   │   │   ",
  "│   └───────┤   │   └───┐   │   │   │   │   ┌───────┴───┐   │   │   ┌───┴───┤   │",
  "│           │   │       │   │   │   │   │   │           │   │   │   │       │   │   ",
  "├───┬────   │   ├────   │   └───┤   │   └───┤   ┌───┐   └───┤   │   │   │   │   │",
  "│   │       │   │       │       │   │       │   │   │       │   │   │   │       │   ",
  "│   │   ────┤   │   ────┴───┐   │   ├────   │   │   ├────   │   ├───┘   ├───┐   │",
  "│   │       │   │           │       │           │   │       │   │       │   │   │   ",
  "│   └────   │   ├───────┐   └───────┴───┬───────┘   │   ────┘   │   ┌───┘   │   │",
  "│           │   │       │               │           │           │   │       │   │   ",
  "│   ┌───────┴───┘   │   ├────────────   ├────────   ├───────┐   │   │   │   │   │",
  "│   │               │   │               │           │       │   │   │   │       │   ",
  "│   │   ────┐   ┌───┤   │   ────────┬───┘   ┌────   │   │   │   │   └───┴───┐   │",
  "│   │       │   │   │   │           │       │       │   │   │   │           │   │   ",
  "│   ├───────┘   │   │   │   ┌────   ├────   ├───────┘   │   │   ├───────┐   └───┤",
  "│   │           │   │   │   │       │       │           │   │   │       │       │   ",
  "│   │   ┌───────┘   │   ├───┘   ┌───┘   │   │   ┌───────┤   │   │   │   ├────   │",
  "│   │   │               │       │       │   │   │       │           │   │       │   ",
  "│   │   └───┐   ┌───────┘   ────┴───┐   │   │   └───┐   └───┬───────┴───┤   ────┤",
  "│   │       │   │                   │   │   │       │       │           │       │   ",
  "│   └────   │   └───┬───────┐   │   │   └───┴───┐   └───┐   │   ────┐   └────   │",
  "│           │       │       │   │   │           │       │   │       │           │   ",
  "├───────────┴────   │   │   └───┘   │   ────┐   └────   │   └───┐   └───────────┤",
  "│                       │           │       │                   │               │   ",
  "└───────────────────────┴───────────┴───────┴───────────────────┴───────────────┘"
 ],
 'memoization'=>
 ['The memoized function retuns 196418 and has been called     27 times',
  'The normal function retuns   196418 and has been called 392835 times'],
 'monteCarloPi'=>
 ['See http://rosettacode.org/wiki/Monte_Carlo_methods',
  'n=     10 pi approximated as 2.4       (random) and as 3.6       (Van der Corput generator)',
  'n=    100 pi approximated as 3.16      (random) and as 3.24      (Van der Corput generator)',
  'n=   1000 pi approximated as 3.132     (random) and as 3.148     (Van der Corput generator)',
  'n=  10000 pi approximated as 3.1412    (random) and as 3.1448    (Van der Corput generator)',
  'n= 100000 pi approximated as 3.14796   (random) and as 3.14208   (Van der Corput generator)',
  'n=1000000 pi approximated as 3.143148  (random) and as 3.141572  (Van der Corput generator)'],
 'montyHall'=>
 ['FDLinux'=>
  ['Monty Hall Problem','  1000 random runs','  Probability to win without switching doors 31.700000000000000399%',
   '  Probability to win with switching          68.30000000000000515 %','  Deterministic runs',
   '  Probability to win without switching doors 33.333333333333331483%',
   '  Probability to win with switching          66.666666666666662965%'],
  'FDWin64'=>
  ['Monty Hall Problem','  1000 random runs','  Probability to win without switching doors 31.7             %',
   '  Probability to win with switching          68.30000000000001%','  Deterministic runs',
   '  Probability to win without switching doors 33.333333333333329%',
   '  Probability to win with switching          66.666666666666657%'],
  'FOLinux'=>
  ['Monty Hall Problem','  1000 random runs','  Probability to win without switching doors 31.700000000000000399%',
   '  Probability to win with switching          68.30000000000000515 %','  Deterministic runs',
   '  Probability to win without switching doors 33.333333333333331483%',
   '  Probability to win with switching          66.666666666666662965%'],
  'FOWin64'=>
  ['Monty Hall Problem','  1000 random runs','  Probability to win without switching doors 31.7             %',
   '  Probability to win with switching          68.30000000000001%','  Deterministic runs',
   '  Probability to win without switching doors 33.333333333333329%',
   '  Probability to win with switching          66.666666666666657%'],
  'LDLinux'=>
  ['Monty Hall Problem','  1000 random runs','  Probability to win without switching doors 31.700000000000000399%',
   '  Probability to win with switching          68.30000000000000515 %','  Deterministic runs',
   '  Probability to win without switching doors 33.333333333333331483%',
   '  Probability to win with switching          66.666666666666662965%'],
  'LDWin64'=>
  ['Monty Hall Problem','  1000 random runs','  Probability to win without switching doors 31.7             %',
   '  Probability to win with switching          68.30000000000001%','  Deterministic runs',
   '  Probability to win without switching doors 33.333333333333329%',
   '  Probability to win with switching          66.666666666666657%'],
  'LOLinux'=>
  ['Monty Hall Problem','  1000 random runs','  Probability to win without switching doors 31.700000000000000399%',
   '  Probability to win with switching          68.30000000000000515 %','  Deterministic runs',
   '  Probability to win without switching doors 33.333333333333331483%',
   '  Probability to win with switching          66.666666666666662965%'],
  'LOWin64'=>
  ['Monty Hall Problem','  1000 random runs','  Probability to win without switching doors 31.7             %',
   '  Probability to win with switching          68.30000000000001%','  Deterministic runs',
   '  Probability to win without switching doors 33.333333333333329%',
   '  Probability to win with switching          66.666666666666657%']].toMap,
 'multifactorial'=>
 ["Degree ┃ #1 ┃ #2 ┃ #3 ┃ #4 ┃ #5  ┃ #6  ┃ #7   ┃ #8    ┃ #9     ┃ #10",
  "━━━━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━━╋━━━━━╋━━━━━━╋━━━━━━━╋━━━━━━━━╋━━━━━━━━",
  "1      ┃ 1  ┃ 2  ┃ 6  ┃ 24 ┃ 120 ┃ 720 ┃ 5040 ┃ 40320 ┃ 362880 ┃ 3628800",
  "2      ┃ 1  ┃ 2  ┃ 3  ┃  8 ┃  15 ┃  48 ┃  105 ┃   384 ┃    945 ┃    3840",
  "3      ┃ 1  ┃ 2  ┃ 3  ┃  4 ┃  10 ┃  18 ┃   28 ┃    80 ┃    162 ┃     280",
  "4      ┃ 1  ┃ 2  ┃ 3  ┃  4 ┃   5 ┃  12 ┃   21 ┃    32 ┃     45 ┃     120",
  "5      ┃ 1  ┃ 2  ┃ 3  ┃  4 ┃   5 ┃   6 ┃   14 ┃    24 ┃     36 ┃      50"],
 'numDiff'=>
 ['FDLinux'=>
  ['The approximate taylor expansion of {$t^(1+sin($t))} around 1 is ',
   '  {($x-1)^0*1.0+($x-1)^1*1.8414158821105957031+($x-1)^2*1.3150730505585670471+($x-1)^3*0.26311823477347691854+($x-1)^4*-0.39539841267590721449+($x-1)^5*-0.30900348825380206108}'
  ],
  'FDWin64'=>
  ['The approximate taylor expansion of {$t^(1+sin($t))} around 1 is ',
   '  {($x-1)^0*1.0+($x-1)^1*1.841552734375+($x-1)^2*1.3151092529296875+($x-1)^3*0.26312255859375+($x-1)^4*-0.39539845784505206+($x-1)^5*-0.3090026537577311}'
  ],
  'FOLinux'=>
  ['The approximate taylor expansion of {$t^(1+sin($t))} around 1 is ',
   '  {($x-1)^0*1.0+($x-1)^1*1.8414158821105957031+($x-1)^2*1.3150730505585670471+($x-1)^3*0.26311823477347691854+($x-1)^4*-0.39539841267590721449+($x-1)^5*-0.30900348825380206108}'
  ],
  'FOWin64'=>
  ['The approximate taylor expansion of {$t^(1+sin($t))} around 1 is ',
   '  {($x-1)^0*1.0+($x-1)^1*1.841552734375+($x-1)^2*1.3151092529296875+($x-1)^3*0.26312255859375+($x-1)^4*-0.39539845784505206+($x-1)^5*-0.3090026537577311}'
  ],
  'LDLinux'=>
  ['The approximate taylor expansion of {$t^(1+sin($t))} around 1 is ',
   '  {($x-1)^0*1.0+($x-1)^1*1.8414158821105957031+($x-1)^2*1.3150730505585670471+($x-1)^3*0.26311823477347691854+($x-1)^4*-0.39539841267590721449+($x-1)^5*-0.30900348825380206108}'
  ],
  'LDWin64'=>
  ['The approximate taylor expansion of {$t^(1+sin($t))} around 1 is ',
   '  {($x-1)^0*1.0+($x-1)^1*1.841552734375+($x-1)^2*1.3151092529296875+($x-1)^3*0.26312255859375+($x-1)^4*-0.39539845784505206+($x-1)^5*-0.3090026537577311}'
  ],
  'LOLinux'=>
  ['The approximate taylor expansion of {$t^(1+sin($t))} around 1 is ',
   '  {($x-1)^0*1.0+($x-1)^1*1.8414158821105957031+($x-1)^2*1.3150730505585670471+($x-1)^3*0.26311823477347691854+($x-1)^4*-0.39539841267590721449+($x-1)^5*-0.30900348825380206108}'
  ],
  'LOWin64'=>
  ['The approximate taylor expansion of {$t^(1+sin($t))} around 1 is ',
   '  {($x-1)^0*1.0+($x-1)^1*1.841552734375+($x-1)^2*1.3151092529296875+($x-1)^3*0.26312255859375+($x-1)^4*-0.39539845784505206+($x-1)^5*-0.3090026537577311}'
  ]].toMap,
 'numInt'=>
 ['FDWin64'=>
  ["integral of $x³  in [0,   1]=        0.25",'integral of 1/$x in [1, 100]=        4.6051701859882286',
   'integral of $x   in [0,5000]= 12500000.0','integral of $x   in [0,6000]= 18000000.0'],
  'FOWin64'=>
  ["integral of $x³  in [0,   1]=        0.25",'integral of 1/$x in [1, 100]=        4.6051701859882286',
   'integral of $x   in [0,5000]= 12500000.0','integral of $x   in [0,6000]= 18000000.0'],
  'LDWin64'=>
  ["integral of $x³  in [0,   1]=        0.25",'integral of 1/$x in [1, 100]=        4.6051701859882286',
   'integral of $x   in [0,5000]= 12500000.0','integral of $x   in [0,6000]= 18000000.0'],
  'LOWin64'=>
  ["integral of $x³  in [0,   1]=        0.25",'integral of 1/$x in [1, 100]=        4.6051701859882286',
   'integral of $x   in [0,5000]= 12500000.0','integral of $x   in [0,6000]= 18000000.0']].toMap,
 'opTest'=>
 ['FDLinux'=>
  ['true and false = false','true or false = true','true xor false = true','3+5 = 8','3*5 = 15','3-5 = -2',
   '3/5 = 0.59999999999999997779','3&5 = 35','3^5 = 243','3 and 5 = 1','3 or 5 = 7','3 xor 5 = 6','3 mod 5 = 3','3 div 5 = 0',
   '3.0+5.0 = 8.0','3.0*5.0 = 15.0','3.0-5.0 = -2.0','3.0/5.0 = 0.6','3.0&5.0 = 3.05.0','3.0^5.0 = 242.99999999999994315',
   '[true,true,false,false] and [true,false,true,false] = [true,false,false,false]',
   '[true,true,false,false] or [true,false,true,false] = [true,true,true,false]',
   '[true,true,false,false] xor [true,false,true,false] = [false,true,true,false]',
   '[1,2,3,4,5,6,7,8,9,10]+[1,2,3,2,2,3,1,4,3,5] = [2,4,6,6,7,9,8,12,12,15]',
   '[1,2,3,4,5,6,7,8,9,10]*[1,2,3,2,2,3,1,4,3,5] = [1,4,9,8,10,18,7,32,27,50]',
   '[1,2,3,4,5,6,7,8,9,10]-[1,2,3,2,2,3,1,4,3,5] = [0,0,0,2,3,3,6,4,6,5]',
   '[1,2,3,4,5,6,7,8,9,10]/[1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2.5,2,7,2,3,2]',
   "[1,2,3,4,5,6,7,8,9,10]&[1,2,3,2,2,3,1,4,3,5] = ['11','22','33','42','52','63','71','84','93','105']",
   '[1,2,3,4,5,6,7,8,9,10]^[1,2,3,2,2,3,1,4,3,5] = [1,4,27,16,25,216,7,4096,729,100000]',
   '[1,2,3,4,5,6,7,8,9,10] and [1,2,3,2,2,3,1,4,3,5] = [1,2,3,0,0,2,1,0,1,0]',
   '[1,2,3,4,5,6,7,8,9,10] or [1,2,3,2,2,3,1,4,3,5] = [1,2,3,6,7,7,7,12,11,15]',
   '[1,2,3,4,5,6,7,8,9,10] xor [1,2,3,2,2,3,1,4,3,5] = [0,0,0,6,7,5,6,12,10,15]',
   '[1,2,3,4,5,6,7,8,9,10] mod [1,2,3,2,2,3,1,4,3,5] = [0,0,0,0,1,0,0,0,0,0]',
   '[1,2,3,4,5,6,7,8,9,10] div [1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2,2,7,2,3,2]','3>3.0 = false','3<3.0 = false','3=3.0 = true',
   '3==3.0 = false','3!=3.0 = false','3>=3.0 = true','3<=3.0 = true','3>[5,3,8] = [false,false,false]',
   '3<[5,3,8] = [true,false,true]','3=[5,3,8] = [false,true,false]','3==[5,3,8] = false','3!=[5,3,8] = [true,false,true]',
   '3>=[5,3,8] = [false,true,false]','3<=[5,3,8] = [true,true,true]','[7,Nan]>Nan = [false,false]','[7,Nan]<Nan = [false,false]',
   '[7,Nan]=Nan = [false,false]','[7,Nan]==Nan = false','[7,Nan]!=Nan = [false,false]','[7,Nan]>=Nan = [false,false]',
   '[7,Nan]<=Nan = [false,false]'],
  'FDWin64'=>
  ['true and false = false','true or false = true','true xor false = true','3+5 = 8','3*5 = 15','3-5 = -2','3/5 = 0.6',
   '3&5 = 35','3^5 = 243','3 and 5 = 1','3 or 5 = 7','3 xor 5 = 6','3 mod 5 = 3','3 div 5 = 0','3.0+5.0 = 8.0','3.0*5.0 = 15.0',
   '3.0-5.0 = -2.0','3.0/5.0 = 0.6','3.0&5.0 = 3.05.0','3.0^5.0 = 242.99999999999974',
   '[true,true,false,false] and [true,false,true,false] = [true,false,false,false]',
   '[true,true,false,false] or [true,false,true,false] = [true,true,true,false]',
   '[true,true,false,false] xor [true,false,true,false] = [false,true,true,false]',
   '[1,2,3,4,5,6,7,8,9,10]+[1,2,3,2,2,3,1,4,3,5] = [2,4,6,6,7,9,8,12,12,15]',
   '[1,2,3,4,5,6,7,8,9,10]*[1,2,3,2,2,3,1,4,3,5] = [1,4,9,8,10,18,7,32,27,50]',
   '[1,2,3,4,5,6,7,8,9,10]-[1,2,3,2,2,3,1,4,3,5] = [0,0,0,2,3,3,6,4,6,5]',
   '[1,2,3,4,5,6,7,8,9,10]/[1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2.5,2,7,2,3,2]',
   "[1,2,3,4,5,6,7,8,9,10]&[1,2,3,2,2,3,1,4,3,5] = ['11','22','33','42','52','63','71','84','93','105']",
   '[1,2,3,4,5,6,7,8,9,10]^[1,2,3,2,2,3,1,4,3,5] = [1,4,27,16,25,216,7,4096,729,100000]',
   '[1,2,3,4,5,6,7,8,9,10] and [1,2,3,2,2,3,1,4,3,5] = [1,2,3,0,0,2,1,0,1,0]',
   '[1,2,3,4,5,6,7,8,9,10] or [1,2,3,2,2,3,1,4,3,5] = [1,2,3,6,7,7,7,12,11,15]',
   '[1,2,3,4,5,6,7,8,9,10] xor [1,2,3,2,2,3,1,4,3,5] = [0,0,0,6,7,5,6,12,10,15]',
   '[1,2,3,4,5,6,7,8,9,10] mod [1,2,3,2,2,3,1,4,3,5] = [0,0,0,0,1,0,0,0,0,0]',
   '[1,2,3,4,5,6,7,8,9,10] div [1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2,2,7,2,3,2]','3>3.0 = false','3<3.0 = false','3=3.0 = true',
   '3==3.0 = false','3!=3.0 = false','3>=3.0 = true','3<=3.0 = true','3>[5,3,8] = [false,false,false]',
   '3<[5,3,8] = [true,false,true]','3=[5,3,8] = [false,true,false]','3==[5,3,8] = false','3!=[5,3,8] = [true,false,true]',
   '3>=[5,3,8] = [false,true,false]','3<=[5,3,8] = [true,true,true]','[7,Nan]>Nan = [false,false]','[7,Nan]<Nan = [false,false]',
   '[7,Nan]=Nan = [false,false]','[7,Nan]==Nan = false','[7,Nan]!=Nan = [false,false]','[7,Nan]>=Nan = [false,false]',
   '[7,Nan]<=Nan = [false,false]'],
  'FOLinux'=>
  ['true and false = false','true or false = true','true xor false = true','3+5 = 8','3*5 = 15','3-5 = -2',
   '3/5 = 0.59999999999999997779','3&5 = 35','3^5 = 243','3 and 5 = 1','3 or 5 = 7','3 xor 5 = 6','3 mod 5 = 3','3 div 5 = 0',
   '3.0+5.0 = 8.0','3.0*5.0 = 15.0','3.0-5.0 = -2.0','3.0/5.0 = 0.6','3.0&5.0 = 3.05.0','3.0^5.0 = 242.99999999999994315',
   '[true,true,false,false] and [true,false,true,false] = [true,false,false,false]',
   '[true,true,false,false] or [true,false,true,false] = [true,true,true,false]',
   '[true,true,false,false] xor [true,false,true,false] = [false,true,true,false]',
   '[1,2,3,4,5,6,7,8,9,10]+[1,2,3,2,2,3,1,4,3,5] = [2,4,6,6,7,9,8,12,12,15]',
   '[1,2,3,4,5,6,7,8,9,10]*[1,2,3,2,2,3,1,4,3,5] = [1,4,9,8,10,18,7,32,27,50]',
   '[1,2,3,4,5,6,7,8,9,10]-[1,2,3,2,2,3,1,4,3,5] = [0,0,0,2,3,3,6,4,6,5]',
   '[1,2,3,4,5,6,7,8,9,10]/[1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2.5,2,7,2,3,2]',
   "[1,2,3,4,5,6,7,8,9,10]&[1,2,3,2,2,3,1,4,3,5] = ['11','22','33','42','52','63','71','84','93','105']",
   '[1,2,3,4,5,6,7,8,9,10]^[1,2,3,2,2,3,1,4,3,5] = [1,4,27,16,25,216,7,4096,729,100000]',
   '[1,2,3,4,5,6,7,8,9,10] and [1,2,3,2,2,3,1,4,3,5] = [1,2,3,0,0,2,1,0,1,0]',
   '[1,2,3,4,5,6,7,8,9,10] or [1,2,3,2,2,3,1,4,3,5] = [1,2,3,6,7,7,7,12,11,15]',
   '[1,2,3,4,5,6,7,8,9,10] xor [1,2,3,2,2,3,1,4,3,5] = [0,0,0,6,7,5,6,12,10,15]',
   '[1,2,3,4,5,6,7,8,9,10] mod [1,2,3,2,2,3,1,4,3,5] = [0,0,0,0,1,0,0,0,0,0]',
   '[1,2,3,4,5,6,7,8,9,10] div [1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2,2,7,2,3,2]','3>3.0 = false','3<3.0 = false','3=3.0 = true',
   '3==3.0 = false','3!=3.0 = false','3>=3.0 = true','3<=3.0 = true','3>[5,3,8] = [false,false,false]',
   '3<[5,3,8] = [true,false,true]','3=[5,3,8] = [false,true,false]','3==[5,3,8] = false','3!=[5,3,8] = [true,false,true]',
   '3>=[5,3,8] = [false,true,false]','3<=[5,3,8] = [true,true,true]','[7,Nan]>Nan = [false,false]','[7,Nan]<Nan = [false,false]',
   '[7,Nan]=Nan = [false,false]','[7,Nan]==Nan = false','[7,Nan]!=Nan = [false,false]','[7,Nan]>=Nan = [false,false]',
   '[7,Nan]<=Nan = [false,false]'],
  'FOWin64'=>
  ['true and false = false','true or false = true','true xor false = true','3+5 = 8','3*5 = 15','3-5 = -2','3/5 = 0.6',
   '3&5 = 35','3^5 = 243','3 and 5 = 1','3 or 5 = 7','3 xor 5 = 6','3 mod 5 = 3','3 div 5 = 0','3.0+5.0 = 8.0','3.0*5.0 = 15.0',
   '3.0-5.0 = -2.0','3.0/5.0 = 0.6','3.0&5.0 = 3.05.0','3.0^5.0 = 242.99999999999974',
   '[true,true,false,false] and [true,false,true,false] = [true,false,false,false]',
   '[true,true,false,false] or [true,false,true,false] = [true,true,true,false]',
   '[true,true,false,false] xor [true,false,true,false] = [false,true,true,false]',
   '[1,2,3,4,5,6,7,8,9,10]+[1,2,3,2,2,3,1,4,3,5] = [2,4,6,6,7,9,8,12,12,15]',
   '[1,2,3,4,5,6,7,8,9,10]*[1,2,3,2,2,3,1,4,3,5] = [1,4,9,8,10,18,7,32,27,50]',
   '[1,2,3,4,5,6,7,8,9,10]-[1,2,3,2,2,3,1,4,3,5] = [0,0,0,2,3,3,6,4,6,5]',
   '[1,2,3,4,5,6,7,8,9,10]/[1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2.5,2,7,2,3,2]',
   "[1,2,3,4,5,6,7,8,9,10]&[1,2,3,2,2,3,1,4,3,5] = ['11','22','33','42','52','63','71','84','93','105']",
   '[1,2,3,4,5,6,7,8,9,10]^[1,2,3,2,2,3,1,4,3,5] = [1,4,27,16,25,216,7,4096,729,100000]',
   '[1,2,3,4,5,6,7,8,9,10] and [1,2,3,2,2,3,1,4,3,5] = [1,2,3,0,0,2,1,0,1,0]',
   '[1,2,3,4,5,6,7,8,9,10] or [1,2,3,2,2,3,1,4,3,5] = [1,2,3,6,7,7,7,12,11,15]',
   '[1,2,3,4,5,6,7,8,9,10] xor [1,2,3,2,2,3,1,4,3,5] = [0,0,0,6,7,5,6,12,10,15]',
   '[1,2,3,4,5,6,7,8,9,10] mod [1,2,3,2,2,3,1,4,3,5] = [0,0,0,0,1,0,0,0,0,0]',
   '[1,2,3,4,5,6,7,8,9,10] div [1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2,2,7,2,3,2]','3>3.0 = false','3<3.0 = false','3=3.0 = true',
   '3==3.0 = false','3!=3.0 = false','3>=3.0 = true','3<=3.0 = true','3>[5,3,8] = [false,false,false]',
   '3<[5,3,8] = [true,false,true]','3=[5,3,8] = [false,true,false]','3==[5,3,8] = false','3!=[5,3,8] = [true,false,true]',
   '3>=[5,3,8] = [false,true,false]','3<=[5,3,8] = [true,true,true]','[7,Nan]>Nan = [false,false]','[7,Nan]<Nan = [false,false]',
   '[7,Nan]=Nan = [false,false]','[7,Nan]==Nan = false','[7,Nan]!=Nan = [false,false]','[7,Nan]>=Nan = [false,false]',
   '[7,Nan]<=Nan = [false,false]'],
  'LDLinux'=>
  ['true and false = false','true or false = true','true xor false = true','3+5 = 8','3*5 = 15','3-5 = -2',
   '3/5 = 0.59999999999999997779','3&5 = 35','3^5 = 243','3 and 5 = 1','3 or 5 = 7','3 xor 5 = 6','3 mod 5 = 3','3 div 5 = 0',
   '3.0+5.0 = 8.0','3.0*5.0 = 15.0','3.0-5.0 = -2.0','3.0/5.0 = 0.6','3.0&5.0 = 3.05.0','3.0^5.0 = 242.99999999999994315',
   '[true,true,false,false] and [true,false,true,false] = [true,false,false,false]',
   '[true,true,false,false] or [true,false,true,false] = [true,true,true,false]',
   '[true,true,false,false] xor [true,false,true,false] = [false,true,true,false]',
   '[1,2,3,4,5,6,7,8,9,10]+[1,2,3,2,2,3,1,4,3,5] = [2,4,6,6,7,9,8,12,12,15]',
   '[1,2,3,4,5,6,7,8,9,10]*[1,2,3,2,2,3,1,4,3,5] = [1,4,9,8,10,18,7,32,27,50]',
   '[1,2,3,4,5,6,7,8,9,10]-[1,2,3,2,2,3,1,4,3,5] = [0,0,0,2,3,3,6,4,6,5]',
   '[1,2,3,4,5,6,7,8,9,10]/[1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2.5,2,7,2,3,2]',
   "[1,2,3,4,5,6,7,8,9,10]&[1,2,3,2,2,3,1,4,3,5] = ['11','22','33','42','52','63','71','84','93','105']",
   '[1,2,3,4,5,6,7,8,9,10]^[1,2,3,2,2,3,1,4,3,5] = [1,4,27,16,25,216,7,4096,729,100000]',
   '[1,2,3,4,5,6,7,8,9,10] and [1,2,3,2,2,3,1,4,3,5] = [1,2,3,0,0,2,1,0,1,0]',
   '[1,2,3,4,5,6,7,8,9,10] or [1,2,3,2,2,3,1,4,3,5] = [1,2,3,6,7,7,7,12,11,15]',
   '[1,2,3,4,5,6,7,8,9,10] xor [1,2,3,2,2,3,1,4,3,5] = [0,0,0,6,7,5,6,12,10,15]',
   '[1,2,3,4,5,6,7,8,9,10] mod [1,2,3,2,2,3,1,4,3,5] = [0,0,0,0,1,0,0,0,0,0]',
   '[1,2,3,4,5,6,7,8,9,10] div [1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2,2,7,2,3,2]','3>3.0 = false','3<3.0 = false','3=3.0 = true',
   '3==3.0 = false','3!=3.0 = false','3>=3.0 = true','3<=3.0 = true','3>[5,3,8] = [false,false,false]',
   '3<[5,3,8] = [true,false,true]','3=[5,3,8] = [false,true,false]','3==[5,3,8] = false','3!=[5,3,8] = [true,false,true]',
   '3>=[5,3,8] = [false,true,false]','3<=[5,3,8] = [true,true,true]','[7,Nan]>Nan = [false,false]','[7,Nan]<Nan = [false,false]',
   '[7,Nan]=Nan = [false,false]','[7,Nan]==Nan = false','[7,Nan]!=Nan = [false,false]','[7,Nan]>=Nan = [false,false]',
   '[7,Nan]<=Nan = [false,false]'],
  'LDWin64'=>
  ['true and false = false','true or false = true','true xor false = true','3+5 = 8','3*5 = 15','3-5 = -2','3/5 = 0.6',
   '3&5 = 35','3^5 = 243','3 and 5 = 1','3 or 5 = 7','3 xor 5 = 6','3 mod 5 = 3','3 div 5 = 0','3.0+5.0 = 8.0','3.0*5.0 = 15.0',
   '3.0-5.0 = -2.0','3.0/5.0 = 0.6','3.0&5.0 = 3.05.0','3.0^5.0 = 242.99999999999974',
   '[true,true,false,false] and [true,false,true,false] = [true,false,false,false]',
   '[true,true,false,false] or [true,false,true,false] = [true,true,true,false]',
   '[true,true,false,false] xor [true,false,true,false] = [false,true,true,false]',
   '[1,2,3,4,5,6,7,8,9,10]+[1,2,3,2,2,3,1,4,3,5] = [2,4,6,6,7,9,8,12,12,15]',
   '[1,2,3,4,5,6,7,8,9,10]*[1,2,3,2,2,3,1,4,3,5] = [1,4,9,8,10,18,7,32,27,50]',
   '[1,2,3,4,5,6,7,8,9,10]-[1,2,3,2,2,3,1,4,3,5] = [0,0,0,2,3,3,6,4,6,5]',
   '[1,2,3,4,5,6,7,8,9,10]/[1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2.5,2,7,2,3,2]',
   "[1,2,3,4,5,6,7,8,9,10]&[1,2,3,2,2,3,1,4,3,5] = ['11','22','33','42','52','63','71','84','93','105']",
   '[1,2,3,4,5,6,7,8,9,10]^[1,2,3,2,2,3,1,4,3,5] = [1,4,27,16,25,216,7,4096,729,100000]',
   '[1,2,3,4,5,6,7,8,9,10] and [1,2,3,2,2,3,1,4,3,5] = [1,2,3,0,0,2,1,0,1,0]',
   '[1,2,3,4,5,6,7,8,9,10] or [1,2,3,2,2,3,1,4,3,5] = [1,2,3,6,7,7,7,12,11,15]',
   '[1,2,3,4,5,6,7,8,9,10] xor [1,2,3,2,2,3,1,4,3,5] = [0,0,0,6,7,5,6,12,10,15]',
   '[1,2,3,4,5,6,7,8,9,10] mod [1,2,3,2,2,3,1,4,3,5] = [0,0,0,0,1,0,0,0,0,0]',
   '[1,2,3,4,5,6,7,8,9,10] div [1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2,2,7,2,3,2]','3>3.0 = false','3<3.0 = false','3=3.0 = true',
   '3==3.0 = false','3!=3.0 = false','3>=3.0 = true','3<=3.0 = true','3>[5,3,8] = [false,false,false]',
   '3<[5,3,8] = [true,false,true]','3=[5,3,8] = [false,true,false]','3==[5,3,8] = false','3!=[5,3,8] = [true,false,true]',
   '3>=[5,3,8] = [false,true,false]','3<=[5,3,8] = [true,true,true]','[7,Nan]>Nan = [false,false]','[7,Nan]<Nan = [false,false]',
   '[7,Nan]=Nan = [false,false]','[7,Nan]==Nan = false','[7,Nan]!=Nan = [false,false]','[7,Nan]>=Nan = [false,false]',
   '[7,Nan]<=Nan = [false,false]'],
  'LOLinux'=>
  ['true and false = false','true or false = true','true xor false = true','3+5 = 8','3*5 = 15','3-5 = -2',
   '3/5 = 0.59999999999999997779','3&5 = 35','3^5 = 243','3 and 5 = 1','3 or 5 = 7','3 xor 5 = 6','3 mod 5 = 3','3 div 5 = 0',
   '3.0+5.0 = 8.0','3.0*5.0 = 15.0','3.0-5.0 = -2.0','3.0/5.0 = 0.6','3.0&5.0 = 3.05.0','3.0^5.0 = 242.99999999999994315',
   '[true,true,false,false] and [true,false,true,false] = [true,false,false,false]',
   '[true,true,false,false] or [true,false,true,false] = [true,true,true,false]',
   '[true,true,false,false] xor [true,false,true,false] = [false,true,true,false]',
   '[1,2,3,4,5,6,7,8,9,10]+[1,2,3,2,2,3,1,4,3,5] = [2,4,6,6,7,9,8,12,12,15]',
   '[1,2,3,4,5,6,7,8,9,10]*[1,2,3,2,2,3,1,4,3,5] = [1,4,9,8,10,18,7,32,27,50]',
   '[1,2,3,4,5,6,7,8,9,10]-[1,2,3,2,2,3,1,4,3,5] = [0,0,0,2,3,3,6,4,6,5]',
   '[1,2,3,4,5,6,7,8,9,10]/[1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2.5,2,7,2,3,2]',
   "[1,2,3,4,5,6,7,8,9,10]&[1,2,3,2,2,3,1,4,3,5] = ['11','22','33','42','52','63','71','84','93','105']",
   '[1,2,3,4,5,6,7,8,9,10]^[1,2,3,2,2,3,1,4,3,5] = [1,4,27,16,25,216,7,4096,729,100000]',
   '[1,2,3,4,5,6,7,8,9,10] and [1,2,3,2,2,3,1,4,3,5] = [1,2,3,0,0,2,1,0,1,0]',
   '[1,2,3,4,5,6,7,8,9,10] or [1,2,3,2,2,3,1,4,3,5] = [1,2,3,6,7,7,7,12,11,15]',
   '[1,2,3,4,5,6,7,8,9,10] xor [1,2,3,2,2,3,1,4,3,5] = [0,0,0,6,7,5,6,12,10,15]',
   '[1,2,3,4,5,6,7,8,9,10] mod [1,2,3,2,2,3,1,4,3,5] = [0,0,0,0,1,0,0,0,0,0]',
   '[1,2,3,4,5,6,7,8,9,10] div [1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2,2,7,2,3,2]','3>3.0 = false','3<3.0 = false','3=3.0 = true',
   '3==3.0 = false','3!=3.0 = false','3>=3.0 = true','3<=3.0 = true','3>[5,3,8] = [false,false,false]',
   '3<[5,3,8] = [true,false,true]','3=[5,3,8] = [false,true,false]','3==[5,3,8] = false','3!=[5,3,8] = [true,false,true]',
   '3>=[5,3,8] = [false,true,false]','3<=[5,3,8] = [true,true,true]','[7,Nan]>Nan = [false,false]','[7,Nan]<Nan = [false,false]',
   '[7,Nan]=Nan = [false,false]','[7,Nan]==Nan = false','[7,Nan]!=Nan = [false,false]','[7,Nan]>=Nan = [false,false]',
   '[7,Nan]<=Nan = [false,false]'],
  'LOWin64'=>
  ['true and false = false','true or false = true','true xor false = true','3+5 = 8','3*5 = 15','3-5 = -2','3/5 = 0.6',
   '3&5 = 35','3^5 = 243','3 and 5 = 1','3 or 5 = 7','3 xor 5 = 6','3 mod 5 = 3','3 div 5 = 0','3.0+5.0 = 8.0','3.0*5.0 = 15.0',
   '3.0-5.0 = -2.0','3.0/5.0 = 0.6','3.0&5.0 = 3.05.0','3.0^5.0 = 242.99999999999974',
   '[true,true,false,false] and [true,false,true,false] = [true,false,false,false]',
   '[true,true,false,false] or [true,false,true,false] = [true,true,true,false]',
   '[true,true,false,false] xor [true,false,true,false] = [false,true,true,false]',
   '[1,2,3,4,5,6,7,8,9,10]+[1,2,3,2,2,3,1,4,3,5] = [2,4,6,6,7,9,8,12,12,15]',
   '[1,2,3,4,5,6,7,8,9,10]*[1,2,3,2,2,3,1,4,3,5] = [1,4,9,8,10,18,7,32,27,50]',
   '[1,2,3,4,5,6,7,8,9,10]-[1,2,3,2,2,3,1,4,3,5] = [0,0,0,2,3,3,6,4,6,5]',
   '[1,2,3,4,5,6,7,8,9,10]/[1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2.5,2,7,2,3,2]',
   "[1,2,3,4,5,6,7,8,9,10]&[1,2,3,2,2,3,1,4,3,5] = ['11','22','33','42','52','63','71','84','93','105']",
   '[1,2,3,4,5,6,7,8,9,10]^[1,2,3,2,2,3,1,4,3,5] = [1,4,27,16,25,216,7,4096,729,100000]',
   '[1,2,3,4,5,6,7,8,9,10] and [1,2,3,2,2,3,1,4,3,5] = [1,2,3,0,0,2,1,0,1,0]',
   '[1,2,3,4,5,6,7,8,9,10] or [1,2,3,2,2,3,1,4,3,5] = [1,2,3,6,7,7,7,12,11,15]',
   '[1,2,3,4,5,6,7,8,9,10] xor [1,2,3,2,2,3,1,4,3,5] = [0,0,0,6,7,5,6,12,10,15]',
   '[1,2,3,4,5,6,7,8,9,10] mod [1,2,3,2,2,3,1,4,3,5] = [0,0,0,0,1,0,0,0,0,0]',
   '[1,2,3,4,5,6,7,8,9,10] div [1,2,3,2,2,3,1,4,3,5] = [1,1,1,2,2,2,7,2,3,2]','3>3.0 = false','3<3.0 = false','3=3.0 = true',
   '3==3.0 = false','3!=3.0 = false','3>=3.0 = true','3<=3.0 = true','3>[5,3,8] = [false,false,false]',
   '3<[5,3,8] = [true,false,true]','3=[5,3,8] = [false,true,false]','3==[5,3,8] = false','3!=[5,3,8] = [true,false,true]',
   '3>=[5,3,8] = [false,true,false]','3<=[5,3,8] = [true,true,true]','[7,Nan]>Nan = [false,false]','[7,Nan]<Nan = [false,false]',
   '[7,Nan]=Nan = [false,false]','[7,Nan]==Nan = false','[7,Nan]!=Nan = [false,false]','[7,Nan]>=Nan = [false,false]',
   '[7,Nan]<=Nan = [false,false]']].toMap,
 'overrideDemo'=>
 ['1 - declaring const1','2 - declaring const2','    overridden method called','3 - Calling f1','    overridden method called',
  '    0.1411200','4 - Calling f2','    overridden method called','    -0.7568025','5 - const1 = 0.8414710',
  '6 - const2 = 0.9092974'],
 'pangrams'=>
 ["'The quick brown fox jumps over the lazy dog.' is a pangram"],
 'pascal'=>
 ['                           1','                        1     1','                     1     2     1',
  '                  1     3     3     1','               1     4     6     4     1',
  '            1     5    10    10     5     1','         1     6    15    20    15     6    1',
  '       1    7    21    35    35    21     7   1','     1   8    28    56    70    56    28    8   1',
  '   1   9   36    84   126   126    84    36   9   1',' 1  10  45   120   210   252   210   120   45  10  1',
  '1 11  55  165   330   462   462   330   165  55  11 1'],
 'perfectPowers'=>
 ['The first perfect powers are [1,4,8,9,16,25,27,32,36,49,64,81,100]','There are 1111 distinct perfect powers <=1000000'],
 'pernicousNumbers'=>
 ['[3,5,6,7,9,10,11,12,13,14,17,18,19,20,21,22,24,25,26,28,31,33,34,35,36]',
  '[888888877,888888878,888888880,888888883,888888885,888888886]'],
 'prime_descendants'=>
 ['[46] level 3','Ancestors: 25, 10, 7','Descendants: 557',
  '129, 205, 246, 493, 518, 529, 740, 806, 888, 999, 1364, 1508, 1748, 2552, 2871, 3128, 3255, 3472, 3519, 3875, 3906, 4263, 4650, 4960, 5075, 5415, 5580, 5776, 5952, 6090, 6279, 6496, 6498, 6696, 6783, 7250, 7308, 7475, 7533, 8075, 8151, 8619, 8700, 8855, 8970, 9280, 9568, 9690, 10115, 10336, 10440, 10626, 10764, 11136, 11495, 11628, 11745, 12103, 12138, 12155, 12528, 12650, 13794, 14094, 14399, 14450, 14586, 15180, 15379, 15778, 16192, 17290, 17303, 17340, 18216, 18496, 20482, 20493, 20570, 20748, 20808, 21658, 21970, 22540, 23409, 24684, 24700, 26026, 26364, 27048, 29260, 29282, 29640, 30429, 30940, 31616, 32200, 33345, 35112, 35568, 36225, 36652, 37128, 37180, 38640, 39501, 40014, 41216, 41769, 41800, 43125, 43470, 44044, 44200, 44616, 46000, 46368, 47025, 49725, 50160, 50193, 51750, 52136, 52164, 52360, 53040, 53504, 55200, 56430, 56576, 58653, 58880, 58905, 59670, 60192, 62100, 62832, 62920, 63648, 66240, 66248, 67716, 69825, 70125, 70656, 70686, 70785, 71604, 74480, 74520, 74529, 74536, 74800, 75504, 79488, 83125, 83790, 83835, 83853, 84150, 84942, 87465, 88725, 89376, 89424, 89760, 93296, 94640, 95744, 99750, 99825, 100548, 100602, 100980, 104125, 104958, 105105, 105625, 106400, 106470, 106480, 107712, 112112, 113568, 118750, 119700, 119790, 121176, 124509, 124950, 125125, 126126, 126750, 127680, 127764, 127776, 133280, 135200, 136192, 136323, 142500, 143640, 143748, 148225, 148750, 149940, 150150, 152000, 152100, 153216, 156065, 159936, 160160, 161595, 162240, 171000, 172368, 173056, 177870, 178500, 178750, 179928, 180180, 182400, 182520, 184877, 187278, 189728, 190400, 192192, 192375, 193914, 194560, 194688, 202419, 205200, 205335, 211750, 212500, 213444, 214200, 214500, 216216, 218880, 219024, 222950, 228480, 228800, 230850, 233472, 240975, 243243, 243712, 246240, 246402, 254100, 255000, 257040, 257400, 262656, 264110, 267540, 271040, 272000, 274176, 274560, 277020, 285376, 286875, 289170, 289575, 292864, 295488, 302500, 304920, 306000, 308448, 308880, 316932, 318500, 321048, 325248, 326400, 329472, 332424, 343035, 344250, 347004, 347490, 348160, 361179, 363000, 365904, 367200, 370656, 373977, 377300, 382200, 387200, 391680, 407680, 408375, 411642, 413100, 416988, 417792, 429975, 435600, 440640, 452760, 455000, 458640, 464640, 470016, 470596, 482944, 489216, 490050, 495616, 495720, 509355, 511875, 515970, 522720, 528768, 539000, 543312, 546000, 550368, 557568, 557685, 582400, 588060, 594864, 606375, 609375, 611226, 614250, 619164, 627264, 646800, 650000, 655200, 669222, 672280, 689920, 698880, 705672, 721875, 727650, 731250, 737100, 745472, 756315, 770000, 776160, 780000, 786240, 793881, 806736, 827904, 832000, 838656, 859375, 866250, 873180, 877500, 884520, 900375, 907578, 924000, 931392, 936000, 943488, 960400, 985600, 995085, 998400, 1031250, 1039500, 1047816, 1053000, 1061424, 1064960, 1071875, 1080450, 1100000, 1108800, 1123200, 1152480, 1178793, 1182720, 1184625, 1194102, 1198080, 1229312, 1237500, 1247400, 1261568, 1263600, 1277952, 1286250, 1296540, 1320000, 1330560, 1347840, 1372000, 1382976, 1403325, 1408000, 1419264, 1421550, 1437696, 1485000, 1496880, 1516320, 1531250, 1543500, 1555848, 1584000, 1596672, 1617408, 1646400, 1670625, 1683990, 1689600, 1705860, 1750329, 1756160, 1782000, 1796256, 1802240, 1819584, 1837500, 1852200, 1900800, 1960000, 1975680, 2004750, 2020788, 2027520, 2047032, 2083725, 2107392, 2138400, 2162688, 2187500, 2205000, 2222640, 2280960, 2302911, 2352000, 2370816, 2405700, 2433024, 2480625, 2500470, 2508800, 2566080, 2625000, 2646000, 2667168, 2737152, 2800000, 2822400, 2886840, 2953125, 2976750, 3000564, 3010560, 3079296, 3125000, 3150000, 3175200, 3211264, 3247695, 3360000, 3386880, 3464208, 3515625, 3543750, 3572100, 3584000, 3612672, 3750000, 3780000, 3810240, 3897234, 4000000, 4032000, 4064256, 4218750, 4252500, 4286520, 4300800, 4500000, 4536000, 4572288, 4587520, 4800000, 4822335, 4838400, 5062500, 5103000, 5120000, 5143824, 5160960, 5400000, 5443200, 5505024, 5740875, 5760000, 5786802, 5806080, 6075000, 6123600, 6144000, 6193152, 6480000, 6531840, 6553600, 6834375, 6889050, 6912000, 6967296, 7290000, 7348320, 7372800, 7776000, 7838208, 7864320, 8201250, 8266860, 8294400, 8388608, 8748000, 8817984, 8847360, 9331200, 9437184, 9841500, 9920232, 9953280, 10497600, 10616832, 11160261, 11197440, 11809800, 11943936, 12597120, 13286025, 13436928, 14171760, 15116544, 15943230, 17006112, 19131876'
 ],
 'printfUsageDemo'=>
 ['FDWin64'=>
  ['Call with parameter:','  This is a test','Call with multiple parameters','  234 != 3.141592653589793',
   'Call with multiple parameters, reordering and/or computing','  3.141592653589793 != 234','  3.141592653589793 != 15',
   'Passing a list will result in multiple lines of output','  234','  3.141592653589793','  test',
   'Call without parameter, using string interpolation','  printf: test','  print : %{string}s',
   'Note, that you cannot access function/each parameters by string interpolation','Insteaf of %{...}s you can write {...}',
   '  pi=3.141592653589793','You can use curly brackets or percent signs in formats by escaping them',
   '  I am 75% sure that { and } can be escaped','Decimal format: %d (note the fallback for strings','  234',
   '  3.141592653589793','  test','Decimal format: %5d (5 chars wide without leading zero)','    234','   -234',
   'Decimal format: %5.5d (5 chars wide with leading zero)','  00234','  -0234','Exponential form: %e','  2.34000000000000E+002',
   '  3.14159265358979E+000','Exponential form: %3.3e','  2.34E+002','  3.14E+000','Float form: %f','  234.00','  3.14',
   'Float form: %7.3f (7 chars total, 3 decimal places)','  234.000','    3.142','General number format: %g','  234',
   '  3.14159265358979','General number format: %5.2g (5 chars with minimum, 2 most significant digits)','  2.3E2','    3.1',
   'Money format %m',"  234.00 €",'Money format %m',"  234.00 €",
   'Number format: %6.2n (6 chars width minimum, 2 decimal places)','  234.00','    3.14','Hexadecimal form: %x','  EA',
   'Hexadecimal form: %6.4x (6 chars width minimum, 4 digits guaranteed even if zero)','    00EA',
   'Finally... you can use f"<some format string" instead of format("<some format string>")','pi=3.141592653589793'],
  'FOWin64'=>
  ['Call with parameter:','  This is a test','Call with multiple parameters','  234 != 3.141592653589793',
   'Call with multiple parameters, reordering and/or computing','  3.141592653589793 != 234','  3.141592653589793 != 15',
   'Passing a list will result in multiple lines of output','  234','  3.141592653589793','  test',
   'Call without parameter, using string interpolation','  printf: test','  print : %{string}s',
   'Note, that you cannot access function/each parameters by string interpolation','Insteaf of %{...}s you can write {...}',
   '  pi=3.141592653589793','You can use curly brackets or percent signs in formats by escaping them',
   '  I am 75% sure that { and } can be escaped','Decimal format: %d (note the fallback for strings','  234',
   '  3.141592653589793','  test','Decimal format: %5d (5 chars wide without leading zero)','    234','   -234',
   'Decimal format: %5.5d (5 chars wide with leading zero)','  00234','  -0234','Exponential form: %e','  2.34000000000000E+002',
   '  3.14159265358979E+000','Exponential form: %3.3e','  2.34E+002','  3.14E+000','Float form: %f','  234.00','  3.14',
   'Float form: %7.3f (7 chars total, 3 decimal places)','  234.000','    3.142','General number format: %g','  234',
   '  3.14159265358979','General number format: %5.2g (5 chars with minimum, 2 most significant digits)','  2.3E2','    3.1',
   'Money format %m',"  234.00 €",'Money format %m',"  234.00 €",
   'Number format: %6.2n (6 chars width minimum, 2 decimal places)','  234.00','    3.14','Hexadecimal form: %x','  EA',
   'Hexadecimal form: %6.4x (6 chars width minimum, 4 digits guaranteed even if zero)','    00EA',
   'Finally... you can use f"<some format string" instead of format("<some format string>")','pi=3.141592653589793'],
  'LDWin64'=>
  ['Call with parameter:','  This is a test','Call with multiple parameters','  234 != 3.141592653589793',
   'Call with multiple parameters, reordering and/or computing','  3.141592653589793 != 234','  3.141592653589793 != 15',
   'Passing a list will result in multiple lines of output','  234','  3.141592653589793','  test',
   'Call without parameter, using string interpolation','  printf: test','  print : %{string}s',
   'Note, that you cannot access function/each parameters by string interpolation','Insteaf of %{...}s you can write {...}',
   '  pi=3.141592653589793','You can use curly brackets or percent signs in formats by escaping them',
   '  I am 75% sure that { and } can be escaped','Decimal format: %d (note the fallback for strings','  234',
   '  3.141592653589793','  test','Decimal format: %5d (5 chars wide without leading zero)','    234','   -234',
   'Decimal format: %5.5d (5 chars wide with leading zero)','  00234','  -0234','Exponential form: %e','  2.34000000000000E+002',
   '  3.14159265358979E+000','Exponential form: %3.3e','  2.34E+002','  3.14E+000','Float form: %f','  234.00','  3.14',
   'Float form: %7.3f (7 chars total, 3 decimal places)','  234.000','    3.142','General number format: %g','  234',
   '  3.14159265358979','General number format: %5.2g (5 chars with minimum, 2 most significant digits)','  2.3E2','    3.1',
   'Money format %m',"  234.00 €",'Money format %m',"  234.00 €",
   'Number format: %6.2n (6 chars width minimum, 2 decimal places)','  234.00','    3.14','Hexadecimal form: %x','  EA',
   'Hexadecimal form: %6.4x (6 chars width minimum, 4 digits guaranteed even if zero)','    00EA',
   'Finally... you can use f"<some format string" instead of format("<some format string>")','pi=3.141592653589793'],
  'LOWin64'=>
  ['Call with parameter:','  This is a test','Call with multiple parameters','  234 != 3.141592653589793',
   'Call with multiple parameters, reordering and/or computing','  3.141592653589793 != 234','  3.141592653589793 != 15',
   'Passing a list will result in multiple lines of output','  234','  3.141592653589793','  test',
   'Call without parameter, using string interpolation','  printf: test','  print : %{string}s',
   'Note, that you cannot access function/each parameters by string interpolation','Insteaf of %{...}s you can write {...}',
   '  pi=3.141592653589793','You can use curly brackets or percent signs in formats by escaping them',
   '  I am 75% sure that { and } can be escaped','Decimal format: %d (note the fallback for strings','  234',
   '  3.141592653589793','  test','Decimal format: %5d (5 chars wide without leading zero)','    234','   -234',
   'Decimal format: %5.5d (5 chars wide with leading zero)','  00234','  -0234','Exponential form: %e','  2.34000000000000E+002',
   '  3.14159265358979E+000','Exponential form: %3.3e','  2.34E+002','  3.14E+000','Float form: %f','  234.00','  3.14',
   'Float form: %7.3f (7 chars total, 3 decimal places)','  234.000','    3.142','General number format: %g','  234',
   '  3.14159265358979','General number format: %5.2g (5 chars with minimum, 2 most significant digits)','  2.3E2','    3.1',
   'Money format %m',"  234.00 €",'Money format %m',"  234.00 €",
   'Number format: %6.2n (6 chars width minimum, 2 decimal places)','  234.00','    3.14','Hexadecimal form: %x','  EA',
   'Hexadecimal form: %6.4x (6 chars width minimum, 4 digits guaranteed even if zero)','    00EA',
   'Finally... you can use f"<some format string" instead of format("<some format string>")','pi=3.141592653589793']].toMap,
 'pythagoras'=>
 ['In perimeter <=     10 there are      0 pythagorean triplets,     0 of which are primitive',
  'In perimeter <=    100 there are     17 pythagorean triplets,     7 of which are primitive',
  'In perimeter <=   1000 there are    325 pythagorean triplets,    70 of which are primitive',
  'In perimeter <=  10000 there are   4858 pythagorean triplets,   703 of which are primitive',
  'In perimeter <= 100000 there are  64741 pythagorean triplets,  7026 of which are primitive'],
 'queens'=>
 ['The 2-queens puzzle has 0 solutions','The 3-queens puzzle has 0 solutions','The 4-queens puzzle has 2 solutions',
  '  e.g. A2 B4 C1 D3 ','The 5-queens puzzle has 10 solutions','  e.g. A1 B3 C5 D2 E4 ','The 6-queens puzzle has 4 solutions',
  '  e.g. A2 B4 C6 D1 E3 F5 ','The 7-queens puzzle has 40 solutions','  e.g. A1 B3 C5 D7 E2 F4 G6 ',
  'The 8-queens puzzle has 92 solutions','  e.g. A1 B5 C8 D6 E3 F7 G2 H4 '],
 'queue'=>
 ['The next element is 51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71',
  '72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96',
  '97','98','99','100'],
 'quine'=>
 ["main->print('main', :: main,';');"],
 'quine2'=>
 ['//*Quine via inspection','@demo_for=textbook problems',"main->print(inspect['source']);"],
 'randomWords'=>
 ['Brdetovuc','cenesona','anflovic','ckulyle','Tarers','bitaniful','sendjaronm','chunswis','ffunechi','reeyliksontu','cick',
  'Matrkjantu','darbaca','desowglur',"ijitrsos'se","d'stufipef"],
 'range_extract_expand'=>
 ['Canonical form (as given by rosettacode.org):',
  '  The list              [0,1,2,4,6,7,8,11,12,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,35,36,37,38,39]',
  '  can be represented as 0-2,4,6-8,11-12,14-25,27-33,35-39',
  '  and be re-expanded to [0,1,2,4,6,7,8,11,12,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,35,36,37,38,39]','',
  '  The range               -6,-3--1,3-5,7-11,14,15,17-20',
  '  can be expanded to      [-6,-3,-2,-1,3,4,5,7,8,9,10,11,14,15,17,18,19,20]',
  '  and be re-compressed to -6,-3--1,3-5,7-11,14-15,17-20','','MNH form:',
  '  The list              [0,1,2,4,6,7,8,11,12,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,35,36,37,38,39]',
  '  can be represented as [0..2,4,6..8,11..12,14..25,27..33,35..39]',
  '  and be re-expanded to [0,1,2,4,6,7,8,11,12,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,35,36,37,38,39]'],
 'rationalPi'=>
 ['4                                     = 4.0','8/3                                   = 2.6666',
  '52/15                                 = 3.4666','304/105                               = 2.8952',
  '1052/315                              = 3.3396','10312/3465                            = 2.9760',
  '147916/45045                          = 3.2837','135904/45045                          = 3.0170',
  '2490548/765765                        = 3.2523','44257352/14549535                     = 3.0418',
  '47028692/14549535                     = 3.2323','1023461776/334639305                  = 3.0584',
  '5385020324/1673196525                 = 3.2184','15411418072/5019589575                = 3.0702',
  '467009482388/145568097675             = 3.2081','13895021563328/4512611027925          = 3.0791',
  '14442004718228/4512611027925          = 3.2003','13926277743608/4512611027925          = 3.0860',
  '533322720625196/166966608033225       = 3.1941','516197940314096/166966608033225       = 3.0916',
  '21831981985010836/6845630929362225    = 3.1891','911392701638017048/294362129962575675 = 3.0961'],
 'recaman'=>
 ['The first 15 Recaman numbers are [0,1,3,6,2,7,13,20,12,21,11,22,10,23,9]','The first duplicated Number in the sequence is 42',
  'You need 328002 steps to generate all integers up to (including) 1000'],
 'relevantDigitsTest'=>
 ['FDLinux'=>
  ['7.1','7.01','7.001','7.0001','7.00001','7.000001','7.0000001','7.00000001','7.000000001','7.0000000001','7.00000000001',
   '7.000000000001','7.0000000000001','7.00000000000001','7.000000000000001','7.0000000000000001','7.0000000000000000099',
   '7.0000000000000000008','7.0','7.0','7.0'],
  'FDWin64'=>
  ['7.1','7.01','7.001','7.0001','7.00001','7.000001','7.0000001','7.00000001','7.000000001','7.0000000001','7.00000000001',
   '7.000000000001','7.0000000000001','7.00000000000001','7.0000000000000009','7.0','7.0','7.0','7.0','7.0','7.0'],
  'FOLinux'=>
  ['7.1','7.01','7.001','7.0001','7.00001','7.000001','7.0000001','7.00000001','7.000000001','7.0000000001','7.00000000001',
   '7.000000000001','7.0000000000001','7.00000000000001','7.000000000000001','7.0000000000000001','7.0000000000000000099',
   '7.0000000000000000008','7.0','7.0','7.0'],
  'FOWin64'=>
  ['7.1','7.01','7.001','7.0001','7.00001','7.000001','7.0000001','7.00000001','7.000000001','7.0000000001','7.00000000001',
   '7.000000000001','7.0000000000001','7.00000000000001','7.0000000000000009','7.0','7.0','7.0','7.0','7.0','7.0'],
  'LDLinux'=>
  ['7.1','7.01','7.001','7.0001','7.00001','7.000001','7.0000001','7.00000001','7.000000001','7.0000000001','7.00000000001',
   '7.000000000001','7.0000000000001','7.00000000000001','7.000000000000001','7.0000000000000001','7.0000000000000000099',
   '7.0000000000000000008','7.0','7.0','7.0'],
  'LDWin64'=>
  ['7.1','7.01','7.001','7.0001','7.00001','7.000001','7.0000001','7.00000001','7.000000001','7.0000000001','7.00000000001',
   '7.000000000001','7.0000000000001','7.00000000000001','7.0000000000000009','7.0','7.0','7.0','7.0','7.0','7.0'],
  'LOLinux'=>
  ['7.1','7.01','7.001','7.0001','7.00001','7.000001','7.0000001','7.00000001','7.000000001','7.0000000001','7.00000000001',
   '7.000000000001','7.0000000000001','7.00000000000001','7.000000000000001','7.0000000000000001','7.0000000000000000099',
   '7.0000000000000000008','7.0','7.0','7.0'],
  'LOWin64'=>
  ['7.1','7.01','7.001','7.0001','7.00001','7.000001','7.0000001','7.00000001','7.000000001','7.0000000001','7.00000000001',
   '7.000000000001','7.0000000000001','7.00000000000001','7.0000000000000009','7.0','7.0','7.0','7.0','7.0','7.0']].toMap,
 'rk4'=>
 ['time |      exact |        RK4','-----+------------+------------',' 0.0 |   1.000000 |   1.000000',
  ' 0.1 |   1.005006 |   1.005006',' 0.2 |   1.020100 |   1.020100',' 0.3 |   1.045506 |   1.045506',
  ' 0.4 |   1.081600 |   1.081600',' 0.5 |   1.128906 |   1.128906',' 0.6 |   1.188100 |   1.188100',
  ' 0.7 |   1.260006 |   1.260006',' 0.8 |   1.345600 |   1.345600',' 0.9 |   1.446006 |   1.446006',
  ' 1.0 |   1.562500 |   1.562500',' 1.1 |   1.696506 |   1.696506',' 1.2 |   1.849600 |   1.849600',
  ' 1.3 |   2.023506 |   2.023506',' 1.4 |   2.220100 |   2.220100',' 1.5 |   2.441406 |   2.441406',
  ' 1.6 |   2.689600 |   2.689600',' 1.7 |   2.967006 |   2.967006',' 1.8 |   3.276100 |   3.276099',
  ' 1.9 |   3.619506 |   3.619505',' 2.0 |   4.000000 |   3.999999',' 2.1 |   4.420506 |   4.420505',
  ' 2.2 |   4.884100 |   4.884099',' 2.3 |   5.394006 |   5.394005',' 2.4 |   5.953600 |   5.953598',
  ' 2.5 |   6.566406 |   6.566405',' 2.6 |   7.236100 |   7.236098',' 2.7 |   7.966506 |   7.966504',
  ' 2.8 |   8.761600 |   8.761598',' 2.9 |   9.625506 |   9.625504',' 3.0 |  10.562500 |  10.562497',
  ' 3.1 |  11.577006 |  11.577003',' 3.2 |  12.673600 |  12.673597',' 3.3 |  13.857006 |  13.857002',
  ' 3.4 |  15.132100 |  15.132096',' 3.5 |  16.503906 |  16.503902',' 3.6 |  17.977600 |  17.977595',
  ' 3.7 |  19.558506 |  19.558501',' 3.8 |  21.252100 |  21.252095',' 3.9 |  23.064006 |  23.064000',
  ' 4.0 |  25.000000 |  24.999994',' 4.1 |  27.066006 |  27.066000',' 4.2 |  29.268100 |  29.268093',
  ' 4.3 |  31.612506 |  31.612499',' 4.4 |  34.105600 |  34.105592',' 4.5 |  36.753906 |  36.753898',
  ' 4.6 |  39.564100 |  39.564091',' 4.7 |  42.543006 |  42.542997',' 4.8 |  45.697600 |  45.697590',
  ' 4.9 |  49.035006 |  49.034996',' 5.0 |  52.562500 |  52.562489',' 5.1 |  56.287506 |  56.287495',
  ' 5.2 |  60.217600 |  60.217588',' 5.3 |  64.360506 |  64.360494',' 5.4 |  68.724100 |  68.724087',
  ' 5.5 |  73.316406 |  73.316393',' 5.6 |  78.145600 |  78.145586',' 5.7 |  83.220006 |  83.219992',
  ' 5.8 |  88.548100 |  88.548085',' 5.9 |  94.138506 |  94.138490',' 6.0 | 100.000000 |  99.999983',
  ' 6.1 | 106.141506 | 106.141489',' 6.2 | 112.572100 | 112.572082',' 6.3 | 119.301006 | 119.300988',
  ' 6.4 | 126.337600 | 126.337581',' 6.5 | 133.691406 | 133.691386',' 6.6 | 141.372100 | 141.372079',
  ' 6.7 | 149.389506 | 149.389485',' 6.8 | 157.753600 | 157.753578',' 6.9 | 166.474506 | 166.474483',
  ' 7.0 | 175.562500 | 175.562476',' 7.1 | 185.028006 | 185.027982',' 7.2 | 194.881600 | 194.881575',
  ' 7.3 | 205.134006 | 205.133980',' 7.4 | 215.796100 | 215.796073',' 7.5 | 226.878906 | 226.878879',
  ' 7.6 | 238.393600 | 238.393572',' 7.7 | 250.351506 | 250.351477',' 7.8 | 262.764100 | 262.764070',
  ' 7.9 | 275.643006 | 275.642976',' 8.0 | 289.000000 | 288.999968',' 8.1 | 302.847006 | 302.846974',
  ' 8.2 | 317.196100 | 317.196067',' 8.3 | 332.059506 | 332.059472',' 8.4 | 347.449600 | 347.449565',
  ' 8.5 | 363.378906 | 363.378870',' 8.6 | 379.860100 | 379.860063',' 8.7 | 396.906006 | 396.905968',
  ' 8.8 | 414.529600 | 414.529561',' 8.9 | 432.744006 | 432.743966',' 9.0 | 451.562500 | 451.562459',
  ' 9.1 | 470.998506 | 470.998465',' 9.2 | 491.065600 | 491.065557',' 9.3 | 511.777506 | 511.777463',
  ' 9.4 | 533.148100 | 533.148055',' 9.5 | 555.191406 | 555.191361',' 9.6 | 577.921600 | 577.921553',
  ' 9.7 | 601.353006 | 601.352958',' 9.8 | 625.500100 | 625.500051',' 9.9 | 650.377506 | 650.377456',
  '10.0 | 676.000000 | 675.999949'],
 'roman'=>
 ['MMXV       (roman)  =       2015 (arabic)','MCMXC      (roman)  =       1990 (arabic)',
  'MMVIII     (roman)  =       2008 (arabic)','MDCLXVI    (roman)  =       1666 (arabic)',
  '      2000 (arabic) = M          (roman)','      1989 (arabic) = MCMLXXXIX  (roman)',
  '        23 (arabic) = XXIII      (roman)','      1666 (arabic) = MDCLXVI    (roman)'],
 'root'=>
 ['FDLinux'=>
  ['See http://rosettacode.org/wiki/Roots_of_a_function','Analyzing $x^3-3*$x^2+2*$x',
   'Root found near -1.67047794380762227866E-52','Root found at   1.0','Root found at   2.0'],
  'FDWin64'=>
  ['See http://rosettacode.org/wiki/Roots_of_a_function','Analyzing $x^3-3*$x^2+2*$x','Root found at   0.0',
   'Root found at   1.0','Root found at   2.0'],
  'FOLinux'=>
  ['See http://rosettacode.org/wiki/Roots_of_a_function','Analyzing $x^3-3*$x^2+2*$x',
   'Root found near -1.67047794380762227866E-52','Root found at   1.0','Root found at   2.0'],
  'FOWin64'=>
  ['See http://rosettacode.org/wiki/Roots_of_a_function','Analyzing $x^3-3*$x^2+2*$x','Root found at   0.0',
   'Root found at   1.0','Root found at   2.0'],
  'LDLinux'=>
  ['See http://rosettacode.org/wiki/Roots_of_a_function','Analyzing $x^3-3*$x^2+2*$x',
   'Root found near -1.67047794380762227866E-52','Root found at   1.0','Root found at   2.0'],
  'LDWin64'=>
  ['See http://rosettacode.org/wiki/Roots_of_a_function','Analyzing $x^3-3*$x^2+2*$x','Root found at   0.0',
   'Root found at   1.0','Root found at   2.0'],
  'LOLinux'=>
  ['See http://rosettacode.org/wiki/Roots_of_a_function','Analyzing $x^3-3*$x^2+2*$x',
   'Root found near -1.67047794380762227866E-52','Root found at   1.0','Root found at   2.0'],
  'LOWin64'=>
  ['See http://rosettacode.org/wiki/Roots_of_a_function','Analyzing $x^3-3*$x^2+2*$x','Root found at   0.0',
   'Root found at   1.0','Root found at   2.0']].toMap,
 'rotatingCube'=>
 ['FDLinux'=>
  ['png hash: 9542A95102CC2E39D3FAF29BF61873D207874CD1033686CB7DA4B393890CA502'],
  'FDWin64'=>
  ['png hash: 9542A95102CC2E39D3FAF29BF61873D207874CD1033686CB7DA4B393890CA502'],
  'FOLinux'=>
  ['png hash: 9542A95102CC2E39D3FAF29BF61873D207874CD1033686CB7DA4B393890CA502'],
  'FOWin64'=>
  ['png hash: 9542A95102CC2E39D3FAF29BF61873D207874CD1033686CB7DA4B393890CA502']].toMap,
 'rsa'=>
 ['Creating key pair',' private key: [128143,593].toKey','  public key: [128143,65537].toKey','',
  'Cipher: 102030405060708090 with public...','        104399454243902252327','Decipher with private...',
  '        102030405060708090','','Cipher: 102030405060708090 with private...','        33852323349932410086',
  'Decipher with public...','        102030405060708090'],
 'safeAndUnsafePrimes'=>
 ['The first 35 safe primes are: ',
  '  5 7 11 23 47 59 83 107 167 179 227 263 347 359 383 467 479 503 563 587 719 839 863 887 983 1019 1187 1283 1307 1319 1367 1439 1487 1523 1619',
  'The first 40 unsafe primes are: ',
  '  2 3 13 17 19 29 31 37 41 43 53 61 67 71 73 79 89 97 101 103 109 113 127 131 137 139 149 151 157 163 173 181 191 193 197',
  'There are  4324 safe primes below  1000000','There are 30657 safe primes below 10000000',
  'There are  74174 unsafe primes below  1000000','There are 633922 unsafe primes below 10000000'],
 'selfRefSeq'=>
 [
  '0099, 2029, 102219, 10212219, 10313219, 1031122319, 1041222319, 103132131419, 105112331419, 10511223141519, 10612213142519, 1051321314151619, 1071122314251619, 106132131415161719, 108112231415261719, 10713213141516171819, 10911223141516271819, 10813213141516171829, 10812223141516172819, 10714213141516172819, 10812213241516271819'
 ],
 'semiprime'=>
 ['[4,6,9,10,14,15,21,22,25,26,33,34,35,38,39,46,49,51,55,57,58,62,65,69,74,77,82,85,86,87,91,93,94,95]'],
 'semordnilap'=>
 ['Found 244 Semordnilaps','Examples: ajar  , raja','          an    , na','          ani   , ina','          bog   , gob',
  '          diaper, repaid','Longest : nips  , pins  , snip  , spin','          gnus  , guns  , snug  , sung',
  '          parts , sprat , strap , tarps','          loops , pools , sloop , spool','          drawer, redraw, reward, warder'
 ],
 'sequenceOfNonSquares'=>
 ['OEIS: A000037 starts with 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, ...',
  '  The series contains no squares','  The series contains all non-square integers'],
 'setConsolidation'=>
 ['Consolidation of [{A,B} {C,D}]','              is [{C,D},{A,B}]','Consolidation of [{A,B} {B,C}]',
  '              is [{A,B,C}]','Consolidation of [{A,B} {C,D} {D,B}]','              is [{A,B,C,D}]',
  'Consolidation of [{h,i,k} {a,b} {c,d} {d,b} {f,g,h}]','              is [{f,g,h,i,k},{a,b,c,d}]'],
 'shannonEntropy'=>
 ['FDLinux'=>
  ['1.84643934467101550768'],
  'FDWin64'=>
  ['1.8464393446710154'],
  'FOLinux'=>
  ['1.84643934467101550768'],
  'FOWin64'=>
  ['1.8464393446710154'],
  'LDLinux'=>
  ['1.84643934467101550768'],
  'LDWin64'=>
  ['1.8464393446710154'],
  'LOLinux'=>
  ['1.84643934467101550768'],
  'LOWin64'=>
  ['1.8464393446710154']].toMap,
 'sierpinskiCarpet'=>
 [
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][]',
  '[]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  []',
  '[][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][]',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][]',
  '[]  [][]  [][]  []                  []  [][]  [][]  [][]  [][]  [][]  []                  []  [][]  [][]  [][]  [][]  [][]  []                  []  [][]  [][]  []',
  '[][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][]',
  '[][][]      [][][]                  [][][]      [][][][][][]      [][][]                  [][][]      [][][][][][]      [][][]                  [][][]      [][][]',
  '[]  []      []  []                  []  []      []  [][]  []      []  []                  []  []      []  [][]  []      []  []                  []  []      []  []',
  '[][][]      [][][]                  [][][]      [][][][][][]      [][][]                  [][][]      [][][][][][]      [][][]                  [][][]      [][][]',
  '[][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][]',
  '[]  [][]  [][]  []                  []  [][]  [][]  [][]  [][]  [][]  []                  []  [][]  [][]  [][]  [][]  [][]  []                  []  [][]  [][]  []',
  '[][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][]',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][]',
  '[]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  []',
  '[][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][]',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][]                                                      [][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []                                                      []  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][]                                                      [][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[][][]      [][][][][][]      [][][][][][]      [][][]                                                      [][][]      [][][][][][]      [][][][][][]      [][][]',
  '[]  []      []  [][]  []      []  [][]  []      []  []                                                      []  []      []  [][]  []      []  [][]  []      []  []',
  '[][][]      [][][][][][]      [][][][][][]      [][][]                                                      [][][]      [][][][][][]      [][][][][][]      [][][]',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][]                                                      [][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []                                                      []  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][]                                                      [][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[][][][][][][][][]                  [][][][][][][][][]                                                      [][][][][][][][][]                  [][][][][][][][][]',
  '[]  [][]  [][]  []                  []  [][]  [][]  []                                                      []  [][]  [][]  []                  []  [][]  [][]  []',
  '[][][][][][][][][]                  [][][][][][][][][]                                                      [][][][][][][][][]                  [][][][][][][][][]',
  '[][][]      [][][]                  [][][]      [][][]                                                      [][][]      [][][]                  [][][]      [][][]',
  '[]  []      []  []                  []  []      []  []                                                      []  []      []  []                  []  []      []  []',
  '[][][]      [][][]                  [][][]      [][][]                                                      [][][]      [][][]                  [][][]      [][][]',
  '[][][][][][][][][]                  [][][][][][][][][]                                                      [][][][][][][][][]                  [][][][][][][][][]',
  '[]  [][]  [][]  []                  []  [][]  [][]  []                                                      []  [][]  [][]  []                  []  [][]  [][]  []',
  '[][][][][][][][][]                  [][][][][][][][][]                                                      [][][][][][][][][]                  [][][][][][][][][]',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][]                                                      [][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []                                                      []  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][]                                                      [][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[][][]      [][][][][][]      [][][][][][]      [][][]                                                      [][][]      [][][][][][]      [][][][][][]      [][][]',
  '[]  []      []  [][]  []      []  [][]  []      []  []                                                      []  []      []  [][]  []      []  [][]  []      []  []',
  '[][][]      [][][][][][]      [][][][][][]      [][][]                                                      [][][]      [][][][][][]      [][][][][][]      [][][]',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][]                                                      [][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []                                                      []  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][]                                                      [][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][]',
  '[]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  []',
  '[][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][]',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][]',
  '[]  [][]  [][]  []                  []  [][]  [][]  [][]  [][]  [][]  []                  []  [][]  [][]  [][]  [][]  [][]  []                  []  [][]  [][]  []',
  '[][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][]',
  '[][][]      [][][]                  [][][]      [][][][][][]      [][][]                  [][][]      [][][][][][]      [][][]                  [][][]      [][][]',
  '[]  []      []  []                  []  []      []  [][]  []      []  []                  []  []      []  [][]  []      []  []                  []  []      []  []',
  '[][][]      [][][]                  [][][]      [][][][][][]      [][][]                  [][][]      [][][][][][]      [][][]                  [][][]      [][][]',
  '[][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][]',
  '[]  [][]  [][]  []                  []  [][]  [][]  [][]  [][]  [][]  []                  []  [][]  [][]  [][]  [][]  [][]  []                  []  [][]  [][]  []',
  '[][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][][][][][][][][][][]                  [][][][][][][][][]',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][]',
  '[]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  [][]  []      []  []',
  '[][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][][][][]      [][][]',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]',
  '[]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  [][]  []',
  '[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]'
 ],
 'sierpinskiCurve'=>
 ['png hash: 41FC3B2438643589F05736990BE68E0C59494D98526086A80A4A11077B83EF56'],
 'sierpinskiTriangle'=>
 ['                               A                                                               ',
  '                              A A                                                             ',
  '                             A   A                                                           ',
  '                            A A A A                                                         ',
  '                           A       A                                                       ',
  '                          A A     A A                                                     ',
  '                         A   A   A   A                                                   ',
  '                        A A A A A A A A                                                 ',
  '                       A               A                                               ',
  '                      A A             A A                                             ',
  '                     A   A           A   A                                           ',
  '                    A A A A         A A A A                                         ',
  '                   A       A       A       A                                       ',
  '                  A A     A A     A A     A A                                     ',
  '                 A   A   A   A   A   A   A   A                                   ',
  '                A A A A A A A A A A A A A A A A                                 ',
  '               A                               A                               ',
  '              A A                             A A                             ',
  '             A   A                           A   A                           ',
  '            A A A A                         A A A A                         ',
  '           A       A                       A       A                       ',
  '          A A     A A                     A A     A A                     ',
  '         A   A   A   A                   A   A   A   A                   ',
  '        A A A A A A A A                 A A A A A A A A                 ',
  '       A               A               A               A               ',
  '      A A             A A             A A             A A             ',
  '     A   A           A   A           A   A           A   A           ',
  '    A A A A         A A A A         A A A A         A A A A         ',
  '   A       A       A       A       A       A       A       A       ',
  '  A A     A A     A A     A A     A A     A A     A A     A A     ',
  ' A   A   A   A   A   A   A   A   A   A   A   A   A   A   A   A   ',
  'A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A '],
 'smithNumbers'=>
 [
  '[4,22,27,58,85,94,121,166,202,265,274,319,346,355,378,382,391,438,454,483,517,526,535,562,576,588,627,634,636,645,648,654,663,666,690,706,728,729,762,778,825,852,861,895,913,915,922,958,985,1086,1111,1165,1219,1255,1282,1284,1376,1449,1507,1581,1626,1633,1642,1678,1736,1755,1776,1795,1822,1842,1858,1872,1881,1894,1903,1908,1921,1935,1952,1962,1966,2038,2067,2079,2155,2173,2182,2218,2227,2265,2286,2326,2362,2366,2373,2409,2434,2461,2475,2484,2515,2556,2576,2578,2583,2605,2614,2679,2688,2722,2745,2751,2785,2839,2888,2902,2911,2934,2944,2958,2964,2965,2970,2974,3046,3091,3138,3168,3174,3226,3246,3258,3294,3345,3366,3390,3442,3505,3564,3595,3615,3622,3649,3663,3690,3694,3802,3852,3864,3865,3930,3946,3973,4054,4126,4162,4173,4185,4189,4191,4198,4209,4279,4306,4369,4414,4428,4464,4472,4557,4592,4594,4702,4743,4765,4788,4794,4832,4855,4880,4918,4954,4959,4960,4974,4981,5062,5071,5088,5098,5172,5242,5248,5253,5269,5298,5305,5386,5388,5397,5422,5458,5485,5526,5539,5602,5638,5642,5674,5772,5818,5854,5874,5915,5926,5935,5936,5946,5998,6036,6054,6084,6096,6115,6171,6178,6187,6188,6252,6259,6295,6315,6344,6385,6439,6457,6502,6531,6567,6583,6585,6603,6684,6693,6702,6718,6760,6816,6835,6855,6880,6934,6981,7026,7051,7062,7068,7078,7089,7119,7136,7186,7195,7227,7249,7287,7339,7402,7438,7447,7465,7503,7627,7674,7683,7695,7712,7726,7762,7764,7782,7784,7809,7824,7834,7915,7952,7978,8005,8014,8023,8073,8077,8095,8149,8154,8158,8185,8196,8253,8257,8277,8307,8347,8372,8412,8421,8466,8518,8545,8568,8628,8653,8680,8736,8754,8766,8790,8792,8851,8864,8874,8883,8901,8914,9015,9031,9036,9094,9166,9184,9193,9229,9274,9276,9285,9294,9296,9301,9330,9346,9355,9382,9386,9387,9396,9414,9427,9483,9522,9535,9571,9598,9633,9634,9639,9648,9657,9684,9708,9717,9735,9742,9760,9778,9840,9843,9849,9861,9880,9895,9924,9942,9968,9975,9985]'
 ],
 'stack'=>
 ['Stack top: 30 (depth=4)','Stack top: 42 (depth=3)','Stack top: 70 (depth=2)','Stack top: 105 (depth=1)'],
 'sternBrocot'=>
 ['Stern-Brocot seqence','  First 15: [1,1,2,1,3,2,3,1,4,3,5,2,5,3,4]','    1 first occurs at index    1',
  '    2 first occurs at index    3','    3 first occurs at index    5','    4 first occurs at index    9',
  '    5 first occurs at index   11','    6 first occurs at index   33','    7 first occurs at index   19',
  '    8 first occurs at index   21','    9 first occurs at index   35','   10 first occurs at index   39',
  '  100 first occurs at index 1179','Correct: The first 999 consecutive pairs are relative prime!'],
 'subGen'=>
 ['220 : 467478574','221 : 512932792','222 : 539453717'],
 'sudoku'=>
 ['Generated a riddle with difficulty: 56','',
  "╔═══╤═══╤═══╦═══╤═══╤═══╦═══╤═══╤═══╗",
  "║ 1 │   │   ║   │   │   ║   │   │   ║",
  "╟───┼───┼───╫───┼───┼───╫───┼───┼───╢",
  "║   │   │   ║   │   │   ║   │   │   ║",
  "╟───┼───┼───╫───┼───┼───╫───┼───┼───╢",
  "║   │ 3 │   ║ 6 │ 7 │   ║   │ 4 │ 9 ║",
  "╠═══╪═══╪═══╬═══╪═══╪═══╬═══╪═══╪═══║",
  "║   │   │ 6 ║   │ 9 │   ║ 5 │   │   ║",
  "╟───┼───┼───╫───┼───┼───╫───┼───┼───╢",
  "║ 7 │   │ 4 ║   │ 5 │   ║ 1 │   │   ║",
  "╟───┼───┼───╫───┼───┼───╫───┼───┼───╢",
  "║   │ 2 │ 1 ║   │   │ 8 ║   │   │ 4 ║",
  "╠═══╪═══╪═══╬═══╪═══╪═══╬═══╪═══╪═══║",
  "║ 2 │   │   ║   │   │   ║   │ 3 │   ║",
  "╟───┼───┼───╫───┼───┼───╫───┼───┼───╢",
  "║ 9 │   │   ║   │   │ 5 ║   │ 1 │   ║",
  "╟───┼───┼───╫───┼───┼───╫───┼───┼───╢",
  "║   │   │ 3 ║ 9 │   │   ║   │ 5 │   ║",
  "╚═══╧═══╧═══╩═══╧═══╧═══╩═══╧═══╧═══╝"],
 'sumTo100'=>
 ['Show all solutions that sum to 100','  100 = 123+45-67+8-9','  100 = 123+4-5+67-89','  100 = 123-45-67+89',
  '  100 = 123-4-5-6-7+8-9','  100 = 12+3+4+5-6-7+89','  100 = 12+3-4+5+67+8+9','  100 = 12-3-4+5-6+7+89',
  '  100 = 1+23-4+56+7+8+9','  100 = 1+23-4+5+6+78-9','  100 = 1+2+34-5+67-8+9','  100 = 1+2+3-4+5+6+78+9',
  '  100 = -1+2-3+4+5+6+78+9','','Show the sum that has the maximum number of solutions','  9 has 46 solutions','',
  "Show the lowest positive number that can't be expressed",'  211','','Show the ten highest numbers that can be expressed',
  '    3456786 = -1-2+3456789','    3456788 = 1-2+3456789','    3456790 = -1+2+3456789','    3456792 = 1+2+3456789',
  '    3456801 = 12+3456789','   12345669 = 12345678-9','   12345687 = 12345678+9','   23456788 = -1+23456789',
  '   23456790 = 1+23456789','  123456789 = 123456789'],
 'testByteStreamIterator'=>
 ['o.k. (4348kB compared)'],
 'testExitCode'=>
 ['Calling testExitCode.mnh print','Hello world','Exit code: 0','Sandbox produces the same output',
  'Calling testExitCode.mnh note',"Note @testExitCode:2,15 \e[3mThis is a note\e[0m",'Exit code: 0',
  'Sandbox produces the same output','Calling testExitCode.mnh warn',"Warn @testExitCode:3,15 \e[93mThis is a warning\e[0m",
  'Exit code: 0','Sandbox produces the same output','Calling testExitCode.mnh fail',
  "Error @testExitCode:4,15 \e[91mThis is a failure\e[0m",
  "Trace @testExitCode:4,1 \e[91mmain('fail')->fail('This is a failure');\e[0m",'Exit code: 2',
  'Sandbox produces the same output','Calling testExitCode.mnh 40','Setting exit code 40','Exit code: 40',
  'Sandbox produces the same output','Calling testExitCode.mnh 41','Setting exit code 41','Exit code: 41',
  'Sandbox produces the same output','Calling testExitCode.mnh x',
  "Error @testExitCode:5,45 \e[91mCannot apply intrinsic rule toInt to parameter list (String):  ('x')\e[0m",
  "Trace @testExitCode:5,1 \e[91mmain(code)->print('Setting exit code ',code.toInt) orElse setExitCode(code.toInt);\e[0m",
  'Exit code: 3','Sandbox produces the same output'],
 'testExpressionSerialization'=>
 ['','Test deserialization of unary function',"  f    = (x)->1-x²",'  f(2) = -3.00000','',
  'Test deserialization of unary function','  f    = ::math.cos','  f(2) = -0.41615','','Test deserialization of unary function',
  '  f    = {sin($x)/(1+cos($x))}','  f(2) = 1.55741','','Test deserialization of binary function','  f      = (x, y>x)->y-x',
  '  Fails for parameters (1,1)','  f(1,2) = 1','','Test serialization of {$x+1}',
  "#250#29'x'#218#227'aa`d`R'#169'`'#144'cf'#6'QV'#255#25'X'#24#255'3'#0#0#28#229#3#175",'     reconstructed to {$x+1}',
  '     equals: true','','Test serialization of {sleep(1) orElse print()}',
  "#250',x'#218#227'aa``'#224'`b-'#206'IM-'#248'/'#251#159#129#133#241#191#220#127#167#255'L'#172#5'E'#153'y%@'#17#185#255#12#0#196'7'#13'\"'",
  '     reconstructed to {sleep(1) orElse print()}','     equals: true','','Test serialization of ::math.cos',
  "#250#19'x'#218#227'a'#224#200'M,'#201#208'K'#206'/'#6#0#14#216#3'2'",'     reconstructed to ::math.cos','     equals: true',
  '','Test serialization of rangeGenerator(1,0)',"#250#13'x'#218#227'adf`'#4#0#0'O'#0#18",
  '     reconstructed to rangeGenerator(1,0)','     equals: false','','Test serialization of primeGenerator',
  "#250#11'x'#218#227'a'#228#4#0#0'2'#0#23",'     reconstructed to primeGenerator','     equals: false','',
  'Test serialization of isaacRandomGenerator(5)','el3_evalError: Cannot serialize builtin generator expression.','',
  'Test serialization of primeGenerator.map({sqrt($x)})',
  "#250#39'x'#218#227'ad'#227'a'#228#228'aa`d`R'#169'`'#144'cae).,*'#249'/'#251#159#25#204#255#207#0#0'J'#29#6#167",
  '     reconstructed to primeGenerator.map({sqrt($x)})','     equals: false','',
  'Test serialization of primeGenerator.filter({isPrime($x+2)}).map({[$x, $x+2]})',
  "#250'@x'#218#227'ad'#227'ad'#229'a'#228#228'aa`d`R'#169'`'#144'ccb'#207','#14'('#202#204'M'#253'/'#251#159#25'$d'#245#159#129#133#233#191#220#127#6#132'\"vE'#136#148'&'#178#10#165#255#12#0'R0'#17#197",
  '     reconstructed to primeGenerator.filter({isPrime($x+2)}).map({[$x, $x+2]})','     equals: false','',
  "Test serialization of permutationIterator(['a','b','c'])","#250#19'x'#218#227'ad'#145'`fLdLbL'#6#0#5#12#1'V'",
  "     reconstructed to permutationIterator(['a','b','c'])",'     equals: false','',
  'Test serialization of permutationIterator(5)',"#250#13'x'#218#227'adaa'#5#0#0'^'#0#27",
  '     reconstructed to permutationIterator(5)','     equals: false','',
  "Test serialization of fileLineIterator('demos/testExpressionSerialization.mnh')",
  'el3_evalError: Cannot serialize builtin generator expression.'],
 'testMapFilterEquivalence'=>
 ['gen.filter.toList','gen.pFilter.toList','gen.map.toList','gen.pMap.toList','gen.each','gen.pEach','gen.toList.filter',
  'gen.toList.pFilter','gen.toList.map','gen.toList.pMap','gen.toList.each','gen.toList.pEach','All is good'],
 'testPackages'=>
 ['FDLinux'=>
  ['Package statistics','  mean(X:NumericList)              = -0.052631578947368423975',
   '  variance(X:NumericList)          =  2.281440443213296407','  standardVariation(X:NumericList) =  1.51044379015350862779',
   '  median(X:NumericCollection)      = -0.4000000000000000222',
   '  decils(L:NumericCollection)      = [-2,-1.8000000000000000444,-1.39999999999999991118,-1.19999999999999995559,-0.8000000000000000444,-0.4000000000000000222,0.5,1,1,2,3]',
   'Package mathUtils','::iterate                 =                   0.61805555555555555556',
   'sum(L:NumericList)        =                  -1.0000000000000000555',
   'prod(L:NumericList)       =                  -4.180377600000000457',
   'runningSum(L:NumericList) = [0,1,1.5,-0.5,2.5,3.0,4.0,5.5,7.5,10.0,9.7999999999999999889,9.3999999999999999666,8.7999999999999999889,7.9999999999999999444,6.9999999999999999444,5.7999999999999999889,4.4000000000000000777,2.7999999999999999889,0.99999999999999994448,-1.0000000000000000555]',
   '::factorial               = 2432902008176640000','::binomCoeff              =                 792',
   '::Bernoulli               =                  -0.033333333333333344434','Package generators - chunkIterator','[1,2,3]',
   '[4,5,6]','[7,8,9]','[10]','Package generators - pairGenerator','[0,3]','[1,2]','[2,1]','[3,0]','[0,4]','[1,3]','[2,2]',
   '[3,1]','[4,0]','Package interpolation',
   '  interpolatePiecewise(X:NumericList, Y:NumericList)   (0.75) = 1.49166666666666666667',
   '  interpolateLineSegments(X:NumericList, Y:NumericList)(0.75) = 1.5',
   '  interpolatePolynomial(X:NumericList, Y:NumericList)  (0.75) = 1.4968750000000000001'],
  'FDWin64'=>
  ['Package statistics','  mean(X:NumericList)              = -0.05263157894736841',
   '  variance(X:NumericList)          =  2.2814404432132966','  standardVariation(X:NumericList) =  1.5104437901535086',
   '  median(X:NumericCollection)      = -0.4','  decils(L:NumericCollection)      = [-2,-1.8,-1.4,-1.2,-0.8,-0.4,0.5,1,1,2,3]',
   'Package mathUtils','::iterate                 =                   0.61805555555555558',
   'sum(L:NumericList)        =                  -0.99999999999999978',
   'prod(L:NumericList)       =                  -4.1803776000000008',
   'runningSum(L:NumericList) = [0,1,1.5,-0.5,2.5,3.0,4.0,5.5,7.5,10.0,9.8,9.4,8.8,8.0,7.0,5.8,4.4,2.8000000000000003,1.0000000000000002,-0.99999999999999978]',
   '::factorial               = 2432902008176640000','::binomCoeff              =                 792',
   '::Bernoulli               =                  -0.033333333333333305','Package generators - chunkIterator','[1,2,3]','[4,5,6]',
   '[7,8,9]','[10]','Package generators - pairGenerator','[0,3]','[1,2]','[2,1]','[3,0]','[0,4]','[1,3]','[2,2]','[3,1]','[4,0]',
   'Package interpolation','  interpolatePiecewise(X:NumericList, Y:NumericList)   (0.75) = 1.4916666666666663',
   '  interpolateLineSegments(X:NumericList, Y:NumericList)(0.75) = 1.5',
   '  interpolatePolynomial(X:NumericList, Y:NumericList)  (0.75) = 1.4968749999999993'],
  'FOLinux'=>
  ['Package statistics','  mean(X:NumericList)              = -0.052631578947368423975',
   '  variance(X:NumericList)          =  2.281440443213296407','  standardVariation(X:NumericList) =  1.51044379015350862779',
   '  median(X:NumericCollection)      = -0.4000000000000000222',
   '  decils(L:NumericCollection)      = [-2,-1.8000000000000000444,-1.39999999999999991118,-1.19999999999999995559,-0.8000000000000000444,-0.4000000000000000222,0.5,1,1,2,3]',
   'Package mathUtils','::iterate                 =                   0.61805555555555555556',
   'sum(L:NumericList)        =                  -1.0000000000000000555',
   'prod(L:NumericList)       =                  -4.180377600000000457',
   'runningSum(L:NumericList) = [0,1,1.5,-0.5,2.5,3.0,4.0,5.5,7.5,10.0,9.7999999999999999889,9.3999999999999999666,8.7999999999999999889,7.9999999999999999444,6.9999999999999999444,5.7999999999999999889,4.4000000000000000777,2.7999999999999999889,0.99999999999999994448,-1.0000000000000000555]',
   '::factorial               = 2432902008176640000','::binomCoeff              =                 792',
   '::Bernoulli               =                  -0.033333333333333344434','Package generators - chunkIterator','[1,2,3]',
   '[4,5,6]','[7,8,9]','[10]','Package generators - pairGenerator','[0,3]','[1,2]','[2,1]','[3,0]','[0,4]','[1,3]','[2,2]',
   '[3,1]','[4,0]','Package interpolation',
   '  interpolatePiecewise(X:NumericList, Y:NumericList)   (0.75) = 1.49166666666666666667',
   '  interpolateLineSegments(X:NumericList, Y:NumericList)(0.75) = 1.5',
   '  interpolatePolynomial(X:NumericList, Y:NumericList)  (0.75) = 1.4968750000000000001'],
  'FOWin64'=>
  ['Package statistics','  mean(X:NumericList)              = -0.05263157894736841',
   '  variance(X:NumericList)          =  2.2814404432132966','  standardVariation(X:NumericList) =  1.5104437901535086',
   '  median(X:NumericCollection)      = -0.4','  decils(L:NumericCollection)      = [-2,-1.8,-1.4,-1.2,-0.8,-0.4,0.5,1,1,2,3]',
   'Package mathUtils','::iterate                 =                   0.61805555555555558',
   'sum(L:NumericList)        =                  -0.99999999999999978',
   'prod(L:NumericList)       =                  -4.1803776000000008',
   'runningSum(L:NumericList) = [0,1,1.5,-0.5,2.5,3.0,4.0,5.5,7.5,10.0,9.8,9.4,8.8,8.0,7.0,5.8,4.4,2.8000000000000003,1.0000000000000002,-0.99999999999999978]',
   '::factorial               = 2432902008176640000','::binomCoeff              =                 792',
   '::Bernoulli               =                  -0.033333333333333305','Package generators - chunkIterator','[1,2,3]','[4,5,6]',
   '[7,8,9]','[10]','Package generators - pairGenerator','[0,3]','[1,2]','[2,1]','[3,0]','[0,4]','[1,3]','[2,2]','[3,1]','[4,0]',
   'Package interpolation','  interpolatePiecewise(X:NumericList, Y:NumericList)   (0.75) = 1.4916666666666663',
   '  interpolateLineSegments(X:NumericList, Y:NumericList)(0.75) = 1.5',
   '  interpolatePolynomial(X:NumericList, Y:NumericList)  (0.75) = 1.4968749999999993'],
  'LDLinux'=>
  ['Package statistics','  mean(X:NumericList)              = -0.052631578947368423975',
   '  variance(X:NumericList)          =  2.281440443213296407','  standardVariation(X:NumericList) =  1.51044379015350862779',
   '  median(X:NumericCollection)      = -0.4000000000000000222',
   '  decils(L:NumericCollection)      = [-2,-1.8000000000000000444,-1.39999999999999991118,-1.19999999999999995559,-0.8000000000000000444,-0.4000000000000000222,0.5,1,1,2,3]',
   'Package mathUtils','::iterate                 =                   0.61805555555555555556',
   'sum(L:NumericList)        =                  -1.0000000000000000555',
   'prod(L:NumericList)       =                  -4.180377600000000457',
   'runningSum(L:NumericList) = [0,1,1.5,-0.5,2.5,3.0,4.0,5.5,7.5,10.0,9.7999999999999999889,9.3999999999999999666,8.7999999999999999889,7.9999999999999999444,6.9999999999999999444,5.7999999999999999889,4.4000000000000000777,2.7999999999999999889,0.99999999999999994448,-1.0000000000000000555]',
   '::factorial               = 2432902008176640000','::binomCoeff              =                 792',
   '::Bernoulli               =                  -0.033333333333333344434','Package generators - chunkIterator','[1,2,3]',
   '[4,5,6]','[7,8,9]','[10]','Package generators - pairGenerator','[0,3]','[1,2]','[2,1]','[3,0]','[0,4]','[1,3]','[2,2]',
   '[3,1]','[4,0]','Package interpolation',
   '  interpolatePiecewise(X:NumericList, Y:NumericList)   (0.75) = 1.49166666666666666667',
   '  interpolateLineSegments(X:NumericList, Y:NumericList)(0.75) = 1.5',
   '  interpolatePolynomial(X:NumericList, Y:NumericList)  (0.75) = 1.4968750000000000001'],
  'LDWin64'=>
  ['Package statistics','  mean(X:NumericList)              = -0.05263157894736841',
   '  variance(X:NumericList)          =  2.2814404432132966','  standardVariation(X:NumericList) =  1.5104437901535086',
   '  median(X:NumericCollection)      = -0.4','  decils(L:NumericCollection)      = [-2,-1.8,-1.4,-1.2,-0.8,-0.4,0.5,1,1,2,3]',
   'Package mathUtils','::iterate                 =                   0.61805555555555558',
   'sum(L:NumericList)        =                  -0.99999999999999978',
   'prod(L:NumericList)       =                  -4.1803776000000008',
   'runningSum(L:NumericList) = [0,1,1.5,-0.5,2.5,3.0,4.0,5.5,7.5,10.0,9.8,9.4,8.8,8.0,7.0,5.8,4.4,2.8000000000000003,1.0000000000000002,-0.99999999999999978]',
   '::factorial               = 2432902008176640000','::binomCoeff              =                 792',
   '::Bernoulli               =                  -0.033333333333333305','Package generators - chunkIterator','[1,2,3]','[4,5,6]',
   '[7,8,9]','[10]','Package generators - pairGenerator','[0,3]','[1,2]','[2,1]','[3,0]','[0,4]','[1,3]','[2,2]','[3,1]','[4,0]',
   'Package interpolation','  interpolatePiecewise(X:NumericList, Y:NumericList)   (0.75) = 1.4916666666666663',
   '  interpolateLineSegments(X:NumericList, Y:NumericList)(0.75) = 1.5',
   '  interpolatePolynomial(X:NumericList, Y:NumericList)  (0.75) = 1.4968749999999993'],
  'LOLinux'=>
  ['Package statistics','  mean(X:NumericList)              = -0.052631578947368423975',
   '  variance(X:NumericList)          =  2.281440443213296407','  standardVariation(X:NumericList) =  1.51044379015350862779',
   '  median(X:NumericCollection)      = -0.4000000000000000222',
   '  decils(L:NumericCollection)      = [-2,-1.8000000000000000444,-1.39999999999999991118,-1.19999999999999995559,-0.8000000000000000444,-0.4000000000000000222,0.5,1,1,2,3]',
   'Package mathUtils','::iterate                 =                   0.61805555555555555556',
   'sum(L:NumericList)        =                  -1.0000000000000000555',
   'prod(L:NumericList)       =                  -4.180377600000000457',
   'runningSum(L:NumericList) = [0,1,1.5,-0.5,2.5,3.0,4.0,5.5,7.5,10.0,9.7999999999999999889,9.3999999999999999666,8.7999999999999999889,7.9999999999999999444,6.9999999999999999444,5.7999999999999999889,4.4000000000000000777,2.7999999999999999889,0.99999999999999994448,-1.0000000000000000555]',
   '::factorial               = 2432902008176640000','::binomCoeff              =                 792',
   '::Bernoulli               =                  -0.033333333333333344434','Package generators - chunkIterator','[1,2,3]',
   '[4,5,6]','[7,8,9]','[10]','Package generators - pairGenerator','[0,3]','[1,2]','[2,1]','[3,0]','[0,4]','[1,3]','[2,2]',
   '[3,1]','[4,0]','Package interpolation',
   '  interpolatePiecewise(X:NumericList, Y:NumericList)   (0.75) = 1.49166666666666666667',
   '  interpolateLineSegments(X:NumericList, Y:NumericList)(0.75) = 1.5',
   '  interpolatePolynomial(X:NumericList, Y:NumericList)  (0.75) = 1.4968750000000000001'],
  'LOWin64'=>
  ['Package statistics','  mean(X:NumericList)              = -0.05263157894736841',
   '  variance(X:NumericList)          =  2.2814404432132966','  standardVariation(X:NumericList) =  1.5104437901535086',
   '  median(X:NumericCollection)      = -0.4','  decils(L:NumericCollection)      = [-2,-1.8,-1.4,-1.2,-0.8,-0.4,0.5,1,1,2,3]',
   'Package mathUtils','::iterate                 =                   0.61805555555555558',
   'sum(L:NumericList)        =                  -0.99999999999999978',
   'prod(L:NumericList)       =                  -4.1803776000000008',
   'runningSum(L:NumericList) = [0,1,1.5,-0.5,2.5,3.0,4.0,5.5,7.5,10.0,9.8,9.4,8.8,8.0,7.0,5.8,4.4,2.8000000000000003,1.0000000000000002,-0.99999999999999978]',
   '::factorial               = 2432902008176640000','::binomCoeff              =                 792',
   '::Bernoulli               =                  -0.033333333333333305','Package generators - chunkIterator','[1,2,3]','[4,5,6]',
   '[7,8,9]','[10]','Package generators - pairGenerator','[0,3]','[1,2]','[2,1]','[3,0]','[0,4]','[1,3]','[2,2]','[3,1]','[4,0]',
   'Package interpolation','  interpolatePiecewise(X:NumericList, Y:NumericList)   (0.75) = 1.4916666666666663',
   '  interpolateLineSegments(X:NumericList, Y:NumericList)(0.75) = 1.5',
   '  interpolatePolynomial(X:NumericList, Y:NumericList)  (0.75) = 1.4968749999999993']].toMap,
 'testSynchronization'=>
 ['map mutable is o.k.','map stateful expression is o.k.','pMap mutable is o.k.','pMap stateful expression is o.k.',
  'async mutable is o.k.','async stateful expression is o.k.'],
 'test_rationals'=>
 ['FDLinux'=>
  ['2/3 + 2/3 = 4/3','2/3 - 2/3 = 0','2/3 * 2/3 = 4/9','2/3 / 2/3 = 1','2/3 + -1/4 = 5/12','2/3 - -1/4 = 11/12',
   '2/3 * -1/4 = -1/6','2/3 / -1/4 = -8/3','2/3 + 2 = 8/3','2/3 - 2 = -4/3','2/3 * 2 = 4/3','2/3 / 2 = 1/3','2/3 + -5 = -13/3',
   '2/3 - -5 = 17/3','2/3 * -5 = -10/3','2/3 / -5 = -2/15','2/3 + -0.7 = -0.033333333333333333304',
   '2/3 - -0.7 = 1.36666666666666666667','2/3 * -0.7 = -0.46666666666666666666','2/3 / -0.7 = -0.95238095238095238099',
   '2/3 + 3.1415926535897932385 = 3.8082593202564599052','2/3 - 3.1415926535897932385 = -2.4749259869231265717',
   '2/3 * 3.1415926535897932385 = 2.0943951023931954924','2/3 / 3.1415926535897932385 = 0.21220659078919378102',
   '-1/4 + 2/3 = 5/12','-1/4 - 2/3 = -11/12','-1/4 * 2/3 = -1/6','-1/4 / 2/3 = -3/8','-1/4 + -1/4 = -1/2','-1/4 - -1/4 = 0',
   '-1/4 * -1/4 = 1/16','-1/4 / -1/4 = 1','-1/4 + 2 = 7/4','-1/4 - 2 = -9/4','-1/4 * 2 = -1/2','-1/4 / 2 = -1/8',
   '-1/4 + -5 = -21/4','-1/4 - -5 = 19/4','-1/4 * -5 = 5/4','-1/4 / -5 = 1/20','-1/4 + -0.7 = -0.95','-1/4 - -0.7 = 0.45',
   '-1/4 * -0.7 = 0.175','-1/4 / -0.7 = 0.35714285714285714287','-1/4 + 3.1415926535897932385 = 2.8915926535897932385',
   '-1/4 - 3.1415926535897932385 = -3.3915926535897932385','-1/4 * 3.1415926535897932385 = -0.78539816339744830962',
   '-1/4 / 3.1415926535897932385 = -0.079577471545947667884','2 + 2/3 = 8/3','2 - 2/3 = 4/3','2 * 2/3 = 4/3','2 / 2/3 = 3',
   '2 + -1/4 = 7/4','2 - -1/4 = 9/4','2 * -1/4 = -1/2','2 / -1/4 = -8','2 + 2 = 4','2 - 2 = 0','2 * 2 = 4','2 / 2 = 1',
   '2 + -5 = -3','2 - -5 = 7','2 * -5 = -10','2 / -5 = -2/5','2 + -0.7 = 1.3','2 - -0.7 = 2.7','2 * -0.7 = -1.4',
   '2 / -0.7 = -2.8571428571428571429','2 + 3.1415926535897932385 = 5.1415926535897932383',
   '2 - 3.1415926535897932385 = -1.1415926535897932385','2 * 3.1415926535897932385 = 6.283185307179586477',
   '2 / 3.1415926535897932385 = 0.63661977236758134307','-5 + 2/3 = -13/3','-5 - 2/3 = -17/3','-5 * 2/3 = -10/3',
   '-5 / 2/3 = -15/2','-5 + -1/4 = -21/4','-5 - -1/4 = -19/4','-5 * -1/4 = 5/4','-5 / -1/4 = 20','-5 + 2 = -3','-5 - 2 = -7',
   '-5 * 2 = -10','-5 / 2 = -5/2','-5 + -5 = -10','-5 - -5 = 0','-5 * -5 = 25','-5 / -5 = 1','-5 + -0.7 = -5.7',
   '-5 - -0.7 = -4.3','-5 * -0.7 = 3.5','-5 / -0.7 = 7.1428571428571428574',
   '-5 + 3.1415926535897932385 = -1.85840734641020676149','-5 - 3.1415926535897932385 = -8.141592653589793238',
   '-5 * 3.1415926535897932385 = -15.707963267948966192','-5 / 3.1415926535897932385 = -1.5915494309189533576',
   '-0.7 + 2/3 = -0.033333333333333333304','-0.7 - 2/3 = -1.36666666666666666667','-0.7 * 2/3 = -0.46666666666666666666',
   '-0.7 / 2/3 = -1.05','-0.7 + -1/4 = -0.95','-0.7 - -1/4 = -0.45','-0.7 * -1/4 = 0.175','-0.7 / -1/4 = 2.8','-0.7 + 2 = 1.3',
   '-0.7 - 2 = -2.7','-0.7 * 2 = -1.4','-0.7 / 2 = -0.35','-0.7 + -5 = -5.7','-0.7 - -5 = 4.3','-0.7 * -5 = 3.5',
   '-0.7 / -5 = 0.14','-0.7 + -0.7 = -1.4','-0.7 - -0.7 = 0.0','-0.7 * -0.7 = 0.48999999999999999998','-0.7 / -0.7 = 1.0',
   '-0.7 + 3.1415926535897932385 = 2.4415926535897932384','-0.7 - 3.1415926535897932385 = -3.8415926535897932385',
   '-0.7 * 3.1415926535897932385 = -2.1991148575128552668','-0.7 / 3.1415926535897932385 = -0.22281692032865347007',
   '3.1415926535897932385 + 2/3 = 3.8082593202564599052','3.1415926535897932385 - 2/3 = 2.4749259869231265717',
   '3.1415926535897932385 * 2/3 = 2.0943951023931954924','3.1415926535897932385 / 2/3 = 4.7123889803846898574',
   '3.1415926535897932385 + -1/4 = 2.8915926535897932385','3.1415926535897932385 - -1/4 = 3.3915926535897932385',
   '3.1415926535897932385 * -1/4 = -0.78539816339744830962','3.1415926535897932385 / -1/4 = -12.566370614359172954',
   '3.1415926535897932385 + 2 = 5.1415926535897932383','3.1415926535897932385 - 2 = 1.1415926535897932385',
   '3.1415926535897932385 * 2 = 6.283185307179586477','3.1415926535897932385 / 2 = 1.57079632679489661926',
   '3.1415926535897932385 + -5 = -1.85840734641020676149','3.1415926535897932385 - -5 = 8.141592653589793238',
   '3.1415926535897932385 * -5 = -15.707963267948966192','3.1415926535897932385 / -5 = -0.6283185307179586477',
   '3.1415926535897932385 + -0.7 = 2.4415926535897932384','3.1415926535897932385 - -0.7 = 3.8415926535897932385',
   '3.1415926535897932385 * -0.7 = -2.1991148575128552668','3.1415926535897932385 / -0.7 = -4.487989505128276055',
   '3.1415926535897932385 + 3.1415926535897932385 = 6.283185307179586477','3.1415926535897932385 - 3.1415926535897932385 = 0.0',
   '3.1415926535897932385 * 3.1415926535897932385 = 9.869604401089358619','3.1415926535897932385 / 3.1415926535897932385 = 1.0',
   '1/7: 0.(142857)','1/7: 0.14285714285714285714','pi : [355,113].toRational','1/6: [1,6].toRational'],
  'FDWin64'=>
  ['2/3 + 2/3 = 4/3','2/3 - 2/3 = 0','2/3 * 2/3 = 4/9','2/3 / 2/3 = 1','2/3 + -1/4 = 5/12','2/3 - -1/4 = 11/12',
   '2/3 * -1/4 = -1/6','2/3 / -1/4 = -8/3','2/3 + 2 = 8/3','2/3 - 2 = -4/3','2/3 * 2 = 4/3','2/3 / 2 = 1/3','2/3 + -5 = -13/3',
   '2/3 - -5 = 17/3','2/3 * -5 = -10/3','2/3 / -5 = -2/15','2/3 + -0.7 = -0.033333333333333326',
   '2/3 - -0.7 = 1.3666666666666667','2/3 * -0.7 = -0.4666666666666666','2/3 / -0.7 = -0.9523809523809524',
   '2/3 + 3.141592653589793 = 3.8082593202564596','2/3 - 3.141592653589793 = -2.4749259869231266',
   '2/3 * 3.141592653589793 = 2.0943951023931953','2/3 / 3.141592653589793 = 0.21220659078919377','-1/4 + 2/3 = 5/12',
   '-1/4 - 2/3 = -11/12','-1/4 * 2/3 = -1/6','-1/4 / 2/3 = -3/8','-1/4 + -1/4 = -1/2','-1/4 - -1/4 = 0','-1/4 * -1/4 = 1/16',
   '-1/4 / -1/4 = 1','-1/4 + 2 = 7/4','-1/4 - 2 = -9/4','-1/4 * 2 = -1/2','-1/4 / 2 = -1/8','-1/4 + -5 = -21/4',
   '-1/4 - -5 = 19/4','-1/4 * -5 = 5/4','-1/4 / -5 = 1/20','-1/4 + -0.7 = -0.95','-1/4 - -0.7 = 0.44999999999999996',
   '-1/4 * -0.7 = 0.175','-1/4 / -0.7 = 0.35714285714285715','-1/4 + 3.141592653589793 = 2.891592653589793',
   '-1/4 - 3.141592653589793 = -3.391592653589793','-1/4 * 3.141592653589793 = -0.78539816339744828',
   '-1/4 / 3.141592653589793 = -0.07957747154594767','2 + 2/3 = 8/3','2 - 2/3 = 4/3','2 * 2/3 = 4/3','2 / 2/3 = 3',
   '2 + -1/4 = 7/4','2 - -1/4 = 9/4','2 * -1/4 = -1/2','2 / -1/4 = -8','2 + 2 = 4','2 - 2 = 0','2 * 2 = 4','2 / 2 = 1',
   '2 + -5 = -3','2 - -5 = 7','2 * -5 = -10','2 / -5 = -2/5','2 + -0.7 = 1.3','2 - -0.7 = 2.7','2 * -0.7 = -1.4',
   '2 / -0.7 = -2.857142857142857','2 + 3.141592653589793 = 5.141592653589793','2 - 3.141592653589793 = -1.1415926535897931',
   '2 * 3.141592653589793 = 6.283185307179586','2 / 3.141592653589793 = 0.63661977236758138','-5 + 2/3 = -13/3',
   '-5 - 2/3 = -17/3','-5 * 2/3 = -10/3','-5 / 2/3 = -15/2','-5 + -1/4 = -21/4','-5 - -1/4 = -19/4','-5 * -1/4 = 5/4',
   '-5 / -1/4 = 20','-5 + 2 = -3','-5 - 2 = -7','-5 * 2 = -10','-5 / 2 = -5/2','-5 + -5 = -10','-5 - -5 = 0','-5 * -5 = 25',
   '-5 / -5 = 1','-5 + -0.7 = -5.7','-5 - -0.7 = -4.3','-5 * -0.7 = 3.5','-5 / -0.7 = 7.142857142857143',
   '-5 + 3.141592653589793 = -1.8584073464102069','-5 - 3.141592653589793 = -8.141592653589793',
   '-5 * 3.141592653589793 = -15.707963267948966','-5 / 3.141592653589793 = -1.5915494309189535',
   '-0.7 + 2/3 = -0.033333333333333326','-0.7 - 2/3 = -1.3666666666666667','-0.7 * 2/3 = -0.4666666666666666',
   '-0.7 / 2/3 = -1.05','-0.7 + -1/4 = -0.95','-0.7 - -1/4 = -0.44999999999999996','-0.7 * -1/4 = 0.175','-0.7 / -1/4 = 2.8',
   '-0.7 + 2 = 1.3','-0.7 - 2 = -2.7','-0.7 * 2 = -1.4','-0.7 / 2 = -0.35','-0.7 + -5 = -5.7','-0.7 - -5 = 4.3',
   '-0.7 * -5 = 3.5','-0.7 / -5 = 0.13999999999999999','-0.7 + -0.7 = -1.4','-0.7 - -0.7 = 0.0',
   '-0.7 * -0.7 = 0.48999999999999994','-0.7 / -0.7 = 1.0','-0.7 + 3.141592653589793 = 2.4415926535897929',
   '-0.7 - 3.141592653589793 = -3.8415926535897933','-0.7 * 3.141592653589793 = -2.199114857512855',
   '-0.7 / 3.141592653589793 = -0.22281692032865347','3.141592653589793 + 2/3 = 3.8082593202564596',
   '3.141592653589793 - 2/3 = 2.4749259869231266','3.141592653589793 * 2/3 = 2.0943951023931953',
   '3.141592653589793 / 2/3 = 4.71238898038469','3.141592653589793 + -1/4 = 2.891592653589793',
   '3.141592653589793 - -1/4 = 3.391592653589793','3.141592653589793 * -1/4 = -0.78539816339744828',
   '3.141592653589793 / -1/4 = -12.566370614359172','3.141592653589793 + 2 = 5.141592653589793',
   '3.141592653589793 - 2 = 1.1415926535897931','3.141592653589793 * 2 = 6.283185307179586',
   '3.141592653589793 / 2 = 1.5707963267948966','3.141592653589793 + -5 = -1.8584073464102069',
   '3.141592653589793 - -5 = 8.141592653589793','3.141592653589793 * -5 = -15.707963267948966',
   '3.141592653589793 / -5 = -0.6283185307179586','3.141592653589793 + -0.7 = 2.4415926535897929',
   '3.141592653589793 - -0.7 = 3.8415926535897933','3.141592653589793 * -0.7 = -2.199114857512855',
   '3.141592653589793 / -0.7 = -4.4879895051282759','3.141592653589793 + 3.141592653589793 = 6.283185307179586',
   '3.141592653589793 - 3.141592653589793 = 0.0','3.141592653589793 * 3.141592653589793 = 9.869604401089358',
   '3.141592653589793 / 3.141592653589793 = 1.0','1/7: 0.(142857)','1/7: 0.14285714285714285','pi : [355,113].toRational',
   '1/6: [1,6].toRational'],
  'FOLinux'=>
  ['2/3 + 2/3 = 4/3','2/3 - 2/3 = 0','2/3 * 2/3 = 4/9','2/3 / 2/3 = 1','2/3 + -1/4 = 5/12','2/3 - -1/4 = 11/12',
   '2/3 * -1/4 = -1/6','2/3 / -1/4 = -8/3','2/3 + 2 = 8/3','2/3 - 2 = -4/3','2/3 * 2 = 4/3','2/3 / 2 = 1/3','2/3 + -5 = -13/3',
   '2/3 - -5 = 17/3','2/3 * -5 = -10/3','2/3 / -5 = -2/15','2/3 + -0.7 = -0.033333333333333333304',
   '2/3 - -0.7 = 1.36666666666666666667','2/3 * -0.7 = -0.46666666666666666666','2/3 / -0.7 = -0.95238095238095238099',
   '2/3 + 3.1415926535897932385 = 3.8082593202564599052','2/3 - 3.1415926535897932385 = -2.4749259869231265717',
   '2/3 * 3.1415926535897932385 = 2.0943951023931954924','2/3 / 3.1415926535897932385 = 0.21220659078919378102',
   '-1/4 + 2/3 = 5/12','-1/4 - 2/3 = -11/12','-1/4 * 2/3 = -1/6','-1/4 / 2/3 = -3/8','-1/4 + -1/4 = -1/2','-1/4 - -1/4 = 0',
   '-1/4 * -1/4 = 1/16','-1/4 / -1/4 = 1','-1/4 + 2 = 7/4','-1/4 - 2 = -9/4','-1/4 * 2 = -1/2','-1/4 / 2 = -1/8',
   '-1/4 + -5 = -21/4','-1/4 - -5 = 19/4','-1/4 * -5 = 5/4','-1/4 / -5 = 1/20','-1/4 + -0.7 = -0.95','-1/4 - -0.7 = 0.45',
   '-1/4 * -0.7 = 0.175','-1/4 / -0.7 = 0.35714285714285714287','-1/4 + 3.1415926535897932385 = 2.8915926535897932385',
   '-1/4 - 3.1415926535897932385 = -3.3915926535897932385','-1/4 * 3.1415926535897932385 = -0.78539816339744830962',
   '-1/4 / 3.1415926535897932385 = -0.079577471545947667884','2 + 2/3 = 8/3','2 - 2/3 = 4/3','2 * 2/3 = 4/3','2 / 2/3 = 3',
   '2 + -1/4 = 7/4','2 - -1/4 = 9/4','2 * -1/4 = -1/2','2 / -1/4 = -8','2 + 2 = 4','2 - 2 = 0','2 * 2 = 4','2 / 2 = 1',
   '2 + -5 = -3','2 - -5 = 7','2 * -5 = -10','2 / -5 = -2/5','2 + -0.7 = 1.3','2 - -0.7 = 2.7','2 * -0.7 = -1.4',
   '2 / -0.7 = -2.8571428571428571429','2 + 3.1415926535897932385 = 5.1415926535897932383',
   '2 - 3.1415926535897932385 = -1.1415926535897932385','2 * 3.1415926535897932385 = 6.283185307179586477',
   '2 / 3.1415926535897932385 = 0.63661977236758134307','-5 + 2/3 = -13/3','-5 - 2/3 = -17/3','-5 * 2/3 = -10/3',
   '-5 / 2/3 = -15/2','-5 + -1/4 = -21/4','-5 - -1/4 = -19/4','-5 * -1/4 = 5/4','-5 / -1/4 = 20','-5 + 2 = -3','-5 - 2 = -7',
   '-5 * 2 = -10','-5 / 2 = -5/2','-5 + -5 = -10','-5 - -5 = 0','-5 * -5 = 25','-5 / -5 = 1','-5 + -0.7 = -5.7',
   '-5 - -0.7 = -4.3','-5 * -0.7 = 3.5','-5 / -0.7 = 7.1428571428571428574',
   '-5 + 3.1415926535897932385 = -1.85840734641020676149','-5 - 3.1415926535897932385 = -8.141592653589793238',
   '-5 * 3.1415926535897932385 = -15.707963267948966192','-5 / 3.1415926535897932385 = -1.5915494309189533576',
   '-0.7 + 2/3 = -0.033333333333333333304','-0.7 - 2/3 = -1.36666666666666666667','-0.7 * 2/3 = -0.46666666666666666666',
   '-0.7 / 2/3 = -1.05','-0.7 + -1/4 = -0.95','-0.7 - -1/4 = -0.45','-0.7 * -1/4 = 0.175','-0.7 / -1/4 = 2.8','-0.7 + 2 = 1.3',
   '-0.7 - 2 = -2.7','-0.7 * 2 = -1.4','-0.7 / 2 = -0.35','-0.7 + -5 = -5.7','-0.7 - -5 = 4.3','-0.7 * -5 = 3.5',
   '-0.7 / -5 = 0.14','-0.7 + -0.7 = -1.4','-0.7 - -0.7 = 0.0','-0.7 * -0.7 = 0.48999999999999999998','-0.7 / -0.7 = 1.0',
   '-0.7 + 3.1415926535897932385 = 2.4415926535897932384','-0.7 - 3.1415926535897932385 = -3.8415926535897932385',
   '-0.7 * 3.1415926535897932385 = -2.1991148575128552668','-0.7 / 3.1415926535897932385 = -0.22281692032865347007',
   '3.1415926535897932385 + 2/3 = 3.8082593202564599052','3.1415926535897932385 - 2/3 = 2.4749259869231265717',
   '3.1415926535897932385 * 2/3 = 2.0943951023931954924','3.1415926535897932385 / 2/3 = 4.7123889803846898574',
   '3.1415926535897932385 + -1/4 = 2.8915926535897932385','3.1415926535897932385 - -1/4 = 3.3915926535897932385',
   '3.1415926535897932385 * -1/4 = -0.78539816339744830962','3.1415926535897932385 / -1/4 = -12.566370614359172954',
   '3.1415926535897932385 + 2 = 5.1415926535897932383','3.1415926535897932385 - 2 = 1.1415926535897932385',
   '3.1415926535897932385 * 2 = 6.283185307179586477','3.1415926535897932385 / 2 = 1.57079632679489661926',
   '3.1415926535897932385 + -5 = -1.85840734641020676149','3.1415926535897932385 - -5 = 8.141592653589793238',
   '3.1415926535897932385 * -5 = -15.707963267948966192','3.1415926535897932385 / -5 = -0.6283185307179586477',
   '3.1415926535897932385 + -0.7 = 2.4415926535897932384','3.1415926535897932385 - -0.7 = 3.8415926535897932385',
   '3.1415926535897932385 * -0.7 = -2.1991148575128552668','3.1415926535897932385 / -0.7 = -4.487989505128276055',
   '3.1415926535897932385 + 3.1415926535897932385 = 6.283185307179586477','3.1415926535897932385 - 3.1415926535897932385 = 0.0',
   '3.1415926535897932385 * 3.1415926535897932385 = 9.869604401089358619','3.1415926535897932385 / 3.1415926535897932385 = 1.0',
   '1/7: 0.(142857)','1/7: 0.14285714285714285714','pi : [355,113].toRational','1/6: [1,6].toRational'],
  'FOWin64'=>
  ['2/3 + 2/3 = 4/3','2/3 - 2/3 = 0','2/3 * 2/3 = 4/9','2/3 / 2/3 = 1','2/3 + -1/4 = 5/12','2/3 - -1/4 = 11/12',
   '2/3 * -1/4 = -1/6','2/3 / -1/4 = -8/3','2/3 + 2 = 8/3','2/3 - 2 = -4/3','2/3 * 2 = 4/3','2/3 / 2 = 1/3','2/3 + -5 = -13/3',
   '2/3 - -5 = 17/3','2/3 * -5 = -10/3','2/3 / -5 = -2/15','2/3 + -0.7 = -0.033333333333333326',
   '2/3 - -0.7 = 1.3666666666666667','2/3 * -0.7 = -0.4666666666666666','2/3 / -0.7 = -0.9523809523809524',
   '2/3 + 3.141592653589793 = 3.8082593202564596','2/3 - 3.141592653589793 = -2.4749259869231266',
   '2/3 * 3.141592653589793 = 2.0943951023931953','2/3 / 3.141592653589793 = 0.21220659078919377','-1/4 + 2/3 = 5/12',
   '-1/4 - 2/3 = -11/12','-1/4 * 2/3 = -1/6','-1/4 / 2/3 = -3/8','-1/4 + -1/4 = -1/2','-1/4 - -1/4 = 0','-1/4 * -1/4 = 1/16',
   '-1/4 / -1/4 = 1','-1/4 + 2 = 7/4','-1/4 - 2 = -9/4','-1/4 * 2 = -1/2','-1/4 / 2 = -1/8','-1/4 + -5 = -21/4',
   '-1/4 - -5 = 19/4','-1/4 * -5 = 5/4','-1/4 / -5 = 1/20','-1/4 + -0.7 = -0.95','-1/4 - -0.7 = 0.44999999999999996',
   '-1/4 * -0.7 = 0.175','-1/4 / -0.7 = 0.35714285714285715','-1/4 + 3.141592653589793 = 2.891592653589793',
   '-1/4 - 3.141592653589793 = -3.391592653589793','-1/4 * 3.141592653589793 = -0.78539816339744828',
   '-1/4 / 3.141592653589793 = -0.07957747154594767','2 + 2/3 = 8/3','2 - 2/3 = 4/3','2 * 2/3 = 4/3','2 / 2/3 = 3',
   '2 + -1/4 = 7/4','2 - -1/4 = 9/4','2 * -1/4 = -1/2','2 / -1/4 = -8','2 + 2 = 4','2 - 2 = 0','2 * 2 = 4','2 / 2 = 1',
   '2 + -5 = -3','2 - -5 = 7','2 * -5 = -10','2 / -5 = -2/5','2 + -0.7 = 1.3','2 - -0.7 = 2.7','2 * -0.7 = -1.4',
   '2 / -0.7 = -2.857142857142857','2 + 3.141592653589793 = 5.141592653589793','2 - 3.141592653589793 = -1.1415926535897931',
   '2 * 3.141592653589793 = 6.283185307179586','2 / 3.141592653589793 = 0.63661977236758138','-5 + 2/3 = -13/3',
   '-5 - 2/3 = -17/3','-5 * 2/3 = -10/3','-5 / 2/3 = -15/2','-5 + -1/4 = -21/4','-5 - -1/4 = -19/4','-5 * -1/4 = 5/4',
   '-5 / -1/4 = 20','-5 + 2 = -3','-5 - 2 = -7','-5 * 2 = -10','-5 / 2 = -5/2','-5 + -5 = -10','-5 - -5 = 0','-5 * -5 = 25',
   '-5 / -5 = 1','-5 + -0.7 = -5.7','-5 - -0.7 = -4.3','-5 * -0.7 = 3.5','-5 / -0.7 = 7.142857142857143',
   '-5 + 3.141592653589793 = -1.8584073464102069','-5 - 3.141592653589793 = -8.141592653589793',
   '-5 * 3.141592653589793 = -15.707963267948966','-5 / 3.141592653589793 = -1.5915494309189535',
   '-0.7 + 2/3 = -0.033333333333333326','-0.7 - 2/3 = -1.3666666666666667','-0.7 * 2/3 = -0.4666666666666666',
   '-0.7 / 2/3 = -1.05','-0.7 + -1/4 = -0.95','-0.7 - -1/4 = -0.44999999999999996','-0.7 * -1/4 = 0.175','-0.7 / -1/4 = 2.8',
   '-0.7 + 2 = 1.3','-0.7 - 2 = -2.7','-0.7 * 2 = -1.4','-0.7 / 2 = -0.35','-0.7 + -5 = -5.7','-0.7 - -5 = 4.3',
   '-0.7 * -5 = 3.5','-0.7 / -5 = 0.13999999999999999','-0.7 + -0.7 = -1.4','-0.7 - -0.7 = 0.0',
   '-0.7 * -0.7 = 0.48999999999999994','-0.7 / -0.7 = 1.0','-0.7 + 3.141592653589793 = 2.4415926535897929',
   '-0.7 - 3.141592653589793 = -3.8415926535897933','-0.7 * 3.141592653589793 = -2.199114857512855',
   '-0.7 / 3.141592653589793 = -0.22281692032865347','3.141592653589793 + 2/3 = 3.8082593202564596',
   '3.141592653589793 - 2/3 = 2.4749259869231266','3.141592653589793 * 2/3 = 2.0943951023931953',
   '3.141592653589793 / 2/3 = 4.71238898038469','3.141592653589793 + -1/4 = 2.891592653589793',
   '3.141592653589793 - -1/4 = 3.391592653589793','3.141592653589793 * -1/4 = -0.78539816339744828',
   '3.141592653589793 / -1/4 = -12.566370614359172','3.141592653589793 + 2 = 5.141592653589793',
   '3.141592653589793 - 2 = 1.1415926535897931','3.141592653589793 * 2 = 6.283185307179586',
   '3.141592653589793 / 2 = 1.5707963267948966','3.141592653589793 + -5 = -1.8584073464102069',
   '3.141592653589793 - -5 = 8.141592653589793','3.141592653589793 * -5 = -15.707963267948966',
   '3.141592653589793 / -5 = -0.6283185307179586','3.141592653589793 + -0.7 = 2.4415926535897929',
   '3.141592653589793 - -0.7 = 3.8415926535897933','3.141592653589793 * -0.7 = -2.199114857512855',
   '3.141592653589793 / -0.7 = -4.4879895051282759','3.141592653589793 + 3.141592653589793 = 6.283185307179586',
   '3.141592653589793 - 3.141592653589793 = 0.0','3.141592653589793 * 3.141592653589793 = 9.869604401089358',
   '3.141592653589793 / 3.141592653589793 = 1.0','1/7: 0.(142857)','1/7: 0.14285714285714285','pi : [355,113].toRational',
   '1/6: [1,6].toRational'],
  'LDLinux'=>
  ['2/3 + 2/3 = 4/3','2/3 - 2/3 = 0','2/3 * 2/3 = 4/9','2/3 / 2/3 = 1','2/3 + -1/4 = 5/12','2/3 - -1/4 = 11/12',
   '2/3 * -1/4 = -1/6','2/3 / -1/4 = -8/3','2/3 + 2 = 8/3','2/3 - 2 = -4/3','2/3 * 2 = 4/3','2/3 / 2 = 1/3','2/3 + -5 = -13/3',
   '2/3 - -5 = 17/3','2/3 * -5 = -10/3','2/3 / -5 = -2/15','2/3 + -0.7 = -0.033333333333333333304',
   '2/3 - -0.7 = 1.36666666666666666667','2/3 * -0.7 = -0.46666666666666666666','2/3 / -0.7 = -0.95238095238095238099',
   '2/3 + 3.1415926535897932385 = 3.8082593202564599052','2/3 - 3.1415926535897932385 = -2.4749259869231265717',
   '2/3 * 3.1415926535897932385 = 2.0943951023931954924','2/3 / 3.1415926535897932385 = 0.21220659078919378102',
   '-1/4 + 2/3 = 5/12','-1/4 - 2/3 = -11/12','-1/4 * 2/3 = -1/6','-1/4 / 2/3 = -3/8','-1/4 + -1/4 = -1/2','-1/4 - -1/4 = 0',
   '-1/4 * -1/4 = 1/16','-1/4 / -1/4 = 1','-1/4 + 2 = 7/4','-1/4 - 2 = -9/4','-1/4 * 2 = -1/2','-1/4 / 2 = -1/8',
   '-1/4 + -5 = -21/4','-1/4 - -5 = 19/4','-1/4 * -5 = 5/4','-1/4 / -5 = 1/20','-1/4 + -0.7 = -0.95','-1/4 - -0.7 = 0.45',
   '-1/4 * -0.7 = 0.175','-1/4 / -0.7 = 0.35714285714285714287','-1/4 + 3.1415926535897932385 = 2.8915926535897932385',
   '-1/4 - 3.1415926535897932385 = -3.3915926535897932385','-1/4 * 3.1415926535897932385 = -0.78539816339744830962',
   '-1/4 / 3.1415926535897932385 = -0.079577471545947667884','2 + 2/3 = 8/3','2 - 2/3 = 4/3','2 * 2/3 = 4/3','2 / 2/3 = 3',
   '2 + -1/4 = 7/4','2 - -1/4 = 9/4','2 * -1/4 = -1/2','2 / -1/4 = -8','2 + 2 = 4','2 - 2 = 0','2 * 2 = 4','2 / 2 = 1',
   '2 + -5 = -3','2 - -5 = 7','2 * -5 = -10','2 / -5 = -2/5','2 + -0.7 = 1.3','2 - -0.7 = 2.7','2 * -0.7 = -1.4',
   '2 / -0.7 = -2.8571428571428571429','2 + 3.1415926535897932385 = 5.1415926535897932383',
   '2 - 3.1415926535897932385 = -1.1415926535897932385','2 * 3.1415926535897932385 = 6.283185307179586477',
   '2 / 3.1415926535897932385 = 0.63661977236758134307','-5 + 2/3 = -13/3','-5 - 2/3 = -17/3','-5 * 2/3 = -10/3',
   '-5 / 2/3 = -15/2','-5 + -1/4 = -21/4','-5 - -1/4 = -19/4','-5 * -1/4 = 5/4','-5 / -1/4 = 20','-5 + 2 = -3','-5 - 2 = -7',
   '-5 * 2 = -10','-5 / 2 = -5/2','-5 + -5 = -10','-5 - -5 = 0','-5 * -5 = 25','-5 / -5 = 1','-5 + -0.7 = -5.7',
   '-5 - -0.7 = -4.3','-5 * -0.7 = 3.5','-5 / -0.7 = 7.1428571428571428574',
   '-5 + 3.1415926535897932385 = -1.85840734641020676149','-5 - 3.1415926535897932385 = -8.141592653589793238',
   '-5 * 3.1415926535897932385 = -15.707963267948966192','-5 / 3.1415926535897932385 = -1.5915494309189533576',
   '-0.7 + 2/3 = -0.033333333333333333304','-0.7 - 2/3 = -1.36666666666666666667','-0.7 * 2/3 = -0.46666666666666666666',
   '-0.7 / 2/3 = -1.05','-0.7 + -1/4 = -0.95','-0.7 - -1/4 = -0.45','-0.7 * -1/4 = 0.175','-0.7 / -1/4 = 2.8','-0.7 + 2 = 1.3',
   '-0.7 - 2 = -2.7','-0.7 * 2 = -1.4','-0.7 / 2 = -0.35','-0.7 + -5 = -5.7','-0.7 - -5 = 4.3','-0.7 * -5 = 3.5',
   '-0.7 / -5 = 0.14','-0.7 + -0.7 = -1.4','-0.7 - -0.7 = 0.0','-0.7 * -0.7 = 0.48999999999999999998','-0.7 / -0.7 = 1.0',
   '-0.7 + 3.1415926535897932385 = 2.4415926535897932384','-0.7 - 3.1415926535897932385 = -3.8415926535897932385',
   '-0.7 * 3.1415926535897932385 = -2.1991148575128552668','-0.7 / 3.1415926535897932385 = -0.22281692032865347007',
   '3.1415926535897932385 + 2/3 = 3.8082593202564599052','3.1415926535897932385 - 2/3 = 2.4749259869231265717',
   '3.1415926535897932385 * 2/3 = 2.0943951023931954924','3.1415926535897932385 / 2/3 = 4.7123889803846898574',
   '3.1415926535897932385 + -1/4 = 2.8915926535897932385','3.1415926535897932385 - -1/4 = 3.3915926535897932385',
   '3.1415926535897932385 * -1/4 = -0.78539816339744830962','3.1415926535897932385 / -1/4 = -12.566370614359172954',
   '3.1415926535897932385 + 2 = 5.1415926535897932383','3.1415926535897932385 - 2 = 1.1415926535897932385',
   '3.1415926535897932385 * 2 = 6.283185307179586477','3.1415926535897932385 / 2 = 1.57079632679489661926',
   '3.1415926535897932385 + -5 = -1.85840734641020676149','3.1415926535897932385 - -5 = 8.141592653589793238',
   '3.1415926535897932385 * -5 = -15.707963267948966192','3.1415926535897932385 / -5 = -0.6283185307179586477',
   '3.1415926535897932385 + -0.7 = 2.4415926535897932384','3.1415926535897932385 - -0.7 = 3.8415926535897932385',
   '3.1415926535897932385 * -0.7 = -2.1991148575128552668','3.1415926535897932385 / -0.7 = -4.487989505128276055',
   '3.1415926535897932385 + 3.1415926535897932385 = 6.283185307179586477','3.1415926535897932385 - 3.1415926535897932385 = 0.0',
   '3.1415926535897932385 * 3.1415926535897932385 = 9.869604401089358619','3.1415926535897932385 / 3.1415926535897932385 = 1.0',
   '1/7: 0.(142857)','1/7: 0.14285714285714285714','pi : [355,113].toRational','1/6: [1,6].toRational'],
  'LDWin64'=>
  ['2/3 + 2/3 = 4/3','2/3 - 2/3 = 0','2/3 * 2/3 = 4/9','2/3 / 2/3 = 1','2/3 + -1/4 = 5/12','2/3 - -1/4 = 11/12',
   '2/3 * -1/4 = -1/6','2/3 / -1/4 = -8/3','2/3 + 2 = 8/3','2/3 - 2 = -4/3','2/3 * 2 = 4/3','2/3 / 2 = 1/3','2/3 + -5 = -13/3',
   '2/3 - -5 = 17/3','2/3 * -5 = -10/3','2/3 / -5 = -2/15','2/3 + -0.7 = -0.033333333333333326',
   '2/3 - -0.7 = 1.3666666666666667','2/3 * -0.7 = -0.4666666666666666','2/3 / -0.7 = -0.9523809523809524',
   '2/3 + 3.141592653589793 = 3.8082593202564596','2/3 - 3.141592653589793 = -2.4749259869231266',
   '2/3 * 3.141592653589793 = 2.0943951023931953','2/3 / 3.141592653589793 = 0.21220659078919377','-1/4 + 2/3 = 5/12',
   '-1/4 - 2/3 = -11/12','-1/4 * 2/3 = -1/6','-1/4 / 2/3 = -3/8','-1/4 + -1/4 = -1/2','-1/4 - -1/4 = 0','-1/4 * -1/4 = 1/16',
   '-1/4 / -1/4 = 1','-1/4 + 2 = 7/4','-1/4 - 2 = -9/4','-1/4 * 2 = -1/2','-1/4 / 2 = -1/8','-1/4 + -5 = -21/4',
   '-1/4 - -5 = 19/4','-1/4 * -5 = 5/4','-1/4 / -5 = 1/20','-1/4 + -0.7 = -0.95','-1/4 - -0.7 = 0.44999999999999996',
   '-1/4 * -0.7 = 0.175','-1/4 / -0.7 = 0.35714285714285715','-1/4 + 3.141592653589793 = 2.891592653589793',
   '-1/4 - 3.141592653589793 = -3.391592653589793','-1/4 * 3.141592653589793 = -0.78539816339744828',
   '-1/4 / 3.141592653589793 = -0.07957747154594767','2 + 2/3 = 8/3','2 - 2/3 = 4/3','2 * 2/3 = 4/3','2 / 2/3 = 3',
   '2 + -1/4 = 7/4','2 - -1/4 = 9/4','2 * -1/4 = -1/2','2 / -1/4 = -8','2 + 2 = 4','2 - 2 = 0','2 * 2 = 4','2 / 2 = 1',
   '2 + -5 = -3','2 - -5 = 7','2 * -5 = -10','2 / -5 = -2/5','2 + -0.7 = 1.3','2 - -0.7 = 2.7','2 * -0.7 = -1.4',
   '2 / -0.7 = -2.857142857142857','2 + 3.141592653589793 = 5.141592653589793','2 - 3.141592653589793 = -1.1415926535897931',
   '2 * 3.141592653589793 = 6.283185307179586','2 / 3.141592653589793 = 0.63661977236758138','-5 + 2/3 = -13/3',
   '-5 - 2/3 = -17/3','-5 * 2/3 = -10/3','-5 / 2/3 = -15/2','-5 + -1/4 = -21/4','-5 - -1/4 = -19/4','-5 * -1/4 = 5/4',
   '-5 / -1/4 = 20','-5 + 2 = -3','-5 - 2 = -7','-5 * 2 = -10','-5 / 2 = -5/2','-5 + -5 = -10','-5 - -5 = 0','-5 * -5 = 25',
   '-5 / -5 = 1','-5 + -0.7 = -5.7','-5 - -0.7 = -4.3','-5 * -0.7 = 3.5','-5 / -0.7 = 7.142857142857143',
   '-5 + 3.141592653589793 = -1.8584073464102069','-5 - 3.141592653589793 = -8.141592653589793',
   '-5 * 3.141592653589793 = -15.707963267948966','-5 / 3.141592653589793 = -1.5915494309189535',
   '-0.7 + 2/3 = -0.033333333333333326','-0.7 - 2/3 = -1.3666666666666667','-0.7 * 2/3 = -0.4666666666666666',
   '-0.7 / 2/3 = -1.05','-0.7 + -1/4 = -0.95','-0.7 - -1/4 = -0.44999999999999996','-0.7 * -1/4 = 0.175','-0.7 / -1/4 = 2.8',
   '-0.7 + 2 = 1.3','-0.7 - 2 = -2.7','-0.7 * 2 = -1.4','-0.7 / 2 = -0.35','-0.7 + -5 = -5.7','-0.7 - -5 = 4.3',
   '-0.7 * -5 = 3.5','-0.7 / -5 = 0.13999999999999999','-0.7 + -0.7 = -1.4','-0.7 - -0.7 = 0.0',
   '-0.7 * -0.7 = 0.48999999999999994','-0.7 / -0.7 = 1.0','-0.7 + 3.141592653589793 = 2.4415926535897929',
   '-0.7 - 3.141592653589793 = -3.8415926535897933','-0.7 * 3.141592653589793 = -2.199114857512855',
   '-0.7 / 3.141592653589793 = -0.22281692032865347','3.141592653589793 + 2/3 = 3.8082593202564596',
   '3.141592653589793 - 2/3 = 2.4749259869231266','3.141592653589793 * 2/3 = 2.0943951023931953',
   '3.141592653589793 / 2/3 = 4.71238898038469','3.141592653589793 + -1/4 = 2.891592653589793',
   '3.141592653589793 - -1/4 = 3.391592653589793','3.141592653589793 * -1/4 = -0.78539816339744828',
   '3.141592653589793 / -1/4 = -12.566370614359172','3.141592653589793 + 2 = 5.141592653589793',
   '3.141592653589793 - 2 = 1.1415926535897931','3.141592653589793 * 2 = 6.283185307179586',
   '3.141592653589793 / 2 = 1.5707963267948966','3.141592653589793 + -5 = -1.8584073464102069',
   '3.141592653589793 - -5 = 8.141592653589793','3.141592653589793 * -5 = -15.707963267948966',
   '3.141592653589793 / -5 = -0.6283185307179586','3.141592653589793 + -0.7 = 2.4415926535897929',
   '3.141592653589793 - -0.7 = 3.8415926535897933','3.141592653589793 * -0.7 = -2.199114857512855',
   '3.141592653589793 / -0.7 = -4.4879895051282759','3.141592653589793 + 3.141592653589793 = 6.283185307179586',
   '3.141592653589793 - 3.141592653589793 = 0.0','3.141592653589793 * 3.141592653589793 = 9.869604401089358',
   '3.141592653589793 / 3.141592653589793 = 1.0','1/7: 0.(142857)','1/7: 0.14285714285714285','pi : [355,113].toRational',
   '1/6: [1,6].toRational'],
  'LOLinux'=>
  ['2/3 + 2/3 = 4/3','2/3 - 2/3 = 0','2/3 * 2/3 = 4/9','2/3 / 2/3 = 1','2/3 + -1/4 = 5/12','2/3 - -1/4 = 11/12',
   '2/3 * -1/4 = -1/6','2/3 / -1/4 = -8/3','2/3 + 2 = 8/3','2/3 - 2 = -4/3','2/3 * 2 = 4/3','2/3 / 2 = 1/3','2/3 + -5 = -13/3',
   '2/3 - -5 = 17/3','2/3 * -5 = -10/3','2/3 / -5 = -2/15','2/3 + -0.7 = -0.033333333333333333304',
   '2/3 - -0.7 = 1.36666666666666666667','2/3 * -0.7 = -0.46666666666666666666','2/3 / -0.7 = -0.95238095238095238099',
   '2/3 + 3.1415926535897932385 = 3.8082593202564599052','2/3 - 3.1415926535897932385 = -2.4749259869231265717',
   '2/3 * 3.1415926535897932385 = 2.0943951023931954924','2/3 / 3.1415926535897932385 = 0.21220659078919378102',
   '-1/4 + 2/3 = 5/12','-1/4 - 2/3 = -11/12','-1/4 * 2/3 = -1/6','-1/4 / 2/3 = -3/8','-1/4 + -1/4 = -1/2','-1/4 - -1/4 = 0',
   '-1/4 * -1/4 = 1/16','-1/4 / -1/4 = 1','-1/4 + 2 = 7/4','-1/4 - 2 = -9/4','-1/4 * 2 = -1/2','-1/4 / 2 = -1/8',
   '-1/4 + -5 = -21/4','-1/4 - -5 = 19/4','-1/4 * -5 = 5/4','-1/4 / -5 = 1/20','-1/4 + -0.7 = -0.95','-1/4 - -0.7 = 0.45',
   '-1/4 * -0.7 = 0.175','-1/4 / -0.7 = 0.35714285714285714287','-1/4 + 3.1415926535897932385 = 2.8915926535897932385',
   '-1/4 - 3.1415926535897932385 = -3.3915926535897932385','-1/4 * 3.1415926535897932385 = -0.78539816339744830962',
   '-1/4 / 3.1415926535897932385 = -0.079577471545947667884','2 + 2/3 = 8/3','2 - 2/3 = 4/3','2 * 2/3 = 4/3','2 / 2/3 = 3',
   '2 + -1/4 = 7/4','2 - -1/4 = 9/4','2 * -1/4 = -1/2','2 / -1/4 = -8','2 + 2 = 4','2 - 2 = 0','2 * 2 = 4','2 / 2 = 1',
   '2 + -5 = -3','2 - -5 = 7','2 * -5 = -10','2 / -5 = -2/5','2 + -0.7 = 1.3','2 - -0.7 = 2.7','2 * -0.7 = -1.4',
   '2 / -0.7 = -2.8571428571428571429','2 + 3.1415926535897932385 = 5.1415926535897932383',
   '2 - 3.1415926535897932385 = -1.1415926535897932385','2 * 3.1415926535897932385 = 6.283185307179586477',
   '2 / 3.1415926535897932385 = 0.63661977236758134307','-5 + 2/3 = -13/3','-5 - 2/3 = -17/3','-5 * 2/3 = -10/3',
   '-5 / 2/3 = -15/2','-5 + -1/4 = -21/4','-5 - -1/4 = -19/4','-5 * -1/4 = 5/4','-5 / -1/4 = 20','-5 + 2 = -3','-5 - 2 = -7',
   '-5 * 2 = -10','-5 / 2 = -5/2','-5 + -5 = -10','-5 - -5 = 0','-5 * -5 = 25','-5 / -5 = 1','-5 + -0.7 = -5.7',
   '-5 - -0.7 = -4.3','-5 * -0.7 = 3.5','-5 / -0.7 = 7.1428571428571428574',
   '-5 + 3.1415926535897932385 = -1.85840734641020676149','-5 - 3.1415926535897932385 = -8.141592653589793238',
   '-5 * 3.1415926535897932385 = -15.707963267948966192','-5 / 3.1415926535897932385 = -1.5915494309189533576',
   '-0.7 + 2/3 = -0.033333333333333333304','-0.7 - 2/3 = -1.36666666666666666667','-0.7 * 2/3 = -0.46666666666666666666',
   '-0.7 / 2/3 = -1.05','-0.7 + -1/4 = -0.95','-0.7 - -1/4 = -0.45','-0.7 * -1/4 = 0.175','-0.7 / -1/4 = 2.8','-0.7 + 2 = 1.3',
   '-0.7 - 2 = -2.7','-0.7 * 2 = -1.4','-0.7 / 2 = -0.35','-0.7 + -5 = -5.7','-0.7 - -5 = 4.3','-0.7 * -5 = 3.5',
   '-0.7 / -5 = 0.14','-0.7 + -0.7 = -1.4','-0.7 - -0.7 = 0.0','-0.7 * -0.7 = 0.48999999999999999998','-0.7 / -0.7 = 1.0',
   '-0.7 + 3.1415926535897932385 = 2.4415926535897932384','-0.7 - 3.1415926535897932385 = -3.8415926535897932385',
   '-0.7 * 3.1415926535897932385 = -2.1991148575128552668','-0.7 / 3.1415926535897932385 = -0.22281692032865347007',
   '3.1415926535897932385 + 2/3 = 3.8082593202564599052','3.1415926535897932385 - 2/3 = 2.4749259869231265717',
   '3.1415926535897932385 * 2/3 = 2.0943951023931954924','3.1415926535897932385 / 2/3 = 4.7123889803846898574',
   '3.1415926535897932385 + -1/4 = 2.8915926535897932385','3.1415926535897932385 - -1/4 = 3.3915926535897932385',
   '3.1415926535897932385 * -1/4 = -0.78539816339744830962','3.1415926535897932385 / -1/4 = -12.566370614359172954',
   '3.1415926535897932385 + 2 = 5.1415926535897932383','3.1415926535897932385 - 2 = 1.1415926535897932385',
   '3.1415926535897932385 * 2 = 6.283185307179586477','3.1415926535897932385 / 2 = 1.57079632679489661926',
   '3.1415926535897932385 + -5 = -1.85840734641020676149','3.1415926535897932385 - -5 = 8.141592653589793238',
   '3.1415926535897932385 * -5 = -15.707963267948966192','3.1415926535897932385 / -5 = -0.6283185307179586477',
   '3.1415926535897932385 + -0.7 = 2.4415926535897932384','3.1415926535897932385 - -0.7 = 3.8415926535897932385',
   '3.1415926535897932385 * -0.7 = -2.1991148575128552668','3.1415926535897932385 / -0.7 = -4.487989505128276055',
   '3.1415926535897932385 + 3.1415926535897932385 = 6.283185307179586477','3.1415926535897932385 - 3.1415926535897932385 = 0.0',
   '3.1415926535897932385 * 3.1415926535897932385 = 9.869604401089358619','3.1415926535897932385 / 3.1415926535897932385 = 1.0',
   '1/7: 0.(142857)','1/7: 0.14285714285714285714','pi : [355,113].toRational','1/6: [1,6].toRational'],
  'LOWin64'=>
  ['2/3 + 2/3 = 4/3','2/3 - 2/3 = 0','2/3 * 2/3 = 4/9','2/3 / 2/3 = 1','2/3 + -1/4 = 5/12','2/3 - -1/4 = 11/12',
   '2/3 * -1/4 = -1/6','2/3 / -1/4 = -8/3','2/3 + 2 = 8/3','2/3 - 2 = -4/3','2/3 * 2 = 4/3','2/3 / 2 = 1/3','2/3 + -5 = -13/3',
   '2/3 - -5 = 17/3','2/3 * -5 = -10/3','2/3 / -5 = -2/15','2/3 + -0.7 = -0.033333333333333326',
   '2/3 - -0.7 = 1.3666666666666667','2/3 * -0.7 = -0.4666666666666666','2/3 / -0.7 = -0.9523809523809524',
   '2/3 + 3.141592653589793 = 3.8082593202564596','2/3 - 3.141592653589793 = -2.4749259869231266',
   '2/3 * 3.141592653589793 = 2.0943951023931953','2/3 / 3.141592653589793 = 0.21220659078919377','-1/4 + 2/3 = 5/12',
   '-1/4 - 2/3 = -11/12','-1/4 * 2/3 = -1/6','-1/4 / 2/3 = -3/8','-1/4 + -1/4 = -1/2','-1/4 - -1/4 = 0','-1/4 * -1/4 = 1/16',
   '-1/4 / -1/4 = 1','-1/4 + 2 = 7/4','-1/4 - 2 = -9/4','-1/4 * 2 = -1/2','-1/4 / 2 = -1/8','-1/4 + -5 = -21/4',
   '-1/4 - -5 = 19/4','-1/4 * -5 = 5/4','-1/4 / -5 = 1/20','-1/4 + -0.7 = -0.95','-1/4 - -0.7 = 0.44999999999999996',
   '-1/4 * -0.7 = 0.175','-1/4 / -0.7 = 0.35714285714285715','-1/4 + 3.141592653589793 = 2.891592653589793',
   '-1/4 - 3.141592653589793 = -3.391592653589793','-1/4 * 3.141592653589793 = -0.78539816339744828',
   '-1/4 / 3.141592653589793 = -0.07957747154594767','2 + 2/3 = 8/3','2 - 2/3 = 4/3','2 * 2/3 = 4/3','2 / 2/3 = 3',
   '2 + -1/4 = 7/4','2 - -1/4 = 9/4','2 * -1/4 = -1/2','2 / -1/4 = -8','2 + 2 = 4','2 - 2 = 0','2 * 2 = 4','2 / 2 = 1',
   '2 + -5 = -3','2 - -5 = 7','2 * -5 = -10','2 / -5 = -2/5','2 + -0.7 = 1.3','2 - -0.7 = 2.7','2 * -0.7 = -1.4',
   '2 / -0.7 = -2.857142857142857','2 + 3.141592653589793 = 5.141592653589793','2 - 3.141592653589793 = -1.1415926535897931',
   '2 * 3.141592653589793 = 6.283185307179586','2 / 3.141592653589793 = 0.63661977236758138','-5 + 2/3 = -13/3',
   '-5 - 2/3 = -17/3','-5 * 2/3 = -10/3','-5 / 2/3 = -15/2','-5 + -1/4 = -21/4','-5 - -1/4 = -19/4','-5 * -1/4 = 5/4',
   '-5 / -1/4 = 20','-5 + 2 = -3','-5 - 2 = -7','-5 * 2 = -10','-5 / 2 = -5/2','-5 + -5 = -10','-5 - -5 = 0','-5 * -5 = 25',
   '-5 / -5 = 1','-5 + -0.7 = -5.7','-5 - -0.7 = -4.3','-5 * -0.7 = 3.5','-5 / -0.7 = 7.142857142857143',
   '-5 + 3.141592653589793 = -1.8584073464102069','-5 - 3.141592653589793 = -8.141592653589793',
   '-5 * 3.141592653589793 = -15.707963267948966','-5 / 3.141592653589793 = -1.5915494309189535',
   '-0.7 + 2/3 = -0.033333333333333326','-0.7 - 2/3 = -1.3666666666666667','-0.7 * 2/3 = -0.4666666666666666',
   '-0.7 / 2/3 = -1.05','-0.7 + -1/4 = -0.95','-0.7 - -1/4 = -0.44999999999999996','-0.7 * -1/4 = 0.175','-0.7 / -1/4 = 2.8',
   '-0.7 + 2 = 1.3','-0.7 - 2 = -2.7','-0.7 * 2 = -1.4','-0.7 / 2 = -0.35','-0.7 + -5 = -5.7','-0.7 - -5 = 4.3',
   '-0.7 * -5 = 3.5','-0.7 / -5 = 0.13999999999999999','-0.7 + -0.7 = -1.4','-0.7 - -0.7 = 0.0',
   '-0.7 * -0.7 = 0.48999999999999994','-0.7 / -0.7 = 1.0','-0.7 + 3.141592653589793 = 2.4415926535897929',
   '-0.7 - 3.141592653589793 = -3.8415926535897933','-0.7 * 3.141592653589793 = -2.199114857512855',
   '-0.7 / 3.141592653589793 = -0.22281692032865347','3.141592653589793 + 2/3 = 3.8082593202564596',
   '3.141592653589793 - 2/3 = 2.4749259869231266','3.141592653589793 * 2/3 = 2.0943951023931953',
   '3.141592653589793 / 2/3 = 4.71238898038469','3.141592653589793 + -1/4 = 2.891592653589793',
   '3.141592653589793 - -1/4 = 3.391592653589793','3.141592653589793 * -1/4 = -0.78539816339744828',
   '3.141592653589793 / -1/4 = -12.566370614359172','3.141592653589793 + 2 = 5.141592653589793',
   '3.141592653589793 - 2 = 1.1415926535897931','3.141592653589793 * 2 = 6.283185307179586',
   '3.141592653589793 / 2 = 1.5707963267948966','3.141592653589793 + -5 = -1.8584073464102069',
   '3.141592653589793 - -5 = 8.141592653589793','3.141592653589793 * -5 = -15.707963267948966',
   '3.141592653589793 / -5 = -0.6283185307179586','3.141592653589793 + -0.7 = 2.4415926535897929',
   '3.141592653589793 - -0.7 = 3.8415926535897933','3.141592653589793 * -0.7 = -2.199114857512855',
   '3.141592653589793 / -0.7 = -4.4879895051282759','3.141592653589793 + 3.141592653589793 = 6.283185307179586',
   '3.141592653589793 - 3.141592653589793 = 0.0','3.141592653589793 * 3.141592653589793 = 9.869604401089358',
   '3.141592653589793 / 3.141592653589793 = 1.0','1/7: 0.(142857)','1/7: 0.14285714285714285','pi : [355,113].toRational',
   '1/6: [1,6].toRational']].toMap,
 'thieleInterpolation'=>
 ['Internal pi         : 3.14159265358979','Thiele 6*InvSin(0.5): 3.14159265358979','Thiele 3*InvCos(0.5): 3.14159265358979',
  'Thiele 4*InvTan(1)  : 3.14159265358979'],
 'threeValuedLogic'=>
 ['not(FALSE) = TRUE','not(MAYBE) = MAYBE','not(TRUE ) = FALSE','FALSE and FALSE = FALSE','FALSE and MAYBE = FALSE',
  'FALSE and TRUE  = FALSE','MAYBE and FALSE = FALSE','MAYBE and MAYBE = MAYBE','MAYBE and TRUE  = MAYBE',
  'TRUE  and FALSE = FALSE','TRUE  and MAYBE = MAYBE','TRUE  and TRUE  = TRUE','FALSE or  FALSE = FALSE',
  'FALSE or  MAYBE = MAYBE','FALSE or  TRUE  = TRUE','MAYBE or  FALSE = MAYBE','MAYBE or  MAYBE = MAYBE',
  'MAYBE or  TRUE  = TRUE','TRUE  or  FALSE = TRUE','TRUE  or  MAYBE = TRUE','TRUE  or  TRUE  = TRUE','FALSE xor FALSE = TRUE',
  'FALSE xor MAYBE = MAYBE','FALSE xor TRUE  = FALSE','MAYBE xor FALSE = MAYBE','MAYBE xor MAYBE = MAYBE',
  'MAYBE xor TRUE  = MAYBE','TRUE  xor FALSE = FALSE','TRUE  xor MAYBE = MAYBE','TRUE  xor TRUE  = TRUE'],
 'thueMorseSequence'=>
 ['0110100110010110100101100110100110010110011010010110100110010110100101100110100101101001100101100110'],
 'travellingSalesmanProblem'=>
 ['Path length after construction is 32.932','Path length after polishing is    31.713',
  'png hash: 65C63E46542CBBDF7ECC2CB2EF420290F964042C85BFA457AA775CD9662E48BF'],
 'treePrint'=>
 ["┐","├──1","├──2","├──┐","│  ├──3","│  │  ├──X","│  │  ├──Y",
  "│  │  └──Z","│  └──4","│     └──5","└──┐","   ├──a","   ├──b","   └──c"],
 'truncatablePrimes'=>
 ['There are 671 left truncatable primes, the largest of which is 998443',
  'There are 70 right truncatable primes, the largest of which is 739399',
  'The largest prime which is both left- and right truncatable is 739397'],
 'turtleGfx'=>
 ['png hash: 1E8EDE276669E58F1A9B195CF054B3D03C199D19516D893453A160198196E4CC'],
 'ulam'=>
 ['          XX                                        XX          XX                      XX          XX                  ',
  '                   XX                XX          XX    XX          XX                                        XX         ',
  '    XX                XX    XX                XX          XX    XX                                                    XX',
  ' XX                XX    XX                                                                XX                XX         ',
  '                      XX    XX                XX          XX                                  XX                XX      ',
  '                                                       XX          XX    XX          XX                                 ',
  '    XX                                              XX          XX                      XX          XX    XX            ',
  ' XX                XX          XX                                  XX    XX                XX                           ',
  '    XX          XX    XX                XX    XX                XX                XX                                  XX',
  ' XX    XX                                  XX                                  XX          XX                XX    XX   ',
  '          XX                XX          XX                      XX                XX                                    ',
  '             XX          XX                            XX          XX    XX          XX    XX    XX                     ',
  '    XX    XX                      XX                XX                            XX    XX          XX                XX',
  '                   XX                XX          XX    XX                                              XX               ',
  '                                                          XX    XX                XX          XX          XX    XX      ',
  ' XX          XX          XX          XX    XX          97                      XX          XX    XX                     ',
  '                                                          61    59          XX                                          ',
  '       XX                      XX          XX    37                31    89    XX                XX    XX    XX         ',
  '          XX    XX    XX    XX    XX    XX    67    17          13                      XX                            XX',
  '                                                       _5    _3    29                                  XX               ',
  '                                        XX          19       _2 11    53    XX    XX          XX    XX    XX            ',
  '                   XX                      XX    41    _7                                                               ',
  '                                              71          23                                                            ',
  '             XX          XX    XX          XX    43          47          83    XX          XX          XX    XX         ',
  '    XX                XX          XX          73                79                XX    XX          XX                  ',
  '                                                 XX                                  XX                                 ',
  '    XX                            XX    XX                XX          XX          XX                      XX    XX      ',
  ' XX    XX                XX          XX                                  XX                      XX                XX   ',
  '          XX                XX                XX          XX    XX                                                      ',
  '                                           XX    XX          XX                XX          XX                XX         ',
  '          XX    XX    XX    XX                            XX    XX                XX                XX    XX          XX',
  '                   XX          XX                                  XX    XX                                             ',
  '    XX          XX    XX                XX                XX          XX    XX                                  XX      ',
  '       XX    XX                      XX                            XX                      XX                XX         ',
  '                                        XX    XX          XX    XX                            XX                XX      ',
  '                               XX          XX                XX                XX                            XX    XX   ',
  '                      XX    XX                XX                                                    XX                  ',
  ' XX          XX                      XX                                  XX          XX                XX               ',
  '                                                                                        XX                XX          XX',
  ' XX          XX    XX          XX                XX                                  XX                                 '],
 'unbiasedRandom'=>
 ['I biased unbiased','3 32.51% 49.79%','4 25.64% 49.91%','5 19.89% 50.59%','6 17.53% 48.53%'],
 'vampire'=>
 ["1260 is a vampire. It's fangs are: [21,60]","1395 is a vampire. It's fangs are: [15,93]",
  "1435 is a vampire. It's fangs are: [35,41]","1530 is a vampire. It's fangs are: [30,51]",
  "1827 is a vampire. It's fangs are: [21,87]","2187 is a vampire. It's fangs are: [27,81]",
  "6880 is a vampire. It's fangs are: [80,86]","102510 is a vampire. It's fangs are: [201,510]",
  "104260 is a vampire. It's fangs are: [260,401]","105210 is a vampire. It's fangs are: [210,501]",
  "105264 is a vampire. It's fangs are: [204,516]","105750 is a vampire. It's fangs are: [150,705]",
  "108135 is a vampire. It's fangs are: [135,801]","110758 is a vampire. It's fangs are: [158,701]",
  "115672 is a vampire. It's fangs are: [152,761]","116725 is a vampire. It's fangs are: [161,725]",
  "117067 is a vampire. It's fangs are: [167,701]","118440 is a vampire. It's fangs are: [141,840]",
  "120600 is a vampire. It's fangs are: [201,600]","123354 is a vampire. It's fangs are: [231,534]",
  "124483 is a vampire. It's fangs are: [281,443]","125248 is a vampire. It's fangs are: [152,824]",
  "125433 is a vampire. It's fangs are: [231,543]","125460 is a vampire. It's fangs are: [204,615] or [246,510]",
  "125500 is a vampire. It's fangs are: [251,500]"],
 'vanDerCorputDemo'=>
 ['Index | Van-der-Corput (10)','   0  | 0.0000','   1  | 0.1000','   2  | 0.2000','   3  | 0.3000','   4  | 0.4000',
  '   5  | 0.5000','  10  | 0.0100','  11  | 0.1100','  12  | 0.2100','  13  | 0.3100','  17  | 0.7100','  18  | 0.8100',
  '  19  | 0.9100','  20  | 0.0200','  21  | 0.1200','  22  | 0.2200','  23  | 0.3200','  24  | 0.4200','  25  | 0.5200',
  '  26  | 0.6200','  27  | 0.7200','  28  | 0.8200','  29  | 0.9200','  30  | 0.0300','  31  | 0.1300','  32  | 0.2300',
  '1234  | 0.4321','Index        | Van-der-Corput (2)','   | binary  | dec.   | binary','---+---------+--------+-----------',
  ' 0 | 00000_2 | 0.0    | 0.00000_2',' 1 | 00001_2 | 0.5    | 0.10000_2',' 2 | 00010_2 | 0.25   | 0.01000_2',
  ' 3 | 00011_2 | 0.75   | 0.11000_2',' 4 | 00100_2 | 0.125  | 0.00100_2',' 5 | 00101_2 | 0.625  | 0.10100_2',
  ' 6 | 00110_2 | 0.375  | 0.01100_2',' 7 | 00111_2 | 0.875  | 0.11100_2',' 8 | 01000_2 | 0.0625 | 0.00010_2',
  ' 9 | 01001_2 | 0.5625 | 0.10010_2','10 | 01010_2 | 0.3125 | 0.01010_2','11 | 01011_2 | 0.8125 | 0.11010_2',
  '12 | 01100_2 | 0.1875 | 0.00110_2','Index        | Van-der-Corput (3)','   | ternary | decimal  | ternary',
  '---+---------+----------+-----------',' 0 | 00000_3 | 0.0      | 0.00000_3',' 1 | 00001_3 | 0.333333 | 0.10000_3',
  ' 2 | 00002_3 | 0.666666 | 0.20000_3',' 3 | 00010_3 | 0.111111 | 0.01000_3',' 4 | 00011_3 | 0.444444 | 0.11000_3',
  ' 5 | 00012_3 | 0.777777 | 0.21000_3',' 6 | 00020_3 | 0.222222 | 0.02000_3',' 7 | 00021_3 | 0.555555 | 0.12000_3',
  ' 8 | 00022_3 | 0.888888 | 0.22000_3',' 9 | 00100_3 | 0.037037 | 0.00100_3','10 | 00101_3 | 0.370370 | 0.10100_3',
  '11 | 00102_3 | 0.703703 | 0.20100_3','12 | 00110_3 | 0.148148 | 0.01100_3'],
 'variadic'=>
 ['Example parameters: "A","B","C"','A','B','C'],
 'weasel'=>
 ['  20 SIVKMKGU BTBAT LIXKEH WFGRLM (157)','  40 LCVIHKGU FT KS LIOCAH WFGRJM ( 81)','  60 LFVIIKHU HT KS LIOCAA WFETGM ( 64)',
  '  80 LFVIIMKS HT KS LINCAA WEESGL ( 53)',' 100 LEVIIMKS HT IS LINCAA WECSGL ( 48)',' 120 LETIIMKS HT IS LIKC A WECSGL ( 10)',
  ' 140 METIIMKS HT IS LIKC A WEBSGL (  8)',' 160 METIIMKS HT IS LIKC A WEBSGL (  8)',' 180 METIINKS HT IS LIKC A WEBSEL (  5)',
  ' 200 METIINKS HT IS LIKD A WEASEL (  3)',' 220 METIINKS HT IS LIKD A WEASEL (  3)',' 240 METIINKS HT IS LIKD A WEASEL (  3)',
  ' 260 METIINKS HT IS LIKD A WEASEL (  3)',' 280 METHINKS HT IS LIKE A WEASEL (  1)',' 300 METHINKS HT IS LIKE A WEASEL (  1)',
  ' 320 METHINKS HT IS LIKE A WEASEL (  1)',' 340 METHINKS HT IS LIKE A WEASEL (  1)',' 360 METHINKS HT IS LIKE A WEASEL (  1)',
  ' 380 METHINKS HT IS LIKE A WEASEL (  1)',' 400 METHINKS HT IS LIKE A WEASEL (  1)',' 420 METHINKS IT IS LIKE A WEASEL (  0)',
  ' 420 METHINKS IT IS LIKE A WEASEL'],
 'wordCount'=>
 ['Words total:    794914','Distinct words: 12892','Most frequent:','word   count %','the    64204 8.08','and    51764 6.51',
  'of     34789 4.38','to     13660 1.72','that   12927 1.63','in     12725 1.6','he     10422 1.31','shall   9840 1.24',
  'unto    8997 1.13','for     8997 1.13','i       8854 1.11','his     8473 1.07','a       8235 1.04','lord    7964 1.0',
  'they    7379 0.93','be      7032 0.88','is      7015 0.88','him     6659 0.84','not     6617 0.83','them    6430 0.81',
  'it      6144 0.77','with    6059 0.76','all     5638 0.71','thou    5474 0.69','thy     4600 0.58','was     4524 0.57',
  'god     4472 0.56','which   4420 0.56','my      4368 0.55','me      4096 0.52','said    3999 0.5','but     3997 0.5',
  'ye      3983 0.5','their   3942 0.5','have    3909 0.49','will    3843 0.48','thee    3827 0.48','from    3657 0.46',
  'as      3531 0.44','are     2970 0.37','when    2835 0.36','this    2833 0.36','out     2776 0.35','were    2772 0.35',
  'upon    2750 0.35','man     2735 0.34','you     2687 0.34','by      2644 0.33','israel  2575 0.32','king    2548 0.32'],
 'y'=>
 [' 0                   1     1',' 1                   1     1',' 2                   2     2',' 3                   6     3',
  ' 4                  24     5',' 5                 120     8',' 6                 720    13',' 7                5040    21',
  ' 8               40320    34',' 9              362880    55','10             3628800    89','11            39916800   144',
  '12           479001600   233','13          6227020800   377','14         87178291200   610','15       1307674368000   987',
  '16      20922789888000  1597','17     355687428096000  2584','18    6402373705728000  4181','19  121645100408832000  6765',
  '20 2432902008176640000 10946'],
 'zeckendorf'=>
 [' decimal   binary   Zeckendorf','       1        1            1','       2       10           10',
  '       3       11          100','       4      100          101','       5      101         1000',
  '      17    10001       100101','     100  1100100   1000010100','     255 11111111 100001000001','','    bits rel. overhead',
  ' 1  1.00        1.0000',' 2  2.50        1.2500',' 3  3.75        1.2500',' 4  5.38        1.3438',' 5  6.69        1.3375',
  ' 6  8.22        1.3698',' 7  9.61        1.3728',' 8 11.05        1.3818',' 9 12.53        1.3919','10 13.88        1.3881',
  '11 15.44        1.4037','12 16.74        1.3949']].toMap
