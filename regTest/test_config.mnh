USE '../demos/inputs/inputs.mnh';

private demosRoot:=expandedFileName(myPath.extractFileDirectory&'/../demos/');

allDemos:=files(demosRoot&'*.mnh').sort;

EXAMPLES_LOG_NAME:='examples_from_file';

private plotters:=demosRoot&[
'barnsleyFern.mnh',
'fractalPlant.mnh',
'kochCurve.mnh',
'rotatingCube.mnh',
'sierpinskiCurve.mnh',
'travellingSalesmanProblem.mnh',
'turtleGfx.mnh',
'heart.mnh'];

testParameters((demosRoot&'24.mnh'             ))->['demo'];
testParameters((demosRoot&'aliquotSequence.mnh'))->[11, 12, 28, 496, 220, 1184, 12496, 1264460, 790, 909, 562, 1064, 1488].map(::toString);
testParameters((demosRoot&'asciiCalendar.mnh'  ))->['1966'];
testParameters((demosRoot&'clock.mnh'          ))->['once'];
testParameters((demosRoot&'combinations.mnh'   ))->['3','5'];
testParameters((demosRoot&'countInFactors.mnh' ))->['25'];
testParameters((demosRoot&'diff.mnh'           ))->[dict,editedDict];
testParameters((demosRoot&'emptyFolders.mnh'   ))->['.'];
testParameters((demosRoot&'eratosthenes.mnh'   ))->['2900'];
testParameters((demosRoot&'fannkuch.mnh'       ))->['7'];
testParameters((demosRoot&'findDuplicates.mnh' ))->['.'];
testParameters((demosRoot&'gol.mnh'            ))->['40','40','9'];
testParameters((demosRoot&'happyNumbers.mnh'   ))->['10'];
testParameters((demosRoot&'helloWorldHttp.mnh' ))->['test'];
testParameters((demosRoot&'josephus.mnh'       ))->['41','3','1'];
testParameters((demosRoot&'knightsTour.mnh'    ))->['8','0','0'];
testParameters((demosRoot&'magicSquare.mnh'    ))->['21'];
testParameters((demosRoot&'oeis.mnh'           ))->['gen','A061358','100'];
testParameters((demosRoot&'pascal.mnh'         ))->['12'];
testParameters((demosRoot&'pangrams.mnh'       ))->['check','The quick brown fox jumps over the lazy dog.'];
testParameters((demosRoot&'prime_descendants.mnh'))->['46'];
testParameters((demosRoot&'randomWords.mnh'    ))->["16"];
testParameters((demosRoot&'shannonEntropy.mnh' ))->["1223334444"];
testParameters((demosRoot&'sierpinskiTriangle.mnh'))->["5"];
testParameters(scriptFileName:String)->[];

skipFile(scriptFile)->skipFile(scriptFile,mnhInfo['isFullVersion']);

skipFile((demosRoot&'3body.mnh'              ),fullVersion)->true;
skipFile((demosRoot&'htmlFunctionPlotter.mnh'),fullVersion)->true;
skipFile((demosRoot&'simpleServer.mnh'       ),fullVersion)->true;
skipFile((demosRoot&'ipcDatastore.mnh'       ),fullVersion)->true;
skipFile((demosRoot&'doublePendulum.mnh'     ),fullVersion)->true;
skipFile((demosRoot&'galtonBox.mnh'          ),fullVersion)->true;
skipFile((demosRoot&'guiClock.mnh'           ),fullVersion)->true;
skipFile((demosRoot&'oeisViewer.mnh'         ),fullVersion)->true;
skipFile((demosRoot&'perfectCircles.mnh'     ),fullVersion)->true;
skipFile((demosRoot&'rollingCircle.mnh'      ),fullVersion)->true;
skipFile((demosRoot&'calculator.mnh'         ),fullVersion)->true;
skipFile((demosRoot&'fileViewer.mnh'         ),fullVersion)->true;
skipFile((demosRoot&'plotDemo.mnh'           ),fullVersion)->true;
skipFile((demosRoot&'platonics.mnh'          ),fullVersion)->true;
skipFile((demosRoot&'yingYang.mnh'           ),fullVersion)->true;
skipFile((demosRoot&'contourPlotExample.mnh' ),fullVersion)->true;
skipFile(file in plotters                     ,false      )->true;
skipFile(scriptFileName:String                ,fullVersion)->false;

testsToExecuteForFlavour(flavourString)->begin
  local fullVersion:=copy(flavourString,0,1)='F';
  allDemos.filter({!(skipFile($script,fullVersion))});
end;

testsToExecuteForAnyFlavour->
  allDemos.filter({!(skipFile($script,true) and skipFile($script,false))});

isSmokeTest((demosRoot&'task.mnh'          ))->true;
isSmokeTest((demosRoot&'findDuplicates.mnh'))->true;
isSmokeTest((demosRoot&'clock.mnh'         ))->true;
isSmokeTest((demosRoot&'emptyFolders.mnh'  ))->true;
isSmokeTest((demosRoot&'timedExamples.mnh' ))->true;
isSmokeTest((demosRoot&'teeExecTest.mnh'   ))->true;
isSmokeTest(scriptFileName:String)->false;

checkAfterTest(file in plotters)->format('png hash: %x',file.changeFileExt('.png').fileStats[3]);
checkAfterTest(file)->void;

private DEFAULT_WHITELIST:=['output','sound','sleep','read package state','alter package state','alter context state'].toSet;
WHITELIST_FOR_EXAMPLES:=DEFAULT_WHITELIST | ['alter plot state','write file','detaching'];
allowedSideEffects((demosRoot&'anagram.mnh'       ))->DEFAULT_WHITELIST | ['write file','read file'];
allowedSideEffects((demosRoot&'diff.mnh'          ))->DEFAULT_WHITELIST | ['write file','read file'];
allowedSideEffects((demosRoot&'huffmann.mnh'      ))->DEFAULT_WHITELIST | ['write file','read file'];
allowedSideEffects((demosRoot&'randomWords.mnh'   ))->DEFAULT_WHITELIST | ['write file','read file'];
allowedSideEffects((demosRoot&'semordnilap.mnh'   ))->DEFAULT_WHITELIST | ['write file','read file'];
allowedSideEffects((demosRoot&'wordCount.mnh'     ))->DEFAULT_WHITELIST | ['write file','read file'];
allowedSideEffects((demosRoot&'ipcTest.mnh'       ))->DEFAULT_WHITELIST | ['executing external','ipc','detaching', 'server'];
allowedSideEffects((demosRoot&'helloWorldHttp.mnh'))->DEFAULT_WHITELIST | ['detaching', 'server','http'];
allowedSideEffects((demosRoot&'logTest.mnh'       ))->DEFAULT_WHITELIST | ['write file','read file', 'executing external'];
allowedSideEffects(file in plotters)->DEFAULT_WHITELIST|['alter plot state','write file'];
allowedSideEffects(file            )->DEFAULT_WHITELIST;

testConfiguration(file)->["name"=>file,
                          "parameters"=>testParameters(file),
                          "side effects"=>allowedSideEffects(file),
                          "connection level"=>0,
                          "deterministic"=>true].toMap;
