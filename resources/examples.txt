arity({3});

//#mnh.arity
arity({sin($x)/$x});

//#mnh.arity
arity({sin($x)/$y});

//#mnh.arity
//For variadic functions only the non-optional parameters are counted:
arity({printf('%s%s',$a,...)});

toExpression("$x-$x^2+$x^3");

toExpression("");

parameterNames({3});

//#mnh.parameterNames
parameterNames({sin($x)/$x});

//#mnh.parameterNames
//For variadic functions only the non-optional parameters are counted:
parameterNames({printf("%s%s", $a, ...)});

ord(3);

ord(true);

ord(false);

ord("A");

ord("abc");

ord(2.1);

softCast("A");

softCast('"B"');

softCast(3);

softCast([1, "2", "true", "'TEXT'", "1.5", "2,6"]);

toString('a');

toString(234);

toString([1, 2.6, "a", true, {$x}]);

abs(-0.92);

abs(3);

abs({1+$x});

arccos(-0.92);

//Out of function domain
arccos(3);

arccos({1+$x});

arcsin(-0.92);

//Out of function domain
arcsin(3);

arcsin({1+$x});

tan(-0.92);

tan(3);

tan({1+$x});

//#math.tan
tan(pi/2);

arctan(-0.92);

arctan({$x});

//#argMax
argMax(sin([0..10]));

argMax([1, 3, 3, 0, 2]);

//#argMin
argMin(sin([0..10]));

argMin([1, 3, 3, 0, 2]);

ceil(20/3);

ceil([0..3]/3);

ceil([0..3]/3, 2);

floor(20/3);

floor([0..3]/3);

floor([0..3]/3, 2);

round(20/3);

//Numbers with ambiguous rounding result are rounded towards even numbers
round([0.5, 1.5, 2.5, 3.5]);

round([0..3]/3, 2);

isInfinite(Nan);

isInfinite(+Inf);

isInfinite(-Inf);

isInfinite([-3.4344, Nan, +Inf]);

isNan(Nan);

isNan(+Inf);

isNan(-Inf);

isNan([-3.4344, Nan, +Inf]);

cos(-0.92);

cos(3);

cos({1+$x});

exp(-0.92);

exp(3);

exp({1+$x});

ln(-0.92);

ln(3);

ln({1+$x});

ln(-0.92);

sin(3);

sin({1+$x});

sqr(-0.92);

sqr(3);

sqr({1+$x});

sqrt(-0.92);

sqrt(3);

sqrt({1+$x});

sign(-0.92);

sign(3);

sign({1+$x});

max(["a".."z"]);

max([0..9]/2);

max(true, false);

min(["a".."z"]);

min([0..9]/2);

min(true, false);

copy("abcde", 1, 3);

escape("a");

escape("\t");

//Group a list of numbers by divisibility by 3
group([1..10],[1..10] mod 3=0);

fail;

fail("Told you this wouldn't work!");

hash(1);

hash([1..3]);

hash("a");

//#listBuiltin
listBuiltin.filter({$s.matches('^mnh\.')}).sort.trailing(10);

//Group to join element frequencies
group([[1,'a'],[2,'a'],[1,'b'],[4,'c'],[2,'a'],[2,'b']],1,aggregator({[$x[0]+$y[0],$x[1]]}));

abs(3);

abs(-3);

abs([-2..2]/2); 

chars('This is a test.');

//#chars
chars.get(100);

clean('+21/232/2116-11',['0'..'9'],' ');

join(['a','b','c']);

join([1..5],' ');

length('Test öäü');

byteLength('Test öäü');

length(['Text','AbC']);

lower('Test');

lower(['Text','AbC']);

upper('Test');

upper(['Text','AbC']);

//#plot
t:=[0..1000]*2*pi/1000;
plot(t,sin(t));
plot.renderToFile('plotDemo1.png',600,300,3);
    
abs({$x});

abs(3);

abs(-5/7);

abs([-2..2]);

chars('Test');

pos('o','Hello World');

pos(',',['Hello','Test','1,2,3']);

pos(['a','b'],'cdb');

repeat('-',10);

//Simple test for correct bracketing:
replace('[[][]][]][][','[]','');

//Iteration will not take place if it is infinite:
replace('aba','b','bb');

replaceOne('[[][]][]][][','[]','');

replaceOne('1:.-.; 2:.-.; 3:.-.','.',['a'..'e']);

split('1,2,3;4,5,6',',');

split('1,2,3;4,5,6',';');

split('1,2,3;4,5,6',[';',',']);

tokenSplit('f(x)->x+1; //Stupid, but just an example...','mnh');

trim(" \tA B C\t ");

trimLeft(" \tA B C\t ");

trimRight(" \tA B C\t ");

unbrace('3');

unbrace('(3)');

unbrace('(3]');

unbrace('"3"');

//#elementFrequency
chars('Testtext').elementFrequency;

flatten([1,[2,[3,4],[5]],6]);

head(['A'..'Z']);

head(['A'..'Z'],3);

tail(['A'..'Z']);

tail(['A'..'Z'],3);

leading(['A'..'Z']);

leading(['A'..'Z'],3);

trailing(['A'..'Z']);

trailing(['A'..'Z'],3);

//Odd squares
minus([1..10]^2,2*[0..50])

//#sort
sort(intRandom(10,5));

//#sort
sort(['01','10','100','1','010'],{softCast($x)<=softCast($y)});

//#sortPerm
//A random permutation:
sortPerm(random(10));

sortPerm(['a'..'c'..'a']);

intersect([0..1000]^2,[0..1000]^3);

union(1/[1..5],2/[2..6]);

deleteFile('plotDemo1.png');

//See <a href="types.html#lists">List types</a> for further information
get(['a'..'f'],3);

get(['a'..'f'],[3,1,2]);

get([0..4],[2..6] mod 3 =0);

get([['A',1],['B',2],['C',0]],'B');

//See <a href="types.html#lists">List types</a> for further information
getInner([[1,2,3],[4,5,6],[7,8,9]],1);

getInner([[1,2,3],[4,5,6],[7,8,9]],[1,0]);

getInner([[1,2,3],[4,5,6],[7,8,9]],[true,false,true]);

indexOf([1..6]^2 mod 3=0);

reverseList([1..5]);

size([0.5,0.1,0.2]);

toMap([['A',1],['B',2],['C',0],['B',4]]);

trueCount(10<[0..10]^2<50);

unique([3,1,2,1,4,1,5]);

//compress/decompress uses a hybridization of different compression algorithms
//It is possible that the compressed string equals the original string.
compress('Test');
compress('Test').decompress;

compress('Testtext');
compress('Testtext').decompress;

//#mnh.listKeywords
listKeywords.each(category,print(category[0],': ',category[1].head(3).join(', '),', ...'));

relativeFileName('~/folder/','~/other/example.txt');

primes(20);

subSets([1,2,1]);

diff('encode','decode');

diffStats('encode','decode');

//String: %s, Decimal format: %d  (parameters are optional)
format('%s is a string, %3.3d is a number','X',7);

//Floating point format: %f
format('%6.3f',3);

//Scientific format: %e
format('%6.3e',3);

//General number format: %g
format('%6.3g',3);

//Hexadecimal: %x (parameters are optional)
format('%6.6x',1234);

formatTime('mm.dd.yyyy',43210);

isAscii('xyz');

//#isAscii
isAscii('xyz'&chars[180]);

isAscii('Läuft');

isUtf8('xyz');

//#isUtf8
isUtf8('xyz'&chars[180]);

isUtf8('Schräg');

parseTime('yyyy-mm-dd hh:nn','2000-01-01 03:43');

reverseString('Test');

//#regex.matches
regex.matches('This is a test','[T|t]est');

//#regex.matchComposite
regex.matchComposite('This is a test','[T|t]est');

//#regex.replace
regex.replace('A Test is a test','[T|t]est','rose');

//#regex.split
regex.split('A Test is a test','[e| ]');

toBoolean(0);

toBoolean(1.0);

toBoolean('true');

toBoolean(3);

toInt('32');

toInt(3.0);

toInt(3.1);

toInt(false);

toReal('3.212');

toReal(true);

toReal(3);

getOptions;

executor;

//Print with line breaks but without pretty printing
print("1\n2.0\n03.45");

//Tab triggers pretty printing - numbers are aligned at decimal dot or comma
print("1\n2.0\n03,45\t");

//Non-numbers are left aligned
print("1\tone\t|\n2.0\ttwo\t|\n03.45\tthree\t|");

//Use \v instead of \t for a tab of zero width
print("1\vone\v|\n2.0\vtwo\v|\n03.45\vthree\v|");

//Simple format: the number of placeholders must match the number of arguments
printf("%x is %d in hexadecimal form",123,123);

//You can adress placeholders by their zero based index
printf("%{$0}x is %{$0}d in hexadecimal form",123);

//Placeholders can be complex expressions
printf("sin(%{$0}s)=%{sin($0)}4.4g",1);

permutations([1,1,2]);

permutations([1..3]);

//#serialize
//Test serialization
input:=[[1..10],random,'test',random(9)];
serialized:=input.serialize;
print(input.toString.byteLength,' > ',serialized.byteLength);
input==serialized.deserialize;

factorize(1001);

formatTabs("\v-2\n3\t4.3");

typeOf(3);

typeOf([1..5,7.5]);

typeOf({$x^2+$y});

x:=transpose([1,[1,2,3],[1,2]],0);
x;
x.transpose(0);

resetRandom(12157);

//Reset random with default seed 0
resetRandom;

intRandom(7);

intRandom(7,10);

random;

random(3);

note('Note that this is a note');

warn('Warning: I intend to say something important here');

isScalar(1);

isBoolean(false);

isBoolean(1);

isInt(false);

isInt(1);

isInt(1.0);

isReal(false);

isReal(1);

isReal(1.0);

isNumeric(false);

isNumeric(1);

isNumeric(1.0);

isList([]);

isList([],0);

isList([],1);

isList(['x'],1);

isString('Test');

isString(true);

//#isExpression
isExpression(::sin);

//#isExpression
isExpression(::sin,1);

//#isExpression
isExpression(::sin,2);

digits(123);

//Digits to base 3
digits(123,3);

arctan2(1,1);

charSet('abcba');

//#bytes
bytes('ö').ord;

base64encode('Test');

base64decode('VGVzdA==');

changeFileExt('file.extension','.newExtension');

changeFileExt('file.2.extension','.newExtension');

httpError;

isBooleanList([true,false]);

isBooleanList(true);

isIntList([1..3]);

isIntList([1, 2.0]);

isRealList([1,2,3]);

isRealList([1.0,2.0,3.0,Nan]);

isStringList(['a'..'z']);

isNumericList([1,2,3]);

isNumericList([1.0,2,3,Inf]);

isVoid();

isVoid(void);

isVoid(3);

escapePascal('Test');

escapeJava('Test');

extractFileNameOnly('/home/user/file.ext');

extractFileDirectory('/home/user/file.ext');

extractFileName('/home/user/file.ext');

extractFileExt('/home/user/file.ext');

//Each XML node is represented as a triplet: [name,attributes,children], where attributes is a key-value-list
readXml('<?xml version="1.0"?><body empty="False"><first id="1" value="Text"><child dummy="True"/></first><second/></body>');

extractPath('/index.html?x=0&y=3%2Ax');

extractParameters('/index.html?x=0&y=3%2Ax');

extractRawParameters('/index.html?x=0&y=3%2Ax');

//#encodeRequest
encodeRequest('127.0.0.1:3126','rest',[['user','anonymous'],['request','3*&7']].toMap);

cross(['1'..'3'],['A'..'C']);

[1,2,1].toSet;

[1.2,3.0].isRealCollection;

//#typecast.isRealCollection
[1.2,3.0].toSet.isRealCollection;

[1.2,3].isRealCollection;

[1.2,3.0].isRealCollection(2);

[1.2,3.0].isRealCollection(3);

[true].isBooleanCollection;

//#typecast.isBooleanCollection
[true,false,true].toSet.isBooleanCollection(2);

//#typecast.isBooleanSet
[true,false,true].toSet.isBooleanSet;

[1,2,3].isIntCollection;

[].isIntCollection;

[1.2,3].isNumericCollection;

//#typecast.isStringSet
['a','b'].toSet.isStringSet;

['a','b'].isStringCollection;

[1,2,3].isIntSet;

//#typecast.isIntSet
[1,2,3].toSet.isIntSet;

//#typecast.isMap
[[1,'1'],[2,'2'],[1,'3']].toMap.isMap;

//#typecast.isMap
[[1,'1'],[2,'2'],[1,'3']].toMap.isMap(2);

//#typecast.isMap
[[1,'1'],[2,'2'],[1,'3']].toMap.isMap(3);

[1,'a',false].isSet;

[1,'a',false].isCollection;

//#strings.utf8ToAnsi
utf8ToAnsi('öµ').bytes.ord;

//#strings.ansiToUtf8
chars[214].ansiToUtf8;

//#typecast.isRealSet
[1.2,3.4].toSet.isRealSet;

toList(3);

//#typecast.toList
toList([2,3,6].toSet);

//#typecast.isNumericSet
[1.2,3.4].toSet.isNumericSet;

//#lists.getAll
//Mainly intended for bulk map access
[[1,'one'],[3,'three'],[5,'five']].toMap.getAll([1,5,6],['-','-','-']);

//#lists.getAll
[1,3,5].getAll([0,2])==[1,3,5].get([0,2]);

[1..20].filter({$x mod 2<>0<>$x mod 3});

//#filter
//Filtering a generator/iterator results in a new generator/iterator
rangeGenerator(1,20).filter({$x mod 2<>0<>$x mod 3});

//#lists.map
['a'..'f'].map(::upper);

//#lists.pMap
['a'..'f'].pMap(::upper);

//#head
//head can be used to access the first elements of a generator/iterator
primeGenerator.head(10);

//head is a valid aggregator marker
[-1,1,-1,1,-2,2].agg(head);

//trailing is a valid aggregator marker
[-1,1,-1,1,-2,2].agg(trailing);

//toSet is a valid aggregator marker
[-1,1,-1,1,-2,2].agg(toSet);

//max is a valid aggregator marker
[-1,1,-1,1,-2,2].agg(max);

//min is a valid aggregator marker
[-1,1,-1,1,-2,2].agg(min);

[-1,1,-1,1,-2,2].agg(&);

[-1,1,-1,1,-2,2].agg(*);

[-1,1,-1,1,-2,2].agg(+);

//#permutationIterator
permutationIterator([3,1,2]).map(::print);

//#lists.lazyMap
//The result is a new generator
rangeGenerator(1,100).lazyMap({$x^2});

//#lists.mergeMaps
//Merge maps; resolve conflicts via ::+
mergeMaps([['A',1],['B',2]].toMap,
          [['A',7],['C',3]].toMap,::+);
            
//#system.try
//Try without fallback (returns void)
try({deserialize('x')});

//#system.try
//Try with fallback: print error messages, if any
try({deserialize('x')},::print);

//#system.try
//Try with fallback: return default value
try({deserialize('x')},0);

//#system.try
//Try with fallback: convert error to warning
try({deserialize('x')},{warn($x.head.trailing)});

interpret("3+4");

//Compose binary digits
composeDigits([1,0,1],2);

//Compose in decimal
composeDigits([1,0,2]);

//Compose in decimal, shifted by 2
composeDigits([1,0,2],10,2);

sandBoxExecute("f(x)->3*x+1; f(f(f(1)))");

//#system.async
begin
  local x:=async({print('start') orElse sleep(0.1) orElse 'end'});
  print('1: ',x().isVoid); //still running, x() should display void
  sleep(0.2);
  print('2: ',x());
end;

//#system.future
begin
  local x:=future({print('start') orElse sleep(0.1) orElse 'end'});
  print('1: ',x().isVoid); //x() should block until finished
  sleep(0.2);
  print('2: ',x());
end;

validateRegex('(3+.*');

validateRegex('\(3+.*');


[1..100].pFilter({$x mod 2=$x mod 3=$x mod 5});

pi;

//#isStatefulExpression
isStatefulExpression(::sin);

//#isStatefulExpression
isStatefulExpression(future(::sin,[3]));

//#isStatelessExpression
isStatelessExpression(::sin);

//#isStatelessExpression
isStatelessExpression(future(::sin,[3]));

//#isIteratable
isIteratable(future(::sin,[3]));

//#isIteratable
isIteratable(primeGenerator);

//#isIteratable
isIteratable([1..10]);

//#isIteratableExpression
isIteratableExpression(primeGenerator);

//#isIteratableExpression
isIteratableExpression([1..10]);

//#isIteratable
begin
  resetRandom;
  local gen:={begin local last:=0; save; last+=random; end};
  print('gen.isIteratable= ',gen.isIteratable,'; ',gen.head(3));
  gen:=gen.toGenerator;
  print('gen.isIteratable= ',gen.isIteratable,'; ',gen.head(3));
end;

//#toGenerator
toGenerator(::sqr);

md5('Test input. Could be anything really.');

sha256('Test input. Could be anything really.');

hammingWeight(17213);

gcd(1231512,143543);

//Example given by rosettacode.org
powMod(2988348162058574136915891421498819466320163312926952423791023078876139,2351399303373464486466122544523690094744975233415544072992656881240319,10^40);

//#randomGenerator
randomGenerator(123).head(10);

//#intRandomGenerator
intRandomGenerator(123,5).head(10);

//#isaacRandomGenerator
isaacRandomGenerator(123,5).head(10);

modularInverse(3,32);

//==END REG TEST==

wrapTextInHttp('Test');

//#sleep
t0:=time;
sleep(0.1);
time-t0;

//#time
time({sin(random(1000)).agg(+)});

//#systime
formatTime('hh:nn dd.mm.yyyy',systime);

getOptions;

//#fileInfo
fileInfo(executor);

//#getEnv
getEnv.toList.head;

//#fileStats
fileStats(executor);

//#exec
executor.exec(['-h']).head(5).join("\n").print;

//#inspect
inspect('sudoku').{
  print('Package ID is: ',$L['id']) |
  print('Path         : ',$L['path']) |
  print('Uses         : ',$L['uses']) |
  $L['declares']
  .each(rule,rule[1,'type']&" rule:\t"&rule[0]&"\t"&rule[1,'location'])
  .join("\n")
  .print};
  
files('*.mnh')

folders('*');

allFolders('.');

fileExists('testLog.mnh');

folderExists('folderName');

mnhInfo;

driveInfo;

myPath;

expandedFileName('/home/user/file.ext');
