
#S async(E:expression);
#C Calls E asynchronously (without parameters) and returns an expression to access the result.
#S async(E:expression,par:list);
#C Calls E@par and asynchronously and returns an expression to access the result.
#C Asynchronous tasks are killed at the end of (synchonous) evaluation.
#C The resulting expression returns void until the task is finished.
#C If you want to access local variables, use localAsync instead
#S localAsync(E:expression);
#C Calls E asynchronously (without parameters) and returns an expression to access the result.
#S localAsync(E:expression,par:list);
#C Calls E@par and asynchronously and returns an expression to access the result.
#C Asynchronous tasks are killed at the end of (synchonous) evaluation.
#C The resulting expression returns void until the task is finished.
#C If you want a task that runs until the end of the script, use async instead
#S future(E:expression);
#C Calls E asynchronously (without parameters) and returns an expression to access the result.
#S future(E:expression,par:list);
#C Calls E@par and asynchronously and returns an expression to access the result.
#C Future tasks are killed at the end of (synchonous) evaluation.
#C The resulting expression blocks until the task is finished.
#S peekFuture(F:Future);
#C peeks (nonblocking) the future F and returns true if its evaluation is finished, false otherwise
#S files(searchPattern:String);
#C Returns a list of files matching the given search pattern
#S allFiles(root);
#C Returns a list of all files below root (string or stringList)#'+'allFiles(root,pattern);
#C Returns a list of all files matching pattern(s) (string or stringList)#'+'allFiles(root,pattern,recurse=false);
#C As above but without recursing subfolders
#S folders(searchPattern:String);
#C Returns a list of folders matching the given search pattern
#S allFolders(rootFolder:String);
#C Returns a list of all folders below and including a given root directory
#S fileExists(filename:String);
#C Returns true if the specified file exists and false otherwise
#S folderExists(foldername:String);
#C Returns true if the specified folder exists and false otherwise
#S fileContents(filename:String);
#C Returns the contents of the specified file as one string
#S readDatastore(scriptPath:String,ruleName:String);
#C Tries to read the specified datastore; returns void if the datastore does not exist#
#S readDatastore(datastorePath:String);
#C Tries to read the specified datastore - returns a map with keys "id" and "content"
#S serialize(x);
#C Returns a string representing x.#serialize(x,deflate:Boolean,reuse:Boolean);
#C Custom serialization.
#S deserialize(s:string);
#C Returns the literal represented by s which was created using serialize(x)
#S fileLines(filename:String);
#C Returns the contents of the specified file as a list of strings#
#C Information on the line breaks is lost
#S writeFile(filename:String, content:String);
#C Writes the specified content to the specified file and returns true
#S writeFileLines(filename:String, content:StringList);
#C Writes the specified content to the specified file and returns true. If the file exists, the routine uses the previously used line breaks.#
#S writeFileLines(filename:String, content:StringList, lineEnding:String);
#C As above with specified line ending
#S appendFileLines(filename:String, content:StringList);
#C Appends the specified content to the specified file and returns true. If the file exists, the routine uses the previously used line breaks.#
#S appendFileLines(filename:String, content:StringList, lineEnding:String);
#C As above with specified line ending (will be used only if a new file is created)
#S exec(programPath:String);
#C Executes the specified program and returns the text output including stdErr output and the exitcode as a nested list: [[output,...],exitCode]#
#S exec(programPath:String,parameters:flatList);
#C Executes the specified program with given command line parameters#
#S exec(programPath:String,includeStdErr:boolean);
#C Executes the specified program and returns the text output optionally including stdErr output#
#S exec(programPath:String,parameters:flatList,parameters:flatList);
#C Executes the specified program with given command line parameters and returns the text output optionally including stdErr output
#S teeExec(...);
#C Behaves as exec but additionally prints out to stdout#
#C You can add an additional expression to use instead of printing to stdout
#S execAsync(programPath:String,parameters ...);
#C Starts the specified program and returns the process id
#S execPipeless(programPath:String,parameters ...);
#C Executes the specified program, waiting for exit and returns the exit code
#S deleteFile(filename:String);
#C Deletes the given file, returning true on success and false otherwise
#S deleteDir(directoryname:String);
#C Deletes the given directory, returning true on success and false otherwise
#S copyFile(source:String,dest:String);
#C Copies a file from source to dest, returning true on success and false otherwise
#S moveFile(source:String,dest:String);
#C Moves a file from source to dest, returning true on success and false otherwise
#S fileInfo(filenameOrPattern:String);
#C Retuns file info as a key-value-list#fileInfo(filenameOrPattern:StringList);
#S fileStats(filename:String);
#C Retuns a triplet [lineCount,wordCount,byteCount,hash].#fileStats(filename:StringList);
#S expandedFileName(F);
#C Returns the expanded file name of file(s) given by string or stringList F
#S extractFileDirectory(F);
#C Returns the expanded file directories of file(s) given by string or stringList F
#S extractFileName(F);
#C Returns the expanded file names (without path) of file(s) given by string or stringList F
#S extractFileNameOnly(F);
#C Returns the expanded file names (without path and extension) of file(s) given by string or stringList F
#S extractFileExt(F);
#C Returns the extension(s) of file(s) given by string or stringList F
#S changeFileExt(filename,newExtension);
#C Returns the path of file with the new extension
#S relativeFileName(reference,file);
#C Returns the path of file relative to reference#relativeFileName(file);
#C Returns the path of file relative to the current working directory
#S systemSpecificFilename(name:String);
#C Returns the path with system specific directory separators#systemSpecificFilename(name:StringCollection);
#S setFileDate(filename:String, time:Numeric);
#C Sets the time of a given file and returns true on success


#For the syntax of regular expressions see <a href="https://regex.sorokin.engineer/en/latest/regular_expressions.html">the used library''s website.</a>
validateRegex(regex:String);//Returns true iff regex is valid, false otherwise#validateRegex(regex:String,feedback:expression(1));//Returns void iff regex is valid, invokes feedback with error message otherwise
matches(searchString,regex);//returns true if string/-list searchString matches string/-list regex#//If lists are given they must have equal sizes.
matchComposite(searchString,regex);//returns a (list of) triplets: [match,position,length] for string/-list regex and searchString//If lists are given they must have equal sizes.
split(searchString,regex);//splits the string/-list searchString using string/-list regex//If lists are given they must have equal sizes.
replace(searchString,regex,replaceString);//replaces all matching occurences of string/-list regex in string/-list searchString by string/-list replaceString//If lists are given they must have equal sizes.
length(S:String);//Returns the number of characters in string S
byteLength(S:String);//Returns the number of bytes in string S
pos(subString,searchInString);//Returns the index of the first occurence of subString in searchInString or Infinity if there is none
hasPrefix(s,prefix);//Returns true if s starts with prefix
copy(S,start,length)://Returns the substring of S starting at index start and having specified length
chars(S);//Returns the characters in S as a list#chars;//Returns all possible single-byte characters in natural ordering
charSet(S);//Returns the characters in S as a set (ordered list without duplicates)
byteToChar(b in [0..255]);//Returns the corresponding character as a string of one byte length
bytes(S);//Returns the bytes in S as a list of strings
split(S:String,splitter:String);//Returns a list of strings obtained by splitting S at the specified splitters without the splitters#split(S:String,splitter:String,retainSplitters:boolean);
join(L:List);//Returns a string-concatenation of all elements in L#join(L:List,joiner:String);//Returns a string-concatenation of all elements, with joiner between.
trim(S:String);//Returns string S without leading or trailing spaces
trimLeft(S:String);//Returns string S without leading spaces
trimRight(S:String);//Returns string S without trailing spaces
upper(S:String);//Returns an uppercase representation of S
lower(S:String);//Returns an lowercase representation of S
clean(s,whiteList:StringCollection,instead:String);//Replaces all characters in s which are not in whitelist by instead.#clean(s,whiteList:StringCollection,instead:String,joinPlaceholders:boolean);//As above but joining placeholders
unbrace(S:String);//Returns an unbraced representation of S
escape(S:String);//Returns an escaped representation of S
escapePascal(S:String);//Returns an escaped representation of S for use in Pascal source code
escapeJava(S:String);//Returns an escaped representation of S for use in Java source code
replaceOne(source:String,lookFor,replaceBy);//Replaces the first occurences of lookFor in source by replaceBy#//lookFor and replaceBy may be of type string or stringList
replace(source:String,lookFor,replaceBy);//Recursively replaces all occurences of lookFor in source by replaceBy#//lookFor and replaceBy may be of type string or stringList
repeat(s:String,k:Int);//Returns a string containing s repeated k times
reverseString(S:String);//reverseString(S:StringList);//Returns returns S reversed (character wise not bytewise)
diff(A,B);//Shows diff statistics and edit script for strings A and B or string lists A and B#diff(A,B,convertModifies:boolean);//As above but optionally convert modifies to adds and deletes
diffStats(A,B);//Shows diff statistics for strings A and B or string lists A and B
isUtf8(S:String);//Returns true if S is UTF8 encoded and false otherwise
isAscii(S:String);//Returns true if S is ASCII encoded and false otherwise
utf8ToAnsi(S:String);//Converts a UTF8 encoded string to an ANSI encoded string.
ansiToUtf8(S:String);//Converts an ANSI encoded string to a UTF8 encoded string.
base64encode(S:String);//Converts a string to a base64 encoded string.
base64decode(S:String);//Converts a base64 encoded string to a string.
base92encode(S:String);//Converts a string to a base92 encoded string.
base92decode(S:String);//Converts a base92 encoded string to a string.
compress(S:String);#Returns a compressed version of S#compress(S:String,k:Int);#'+'As above but with a specified algorithm:#'+'  1: deflate#'+'  2: huffman with relaxed default model#'+'  3: huffman with strict default model#'+'  4: huffman with numbers model#'+'  5: huffman with Wikipedia.de model#'+'  6: huffman with MNH code model#'+'255: don''''t compress#'+'  other: try out algorithms and return the shortest representation#'+'  The first character of the result indicates the algorithm used
decompress(S:String);#Returns an uncompressed version of S
formatTabs(S:String);#Applies tab formatting as on print
md5(S:String);#Returns the MD5 digest as hexadecimal string for given input S
sha256(S:String);#Returns SHA256 digest as hexadecimal string for given input S
resetRandom(seed:Int);//Resets internal PRNG with the given seed
random;//Returns a random value in range [0,1]#random(n);//Returns a list of n random values in range [0,1]
intRandom(k>1);//Returns an integer random value in range [0,k-1]#intRandom(k>1,n>0);//Returns a list of n integer random values in range [0,k-1]
systime;//Returns the current time as a real number
beep;//Makes a beep
driveInfo;//Returns info on the computer''''s drives/volumes (Windows only).
getEnv;//Returns the current environment variables as a nested list.
changeDirectory(folder:String);//Sets the working directory
setExitCode(code:Int);//Sets the exit code of the executable.#//Might be overridden by an evaluation error.
scriptTime;//Returns an internal time for time difference measurement.
time;//DEPRECATED Returns an internal time for time difference measurement.#
time(E:expression);//Evaluates E (without parameters) and returns a nested List with evaluation details.#
time(E:expression,par:list);//Evaluates E@par and returns a nested List with evaluation details.
callMemoryCleaner;//Calls the memory cleaner
assertGuiStarted;//Enforces GUI initialization
isGuiStarted;//Returns true if the GUI is started
showConsole; //shows the console
hideConsole; //hides the console
Returns the CPU load in percent (Windows only)
Returns info on running tasks (Windows only)
readXmlFile(filename:String);//Reads contents of an XML file and returns the contents as a list
readXml(input:String);//Parses input as XML and returns the contents as a list
parseJson(value:String);//Reads contents of a JSON string and returns an MNH representation.#parseJson(value:String,insteadOfNull);//As above but representing null values with given marker
formatJson(x);//Formats x as a JSON (as far as compatible)
linearInterpolator(L:List);//returns an linear interpolator, which returns values out of L by their index
newSplineInterpolator(L:List);//returns an C-Spline interpolator, which returns values out of L by their index
newBSpline(L:List);//returns an Bezier approximator
newFourierSeries(L:List);//returns an Fourier Series with coefficients L=[[c0,s0],[c1,s1]...]
calculateFourierCoefficients(L:List,maxWaveNumber>=0);//Calculates fourier coefficients for nonequidistant points in L given as [[t0,y0],[t1,y1],...]
newLocalInterpolator(L:List);//returns an local non-convex smooth interpolator
rangeGenerator(i0:Int,i1:Int);//returns a generator generating the range [i0..i1]#rangeGenerator(start:Int);//returns an unbounded increasing generator
permutationIterator(i:Int);//returns a generator generating the permutations of [1..i]#permutationIterator(c:collection);//returns a generator generating permutationf of c
map(L,f:Expression(1));//Returns a list with f(x) for each x in L#//L may be a generator#map(L,f:Expression(0));//Returns a list by applying f. The input L is ignored (apart from its size)
flatMap(L,f:Expression(1));//flattens L and applies f#flatMap(L);#//Note that the mapping function (if present) is applied AFTER flattening!#//Always returns an iteratable expression
chunkMap(L,chunkSize>0,f:Expression(1));//joins L in chunks of the specified size and applies f#chunkMap(L,chunkSize>0);#//Note that the mapping function (if present) is applied AFTER chunking!#//Always returns an iteratable expression
pMap(L,f:Expression(1));//Returns a list with f(x) for each x in L#//L may be a generator#pMap(L,f:Expression(0));//Returns a list by applying f. The input L is ignored (apart from its size)
filter(L,acceptor:expression(1));//Returns compound literal or generator L with all elements x for which acceptor(x) returns true
pFilter(L,acceptor:expression(1));//Returns compound literal or generator L with all elements x for which acceptor(x) returns true#//As filter but processing in parallel
fileLineIterator(filename:String);//returns an iterator over all lines in f#fileLineIterator(filename:String,timeoutInSeconds:Numeric);//The iterator "follows" the file until it is unchanged for timeoutInSeconds
byteStreamIterator(filename:String,chunkSize>0);//returns an iterator over all lines in f#byteStreamIterator(...,timeoutInSeconds:Numeric);//The iterator "follows" the file until it is unchanged for timeoutInSeconds
primeGenerator;//returns a generator generating all prime numbers#//Note that this is an infinite generator!
stringIterator(charSet:StringCollection,minLength>=0,maxLength>=minLength);//returns a generator generating all strings using the given chars
randomGenerator(seed:Int);//returns a XOS generator for real valued random numbers in range [0,1)
intRandomGenerator(seed:Int,range>0);//returns a XOS generator generating pseudo random integers in range [0,range)#//The range of the returned generator can be changed by calling it with an integer argument.
isaacRandomGenerator(seed:Int,range>0);//returns an ISAAC generator generating pseudo random integers in range [0,range)#//www.burtleburtle.net/bob/rand/isaacafa.html#//The range of the returned generator can be changed by calling it with an integer argument.
vanDerCorputGenerator(base>=2);//returns a Van der Corput generator for the given base
ask(q:string);//Asks the user question q and returns the user input#
ask(q:string,options:stringList);//Asks the user question q, giving the passed options and returns the chosen option#
ask(...,visible:Boolean);//Optionally disables question feedback (console ask only)
showVarible(L);//Shows L in a tree view.#showVariable(L,caption:string);//Shows L in a tree view with given caption
showTable(L:list);//Shows L in a table.#
showTable(L:list,caption:string);//Shows L in a table with given caption.#
showTable(L:list,caption:string,firstRowIsHeader:boolean);//Shows L in a table with given caption.#
showTable(L:list,caption:string,fixedRows:Int,fixedColumns:Int);//Shows L with customized fixed rows and columns
showDialog(title:String,contents);//Shows a custom dialog defined by the given contents (Map or List)#//returns void when the form is closed
editors(...);//Lists all editors
editorContent(name:string);//Returns the content of the given editor as a string or void if no such editor was found.
plotClosed;//Returns true if the plot has been closed by user interaction
clearAnimation;//Clears the animated plot#clearAnimation(true);//Clears the animated plot and switches to volatile mode
addAnimationFrame;//Adds the current plot to the animation
display;//Displays the plot as soon as possible and waits for execution
display;//Displays the plot as soon as possible and returns immediately
plotImageSize;//Returns the plot image size or [-1,-1] if not initialized

